{
  "address": "0x4f549dd0400c0770bb1e3bc8bacda3af2f7ec288",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AlprockzToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.25;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/VestingPrivateSale.sol\n\n/**\n * Vesting smart contract for the private sale. Vesting period is 18 months in total.\n * All 6 months 33% percent of the vested tokens will be released - step function.\n */\ncontract VestingPrivateSale is Ownable {\n\n    uint256 constant public sixMonth = 182 days;  \n    uint256 constant public twelveMonth = 365 days;  \n    uint256 constant public eighteenMonth = sixMonth + twelveMonth;\n\n    ERC20Basic public erc20Contract;\n\n    struct Locking {\n        uint256 bucket1;\n        uint256 bucket2;\n        uint256 bucket3;\n        uint256 startDate;\n    }\n\n    mapping(address => Locking) public lockingMap;\n\n    event ReleaseVestingEvent(address indexed to, uint256 value);\n\n    /**\n     * @dev Constructor. With the reference to the ERC20 contract\n     */\n    constructor(address _erc20) public {\n        require(AddressUtils.isContract(_erc20), \"Address is not a smart contract\");\n\n        erc20Contract = ERC20Basic(_erc20);\n    }\n\n    /**\n     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \n     * @param _tokenHolder The token holder.\n     * @param _bucket1 The first bucket. Will be available after 6 months.\n     * @param _bucket2 The second bucket. Will be available after 12 months.\n     * @param _bucket3 The third bucket. Will be available after 18 months.\n     * @return True if accepted.\n     */\n    function addVested(\n        address _tokenHolder, \n        uint256 _bucket1, \n        uint256 _bucket2, \n        uint256 _bucket3\n    ) \n        public \n        returns (bool) \n    {\n        require(msg.sender == address(erc20Contract), \"ERC20 contract required\");\n        require(lockingMap[_tokenHolder].startDate == 0, \"Address is already vested\");\n\n        lockingMap[_tokenHolder].startDate = block.timestamp;\n        lockingMap[_tokenHolder].bucket1 = _bucket1;\n        lockingMap[_tokenHolder].bucket2 = _bucket2;\n        lockingMap[_tokenHolder].bucket3 = _bucket3;\n\n        return true;\n    }\n\n    /**\n     * @dev Calculates the amount of the total assigned tokens of a tokenholder.\n     * @param _tokenHolder The address to query the balance of.\n     * @return The total amount of owned tokens (vested + available). \n     */\n    function balanceOf(\n        address _tokenHolder\n    ) \n        public \n        view \n        returns (uint256) \n    {\n        return lockingMap[_tokenHolder].bucket1 + lockingMap[_tokenHolder].bucket2 + lockingMap[_tokenHolder].bucket3;\n    }\n\n    /**\n     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \n     * @param _tokenHolder The address to query the balance of.\n     * @return The total amount of owned and available tokens.\n     */\n    function availableBalanceOf(\n        address _tokenHolder\n    ) \n        public \n        view \n        returns (uint256) \n    {\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\n        uint256 tokens = 0;\n        \n        if (startDate + sixMonth <= block.timestamp) {\n            tokens = lockingMap[_tokenHolder].bucket1;\n        }\n\n        if (startDate + twelveMonth <= block.timestamp) {\n            tokens = tokens + lockingMap[_tokenHolder].bucket2;\n        }\n\n        if (startDate + eighteenMonth <= block.timestamp) {\n            tokens = tokens + lockingMap[_tokenHolder].bucket3;\n        }\n\n        return tokens;\n    }\n\n    /**\n     * @dev Releases unlocked tokens of the transaction sender. \n     * @dev This function will transfer unlocked tokens to the owner.\n     * @return The total amount of released tokens.\n     */\n    function releaseBuckets() \n        public \n        returns (uint256) \n    {\n        return _releaseBuckets(msg.sender);\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Releases unlocked tokens of the _tokenHolder. \n     * @dev This function will transfer unlocked tokens to the _tokenHolder.\n     * @param _tokenHolder Address of the token owner to release tokens.\n     * @return The total amount of released tokens.\n     */\n    function releaseBuckets(\n        address _tokenHolder\n    ) \n        public \n        onlyOwner\n        returns (uint256) \n    {\n        return _releaseBuckets(_tokenHolder);\n    }\n\n    function _releaseBuckets(\n        address _tokenHolder\n    ) \n        private \n        returns (uint256) \n    {\n        require(lockingMap[_tokenHolder].startDate != 0, \"Is not a locked address\");\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\n        uint256 tokens = 0;\n        \n        if (startDate + sixMonth <= block.timestamp) {\n            tokens = lockingMap[_tokenHolder].bucket1;\n            lockingMap[_tokenHolder].bucket1 = 0;\n        }\n\n        if (startDate + twelveMonth <= block.timestamp) {\n            tokens = tokens + lockingMap[_tokenHolder].bucket2;\n            lockingMap[_tokenHolder].bucket2 = 0;\n        }\n\n        if (startDate + eighteenMonth <= block.timestamp) {\n            tokens = tokens + lockingMap[_tokenHolder].bucket3;\n            lockingMap[_tokenHolder].bucket3 = 0;\n        }\n        \n        require(erc20Contract.transfer(_tokenHolder, tokens), \"Transfer failed\");\n        emit ReleaseVestingEvent(_tokenHolder, tokens);\n\n        return tokens;\n    }\n}\n\n// File: contracts/VestingTreasury.sol\n\n/**\n * Treasury vesting smart contract. Vesting period is over 36 months.\n * Tokens are locked for 6 months. After that releasing the tokens over 30 months with a linear function.\n */\ncontract VestingTreasury {\n\n    using SafeMath for uint256;\n\n    uint256 constant public sixMonths = 182 days;  \n    uint256 constant public thirtyMonths = 912 days;  \n\n    ERC20Basic public erc20Contract;\n\n    struct Locking {\n        uint256 startDate;      // date when the release process of the vesting will start. \n        uint256 initialized;    // initialized amount of tokens\n        uint256 released;       // already released tokens\n    }\n\n    mapping(address => Locking) public lockingMap;\n\n    event ReleaseVestingEvent(address indexed to, uint256 value);\n\n    /**\n    * @dev Constructor. With the reference to the ERC20 contract\n    */\n    constructor(address _erc20) public {\n        require(AddressUtils.isContract(_erc20), \"Address is not a smart contract\");\n\n        erc20Contract = ERC20Basic(_erc20);\n    }\n\n    /**\n     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \n     * @param _tokenHolder The token holder.\n     * @param _value The amount of tokens to protect.\n     * @return True if accepted.\n     */\n    function addVested(\n        address _tokenHolder, \n        uint256 _value\n    ) \n        public \n        returns (bool) \n    {\n        require(msg.sender == address(erc20Contract), \"ERC20 contract required\");\n        require(lockingMap[_tokenHolder].startDate == 0, \"Address is already vested\");\n\n        lockingMap[_tokenHolder].startDate = block.timestamp + sixMonths;\n        lockingMap[_tokenHolder].initialized = _value;\n        lockingMap[_tokenHolder].released = 0;\n\n        return true;\n    }\n\n    /**\n     * @dev Calculates the amount of the total currently vested and available tokens.\n     * @param _tokenHolder The address to query the balance of.\n     * @return The total amount of owned tokens (vested + available). \n     */\n    function balanceOf(\n        address _tokenHolder\n    ) \n        public \n        view \n        returns (uint256) \n    {\n        return lockingMap[_tokenHolder].initialized.sub(lockingMap[_tokenHolder].released);\n    }\n\n    /**\n     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \n     * @param _tokenHolder The address to query the balance of.\n     * @return The total amount of owned and available tokens.\n     */\n    function availableBalanceOf(\n        address _tokenHolder\n    ) \n        public \n        view \n        returns (uint256) \n    {\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\n        \n        if (block.timestamp <= startDate) {\n            return 0;\n        }\n\n        uint256 tmpAvailableTokens = 0;\n        if (block.timestamp >= startDate + thirtyMonths) {\n            tmpAvailableTokens = lockingMap[_tokenHolder].initialized;\n        } else {\n            uint256 timeDiff = block.timestamp - startDate;\n            uint256 totalBalance = lockingMap[_tokenHolder].initialized;\n\n            tmpAvailableTokens = totalBalance.mul(timeDiff).div(thirtyMonths);\n        }\n\n        uint256 availableTokens = tmpAvailableTokens.sub(lockingMap[_tokenHolder].released);\n        require(availableTokens <= lockingMap[_tokenHolder].initialized, \"Max value exceeded\");\n\n        return availableTokens;\n    }\n\n    /**\n     * @dev Releases unlocked tokens of the transaction sender. \n     * @dev This function will transfer unlocked tokens to the owner.\n     * @return The total amount of released tokens.\n     */\n    function releaseTokens() \n        public \n        returns (uint256) \n    {\n        require(lockingMap[msg.sender].startDate != 0, \"Sender is not a vested address\");\n\n        uint256 tokens = availableBalanceOf(msg.sender);\n\n        lockingMap[msg.sender].released = lockingMap[msg.sender].released.add(tokens);\n        require(lockingMap[msg.sender].released <= lockingMap[msg.sender].initialized, \"Max value exceeded\");\n\n        require(erc20Contract.transfer(msg.sender, tokens), \"Transfer failed\");\n        emit ReleaseVestingEvent(msg.sender, tokens);\n\n        return tokens;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: contracts/LockedToken.sol\n\ncontract LockedToken is CappedToken {\n    bool public transferActivated = false;\n\n    event TransferActivatedEvent();\n\n    constructor(uint256 _cap) public CappedToken(_cap) {\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Activates the token transfer. This action cannot be undone. \n     * @dev This function should be called after the ICO. \n     * @return True if ok. \n     */\n    function activateTransfer() \n        public \n        onlyOwner\n        returns (bool) \n    {\n        require(transferActivated == false, \"Already activated\");\n\n        transferActivated = true;\n\n        emit TransferActivatedEvent();\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified address.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(\n        address _to, \n        uint256 _value\n    ) \n        public \n        returns (bool) \n    {\n        require(transferActivated, \"Transfer is not activated\");\n        require(_to != address(this), \"Invalid _to address\");\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * @param _from The address which you want to send tokens from.\n     * @param _to The address which you want to transfer to.\n     * @param _value The amount of tokens to be transferred.\n     */\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value\n    ) \n        public \n        returns (bool) \n    {\n        require(transferActivated, \"TransferFrom is not activated\");\n        require(_to != address(this), \"Invalid _to address\");\n\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n// File: contracts/AlprockzToken.sol\n\n/**\n * @title The Alprockz ERC20 Token\n */\ncontract AlprockzToken is LockedToken {\n    \n    string public constant name = \"AlpRockz\";\n    string public constant symbol = \"APZ\";\n    uint8 public constant decimals = 18;\n    VestingPrivateSale public vestingPrivateSale;\n    VestingTreasury public vestingTreasury;\n\n    constructor() public LockedToken(175 * 1000000 * (10 ** uint256(decimals))) {\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Inits the VestingPrivateSale functionality. \n     * @dev Precondition: VestingPrivateSale smart contract must be deployed!\n     * @param _vestingContractAddr The address of the vesting contract for the function 'mintPrivateSale(...)'.\n     * @return True if everything is ok.\n     */\n    function initMintVestingPrivateSale(\n        address _vestingContractAddr\n    ) \n        external\n        onlyOwner\n        returns (bool) \n    {\n        require(address(vestingPrivateSale) == address(0x0), \"Already initialized\");\n        require(address(this) != _vestingContractAddr, \"Invalid address\");\n        require(AddressUtils.isContract(_vestingContractAddr), \"Address is not a smart contract\");\n        \n        vestingPrivateSale = VestingPrivateSale(_vestingContractAddr);\n        require(address(this) == address(vestingPrivateSale.erc20Contract()), \"Vesting link address not match\");\n        \n        return true;\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Inits the VestingTreasury functionality. \n     * @dev Precondition: VestingTreasury smart contract must be deployed!\n     * @param _vestingContractAddr The address of the vesting contract for the function 'mintTreasury(...)'.\n     * @return True if everything is ok.\n     */\n    function initMintVestingTreasury(\n        address _vestingContractAddr\n    ) \n        external\n        onlyOwner\n        returns (bool) \n    {\n        require(address(vestingTreasury) == address(0x0), \"Already initialized\");\n        require(address(this) != _vestingContractAddr, \"Invalid address\");\n        require(AddressUtils.isContract(_vestingContractAddr), \"Address is not a smart contract\");\n        \n        vestingTreasury = VestingTreasury(_vestingContractAddr);\n        require(address(this) == address(vestingTreasury.erc20Contract()), \"Vesting link address not match\");\n        \n        return true;\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Bulk mint function to save gas. \n     * @dev both arrays requires to have the same length.\n     * @param _recipients List of recipients.\n     * @param _tokens List of tokens to assign to the recipients.\n     */\n    function mintArray(\n        address[] _recipients, \n        uint256[] _tokens\n    ) \n        external\n        onlyOwner \n        returns (bool) \n    {\n        require(_recipients.length == _tokens.length, \"Array length not match\");\n        require(_recipients.length <= 40, \"Too many recipients\");\n\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(super.mint(_recipients[i], _tokens[i]), \"Mint failed\");\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Bulk mintPrivateSale function to save gas. \n     * @dev both arrays are required to have the same length.\n     * @dev Vesting: 25% directly available, 25% after 6, 25% after 12 and 25% after 18 months. \n     * @param _recipients List of recipients.\n     * @param _tokens List of tokens to assign to the recipients.\n     */\n    function mintPrivateSale(\n        address[] _recipients, \n        uint256[] _tokens\n    ) \n        external \n        onlyOwner\n        returns (bool) \n    {\n        require(address(vestingPrivateSale) != address(0x0), \"Init required\");\n        require(_recipients.length == _tokens.length, \"Array length not match\");\n        require(_recipients.length <= 10, \"Too many recipients\");\n\n\n        for (uint256 i = 0; i < _recipients.length; i++) {\n\n            address recipient = _recipients[i];\n            uint256 token = _tokens[i];\n\n            uint256 first;\n            uint256 second; \n            uint256 third; \n            uint256 fourth;\n            (first, second, third, fourth) = splitToFour(token);\n\n            require(super.mint(recipient, first), \"Mint failed\");\n\n            uint256 totalVested = second + third + fourth;\n            require(super.mint(address(vestingPrivateSale), totalVested), \"Mint failed\");\n            require(vestingPrivateSale.addVested(recipient, second, third, fourth), \"Vesting failed\");\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Admin function.\n     * @dev Bulk mintTreasury function to save gas. \n     * @dev both arrays are required to have the same length.\n     * @dev Vesting: Tokens are locked for 6 months. After that the tokens are released in a linear way.\n     * @param _recipients List of recipients.\n     * @param _tokens List of tokens to assign to the recipients.\n     */\n    function mintTreasury(\n        address[] _recipients, \n        uint256[] _tokens\n    ) \n        external \n        onlyOwner\n        returns (bool) \n    {\n        require(address(vestingTreasury) != address(0x0), \"Init required\");\n        require(_recipients.length == _tokens.length, \"Array length not match\");\n        require(_recipients.length <= 10, \"Too many recipients\");\n\n        for (uint256 i = 0; i < _recipients.length; i++) {\n\n            address recipient = _recipients[i];\n            uint256 token = _tokens[i];\n\n            require(super.mint(address(vestingTreasury), token), \"Mint failed\");\n            require(vestingTreasury.addVested(recipient, token), \"Vesting failed\");\n        }\n\n        return true;\n    }\n\n    function splitToFour(\n        uint256 _amount\n    ) \n        private \n        pure \n        returns (\n            uint256 first, \n            uint256 second, \n            uint256 third, \n            uint256 fourth\n        ) \n    {\n        require(_amount >= 4, \"Minimum amount\");\n\n        uint256 rest = _amount % 4;\n\n        uint256 quarter = (_amount - rest) / 4;\n\n        first = quarter + rest;\n        second = quarter;\n        third = quarter;\n        fourth = quarter;\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556005805460ff1916905534801561002a57600080fd5b5060038054600160a060020a031916331790556a90c1b1025e16710f0000008060045550611cd48061005d6000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303592373811461016357806305d2035b1461019457806306fdde03146101bd578063095ea7b31461024757806318160ddd1461026b57806323b872dd14610292578063313ce567146102bc578063355274ea146102e75780633cb495f5146102fc57806340c10f191461031d5780634bff77b014610341578063661884631461036257806370a0823114610386578063715018a6146103a75780637d64bcb4146103be5780637ead45d3146103d35780638da5cb5b146103ff57806395d89b41146104145780639f5d7eec14610429578063a9059cbb1461043e578063ab3d2d3e14610462578063ac7c73601461048e578063d73dd623146104a3578063dd62ed3e146104c7578063eceb1575146104ee578063f15627a114610503578063f2fde38b1461052f575b600080fd5b34801561016f57600080fd5b50610178610550565b60408051600160a060020a039092168252519081900360200190f35b3480156101a057600080fd5b506101a961055f565b604080519115158252519081900360200190f35b3480156101c957600080fd5b506101d2610580565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020c5781810151838201526020016101f4565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025357600080fd5b506101a9600160a060020a03600435166024356105b7565b34801561027757600080fd5b5061028061061d565b60408051918252519081900360200190f35b34801561029e57600080fd5b506101a9600160a060020a0360043581169060243516604435610623565b3480156102c857600080fd5b506102d16106f6565b6040805160ff9092168252519081900360200190f35b3480156102f357600080fd5b506102806106fb565b34801561030857600080fd5b506101a9600160a060020a0360043516610701565b34801561032957600080fd5b506101a9600160a060020a0360043516602435610953565b34801561034d57600080fd5b506101a9600160a060020a0360043516610989565b34801561036e57600080fd5b506101a9600160a060020a0360043516602435610b5c565b34801561039257600080fd5b50610280600160a060020a0360043516610c4b565b3480156103b357600080fd5b506103bc610c66565b005b3480156103ca57600080fd5b506101a9610cd4565b3480156103df57600080fd5b506101a96024600480358281019290820135918135918201910135610d7a565b34801561040b57600080fd5b506101786110e7565b34801561042057600080fd5b506101d26110f6565b34801561043557600080fd5b5061017861112d565b34801561044a57600080fd5b506101a9600160a060020a0360043516602435611141565b34801561046e57600080fd5b506101a9602460048035828101929082013591813591820191013561120b565b34801561049a57600080fd5b506101a96114e8565b3480156104af57600080fd5b506101a9600160a060020a0360043516602435611599565b3480156104d357600080fd5b50610280600160a060020a0360043581169060243516611632565b3480156104fa57600080fd5b506101a961165d565b34801561050f57600080fd5b506101a96024600480358281019290820135918135918201910135611666565b34801561053b57600080fd5b506103bc600160a060020a03600435166117cf565b600654600160a060020a031681565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152600881527f416c70526f636b7a000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60055460009060ff161515610682576040805160e560020a62461bcd02815260206004820152601d60248201527f5472616e7366657246726f6d206973206e6f7420616374697661746564000000604482015290519081900360640190fd5b600160a060020a0383163014156106e3576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964205f746f206164647265737300000000000000000000000000604482015290519081900360640190fd5b6106ee8484846117f2565b949350505050565b601281565b60045481565b600354600090600160a060020a0316331461071b57600080fd5b600654600160a060020a03161561077c576040805160e560020a62461bcd02815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b30600160a060020a03831614156107dd576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b6107e682611967565b151561083c576040805160e560020a62461bcd02815260206004820152601f60248201527f41646472657373206973206e6f74206120736d61727420636f6e747261637400604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038481169190911791829055604080517fa8f6c9130000000000000000000000000000000000000000000000000000000081529051929091169163a8f6c913916004808201926020929091908290030181600087803b1580156108c057600080fd5b505af11580156108d4573d6000803e3d6000fd5b505050506040513d60208110156108ea57600080fd5b5051600160a060020a0316301461094b576040805160e560020a62461bcd02815260206004820152601e60248201527f56657374696e67206c696e6b2061646472657373206e6f74206d617463680000604482015290519081900360640190fd5b506001919050565b600060045461096d8360015461196f90919063ffffffff16565b111561097857600080fd5b6109828383611982565b9392505050565b600354600090600160a060020a031633146109a357600080fd5b6005546101009004600160a060020a031615610a09576040805160e560020a62461bcd02815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b30600160a060020a0383161415610a6a576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b610a7382611967565b1515610ac9576040805160e560020a62461bcd02815260206004820152601f60248201527f41646472657373206973206e6f74206120736d61727420636f6e747261637400604482015290519081900360640190fd5b81600560016101000a815481600160a060020a030219169083600160a060020a03160217905550600560019054906101000a9004600160a060020a0316600160a060020a031663a8f6c9136040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108c057600080fd5b336000908152600260209081526040808320600160a060020a0386168452909152812054808310610bb057336000908152600260209081526040808320600160a060020a0388168452909152812055610be5565b610bc0818463ffffffff611a9d16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610c7d57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610cee57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610d1657600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60035460009081908190819081908190819081908190600160a060020a03163314610da457600080fd5b6005546101009004600160a060020a03161515610e0b576040805160e560020a62461bcd02815260206004820152600d60248201527f496e697420726571756972656400000000000000000000000000000000000000604482015290519081900360640190fd5b8b8a14610e62576040805160e560020a62461bcd02815260206004820152601660248201527f4172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b600a8c1115610ebb576040805160e560020a62461bcd02815260206004820152601360248201527f546f6f206d616e7920726563697069656e747300000000000000000000000000604482015290519081900360640190fd5b600097505b8b8810156110d4578c8c89818110610ed457fe5b90506020020135600160a060020a031696508a8a898181101515610ef457fe5b905060200201359550610f0686611aaf565b92975090955093509150610f1a8786610953565b1515610f5e576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020611c89833981519152604482015290519081900360640190fd5b50600554828401820190610f80906101009004600160a060020a031682610953565b1515610fc4576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020611c89833981519152604482015290519081900360640190fd5b600554604080517f7ce44c45000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152602482018890526044820187905260648201869052915161010090930490911691637ce44c45916084808201926020929091908290030181600087803b15801561104757600080fd5b505af115801561105b573d6000803e3d6000fd5b505050506040513d602081101561107157600080fd5b505115156110c9576040805160e560020a62461bcd02815260206004820152600e60248201527f56657374696e67206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b600190970196610ec0565b5060019c9b505050505050505050505050565b600354600160a060020a031681565b60408051808201909152600381527f41505a0000000000000000000000000000000000000000000000000000000000602082015281565b6005546101009004600160a060020a031681565b60055460009060ff1615156111a0576040805160e560020a62461bcd02815260206004820152601960248201527f5472616e73666572206973206e6f742061637469766174656400000000000000604482015290519081900360640190fd5b600160a060020a038316301415611201576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964205f746f206164647265737300000000000000000000000000604482015290519081900360640190fd5b6109828383611b2b565b600354600090819081908190600160a060020a0316331461122b57600080fd5b600654600160a060020a0316151561128d576040805160e560020a62461bcd02815260206004820152600d60248201527f496e697420726571756972656400000000000000000000000000000000000000604482015290519081900360640190fd5b8685146112e4576040805160e560020a62461bcd02815260206004820152601660248201527f4172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b600a87111561133d576040805160e560020a62461bcd02815260206004820152601360248201527f546f6f206d616e7920726563697069656e747300000000000000000000000000604482015290519081900360640190fd5b600092505b868310156114da5787878481811061135657fe5b90506020020135600160a060020a03169150858584818110151561137657fe5b60065460209091029290920135925061139a91600160a060020a0316905082610953565b15156113de576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020611c89833981519152604482015290519081900360640190fd5b600654604080517f2a6f1278000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820185905291519190921691632a6f12789160448083019260209291908290030181600087803b15801561144d57600080fd5b505af1158015611461573d6000803e3d6000fd5b505050506040513d602081101561147757600080fd5b505115156114cf576040805160e560020a62461bcd02815260206004820152600e60248201527f56657374696e67206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b600190920191611342565b506001979650505050505050565b600354600090600160a060020a0316331461150257600080fd5b60055460ff161561155d576040805160e560020a62461bcd02815260206004820152601160248201527f416c726561647920616374697661746564000000000000000000000000000000604482015290519081900360640190fd5b6005805460ff191660011790556040517f4508a7a89e2ea7dc1bfd67af566151119585c129702045065d5138c3a743830690600090a150600190565b336000908152600260209081526040808320600160a060020a03861684529091528120546115cd908363ffffffff61196f16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60055460ff1681565b6003546000908190600160a060020a0316331461168257600080fd5b8483146116d9576040805160e560020a62461bcd02815260206004820152601660248201527f4172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b6028851115611732576040805160e560020a62461bcd02815260206004820152601360248201527f546f6f206d616e7920726563697069656e747300000000000000000000000000604482015290519081900360640190fd5b5060005b848110156117c35761177786868381811061174d57fe5b90506020020135600160a060020a0316858584818110151561176b57fe5b90506020020135610953565b15156117bb576040805160e560020a62461bcd02815260206004820152600b6024820152600080516020611c89833981519152604482015290519081900360640190fd5b600101611736565b50600195945050505050565b600354600160a060020a031633146117e657600080fd5b6117ef81611c0a565b50565b600160a060020a03831660009081526020819052604081205482111561181757600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561184757600080fd5b600160a060020a038316151561185c57600080fd5b600160a060020a038416600090815260208190526040902054611885908363ffffffff611a9d16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546118ba908363ffffffff61196f16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546118fc908363ffffffff611a9d16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000903b1190565b8181018281101561197c57fe5b92915050565b600354600090600160a060020a0316331461199c57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156119c457600080fd5b6001546119d7908363ffffffff61196f16565b600155600160a060020a038316600090815260208190526040902054611a03908363ffffffff61196f16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600082821115611aa957fe5b50900390565b600080808080806004871015611b0f576040805160e560020a62461bcd02815260206004820152600e60248201527f4d696e696d756d20616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b5050506004600385169485900304938401948493508392509050565b33600090815260208190526040812054821115611b4757600080fd5b600160a060020a0383161515611b5c57600080fd5b33600090815260208190526040902054611b7c908363ffffffff611a9d16565b3360009081526020819052604080822092909255600160a060020a03851681522054611bae908363ffffffff61196f16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a0381161515611c1f57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556004d696e74206661696c6564000000000000000000000000000000000000000000a165627a7a723058202c43564375850836f8f13ff7e595b7310ec1639bd61e54daa9914e9711f04ca60029"
}