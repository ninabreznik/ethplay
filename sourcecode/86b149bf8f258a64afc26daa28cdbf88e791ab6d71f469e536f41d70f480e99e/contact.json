{
  "address": "0xb20d4a3e00c1eaf5b2552763dacd11006ce31606",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MONIToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-16\n*/\n\n// 0.4.20+commit.3155dd80.Emscripten.clang\npragma solidity ^0.4.20;\n\n// Ethereum Token callback\ninterface tokenRecipient {\n  function receiveApproval( address from, uint256 value, bytes data ) external;\n}\n\n// ERC223 callback\ninterface ContractReceiver {\n  function tokenFallback( address from, uint value, bytes data ) external;\n}\n\ncontract owned {\n  address public owner;\n\n  function owned() public {\n    owner = msg.sender;\n  }\n\n  function changeOwner( address _miner ) public onlyOwner {\n    owner = _miner;\n  }\n\n  modifier onlyOwner {\n    require (msg.sender == owner);\n    _;\n  }\n}\n\n// ERC20 token with added ERC223 and Ethereum-Token support\n//\n// Blend of multiple interfaces:\n// - https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// - https://www.ethereum.org/token (uncontrolled, non-standard)\n// - https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\n\ncontract MONIToken is owned {\n\n  string  public name;\n  string  public symbol;\n  uint8   public decimals;\n  uint256 public totalSupply;\n // uint256 public supplyCap;\n\n  uint256 public noTransferBefore;\n\n  mapping( address => uint256 ) balances_;\n  mapping( address => mapping(address => uint256) ) allowances_;\n\n  // ERC20\n  event Approval( address indexed owner,\n                  address indexed spender,\n                  uint value );\n\n  // ERC20-compatible version only, breaks ERC223 compliance but etherscan\n  // and exchanges only support ERC20 version. Can't overload events\n\n  event Transfer( address indexed from,\n                  address indexed to,\n                  uint256 value );\n                  //bytes    data );\n\n  // Ethereum Token\n  event Burn( address indexed from,\n              uint256 value );\n\n  function MONIToken( uint8 _decimals,\n                          //uint256 _tokcap,\n                          string _name,\n                          string _symbol,\n                          uint256 _noTransferBefore // datetime, in seconds\n  ) public {\n\n    decimals = uint8(_decimals); // audit recommended 18 decimals\n  //  supplyCap = _tokcap * 10**uint256(decimals);\n    totalSupply = 0;\n\n    name = _name;\n    symbol = _symbol;\n    noTransferBefore = _noTransferBefore;\n  }\n\n  function mine( uint256 qty ) public onlyOwner {\n    require (    (totalSupply + qty) > totalSupply  );\n\n    totalSupply += qty;\n    balances_[owner] += qty;\n    emit Transfer( address(0), owner, qty );\n  }\n\n//   function cap() public constant returns(uint256) {\n//     return supplyCap;\n//   }\n\n  // ERC20\n  function balanceOf( address owner ) public constant returns (uint) {\n    return balances_[owner];\n  }\n\n  // ERC20\n  function approve( address spender, uint256 value ) public\n  returns (bool success)\n  {\n    // WARNING! When changing the approval amount, first set it back to zero\n    // AND wait until the transaction is mined. Only afterwards set the new\n    // amount. Otherwise you may be prone to a race condition attack.\n    // See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    allowances_[msg.sender][spender] = value;\n    emit Approval( msg.sender, spender, value );\n    return true;\n  }\n\n  // recommended fix for known attack on any ERC20\n  function safeApprove( address _spender,\n                        uint256 _currentValue,\n                        uint256 _value ) public\n  returns (bool success)\n  {\n    // If current allowance for _spender is equal to _currentValue, then\n    // overwrite it with _value and return true, otherwise return false.\n\n    if (allowances_[msg.sender][_spender] == _currentValue)\n      return approve(_spender, _value);\n\n    return false;\n  }\n\n  // ERC20\n  function allowance( address owner, address spender ) public constant\n  returns (uint256 remaining)\n  {\n    return allowances_[owner][spender];\n  }\n\n  // ERC20\n  function transfer(address to, uint256 value) public\n  returns (bool success)\n  {\n    bytes memory empty; // null\n    _transfer( msg.sender, to, value, empty );\n    return true;\n  }\n\n  // ERC20\n  function transferFrom( address from, address to, uint256 value ) public\n  returns (bool success)\n  {\n    require( value <= allowances_[from][msg.sender] );\n\n    allowances_[from][msg.sender] -= value;\n    bytes memory empty;\n    _transfer( from, to, value, empty );\n\n    return true;\n  }\n\n  // Ethereum Token\n  function approveAndCall( address spender,\n                           uint256 value,\n                           bytes context ) public\n  returns (bool success)\n  {\n    if ( approve(spender, value) )\n    {\n      tokenRecipient recip = tokenRecipient( spender );\n\n      if (isContract(recip))\n        recip.receiveApproval( msg.sender, value, context );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // Ethereum Token\n  function burn( uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[msg.sender] >= value );\n    balances_[msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( msg.sender, value );\n    return true;\n  }\n\n  // Ethereum Token\n  function burnFrom( address from, uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[from] >= value );\n    require( value <= allowances_[from][msg.sender] );\n\n    balances_[from] -= value;\n    allowances_[from][msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( from, value );\n    return true;\n  }\n\n  // ERC223 Transfer and invoke specified callback\n  function transfer( address to,\n                     uint value,\n                     bytes data,\n                     string custom_fallback ) public returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    // throws if custom_fallback is not a valid contract call\n    require( address(to).call.value(0)(bytes4(keccak256(custom_fallback)),\n             msg.sender,\n             value,\n             data) );\n\n    return true;\n  }\n\n  // ERC223 Transfer to a contract or externally-owned account\n  function transfer( address to, uint value, bytes data ) public\n  returns (bool success)\n  {\n    if (isContract(to)) {\n      return transferToContract( to, value, data );\n    }\n\n    _transfer( msg.sender, to, value, data );\n    return true;\n  }\n\n  // ERC223 Transfer to contract and invoke tokenFallback() method\n  function transferToContract( address to, uint value, bytes data ) private\n  returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    ContractReceiver rx = ContractReceiver(to);\n\n    if (isContract(rx)) {\n      rx.tokenFallback( msg.sender, value, data );\n      return true;\n    }\n\n    return false;\n  }\n\n  // ERC223 fetch contract size (must be nonzero to be a contract)\n  function isContract( address _addr ) private constant returns (bool)\n  {\n    uint length;\n    assembly { length := extcodesize(_addr) }\n    return (length > 0);\n  }\n\n  function _transfer( address from,\n                      address to,\n                      uint value,\n                      bytes data ) internal\n  {\n    require( to != 0x0 );\n    require( balances_[from] >= value );\n    require( balances_[to] + value > balances_[to] ); // catch overflow\n\n    // no transfers allowed before trading begins\n    if (msg.sender != owner) require( now >= noTransferBefore );\n\n    balances_[from] -= value;\n    balances_[to] += value;\n\n    bytes memory ignore;\n    ignore = data;                    // ignore compiler warning\n    emit Transfer( from, to, value ); // ignore data\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001c5f38038062001c5f83398101806040528101908080519060200190929190805182019291906020018051820192919060200180519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548160ff021916908360ff16021790555060006004819055508260019080519060200190620000d2929190620000fd565b508160029080519060200190620000eb929190620000fd565b508060058190555050505050620001ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014057805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017057825182559160200191906001019062000153565b5b50905062000180919062000184565b5090565b620001a991905b80821115620001a55760008160009055506001016200018b565b5090565b90565b611aa380620001bc6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010c578063095ea7b31461019c57806318160ddd1461020157806323b872dd1461022c578063313ce567146102b157806342966c68146102e25780634d4748981461032757806370a082311461035457806379cc6790146103ab5780638da5cb5b1461041057806395d89b4114610467578063a6f9dae1146104f7578063a9059cbb1461053a578063be45fd621461059f578063cae9ca511461064a578063dd62ed3e146106f5578063e698dac51461076c578063f6368f8a14610797578063f650366214610888575b600080fd5b34801561011857600080fd5b506101216108f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610161578082015181840152602081019050610146565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a857600080fd5b506101e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610995565b604051808215151515815260200191505060405180910390f35b34801561020d57600080fd5b50610216610a87565b6040518082815260200191505060405180910390f35b34801561023857600080fd5b50610297600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a8d565b604051808215151515815260200191505060405180910390f35b3480156102bd57600080fd5b506102c6610bbe565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ee57600080fd5b5061030d60048036038101908080359060200190929190505050610bd1565b604051808215151515815260200191505060405180910390f35b34801561033357600080fd5b5061035260048036038101908080359060200190929190505050610cd5565b005b34801561036057600080fd5b50610395600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4c565b6040518082815260200191505060405180910390f35b3480156103b757600080fd5b506103f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e95565b604051808215151515815260200191505060405180910390f35b34801561041c57600080fd5b506104256110af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047357600080fd5b5061047c6110d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104bc5780820151818401526020810190506104a1565b50505050905090810190601f1680156104e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050357600080fd5b50610538600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611172565b005b34801561054657600080fd5b50610585600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611210565b604051808215151515815260200191505060405180910390f35b3480156105ab57600080fd5b50610630600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061122b565b604051808215151515815260200191505060405180910390f35b34801561065657600080fd5b506106db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611265565b604051808215151515815260200191505060405180910390f35b34801561070157600080fd5b50610756600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113c7565b6040518082815260200191505060405180910390f35b34801561077857600080fd5b5061078161144e565b6040518082815260200191505060405180910390f35b3480156107a357600080fd5b5061086e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611454565b604051808215151515815260200191505060405180910390f35b34801561089457600080fd5b506108dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506115ee565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561098d5780601f106109625761010080835404028352916020019161098d565b820191906000526020600020905b81548152906001019060200180831161097057829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60006060600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610b1c57600080fd5b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610bb285858584611691565b60019150509392505050565b600360009054906101000a900460ff1681565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c2157600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d3057600080fd5b6004548160045401111515610d4457600080fd5b8060046000828254019250508190555080600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ee557600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f7057600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561116a5780601f1061113f5761010080835404028352916020019161116a565b820191906000526020600020905b81548152906001019060200180831161114d57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cd57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000606061122033858584611691565b600191505092915050565b600061123684611906565b1561124d57611246848484611919565b905061125e565b61125933858585611691565b600190505b9392505050565b6000806112728585610995565b156113ba5784905061128381611906565b156113b1578073ffffffffffffffffffffffffffffffffffffffff1663a2d578533386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561134a57808201518184015260208101905061132f565b50505050905090810190601f1680156113775780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561139857600080fd5b505af11580156113ac573d6000803e3d6000fd5b505050505b600191506113bf565b600091505b509392505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60055481565b600061146233868686611691565b8473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b6020831015156114b1578051825260208201915060208101905060208303925061148c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b83811015611592578082015181840152602081019050611577565b50505050905090810190601f1680156115bf5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af1935050505015156115e257600080fd5b60019050949350505050565b600082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156116855761167e8483610995565b905061168a565b600090505b9392505050565b606060008473ffffffffffffffffffffffffffffffffffffffff16141515156116b957600080fd5b82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561170757600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561179557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117fd5760055442101515156117fc57600080fd5b5b82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508190508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050505050565b600080823b905060008111915050919050565b60008061192833868686611691565b84905061193481611906565b15611a6a578073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119fb5780820151818401526020810190506119e0565b50505050905090810190601f168015611a285780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611a4957600080fd5b505af1158015611a5d573d6000803e3d6000fd5b5050505060019150611a6f565b600091505b5093925050505600a165627a7a723058209309a6d0dd5755023da654996f60a0acf816185f239ff506a79bf331691ee7cc00290000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000005c3ddb070000000000000000000000000000000000000000000000000000000000000010496e7465677269747920446f6c6c61720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024944000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000005c3ddb070000000000000000000000000000000000000000000000000000000000000010496e7465677269747920446f6c6c61720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024944000000000000000000000000000000000000000000000000000000000000"
}