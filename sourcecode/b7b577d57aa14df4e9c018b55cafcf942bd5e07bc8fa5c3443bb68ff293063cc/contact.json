{
  "address": "0xd2bfceeab8ffa24cdf94faa2683df63df4bcbdc8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DailyDivs",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity ^0.4.21;\n\n\n/*\n******************** DailyDivs.com *********************\n*\n*  ____        _ _       ____  _                                \n* |  _ \\  __ _(_) |_   _|  _ \\(_)_   _____   ___ ___  _ __ ___  \n* | | | |/ _` | | | | | | | | | \\ \\ / / __| / __/ _ \\| '_ ` _ \\ \n* | |_| | (_| | | | |_| | |_| | |\\ V /\\__ \\| (_| (_) | | | | | |\n* |____/ \\__,_|_|_|\\__, |____/|_| \\_/ |___(_)___\\___/|_| |_| |_|\n*                  |___/                                        \n*\n******************** DailyDivs.com *********************\n*\n*\n* [x] 0% TRANSFER FEES\n* [x] 20% DIVIDENDS AND MASTERNODES\n* [x] 5% FEE ON EACH BUY AND SELL GO TO Smart Contract Fund 0xd9092D94F74E6b5D408DBd3eCC88f3e5810d1e98\n*     How 5% is divided and used: \n*     80% to Buy Tokens from the exchange to be transferred to DDT Surplus and fund other DailyDivs Games\n*     20% to Dev Fund For Platform Development\n* [x] Only 1 DDT Token is needed to have a masternode! This allows virtually anyone to earn via buys from their masternode!\n* [x] DailyDivs Token can be used for future games\n*\n* Official Website: https://dailydivs.com/ \n* Official Discord: https://discord.gg/J4Bvu32\n* Official Telegram: https://t.me/dailydivs\n*/\n\n\n/**\n * Definition of contract accepting DailyDivs tokens\n * DDT Lending and other games can reuse this contract to support DailyDivs tokens\n */\ncontract AcceptsDailyDivs {\n    DailyDivs public tokenContract;\n\n    function AcceptsDailyDivs(address _tokenContract) public {\n        tokenContract = DailyDivs(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract DailyDivs {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n      _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    uint ACTIVATION_TIME = 1538938800;\n\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"DailyDivs\";\n    string public symbol = \"DDT\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n    uint8 constant internal fundFee_ = 5; // 5% fund tax on buys/sells/reinvest (split 80/20)\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    \n    // 80/20 FUND TAX CONTRACT ADDRESS\n    address constant public giveEthFundAddress = 0xd9092D94F74E6b5D408DBd3eCC88f3e5810d1e98;\n    uint256 public totalEthFundRecieved; // total ETH FUND recieved from this contract\n    uint256 public totalEthFundCollected; // total ETH FUND collected in this contract\n\n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 1e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 8 ether;\n    uint256 constant internal ambassadorQuota_ = 8 ether;\n\n\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n    // Special DailyDivs Platform control from scam game contracts on DailyDivs platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept DailyDivs tokens\n\n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    function DailyDivs()\n        public\n    {\n        // add administrators here\n        administrators[0x0E7b52B895E3322eF341004DC6CB5C63e1d9b1c5] = true;\n        \n        // admin\n        ambassadors_[0x0E7b52B895E3322eF341004DC6CB5C63e1d9b1c5] = true;\n\n        // add the ambassadors\n        ambassadors_[0x4A42500b817439cF9B10b4d3edf68bb63Ed0A89B] = true;\n        \n        // add the ambassadors\n        ambassadors_[0x642e0ce9ae8c0d8007e0acaf82c8d716ff8c74c1] = true;\n        \n        // add the ambassadors\n        ambassadors_[0xeafe863757a2b2a2c5c3f71988b7d59329d09a78] = true;\n        \n        // add the ambassadors\n        ambassadors_[0x03B434e2dC43184538ED148f71c097b54f87EBBd] = true;\n        \n        // add the ambassadors\n        ambassadors_[0x8f1A667590014BF2e78b88EB112970F9E3E340E5] = true;\n        \n        // add the ambassadors\n        ambassadors_[0x6CF441B689683D3049f11B02c001E14bd0d86421] = true;\n        \n        // add the ambassadors\n            ambassadors_[0xa39334D8363d6aAF50372313efaa4cF8bDD50a30] = true;\n        \n        // add the ambassadors\n        ambassadors_[0xEc31176d4df0509115abC8065A8a3F8275aafF2b] = true;\n        \n        \n        \n        \n        \n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        \n        require(tx.gasprice <= 0.05 szabo);\n        purchaseInternal(msg.value, _referredBy);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        \n        require(tx.gasprice <= 0.01 szabo);\n        purchaseInternal(msg.value, 0x0);\n    }\n\n    /**\n     * Sends FUND TAX to the FUND TAX addres. (Remember 80% of the Fund is used to support DDT Lending and other platform games)\n     * This is the FUND TAX address that splits the ETH (80/20): https://etherscan.io/address/0xd9092D94F74E6b5D408DBd3eCC88f3e5810d1e98\n     */\n    function payFund() payable public {\n      uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n      require(ethToPay > 1);\n      totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\n      if(!giveEthFundAddress.call.value(ethToPay).gas(400000)()) {\n         totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, ethToPay);\n      }\n    }\n\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n\n        // Take out dividends and then _fundPayout\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n\n        // Add ethereum to send to Fund Tax Contract\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n\n\n    /**\n     * Transfer tokens from the caller to a new holder.\n     * REMEMBER THIS IS 0% TRANSFER FEE\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n\n        // fire event\n        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n    /**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by DailyDivs platform\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\n\n      if (isContract(_to)) {\n        AcceptsDailyDivs receiver = AcceptsDailyDivs(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) private constant returns (bool is_contract) {\n       // retrieve the size of the code on target address, this needs assembly\n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the ambassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    //function disableInitialStage()\n    //    onlyAdministrator()\n    //    public\n    //{\n    //    onlyAmbassadors = false;\n    //}\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * Add or remove game contract, which can accept DailyDivs tokens\n     */\n    function setCanAcceptTokens(address _address, bool _value)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = _value;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n        return _taxedEthereum;\n    }\n\n    /**\n     * Function for the frontend to show ether waiting to be sent to Fund Contract from the exchange contract\n     */\n    function etherToSendFund()\n        public\n        view\n        returns(uint256) {\n        return SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    // Make sure we will send back excess if user sends more then 2 ether before 200 ETH in contract\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n      notContract()// no contracts allowed\n      internal\n      returns(uint256) {\n\n      uint256 purchaseEthereum = _incomingEthereum;\n      uint256 excess;\n      if(purchaseEthereum > 2 ether) { // check if the transaction is over 2 ether\n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 200 ether) { // if so check the contract is less then 200 ether\n              purchaseEthereum = 2 ether;\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n          }\n      }\n\n      purchaseTokens(purchaseEthereum, _referredBy);\n\n      if (excess > 0) {\n        msg.sender.transfer(excess);\n      }\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\n\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != msg.sender &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n\n        // fire event\n        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giveEthFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToSendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundRecieved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}