{
  "address": "0x992e3ce20febb7fade6fbe32ae1d4b146f471c47",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BeepToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity 0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * @dev Supports unlimited numbers of roles and addresses.\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n *  for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n *  to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address addr, string roleName);\n  event RoleRemoved(address addr, string roleName);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param addr address\n   * @param roleName the name of the role\n   * // reverts\n   */\n  function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param addr address\n   * @param roleName the name of the role\n   * @return bool\n   */\n  function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param roleName the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param roleNames the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] roleNames) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\n  //         if (hasRole(msg.sender, roleNames[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n/**\n * @title RBACWithAdmin\n * @author Matt Condon (@Shrugs)\n * @dev It's recommended that you define constants in the contract,\n * @dev like ROLE_ADMIN below, to avoid typos.\n */\ncontract RBACWithAdmin is RBAC {\n  /**\n   * A constant role name for indicating admins.\n   */\n  string public constant ROLE_ADMIN = \"admin\";\n\n  /**\n   * @dev modifier to scope access to admins\n   * // reverts\n   */\n  modifier onlyAdmin()\n  {\n    checkRole(msg.sender, ROLE_ADMIN);\n    _;\n  }\n\n  /**\n   * @dev constructor. Sets msg.sender as admin by default\n   */\n  constructor()\n    public\n  {\n    addRole(msg.sender, ROLE_ADMIN);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function adminAddRole(address addr, string roleName)\n    onlyAdmin\n    public\n  {\n    addRole(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function adminRemoveRole(address addr, string roleName)\n    onlyAdmin\n    public\n  {\n    removeRole(addr, roleName);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title ERC865Token Token\n *\n * ERC865Token allows users paying transfers in tokens instead of gas\n * https://github.com/ethereum/EIPs/issues/865\n *\n */\n\ncontract ERC865 {\n\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n}\n\n/**\n * @title ERC865Token Token\n *\n * ERC865Token allows users paying transfers in tokens instead of gas\n * https://github.com/ethereum/EIPs/issues/865\n *\n */\n\ncontract ERC865Token is ERC865, StandardToken, Ownable {\n\n    /* Nonces of transfers performed */\n    mapping(bytes => bool) signatures;\n    /* mapping of nonces of each user */\n    mapping (address => uint256) nonces;\n\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n\n    bytes4 internal constant transferSig = 0x48664c16;\n    bytes4 internal constant approvalSig = 0xf7ac9c2e;\n    bytes4 internal constant increaseApprovalSig = 0xa45f71ff;\n    bytes4 internal constant decreaseApprovalSig = 0x59388d78;\n\n    //return nonce using function\n    function getNonce(address _owner) public view returns (uint256 nonce){\n      return nonces[_owner];\n    }\n\n\n    /**\n     * @notice Submit a presigned transfer\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(signatures[_signature] == false);\n\n        bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _to, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        require(_nonce == nonces[from].add(1));\n        require(_value.add(_fee) <= balances[from]);\n\n        nonces[from] = _nonce;\n        signatures[_signature] = true;\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(signatures[_signature] == false);\n\n        bytes32 hashedTx = recoverPreSignedHash(address(this), approvalSig, _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        require(_nonce == nonces[from].add(1));\n        require(_value.add(_fee) <= balances[from]);\n\n        nonces[from] = _nonce;\n        signatures[_signature] = true;\n        allowed[from][_spender] =_value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(signatures[_signature] == false);\n\n        bytes32 hashedTx = recoverPreSignedHash(address(this), increaseApprovalSig, _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        require(_nonce == nonces[from].add(1));\n        require(allowed[from][_spender].add(_addedValue).add(_fee) <= balances[from]);\n        //require(_addedValue <= allowed[from][_spender]);\n\n        nonces[from] = _nonce;\n        signatures[_signature] = true;\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner\n     * @param _spender address The address which will spend the funds.\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(signatures[_signature] == false);\n\n        bytes32 hashedTx = recoverPreSignedHash(address(this), decreaseApprovalSig, _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        require(_nonce == nonces[from].add(1));\n        //require(_subtractedValue <= balances[from]);\n        //require(_subtractedValue <= allowed[from][_spender]);\n        //require(_subtractedValue <= allowed[from][_spender]);\n        require(_fee <= balances[from]);\n\n        nonces[from] = _nonce;\n        signatures[_signature] = true;\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _signature bytes The signature, issued by the spender.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    /*function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(signatures[_signature] == false);\n        signatures[_signature] = true;\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0));\n        require(_value.add(_fee) <= balances[_from])​;\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n    }*/\n\n     /**\n      * @notice Hash (keccak256) of the payload used by recoverPreSignedHash\n      * @param _token address The address of the token\n      * @param _spender address The address which will spend the funds.\n      * @param _value uint256 The amount of tokens.\n      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n      * @param _nonce uint256 Presigned transaction number.\n      */    \n    function recoverPreSignedHash(\n        address _token,\n        bytes4 _functionSig,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n        )\n      public pure returns (bytes32)\n      {\n        return keccak256(_token, _functionSig, _spender, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Recover signer address from a message by using his signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n\n      //Check the signature length\n      if (sig.length != 65) {\n        return (address(0));\n      }\n\n      // Divide the signature in r, s and v variables\n      assembly {\n        r := mload(add(sig, 32))\n        s := mload(add(sig, 64))\n        v := byte(0, mload(add(sig, 96)))\n      }\n\n      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n      if (v < 27) {\n        v += 27;\n      }\n\n      // If the version is correct return the signer address\n      if (v != 27 && v != 28) {\n        return (address(0));\n      } else {\n        return ecrecover(hash, v, r, s);\n      }\n    }\n\n}\n\ncontract BeepToken is ERC865Token, RBAC{\n\n    string public constant name = \"Beepnow Token\";\n    string public constant symbol = \"BPN\";\n    uint8 public constant decimals = 0;\n    \n    /* Mapping of whitelisted users */\n    mapping (address => bool) transfersBlacklist;\n    string constant ROLE_ADMIN = \"admin\";\n    string constant ROLE_DELEGATE = \"delegate\";\n\n    bytes4 internal constant transferSig = 0x48664c16;\n\n    event UserInsertedInBlackList(address indexed user);\n    event UserRemovedFromBlackList(address indexed user);\n    event TransferWhitelistOnly(bool flag);\n    event DelegatedEscrow(address indexed guest, address indexed beeper, uint256 total, uint256 nonce, bytes signature);\n    event DelegatedRemittance(address indexed guest, address indexed beeper, uint256 value, uint256 _fee, uint256 nonce, bytes signature);\n\n\tmodifier onlyAdmin() {\n        require(hasRole(msg.sender, ROLE_ADMIN));\n        _;\n    }\n\n    modifier onlyAdminOrDelegates() {\n        require(hasRole(msg.sender, ROLE_ADMIN) || hasRole(msg.sender, ROLE_DELEGATE));\n        _;\n    }\n\n    /*modifier onlyWhitelisted(bytes _signature, address _from, uint256 _value, uint256 _fee, uint256 _nonce) {\n        bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _from, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(!isUserInBlackList(from));\n        _;\n    }*/\n\n    function onlyWhitelisted(bytes _signature, address _from, uint256 _value, uint256 _fee, uint256 _nonce) internal view returns(bool) {\n        bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _from, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(!isUserInBlackList(from));\n        return true;\n    }\n\n    function addAdmin(address _addr) onlyOwner public {\n        addRole(_addr, ROLE_ADMIN);\n    }\n\n    function removeAdmin(address _addr) onlyOwner public {\n        removeRole(_addr, ROLE_ADMIN);\n    }\n\n    function addDelegate(address _addr) onlyAdmin public {\n        addRole(_addr, ROLE_DELEGATE);\n    }\n\n    function removeDelegate(address _addr) onlyAdmin public {\n        removeRole(_addr, ROLE_DELEGATE);\n    }\n\n    constructor(address _Admin, address reserve) public {\n        require(_Admin != address(0));\n        require(reserve != address(0));\n        totalSupply_ = 17500000000;\n\t\tbalances[reserve] = totalSupply_;\n        emit Transfer(address(0), reserve, totalSupply_);\n        addRole(_Admin, ROLE_ADMIN);\n    }\n\n    /**\n     * Is the address allowed to transfer\n     * @return true if the sender can transfer\n     */\n    function isUserInBlackList(address _user) public constant returns (bool) {\n        require(_user != 0x0);\n        return transfersBlacklist[_user];\n    }\n\n\n    /**\n     *  User removed from Blacklist\n     */\n    function whitelistUserForTransfers(address _user) onlyAdmin public {\n        require(isUserInBlackList(_user));\n        transfersBlacklist[_user] = false;\n        emit UserRemovedFromBlackList(_user);\n    }\n\n    /**\n     *  User inserted into Blacklist\n     */\n    function blacklistUserForTransfers(address _user) onlyAdmin public {\n        require(!isUserInBlackList(_user));\n        transfersBlacklist[_user] = true;\n        emit UserInsertedInBlackList(_user);\n    }\n\n    /**\n    * @notice transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(!isUserInBlackList(msg.sender));\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_from != address(0));\n        require(_to != address(0));\n        require(!isUserInBlackList(_from));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transferPreSigned(bytes _signature, address _to, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdminOrDelegates public returns (bool){\n        require(_to != address(0));\n        onlyWhitelisted(_signature, _to, _value, _fee, _nonce);\n        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n    }\n\n    function approvePreSigned(bytes _signature, address _spender, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdminOrDelegates public returns (bool){\n        require(_spender != address(0));\n        onlyWhitelisted(_signature, _spender, _value, _fee, _nonce);\n        return super.approvePreSigned(_signature, _spender, _value, _fee, _nonce);\n    }\n\n    function increaseApprovalPreSigned(bytes _signature, address _spender, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdminOrDelegates public returns (bool){\n        require(_spender != address(0));\n        onlyWhitelisted(_signature, _spender, _value, _fee, _nonce);\n        return super.increaseApprovalPreSigned(_signature, _spender, _value, _fee, _nonce);\n    }\n\n    function decreaseApprovalPreSigned(bytes _signature, address _spender, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdminOrDelegates public returns (bool){\n        require(_spender != address(0));\n        onlyWhitelisted(_signature, _spender, _value, _fee, _nonce);\n        return super.decreaseApprovalPreSigned(_signature, _spender, _value, _fee, _nonce);\n    }\n\n    /*function transferFromPreSigned(bytes _signature, address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdminOrDelegates public returns (bool){\n        require(_from != address(0));\n        require(_to != address(0));\n        onlyWhitelisted(_signature, _spender, _value, _fee, _nonce);\n        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n    }*/\n\n    /* Locking funds. User signs the offline transaction and the admin will execute this, through which the admin account the funds */\n    function delegatedSignedEscrow(bytes _signature, address _from, address _to, address _admin, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdmin public returns (bool){\n        require(_from != address(0));\n        require(_to != address(0));\n        require(_admin != address(0));\n        onlyWhitelisted(_signature, _from, _value, _fee, _nonce); \n        require(hasRole(_admin, ROLE_ADMIN));\n        require(_nonce == nonces[_from].add(1));\n        require(signatures[_signature] == false);\n        uint256 _total = _value.add(_fee);\n        require(_total <= balances[_from]);\n\n        nonces[_from] = _nonce;\n        signatures[_signature] = true;\n        balances[_from] = balances[_from].sub(_total);\n        balances[_admin] = balances[_admin].add(_total);\n\n        emit Transfer(_from, _admin, _total);\n        emit DelegatedEscrow(_from, _to, _total, _nonce, _signature);\n        return true;\n    }\n\n    /* Releasing funds.  User signs the offline transaction and the admin will execute this, in which other user receives the funds. */\n    function delegatedSignedRemittance(bytes _signature, address _from, address _to, address _admin, uint256 _value, uint256 _fee, uint256 _nonce) onlyAdmin public returns (bool){\n        require(_from != address(0));\n        require(_to != address(0));\n        require(_admin != address(0));\n        onlyWhitelisted(_signature, _from, _value, _fee, _nonce);\n        require(hasRole(_admin, ROLE_ADMIN));\n        require(_nonce == nonces[_from].add(1));\n        require(signatures[_signature] == false);\n        require(_value.add(_fee) <= balances[_from]);\n\n        nonces[_from] = _nonce;\n        signatures[_signature] = true;\n        balances[_from] = balances[_from].sub(_value).sub(_fee);\n        balances[_admin] = balances[_admin].add(_fee);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(_from, _admin, _fee);\n        emit DelegatedRemittance(_from, _to, _value, _fee, _nonce, _signature);\n        return true;\n    }\n    \n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000005b726c3970381f99a39c5124222840e0a792eb060000000000000000000000005b726c3970381f99a39c5124222840e0a792eb06"
}