{
  "address": "0xf6cfe53d6febaeea051f400ff5fc14f0cbbdaca1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DigiPulse Token",
  "contractName": "DigipulseToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-28\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert() on error\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    asserts(a == 0 || c / a == b);\n    return c;\n  }\n  function safeSub(uint a, uint b) internal returns (uint) {\n    asserts(b <= a);\n    return a - b;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    asserts(b > 0);\n    uint c = a / b;\n    asserts(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    asserts(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    asserts(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function asserts(bool assertion) internal {\n    if (!assertion) {\n      revert();\n    }\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    if (msg.sender != owner) revert();\n    _;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  bool public stopped;\n  modifier stopInEmergency {\n    if (stopped) {\n      revert();\n    }\n    _;\n  }\n\n  modifier onlyInEmergency {\n    if (!stopped) {\n      revert();\n    }\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function emergencyStop() external onlyOwner {\n    stopped = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function release() external onlyOwner onlyInEmergency {\n    stopped = false;\n  }\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract Token {\n  /// @return total amount of tokens\n  function totalSupply() constant returns (uint256 supply) {}\n\n  /// @param _owner The address from which the balance will be retrieved\n  /// @return The balance\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _value The amount of wei to be approved for transfer\n  /// @return Whether the approval was successful or not\n  function approve(address _spender, uint256 _value) returns (bool success) {}\n\n  /// @param _owner The address of the account owning tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens allowed to spent\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is Token {\n  /**\n   * Reviewed:\n   * - Interger overflow = OK, checked\n   */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    //Default assumes totalSupply can't be over max (2^256 - 1).\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n    //Replace the if with this one instead.\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n    //if (balances[msg.sender] >= _value && _value > 0) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n      balances[_to] += _value;\n      balances[_from] -= _value;\n      allowed[_from][msg.sender] -= _value;\n      Transfer(_from, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  uint256 public totalSupply;\n}\n\n\ncontract DigipulseFirstRoundToken is StandardToken {\n  using SafeMath for uint;\n}\n\ncontract DigipulseToken is StandardToken, Pausable {\n  using SafeMath for uint;\n\n  // Digipulse Token setup\n  string public           name                    = \"DigiPulse Token\";\n  string public           symbol                  = \"DGPT\";\n  uint8 public            decimals                = 18;\n  string public           version                 = 'v0.0.3';\n  address public          owner                   = msg.sender;\n  uint freezeTransferForOwnerTime;\n\n  // Token information\n  address public DGPTokenOldContract = 0x9AcA6aBFe63A5ae0Dc6258cefB65207eC990Aa4D;\n  DigipulseFirstRoundToken public coin;\n\n\n  // Token details\n\n  // ICO details\n  bool public             finalizedCrowdfunding   = false;\n  uint public constant    MIN_CAP                 = 500   * 1e18;\n  uint public constant    MAX_CAP                 = 41850 * 1e18; // + 1600 OBR + 1200 PRE\n  uint public             TierAmount              = 8300  * 1e18;\n  uint public constant    TOKENS_PER_ETH          = 250;\n  uint public constant    MIN_INVEST_ETHER        = 500 finney;\n  uint public             startTime;\n  uint public             endTime;\n  uint public             etherReceived;\n  uint public             coinSentToEther;\n  bool public             isFinalized;\n\n  // Original Backers round\n  bool public             isOBR;\n  uint public             raisedOBR;\n  uint public             MAX_OBR_CAP             = 1600  * 1e18;\n  uint public             OBR_Duration;\n\n  // Enums\n  enum TierState{Completed, Tier01, Tier02, Tier03, Tier04, Tier05, Overspend, Failure, OBR}\n\n  // Modifiers\n  modifier minCapNotReached() {\n    require (now < endTime && etherReceived <= MIN_CAP);\n    _;\n  }\n\n  // Mappings\n  mapping(address => Backer) public backers;\n  struct Backer {\n    uint weiReceived;\n    uint coinSent;\n  }\n\n  // Events\n  event LogReceivedETH(address addr, uint value);\n  event LogCoinsEmited(address indexed from, uint amount);\n\n\n  // Bounties, Presale, Company tokens\n  address public          presaleWallet           = 0x83D0Aa2292efD8475DF241fBA42fe137dA008d79;\n  address public          companyWallet           = 0x5C967dE68FC54365872203D49B51cDc79a61Ca85;\n  address public          bountyWallet            = 0x49fe3E535906d10e55E2e4AD47ff6cB092Abc692;\n\n  // Allocated 10% for the team members\n  address public          teamWallet_1            = 0x91D9B09a4157e02783D5D19f7DfC66a759bDc1E4;\n  address public          teamWallet_2            = 0x56298A4e0f60Ab4A323EDB0b285A9421F8e6E276;\n  address public          teamWallet_3            = 0x09e9e24b3e6bA1E714FB86B04602a7Aa62D587FD;\n  address public          teamWallet_4            = 0x2F4283D0362A3AaEe359aC55F2aC7a4615f97c46;\n\n\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n\n\n  function withdrawPayments() onlyOwner {\n    // Can only be called if the ICO is successfull\n    require (isFinalized);\n    require (etherReceived != 0);\n\n    owner.transfer(this.balance);\n  }\n\n\n  // Init contract\n  function DigipulseToken() {\n    coin = DigipulseFirstRoundToken(DGPTokenOldContract);\n    isOBR = true;\n    isFinalized = false;\n    start();\n\n    // Allocate tokens\n    balances[presaleWallet]         = 600000 * 1e18;                // 600.000 for presale (closed already)\n    Transfer(0x0, presaleWallet, 600000 * 1e18);\n\n    balances[teamWallet_1]          = 20483871 * 1e16;              // 1% for team member 1\n    Transfer(0x0, teamWallet_1, 20483871 * 1e16);\n\n    balances[teamWallet_2]          = 901290324 * 1e15;             // 4.4% for team member 2\n    Transfer(0x0, teamWallet_2, 901290324 * 1e15);\n\n    balances[teamWallet_3]          = 901290324 * 1e15;             // 4.4% for team member 3\n    Transfer(0x0, teamWallet_3, 901290324 * 1e15);\n\n    balances[teamWallet_4]          = 40967724 * 1e15;              // 0.2% for team member 4\n    Transfer(0x0, teamWallet_4, 40967724 * 1e15);\n\n    balances[companyWallet]          = 512096775 * 1e16;            // Company shares\n    Transfer(0x0, companyWallet, 512096775 * 1e16);\n\n    balances[bountyWallet]          = 61451613 * 1e16;              // Bounty shares\n    Transfer(0x0, bountyWallet, 61451613 * 1e16);\n\n    balances[this]                  = 12100000 * 1e18;              // Tokens to be issued during the crowdsale\n    Transfer(0x0, this, 12100000 * 1e18);\n\n    totalSupply = 20483871 * 1e18;\n  }\n\n\n  function start() onlyOwner {\n    if (startTime != 0) revert();\n    startTime    =  1506610800 ;  //28/09/2017 03:00 PM UTC\n    endTime      =  1509494400 ;  //01/11/2017 00:00 PM UTC\n    OBR_Duration =  startTime + 72 hours;\n  }\n\n\n  function toWei(uint _amount) constant returns (uint256 result){\n    // Set to finney for ease of testing on ropsten: 1e15 (or smaller) || Ether for main net 1e18\n    result = _amount.mul(1e18);\n    return result;\n  }\n\n\n  function isOriginalRoundContributor() constant returns (bool _state){\n    uint balance = coin.balanceOf(msg.sender);\n    if (balance > 0) return true;\n  }\n\n\n  function() payable {\n    if (isOBR) {\n      buyDigipulseOriginalBackersRound(msg.sender);\n    } else {\n      buyDigipulseTokens(msg.sender);\n    }\n  }\n\n\n  function buyDigipulseOriginalBackersRound(address beneficiary) internal  {\n    // User must have old tokens\n    require (isOBR);\n    require(msg.value > 0);\n    require(msg.value > MIN_INVEST_ETHER);\n    require(isOriginalRoundContributor());\n\n    uint ethRaised          = raisedOBR;\n    uint userContribution   = msg.value;\n    uint shouldBecome       = ethRaised.add(userContribution);\n    uint excess             = 0;\n    Backer storage backer   = backers[beneficiary];\n\n    // Define excess and amount to include\n    if (shouldBecome > MAX_OBR_CAP) {\n      userContribution = MAX_OBR_CAP - ethRaised;\n      excess = msg.value - userContribution;\n    }\n\n    uint tierBonus   = getBonusPercentage( userContribution );\n    balances[beneficiary] += tierBonus;\n    balances[this]      -= tierBonus;\n    raisedOBR = raisedOBR.add(userContribution);\n    backer.coinSent = backer.coinSent.add(tierBonus);\n    backer.weiReceived = backer.weiReceived.add(userContribution);\n\n    if (raisedOBR >= MAX_OBR_CAP) {\n      isOBR = false;\n    }\n\n    Transfer(this, beneficiary, tierBonus);\n    LogCoinsEmited(beneficiary, tierBonus);\n    LogReceivedETH(beneficiary, userContribution);\n\n    // Send excess back\n    if (excess > 0) {\n      assert(msg.sender.send(excess));\n    }\n  }\n\n\n  function buyDigipulseTokens(address beneficiary) internal {\n    require (!finalizedCrowdfunding);\n    require (now > OBR_Duration);\n    require (msg.value > MIN_INVEST_ETHER);\n\n    uint CurrentTierMax = getCurrentTier().mul(TierAmount);\n\n    // Account for last tier with extra 350 ETH\n    if (getCurrentTier() == 5) {\n      CurrentTierMax = CurrentTierMax.add(350 * 1e18);\n    }\n    uint userContribution = msg.value;\n    uint shouldBecome = etherReceived.add(userContribution);\n    uint tierBonus = 0;\n    uint excess = 0;\n    uint excess_bonus = 0;\n\n    Backer storage backer = backers[beneficiary];\n\n    // Define excess over tier and amount to include\n    if (shouldBecome > CurrentTierMax) {\n      userContribution = CurrentTierMax - etherReceived;\n      excess = msg.value - userContribution;\n    }\n\n    tierBonus = getBonusPercentage( userContribution );\n    balances[beneficiary] += tierBonus;\n    balances[this] -= tierBonus;\n    etherReceived = etherReceived.add(userContribution);\n    backer.coinSent = backer.coinSent.add(tierBonus);\n    backer.weiReceived = backer.weiReceived.add(userContribution);\n    Transfer(this, beneficiary, tierBonus);\n\n    // Tap into next tier with appropriate bonuses\n    if (excess > 0 && etherReceived < MAX_CAP) {\n      excess_bonus = getBonusPercentage( excess );\n      balances[beneficiary] += excess_bonus;\n      balances[this] -= excess_bonus;\n      etherReceived = etherReceived.add(excess);\n      backer.coinSent = backer.coinSent.add(excess_bonus);\n      backer.weiReceived = backer.weiReceived.add(excess);\n      Transfer(this, beneficiary, excess_bonus);\n    }\n\n    LogCoinsEmited(beneficiary, tierBonus.add(excess_bonus));\n    LogReceivedETH(beneficiary, userContribution.add(excess));\n\n    if(etherReceived >= MAX_CAP) {\n      finalizedCrowdfunding = true;\n    }\n\n    // Send excess back\n    if (excess > 0 && etherReceived == MAX_CAP) {\n      assert(msg.sender.send(excess));\n    }\n  }\n\n\n  function getCurrentTier() returns (uint Tier) {\n    uint ethRaised = etherReceived;\n\n    if (isOBR) return uint(TierState.OBR);\n\n    if (ethRaised >= 0 && ethRaised < toWei(8300)) return uint(TierState.Tier01);\n    else if (ethRaised >= toWei(8300) && ethRaised < toWei(16600)) return uint(TierState.Tier02);\n    else if (ethRaised >= toWei(16600) && ethRaised < toWei(24900)) return uint(TierState.Tier03);\n    else if (ethRaised >= toWei(24900) && ethRaised < toWei(33200)) return uint(TierState.Tier04);\n    else if (ethRaised >= toWei(33200) && ethRaised <= toWei(MAX_CAP)) return uint(TierState.Tier05); // last tier has 8650\n    else if (ethRaised > toWei(MAX_CAP)) {\n      finalizedCrowdfunding = true;\n      return uint(TierState.Overspend);\n    }\n    else return uint(TierState.Failure);\n  }\n\n\n  function getBonusPercentage(uint contribution) returns (uint _amount) {\n    uint tier = getCurrentTier();\n\n    uint bonus =\n        tier == 1 ? 20 :\n        tier == 2 ? 15 :\n        tier == 3 ? 10 :\n        tier == 4 ? 5 :\n        tier == 5 ? 0 :\n        tier == 8 ? 50 :\n                    0;\n\n    return contribution.mul(TOKENS_PER_ETH).mul(bonus + 100).div(100);\n  }\n\n\n  function refund(uint _value) minCapNotReached public {\n\n    if (_value != backers[msg.sender].coinSent) revert(); // compare value from backer balance\n\n    uint ETHToSend = backers[msg.sender].weiReceived;\n    backers[msg.sender].weiReceived=0;\n\n    if (ETHToSend > 0) {\n      asyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n    }\n  }\n\n\n  function finalize() onlyOwner public {\n    require (now >= endTime);\n    require (etherReceived >= MIN_CAP);\n\n    finalizedCrowdfunding = true;\n    isFinalized = true;\n    freezeTransferForOwnerTime = now + 182 days;\n  }\n\n\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    require(isFinalized);\n\n    if (msg.sender == owner) {\n      require(now > freezeTransferForOwnerTime);\n    }\n\n    return super.transfer(_to, _value);\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    require(isFinalized);\n\n    if (msg.sender == owner) {\n      require(now > freezeTransferForOwnerTime);\n    }\n\n    return super.transferFrom(_from, _to, _value);\n  }\n}",
  "bytecode": "60606040526040805190810160405280600f81526020017f4469676950756c736520546f6b656e0000000000000000000000000000000000815250600490805190602001906200005192919062000cf2565b506040805190810160405280600481526020017f4447505400000000000000000000000000000000000000000000000000000000815250600590805190602001906200009f92919062000cf2565b506012600660006101000a81548160ff021916908360ff1602179055506040805190810160405280600681526020017f76302e302e330000000000000000000000000000000000000000000000000000815250600790805190602001906200010992919062000cf2565b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739aca6abfe63a5ae0dc6258cefb65207ec990aa4d600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60146101000a81548160ff0219169083151502179055506901c1f1a388b71e300000600c556856bc75e2d6310000006013557383d0aa2292efd8475df241fba42fe137da008d79601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735c967de68fc54365872203d49b51cdc79a61ca85601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507349fe3e535906d10e55e2e4ad47ff6cb092abc692601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507391d9b09a4157e02783d5d19f7dfc66a759bdc1e4601960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507356298a4e0f60ab4a323edb0b285a9421f8e6e276601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507309e9e24b3e6ba1e714fb86b04602a7aa62d587fd601b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732f4283d0362a3aaee359ac55f2ac7a4615f97c46601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034156200043557600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601160016101000a81548160ff0219169083151502179055506000601160006101000a81548160ff0219169083151502179055506200052d62000c5d640100000000026200250f176401000000009004565b697f0e10af47c1c7000000600080601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef697f0e10af47c1c70000006040518082815260200191505060405180910390a3692b605426f700575f0000600080601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef692b605426f700575f00006040518082815260200191505060405180910390a369bedb0bdea534b3a20000600080601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef69bedb0bdea534b3a200006040518082815260200191505060405180910390a369bedb0bdea534b3a20000600080601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef69bedb0bdea534b3a200006040518082815260200191505060405180910390a36908acdd6171b2151e0000600080601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6908acdd6171b2151e00006040518082815260200191505060405180910390a36a043c6837ce1f0888470000600080601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6a043c6837ce1f08884700006040518082815260200191505060405180910390a3698220fc74e501061d0000600080601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef698220fc74e501061d00006040518082815260200191505060405180910390a36a0a024650797c6e828000006000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6a0a024650797c6e828000006040518082815260200191505060405180910390a36a10f1a0df387c22211c000060028190555062000da1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000cba57600080fd5b6000600d5414151562000ccc57600080fd5b6359cd0e70600d819055506359f90e80600e819055506203f480600d5401601481905550565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000d3557805160ff191683800117855562000d66565b8280016001018555821562000d66579182015b8281111562000d6557825182559160200191906001019062000d48565b5b50905062000d75919062000d79565b5090565b62000d9e91905b8082111562000d9a57600081600090555060010162000d80565b5090565b90565b612d0e8062000db16000396000f3006060604052361561024e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b44871461027d57806306fdde03146102a6578063095ea7b31461033457806311df99951461038e57806316bb1f6a146103e357806318160ddd146104105780631ec32d15146104395780631ed77dc81461048e57806323b872dd146104e3578063278ecde11461055c578063287b895c1461057f57806330adce0e146105a8578063313ce567146105d15780633197cbb61461060057806332a3869a146106295780634bb278f31461066057806354fd4d501461067557806355de97ac146107035780636103d70b1461072c57806363a599a414610741578063643b18b614610756578063669dafe8146107ab57806368049361146107e257806368f67330146108375780636a2d1cb81461086457806370a082311461088d5780637412c223146108da57806375f12b211461090357806378e97925146109305780637992e39f14610959578063801db9cc1461098257806386d1a69f146109ab5780638d4e4083146109c05780638da5cb5b146109ed5780638ed399ca14610a425780638ef26a7114610a9757806395d89b4114610ac0578063a84dd3a614610b4e578063a9059cbb14610ba3578063b85dfb8014610bfd578063bc6e660414610c51578063be9a655514610c7a578063d669e1d414610c8f578063d7a5fdee14610cb8578063d82a6d5614610d0d578063dd62ed3e14610d3a578063e2982c2114610da6578063e576052014610df3578063e61d5d5014610e48575b601160019054906101000a900460ff16156102715761026c33610e71565b61027b565b61027a336111d9565b5b005b341561028857600080fd5b610290611748565b6040518082815260200191505060405180910390f35b34156102b157600080fd5b6102b961174e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f95780820151818401526020810190506102de565b50505050905090810190601f1680156103265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033f57600080fd5b610374600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117ec565b604051808215151515815260200191505060405180910390f35b341561039957600080fd5b6103a16118de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103ee57600080fd5b6103f6611904565b604051808215151515815260200191505060405180910390f35b341561041b57600080fd5b610423611a00565b6040518082815260200191505060405180910390f35b341561044457600080fd5b61044c611a06565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049957600080fd5b6104a1611a2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104ee57600080fd5b610542600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a52565b604051808215151515815260200191505060405180910390f35b341561056757600080fd5b61057d6004808035906020019091905050611aea565b005b341561058a57600080fd5b610592611c08565b6040518082815260200191505060405180910390f35b34156105b357600080fd5b6105bb611c0e565b6040518082815260200191505060405180910390f35b34156105dc57600080fd5b6105e4611c14565b604051808260ff1660ff16815260200191505060405180910390f35b341561060b57600080fd5b610613611c27565b6040518082815260200191505060405180910390f35b341561063457600080fd5b61064a6004808035906020019091905050611c2d565b6040518082815260200191505060405180910390f35b341561066b57600080fd5b610673611ce8565b005b341561068057600080fd5b610688611db3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106c85780820151818401526020810190506106ad565b50505050905090810190601f1680156106f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561070e57600080fd5b610716611e51565b6040518082815260200191505060405180910390f35b341561073757600080fd5b61073f611e57565b005b341561074c57600080fd5b610754611f5b565b005b341561076157600080fd5b610769611fd4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107b657600080fd5b6107cc6004808035906020019091905050611ffa565b6040518082815260200191505060405180910390f35b34156107ed57600080fd5b6107f5612021565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561084257600080fd5b61084a612047565b604051808215151515815260200191505060405180910390f35b341561086f57600080fd5b61087761205a565b6040518082815260200191505060405180910390f35b341561089857600080fd5b6108c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612066565b6040518082815260200191505060405180910390f35b34156108e557600080fd5b6108ed6120ae565b6040518082815260200191505060405180910390f35b341561090e57600080fd5b610916612267565b604051808215151515815260200191505060405180910390f35b341561093b57600080fd5b61094361227a565b6040518082815260200191505060405180910390f35b341561096457600080fd5b61096c612280565b6040518082815260200191505060405180910390f35b341561098d57600080fd5b610995612286565b6040518082815260200191505060405180910390f35b34156109b657600080fd5b6109be612293565b005b34156109cb57600080fd5b6109d3612327565b604051808215151515815260200191505060405180910390f35b34156109f857600080fd5b610a0061233a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a4d57600080fd5b610a55612360565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610aa257600080fd5b610aaa612386565b6040518082815260200191505060405180910390f35b3415610acb57600080fd5b610ad361238c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b13578082015181840152602081019050610af8565b50505050905090810190601f168015610b405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b5957600080fd5b610b6161242a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bae57600080fd5b610be3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612450565b604051808215151515815260200191505060405180910390f35b3415610c0857600080fd5b610c34600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506124e6565b604051808381526020018281526020019250505060405180910390f35b3415610c5c57600080fd5b610c6461250a565b6040518082815260200191505060405180910390f35b3415610c8557600080fd5b610c8d61250f565b005b3415610c9a57600080fd5b610ca26125a2565b6040518082815260200191505060405180910390f35b3415610cc357600080fd5b610ccb6125b0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d1857600080fd5b610d206125d6565b604051808215151515815260200191505060405180910390f35b3415610d4557600080fd5b610d90600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125e9565b6040518082815260200191505060405180910390f35b3415610db157600080fd5b610ddd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612670565b6040518082815260200191505060405180910390f35b3415610dfe57600080fd5b610e06612688565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610e5357600080fd5b610e5b6126ae565b6040518082815260200191505060405180910390f35b600080600080600080601160019054906101000a900460ff161515610e9557600080fd5b600034111515610ea457600080fd5b6706f05b59d3b2000034111515610eba57600080fd5b610ec2611904565b1515610ecd57600080fd5b6012549550349450610ee885876126b490919063ffffffff16565b935060009250601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150601354841115610f46578560135403945084340392505b610f4f85611c2d565b9050806000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610ffe856012546126b490919063ffffffff16565b60128190555061101b8183600101546126b490919063ffffffff16565b826001018190555061103a8583600001546126b490919063ffffffff16565b826000018190555060135460125410151561106b576000601160016101000a81548160ff0219169083151502179055505b8673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38673ffffffffffffffffffffffffffffffffffffffff167ff3c1c7c0eb1328ddc834c4c9e579c06d35f443bf1102b034653624a239c7a40c826040518082815260200191505060405180910390a27fd1dc370699ae69fb860ed754789a4327413ec1cd379b93f2cbedf449a26b0e858786604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160008311156111d0573373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156111cf57fe5b5b50505050505050565b6000806000806000806000600b60149054906101000a900460ff1615151561120057600080fd5b6014544211151561121057600080fd5b6706f05b59d3b200003411151561122657600080fd5b611242600c546112346120ae565b6126d290919063ffffffff16565b9650600561124e6120ae565b1415611273576112706812f939c99edab80000886126b490919063ffffffff16565b96505b34955061128b86600f546126b490919063ffffffff16565b9450600093506000925060009150601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050868511156112ef57600f548703955085340392505b6112f886611c2d565b9350836000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550836000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506113a786600f546126b490919063ffffffff16565b600f819055506113c48482600101546126b490919063ffffffff16565b81600101819055506113e38682600001546126b490919063ffffffff16565b81600001819055508773ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360008311801561146b57506908dcb16b753271a80000600f54105b156115d25761147983611c2d565b9150816000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061152883600f546126b490919063ffffffff16565b600f819055506115458282600101546126b490919063ffffffff16565b81600101819055506115648382600001546126b490919063ffffffff16565b81600001819055508773ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b8773ffffffffffffffffffffffffffffffffffffffff167ff3c1c7c0eb1328ddc834c4c9e579c06d35f443bf1102b034653624a239c7a40c61161d84876126b490919063ffffffff16565b6040518082815260200191505060405180910390a27fd1dc370699ae69fb860ed754789a4327413ec1cd379b93f2cbedf449a26b0e858861166785896126b490919063ffffffff16565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16908dcb16b753271a80000600f541015156116e0576001600b60146101000a81548160ff0219169083151502179055505b6000831180156116fb57506908dcb16b753271a80000600f54145b1561173e573373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050151561173d57fe5b5b5050505050505050565b601e5481565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117e45780601f106117b9576101008083540402835291602001916117e4565b820191906000526020600020905b8154815290600101906020018083116117c757829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156119cc57600080fd5b6102c65a03f115156119dd57600080fd5b50505060405180519050905060008111156119fb57600191506119fc565b5b5090565b60025481565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601160009054906101000a900460ff161515611a6f57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611ad65760095442111515611ad557600080fd5b5b611ae1848484612705565b90509392505050565b6000600e5442108015611b085750681b1ae4d6e2ef500000600f5411155b1515611b1357600080fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015482141515611b6357600080fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000811115611c0457611c0333826129fb565b5b5050565b60135481565b600f5481565b600660009054906101000a900460ff1681565b600e5481565b6000806000611c3a6120ae565b915060018214611c9b5760028214611c935760038214611c8b5760048214611c835760058214611c7b5760088214611c73576000611c76565b60325b611c7e565b60005b611c86565b60055b611c8e565b600a5b611c96565b600f5b611c9e565b60145b60ff169050611cdf6064611cd160648401611cc360fa896126d290919063ffffffff16565b6126d290919063ffffffff16565b612aaf90919063ffffffff16565b92505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4457600080fd5b600e544210151515611d5557600080fd5b681b1ae4d6e2ef500000600f5410151515611d6f57600080fd5b6001600b60146101000a81548160ff0219169083151502179055506001601160006101000a81548160ff02191690831515021790555062eff1004201600981905550565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e495780601f10611e1e57610100808354040283529160200191611e49565b820191906000526020600020905b815481529060010190602001808311611e2c57829003601f168201915b505050505081565b60145481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611eb357600080fd5b601160009054906101000a900460ff161515611ece57600080fd5b6000600f5414151515611ee057600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611f5957600080fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fb757600080fd5b6001600360146101000a81548160ff021916908315150217905550565b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612017670de0b6b3a7640000836126d290919063ffffffff16565b9050809050919050565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60149054906101000a900460ff1681565b6706f05b59d3b2000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600f549050601160019054906101000a900460ff16156120de576008808111156120d757fe5b9150612263565b600081101580156120f857506120f561206c611ffa565b81105b15612111576001600881111561210a57fe5b9150612263565b61211c61206c611ffa565b811015801561213457506121316140d8611ffa565b81105b1561214d576002600881111561214657fe5b9150612263565b6121586140d8611ffa565b8110158015612170575061216d616144611ffa565b81105b15612189576003600881111561218257fe5b9150612263565b612194616144611ffa565b81101580156121ac57506121a96181b0611ffa565b81105b156121c557600460088111156121be57fe5b9150612263565b6121d06181b0611ffa565b81101580156121f157506121ed6908dcb16b753271a80000611ffa565b8111155b1561220a576005600881111561220357fe5b9150612263565b61221d6908dcb16b753271a80000611ffa565b811115612253576001600b60146101000a81548160ff0219169083151502179055506006600881111561224c57fe5b9150612263565b6007600881111561226057fe5b91505b5090565b600360149054906101000a900460ff1681565b600d5481565b600c5481565b681b1ae4d6e2ef50000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ef57600080fd5b600360149054906101000a900460ff16151561230a57600080fd5b6000600360146101000a81548160ff021916908315150217905550565b601160009054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60105481565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124225780601f106123f757610100808354040283529160200191612422565b820191906000526020600020905b81548152906001019060200180831161240557829003601f168201915b505050505081565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601160009054906101000a900460ff16151561246d57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156124d457600954421115156124d357600080fd5b5b6124de8383612af0565b905092915050565b60156020528060005260406000206000915090508060000154908060010154905082565b60fa81565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561256b57600080fd5b6000600d5414151561257c57600080fd5b6359cd0e70600d819055506359f90e80600e819055506203f480600d5401601481905550565b6908dcb16b753271a8000081565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601160019054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601d6020528060005260406000206000915090505481565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b60008082840190506126c884821015612cd3565b8091505092915050565b60008082840290506126fb60008514806126f657508385838115156126f357fe5b04145b612cd3565b8091505092915050565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156127d1575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561285a57506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156129ef57816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506129f4565b600090505b9392505050565b612a4d81601d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126b490919063ffffffff16565b601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612aa581601e546126b490919063ffffffff16565b601e819055505050565b600080612abe60008411612cd3565b8284811515612ac957fe5b049050612ae68385811515612ada57fe5b06828502018514612cd3565b8091505092915050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015612bbd57506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15612cc857816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050612ccd565b600090505b92915050565b801515612cdf57600080fd5b505600a165627a7a723058206230d9327cd056f9080e0f6ce3652539df8a9eb97441f54bdc93b279915b4e2d0029"
}