{
  "address": "0xe5dada80aa6477e85d09747f2842f7993d0df71c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dock Token",
  "contractName": "DockToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-21\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/*\n * DockToken is a standard ERC20 token with some additional functionalities:\n * - Transfers are only enabled after contract owner enables it (after the ICO)\n *\n * Note: Token Offering == Initial Coin Offering(ICO)\n */\n\ncontract DockToken is StandardToken, Ownable {\n    string public constant symbol = \"DOCK\";\n    string public constant name = \"DockToken\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n    uint256 public constant TOKEN_OFFERING_ALLOWANCE = 1000000000 * (10 ** uint256(decimals));\n    uint256 public constant ADMIN_ALLOWANCE = INITIAL_SUPPLY - TOKEN_OFFERING_ALLOWANCE;\n    \n    // Address of token admin\n    address public adminAddr;\n\n    // Address of token offering\n\t  address public tokenOfferingAddr;\n\n    // Enable transfers after conclusion of token offering\n    bool public transferEnabled = false;\n    \n    /**\n     * Check if transfer is allowed\n     *\n     * Permissions:\n     *                                                       Owner    Admin    OffeirngContract    Others\n     * transfer (before transferEnabled is true)               x        x            x               x\n     * transferFrom (before transferEnabled is true)           x        v            v               x\n     * transfer/transferFrom after transferEnabled is true     v        x            x               v\n     */\n    modifier onlyWhenTransferAllowed() {\n        require(transferEnabled || msg.sender == adminAddr || msg.sender == tokenOfferingAddr);\n        _;\n    }\n\n    /**\n     * Check if token offering address is set or not\n     */\n    modifier onlyTokenOfferingAddrNotSet() {\n        require(tokenOfferingAddr == address(0x0));\n        _;\n    }\n\n    /**\n     * Check if address is a valid destination to transfer tokens to\n     * - must not be zero address\n     * - must not be the token address\n     * - must not be the owner's address\n     * - must not be the admin's address\n     * - must not be the token offering contract address\n     */\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        require(to != owner);\n        require(to != address(adminAddr));\n        require(to != address(tokenOfferingAddr));\n        _;\n    }\n    \n    /**\n     * Token contract constructor\n     *\n     * @param admin Address of admin account\n     */\n    function DockToken(address admin) public {\n        totalSupply = INITIAL_SUPPLY;\n        \n        // Mint tokens\n        balances[msg.sender] = totalSupply;\n        Transfer(address(0x0), msg.sender, totalSupply);\n\n        // Approve allowance for admin account\n        adminAddr = admin;\n        approve(adminAddr, ADMIN_ALLOWANCE);\n    }\n\n    /**\n     * Set token offering to approve allowance for offering contract to distribute tokens\n     *\n     * @param offeringAddr Address of token offering contract\n     * @param amountForSale Amount of tokens for sale, set 0 to max out\n     */\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner onlyTokenOfferingAddrNotSet {\n        require(!transferEnabled);\n\n        uint256 amount = (amountForSale == 0) ? TOKEN_OFFERING_ALLOWANCE : amountForSale;\n        require(amount <= TOKEN_OFFERING_ALLOWANCE);\n\n        approve(offeringAddr, amount);\n        tokenOfferingAddr = offeringAddr;\n    }\n    \n    /**\n     * Enable transfers\n     */\n    function enableTransfer() external onlyOwner {\n        transferEnabled = true;\n\n        // End the offering\n        approve(tokenOfferingAddr, 0);\n    }\n\n    /**\n     * Transfer from sender to another account\n     *\n     * @param to Destination address\n     * @param value Amount of docks to send\n     */\n    function transfer(address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\n        return super.transfer(to, value);\n    }\n    \n    /**\n     * Transfer from `from` account to `to` account using allowance in `from` account to the sender\n     *\n     * @param from Origin address\n     * @param to Destination address\n     * @param value Amount of docks to send\n     */\n    function transferFrom(address from, address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n    \n}\n\ncontract DockCrowdsale is Pausable {\n    using SafeMath for uint256;\n\n     // Token to be sold\n    DockToken public token;\n\n    // Start and end timestamps where contributions are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // Address where funds are collected\n    address public beneficiary;\n\n    // Price of the tokens as in tokens per ether\n    uint256 public rate;\n\n    // Amount of raised in Wei \n    uint256 public weiRaised;\n\n    // Timelines for contribution limit policy\n    uint256 public capReleaseTimestamp;\n\n    uint256 public extraTime;\n\n    // Whitelists of participant address\n    mapping(address => bool) public whitelists;\n\n    // Contributions in Wei for each participant\n    mapping(address => uint256) public contributions;\n\n    // Funding cap in ETH. \n    uint256 public constant FUNDING_ETH_HARD_CAP = 9123 * 1 ether;\n\n    // Min contribution is 0.01 ether\n    uint256 public minContribution = 10**16;\n\n    // Max contribution is 1 ether\n    uint256 public maxContribution = 10**18;\n\n    //remainCap\n    uint256 public remainCap;\n\n    // The current stage of the offering\n    Stages public stage;\n\n    enum Stages { \n        Setup,\n        OfferingStarted,\n        OfferingEnded\n    }\n\n    event OfferingOpens(uint256 startTime, uint256 endTime);\n    event OfferingCloses(uint256 endTime, uint256 totalWeiRaised);\n    /**\n     * Event for token purchase logging\n     *\n     * @param purchaser Who paid for the tokens\n     * @param value Weis paid for purchase\n     * @return amount Amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    /**\n     * Modifier that requires certain stage before executing the main function body\n     *\n     * @param expectedStage Value that the current stage is required to match\n     */\n    modifier atStage(Stages expectedStage) {\n        require(stage == expectedStage);\n        _;\n    }\n\n    \n    /**\n     * The constructor of the contract.\n     * @param dockToEtherRate Number of docks per ether\n     * @param beneficiaryAddr Address where funds are collected\n     */\n    function DockCrowdsale(\n        uint256 dockToEtherRate, \n        address beneficiaryAddr, \n        address tokenAddress\n    ) public {\n        require(dockToEtherRate > 0);\n        require(beneficiaryAddr != address(0));\n        require(tokenAddress != address(0));\n\n        token = DockToken(tokenAddress);\n        rate = dockToEtherRate;\n        beneficiary = beneficiaryAddr;\n        stage = Stages.Setup;\n    }\n\n    /**\n     * Fallback function can be used to buy tokens\n     */\n    function () public payable {\n        buy();\n    }\n\n    /**\n     * Withdraw available ethers into beneficiary account, serves as a safety, should never be needed\n     */\n    function ownerSafeWithdrawal() external onlyOwner {\n        beneficiary.transfer(this.balance);\n    }\n\n    function updateRate(uint256 dockToEtherRate) public onlyOwner atStage(Stages.Setup) {\n        rate = dockToEtherRate;\n    }\n\n    /**\n     * Whitelist participant address \n     * \n     * \n     * @param users Array of addresses to be whitelisted\n     */\n    function whitelist(address[] users) public onlyOwner {\n        for (uint32 i = 0; i < users.length; i++) {\n            whitelists[users[i]] = true;\n        }\n    }\n    function whitelistRemove(address user) public onlyOwner{\n      require(whitelists[user]);\n      whitelists[user] = false;\n    }\n    /**\n     * Start the offering\n     *\n     * @param durationInSeconds Extra duration of the offering on top of the minimum 4 hours\n     */\n    function startOffering(uint256 durationInSeconds) public onlyOwner atStage(Stages.Setup) {\n        stage = Stages.OfferingStarted;\n        startTime = now;\n        capReleaseTimestamp = startTime + 5 hours;\n        extraTime = capReleaseTimestamp + 7 days;\n        endTime = extraTime.add(durationInSeconds);\n        OfferingOpens(startTime, endTime);\n    }\n\n    /**\n     * End the offering\n     */\n    function endOffering() public onlyOwner atStage(Stages.OfferingStarted) {\n        endOfferingImpl();\n    }\n    \n  \n    /**\n     * Function to invest ether to buy tokens, can be called directly or called by the fallback function\n     * Only whitelisted users can buy tokens.\n     *\n     * @return bool Return true if purchase succeeds, false otherwise\n     */\n    function buy() public payable whenNotPaused atStage(Stages.OfferingStarted) returns (bool) {\n        if (whitelists[msg.sender]) {\n              buyTokens();\n              return true;\n        }\n        revert();\n    }\n\n    /**\n     * Function that returns whether offering has ended\n     * \n     * @return bool Return true if token offering has ended\n     */\n    function hasEnded() public view returns (bool) {\n        return now > endTime || stage == Stages.OfferingEnded;\n    }\n\n    /**\n     * Modifier that validates a purchase at a tier\n     * All the following has to be met:\n     * - current time within the offering period\n     * - valid sender address and ether value greater than 0.1\n     * - total Wei raised not greater than FUNDING_ETH_HARD_CAP\n     * - contribution per perticipant within contribution limit\n     *\n     * \n     */\n    modifier validPurchase() {\n        require(now >= startTime && now <= endTime && stage == Stages.OfferingStarted);\n        if(now > capReleaseTimestamp) {\n          maxContribution = 9123 * 1 ether;\n        }\n        uint256 contributionInWei = msg.value;\n        address participant = msg.sender; \n\n\n        require(contributionInWei <= maxContribution.sub(contributions[participant]));\n        require(participant != address(0) && contributionInWei >= minContribution && contributionInWei <= maxContribution);\n        require(weiRaised.add(contributionInWei) <= FUNDING_ETH_HARD_CAP);\n        \n        _;\n    }\n\n\n    function buyTokens() internal validPurchase {\n      \n        uint256 contributionInWei = msg.value;\n        address participant = msg.sender;\n\n        // Calculate token amount to be distributed\n        uint256 tokens = contributionInWei.mul(rate);\n        \n        if (!token.transferFrom(token.owner(), participant, tokens)) {\n            revert();\n        }\n\n        weiRaised = weiRaised.add(contributionInWei);\n        contributions[participant] = contributions[participant].add(contributionInWei);\n\n        remainCap = FUNDING_ETH_HARD_CAP.sub(weiRaised);\n\n        \n        // Check if the funding cap has been reached, end the offering if so\n        if (weiRaised >= FUNDING_ETH_HARD_CAP) {\n            endOfferingImpl();\n        }\n        \n        // Transfer funds to beneficiary\n        beneficiary.transfer(contributionInWei);\n        TokenPurchase(msg.sender, contributionInWei, tokens);       \n    }\n\n\n    /**\n     * End token offering by set the stage and endTime\n     */\n    function endOfferingImpl() internal {\n        endTime = now;\n        stage = Stages.OfferingEnded;\n        OfferingCloses(endTime, weiRaised);\n    }\n\n    /**\n     * Allocate tokens for presale participants before public offering, can only be executed at Stages.Setup stage.\n     *\n     * @param to Participant address to send docks to\n     * @param tokens Amount of docks to be sent to parcitipant \n     */\n    function allocateTokensBeforeOffering(address to, uint256 tokens) public onlyOwner atStage(Stages.Setup) returns (bool) {\n        if (!token.transferFrom(token.owner(), to, tokens)) {\n            revert();\n        }\n        return true;\n    }\n    \n    /**\n     * Bulk version of allocateTokensBeforeOffering\n     */\n    function batchAllocateTokensBeforeOffering(address[] toList, uint256[] tokensList) external onlyOwner  atStage(Stages.Setup)  returns (bool)  {\n        require(toList.length == tokensList.length);\n\n        for (uint32 i = 0; i < toList.length; i++) {\n            allocateTokensBeforeOffering(toList[i], tokensList[i]);\n        }\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOfferingAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offeringAddr\",\"type\":\"address\"},{\"name\":\"amountForSale\",\"type\":\"uint256\"}],\"name\":\"setTokenOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_OFFERING_ALLOWANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_ALLOWANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600560146101000a81548160ff021916908315150217905550341561002a57600080fd5b60405160208061206f8339810160405280805190602001909190505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260ff16600a0a633b9aca0002600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e5600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260ff16600a0a633b9aca0002601260ff16600a0a633b9aca0002036101ec640100000000026107a0176401000000009004565b50506102de565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b611d82806102ed6000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b057806318160ddd1461020a57806323b872dd146102335780632ff2e9dc146102ac578063313ce567146102d55780634cd412d5146103045780634d2c29a014610331578063661884631461038657806370a08231146103e0578063726f63f61461042d578063818305931461046f5780638da5cb5b146104c457806395d89b4114610519578063a9059cbb146105a7578063d73dd62314610601578063dd62ed3e1461065b578063f0d4753e146106c7578063f1b50c1d146106f0578063f2fde38b14610705578063fc53f9581461073e575b600080fd5b341561012d57600080fd5b610135610767565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b6101f0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107a0565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d610892565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b610292600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610898565b604051808215151515815260200191505060405180910390f35b34156102b757600080fd5b6102bf610b09565b6040518082815260200191505060405180910390f35b34156102e057600080fd5b6102e8610b1a565b604051808260ff1660ff16815260200191505060405180910390f35b341561030f57600080fd5b610317610b1f565b604051808215151515815260200191505060405180910390f35b341561033c57600080fd5b610344610b32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039157600080fd5b6103c6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b58565b604051808215151515815260200191505060405180910390f35b34156103eb57600080fd5b610417600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de9565b6040518082815260200191505060405180910390f35b341561043857600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e32565b005b341561047a57600080fd5b610482610f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104cf57600080fd5b6104d7610fbb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052457600080fd5b61052c610fe1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056c578082015181840152602081019050610551565b50505050905090810190601f1680156105995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105b257600080fd5b6105e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061101a565b604051808215151515815260200191505060405180910390f35b341561060c57600080fd5b610641600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611289565b604051808215151515815260200191505060405180910390f35b341561066657600080fd5b6106b1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611485565b6040518082815260200191505060405180910390f35b34156106d257600080fd5b6106da61150c565b6040518082815260200191505060405180910390f35b34156106fb57600080fd5b61070361151d565b005b341561071057600080fd5b61073c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115c4565b005b341561074957600080fd5b61075161171c565b6040518082815260200191505060405180910390f35b6040805190810160405280600981526020017f446f636b546f6b656e000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600560149054906101000a900460ff16806109025750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061095a5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561096557600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109a257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109dd57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a3a57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a9757600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610af457600080fd5b610aff85858561173c565b9150509392505050565b601260ff16600a0a633b9aca000281565b601281565b600560149054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610c69576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cfd565b610c7c8382611afb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610eed57600080fd5b600560149054906101000a900460ff16151515610f0957600080fd5b60008214610f175781610f26565b601260ff16600a0a633b9aca00025b9050601260ff16600a0a633b9aca00028111151515610f4457600080fd5b610f4e83826107a0565b5082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f444f434b0000000000000000000000000000000000000000000000000000000081525081565b6000600560149054906101000a900460ff16806110845750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806110dc5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156110e757600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561112457600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561115f57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111bc57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561121957600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561127657600080fd5b6112808484611b14565b91505092915050565b600061131a82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601260ff16600a0a633b9aca000281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157957600080fd5b6001600560146101000a81548160ff0219169083151502179055506115c1600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006107a0565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561162057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561165c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601260ff16600a0a633b9aca0002601260ff16600a0a633b9aca00020381565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561177957600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117c757600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561185257600080fd5b6118a482600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611afb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061193982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611afb90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000828211151515611b0957fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b5157600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611b9f57600080fd5b611bf182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611afb90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c8682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808284019050838110151515611d4c57fe5b80915050929150505600a165627a7a72305820d0ecc158648a61420b6c22aa10279ffe401c6f78af19249249d5246007b1284e00290000000000000000000000002fb7e2da7c20ae62990ae6bcdf1d41bf9ff30b69",
  "constructorArguments": "0000000000000000000000002fb7e2da7c20ae62990ae6bcdf1d41bf9ff30b69"
}