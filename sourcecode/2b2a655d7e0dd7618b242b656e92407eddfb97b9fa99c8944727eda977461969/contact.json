{
  "address": "0x036407f23d5e1c1486f7488332cf54bf06e5f09f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Alphabit Token",
  "contractName": "ABCToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-30\n*/\n\npragma solidity ^0.4.11;\n\n\n/*\n  Author: Victor Mezrin  [emailÂ protected]\n*/\n\n\n/* Interface of the ERC223 token */\ncontract ERC223TokenInterface {\n    function name() constant returns (string _name);\n    function symbol() constant returns (string _symbol);\n    function decimals() constant returns (uint8 _decimals);\n    function totalSupply() constant returns (uint256 _supply);\n\n    function balanceOf(address _owner) constant returns (uint256 _balance);\n\n    function approve(address _spender, uint256 _value) returns (bool _success);\n    function allowance(address _owner, address spender) constant returns (uint256 _remaining);\n\n    function transfer(address _to, uint256 _value) returns (bool _success);\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes metadata);\n}\n\n\n/* Interface of the contract that is going to receive ERC223 tokens */\ncontract ERC223ContractInterface {\n    function erc223Fallback(address _from, uint256 _value, bytes _data){\n        // to avoid warnings during compilation\n        _from = _from;\n        _value = _value;\n        _data = _data;\n        // Incoming transaction code here\n        throw;\n    }\n}\n\n\n/* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\ncontract SafeMath {\n    uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (x > MAX_UINT256 - y) throw;\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (x < y) throw;\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) return 0;\n        if (x > MAX_UINT256 / y) throw;\n        return x * y;\n    }\n}\n\n\ncontract ERC223Token is ERC223TokenInterface, SafeMath {\n\n    /*\n      Storage of the contract\n    */\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n\n    /*\n      Getters\n    */\n\n    function name() constant returns (string _name) {\n        return name;\n    }\n\n    function symbol() constant returns (string _symbol) {\n        return symbol;\n    }\n\n    function decimals() constant returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    function totalSupply() constant returns (uint256 _supply) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 _balance) {\n        return balances[_owner];\n    }\n\n\n    /*\n      Allow to spend\n    */\n\n    function approve(address _spender, uint256 _value) returns (bool _success) {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 _remaining) {\n        return allowances[_owner][_spender];\n    }\n\n\n    /*\n      Transfer\n    */\n\n    function transfer(address _to, uint256 _value) returns (bool _success) {\n        bytes memory emptyMetadata;\n        __transfer(msg.sender, _to, _value, emptyMetadata);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success)\n    {\n        __transfer(msg.sender, _to, _value, _metadata);\n        Transfer(msg.sender, _to, _value, _metadata);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success) {\n        if (allowances[_from][msg.sender] < _value) throw;\n\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n        bytes memory emptyMetadata;\n        __transfer(_from, _to, _value, emptyMetadata);\n        return true;\n    }\n\n    function __transfer(address _from, address _to, uint256 _value, bytes _metadata) internal\n    {\n        if (_from == _to) throw;\n        if (_value == 0) throw;\n        if (balanceOf(_from) < _value) throw;\n\n        balances[_from] = safeSub(balanceOf(_from), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n\n        if (isContract(_to)) {\n            ERC223ContractInterface receiverContract = ERC223ContractInterface(_to);\n            receiverContract.erc223Fallback(_from, _value, _metadata);\n        }\n\n        Transfer(_from, _to, _value);\n    }\n\n\n    /*\n      Helpers\n    */\n\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) internal returns (bool _isContract) {\n        _addr = _addr; // to avoid warnings during compilation\n\n        uint256 length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n}\n\n\n\ncontract ABCToken is ERC223Token {\n    // Constructor\n    function ABCToken(\n            string _name,\n            string _symbol,\n            uint8 _decimals,\n            uint256 _totalSupply,\n            address _initialTokensHolder) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        balances[_initialTokensHolder] = _totalSupply;\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b604051610b34380380610b3483398101604090815281516020830151918301516060840151608085015192850194939093019290915b84516100559060029060208801906100a4565b5083516100699060039060208701906100a4565b506004805460ff191660ff85161790556005829055600160a060020a03811660009081526020819052604090208290555b5050505050610144565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e557805160ff1916838001178555610112565b82800160010185558215610112579182015b828111156101125782518255916020019190600101906100f7565b5b5061011f929150610123565b5090565b61014191905b8082111561011f5760008155600101610129565b5090565b90565b6109e1806101536000396000f300606060405236156100ac5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ae578063095ea7b31461013e57806318160ddd1461017157806323b872dd14610193578063313ce567146101cc57806333a581d2146101f257806370a082311461021457806395d89b4114610242578063a9059cbb146102d2578063be45fd6214610305578063dd62ed3e1461037c575bfe5b34156100b657fe5b6100be6103b0565b604080516020808252835181830152835191928392908301918501908083838215610104575b80518252602083111561010457601f1990920191602091820191016100e4565b505050905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014657fe5b61015d600160a060020a0360043516602435610446565b604080519115158252519081900360200190f35b341561017957fe5b6101816104b1565b60408051918252519081900360200190f35b341561019b57fe5b61015d600160a060020a03600435811690602435166044356104b8565b604080519115158252519081900360200190f35b34156101d457fe5b6101dc610568565b6040805160ff9092168252519081900360200190f35b34156101fa57fe5b610181610572565b60408051918252519081900360200190f35b341561021c57fe5b610181600160a060020a0360043516610578565b60408051918252519081900360200190f35b341561024a57fe5b6100be610597565b604080516020808252835181830152835191928392908301918501908083838215610104575b80518252602083111561010457601f1990920191602091820191016100e4565b505050905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102da57fe5b61015d600160a060020a0360043516602435610630565b604080519115158252519081900360200190f35b341561030d57fe5b604080516020600460443581810135601f810184900484028501840190955284845261015d948235600160a060020a031694602480359560649492939190920191819084018382808284375094965061065295505050505050565b604080519115158252519081900360200190f35b341561038457fe5b610181600160a060020a036004358116906024351661072d565b60408051918252519081900360200190f35b6103b8610991565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b505050505090505b90565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6005545b90565b60006104c2610991565b600160a060020a0380861660009081526001602090815260408083203390941683529290522054839010156104f75760006000fd5b600160a060020a0380861660009081526001602090815260408083203390941683529290522054610528908461075a565b600160a060020a038087166000908152600160209081526040808320339094168352929052205561055b85858584610775565b600191505b509392505050565b60045460ff165b90565b60001981565b600160a060020a0381166000908152602081905260409020545b919050565b61059f610991565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b505050505090505b90565b600061063a610991565b61064633858584610775565b600191505b5092915050565b600061066033858585610775565b83600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16858560405180838152602001806020018281038252838181518152602001915080519060200190808383600083146106e8575b8051825260208311156106e857601f1990920191602091820191016106c8565b505050905090810190601f1680156107145780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35060015b9392505050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b60008183101561076a5760006000fd5b508082035b92915050565b600083600160a060020a031685600160a060020a031614156107975760006000fd5b8215156107a45760006000fd5b826107ae86610578565b10156107ba5760006000fd5b6107cc6107c686610578565b8461075a565b600160a060020a0386166000908152602081905260409020556107f76107f185610578565b84610963565b600160a060020a03851660009081526020819052604090205561081984610982565b1561091057506040517fa7b4b60f000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483019081526024830185905260606044840190815284516064850152845187949385169363a7b4b60f938a938993899360840190602085019080838382156108b5575b8051825260208311156108b557601f199092019160209182019101610895565b505050905090810190601f1680156108e15780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156108fe57fe5b6102c65a03f1151561090c57fe5b5050505b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5050505050565b600081600019038311156109775760006000fd5b508181015b92915050565b6000813b908111905b50919050565b60408051602081019091526000815290565b604080516020810190915260008152905600a165627a7a7230582077a28d286f2aa576701f47aaebe1763ff750e315212c7dc56e626c5d81a306cc002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000adb53acfa41aee120000000000000000000000000000008e090955f93376bdd758464f80920f8567d0152a0000000000000000000000000000000000000000000000000000000000000008416c70686162697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000adb53acfa41aee120000000000000000000000000000008e090955f93376bdd758464f80920f8567d0152a0000000000000000000000000000000000000000000000000000000000000008416c70686162697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142430000000000000000000000000000000000000000000000000000000000"
}