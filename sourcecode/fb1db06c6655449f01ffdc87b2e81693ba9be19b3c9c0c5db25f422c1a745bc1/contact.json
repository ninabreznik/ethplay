{
  "address": "0x8fd1a3ea61b1456be58e38b8c1bea49acb84b7fd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "X2Profit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.25;\n\n/**\n *  X2Profit contract\n *\n *  Improved, no bugs and backdoors! Your investments are safe!\n *\n *  LOW RISK! You can take your deposit back ANY TIME!\n *     - Send 0.00000112 ETH to contract address\n *\n *  NO DEPOSIT FEES! All the money go to contract!\n *\n *  HIGH RETURN! Get 0.27% - 0.4% per hour (6.5% - 9.6% per day)\n *\n *  Contract balance          daily percent\n *       < 1000                   ~6.5%\n *    1000 - 2500                 ~7.7%\n *    2500 - 5000                 ~9.1%\n *      >= 5000                   ~9.6%\n *\n *  LOW WITHDRAWAL FEES! Advertising 4%-10%, charity 1%\n *\n *  LONG LIFE! Maximum return is bounded by x2. Anyone has right to be rich!\n *\n *  HOLD LONG AND GET BONUS!\n *  1. If you hold long enough you can take more than x2 (one time only)\n *  2. The more you hold the less you pay for adv:\n *     < 1 day            10%\n *     1 - 3 days          9%\n *     3 - 7 days          8%\n *     1 - 2 weeks         7%\n *     2 - 3 weeks         6%\n *     3 - 4 weeks         5%\n *       > 4 weeks         4%\n *  Because large balance is good advertisement on itself!\n *\n *  INSTRUCTIONS:\n *\n *  TO INVEST: send ETH to contract address\n *  TO WITHDRAW INTEREST: send 0 ETH to contract address\n *  TO REINVEST AND WITHDRAW INTEREST: send ETH to contract address\n *  TO GET BACK YOUR DEPOSIT: send 0.00000112 ETH to contract address\n *\n */\ncontract X2Profit {\n    //use library for safe math operations\n    using SafeMath for uint;\n\n    // array containing information about beneficiaries\n    mapping(address => uint) public userDeposit;\n    //array containing information about the time of payment\n    mapping(address => uint) public userTime;\n    //array containing information on interest paid\n    mapping(address => uint) public percentWithdrawn;\n    //array containing information on interest paid (without tax)\n    mapping(address => uint) public percentWithdrawnPure;\n\n    //fund fo transfer percent for advertising\n    address private constant ADDRESS_ADV_FUND = 0xE6AD1c76ec266348CB8E8aD2B1C95F372ad66c0e;\n    //wallet for a charitable foundation\n    address private constant ADDRESS_CHARITY_FUND = 0xC43Cf609440b53E25cdFfB4422EFdED78475C76B;\n    //time through which you can take dividends\n    uint private constant TIME_QUANT = 1 hours;\n\n    //percent for a charitable foundation\n    uint private constant PERCENT_CHARITY_FUND = 1000;\n    //start percent 0.27% per hour\n    uint private constant PERCENT_START = 270;\n    uint private constant PERCENT_LOW = 320;\n    uint private constant PERCENT_MIDDLE = 380;\n    uint private constant PERCENT_HIGH = 400;\n\n    //Adv tax for holders (10% for impatient, 4% for strong holders)\n    uint private constant PERCENT_ADV_VERY_HIGH = 10000;\n    uint private constant PERCENT_ADV_HIGH = 9000;\n    uint private constant PERCENT_ADV_ABOVE_MIDDLE = 8000;\n    uint private constant PERCENT_ADV_MIDDLE = 7000;\n    uint private constant PERCENT_ADV_BELOW_MIDDLE = 6000;\n    uint private constant PERCENT_ADV_LOW = 5000;\n    uint private constant PERCENT_ADV_LOWEST = 4000;\n\n    //All percent should be divided by this\n    uint private constant PERCENT_DIVIDER = 100000;\n\n    //interest rate increase steps\n    uint private constant STEP_LOW = 1000 ether;\n    uint private constant STEP_MIDDLE = 2500 ether;\n    uint private constant STEP_HIGH = 5000 ether;\n    \n    uint public countOfInvestors = 0;\n    uint public countOfCharity = 0;\n\n    modifier isIssetUser() {\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\n        _;\n    }\n\n    modifier timePayment() {\n        require(now >= userTime[msg.sender].add(TIME_QUANT), \"Too fast payout request\");\n        _;\n    }\n\n    //return of interest on the deposit\n    function collectPercent() isIssetUser timePayment internal {\n\n        //if the user received 200% or more of his contribution, delete the user\n        if ((userDeposit[msg.sender].mul(2)) <= percentWithdrawnPure[msg.sender]) {\n            _delete(msg.sender); //User has withdrawn more than x2\n        } else {\n            uint payout = payoutAmount(msg.sender);\n            _payout(msg.sender, payout);\n        }\n    }\n\n    //calculation of the current interest rate on the deposit\n    function percentRate() public view returns(uint) {\n        //get contract balance\n        uint balance = address(this).balance;\n\n        //calculate percent rate\n        if (balance < STEP_LOW) {\n            return (PERCENT_START);\n        }\n        if (balance < STEP_MIDDLE) {\n            return (PERCENT_LOW);\n        }\n        if (balance < STEP_HIGH) {\n            return (PERCENT_MIDDLE);\n        }\n\n        return (PERCENT_HIGH);\n    }\n\n    //calculate the amount available for withdrawal on deposit\n    function payoutAmount(address addr) public view returns(uint) {\n        uint percent = percentRate();\n        uint rate = userDeposit[addr].mul(percent).div(PERCENT_DIVIDER);\n        uint interestRate = now.sub(userTime[addr]).div(TIME_QUANT);\n        uint withdrawalAmount = rate.mul(interestRate);\n        return (withdrawalAmount);\n    }\n\n    function holderAdvPercent(address addr) public view returns(uint) {\n        uint timeHeld = (now - userTime[addr]);\n        if(timeHeld < 1 days)\n            return PERCENT_ADV_VERY_HIGH;\n        if(timeHeld < 3 days)\n            return PERCENT_ADV_HIGH;\n        if(timeHeld < 1 weeks)\n            return PERCENT_ADV_ABOVE_MIDDLE;\n        if(timeHeld < 2 weeks)\n            return PERCENT_ADV_MIDDLE;\n        if(timeHeld < 3 weeks)\n            return PERCENT_ADV_BELOW_MIDDLE;\n        if(timeHeld < 4 weeks)\n            return PERCENT_ADV_LOW;\n        return PERCENT_ADV_LOWEST;\n    }\n\n    //make a deposit\n    function makeDeposit() private {\n        if (msg.value > 0) {\n            if (userDeposit[msg.sender] == 0) {\n                countOfInvestors += 1;\n            }\n            if (userDeposit[msg.sender] > 0 && now >= userTime[msg.sender].add(TIME_QUANT)) {\n                collectPercent();\n            }\n            userDeposit[msg.sender] += msg.value;\n            userTime[msg.sender] = now;\n        } else {\n            collectPercent();\n        }\n    }\n\n    //return of deposit balance\n    function returnDeposit() isIssetUser private {\n        //percentWithdrawn already include all taxes for charity and ads\n        //So we need pay taxes only for the rest of deposit\n        uint withdrawalAmount = userDeposit[msg.sender]\n            .sub(percentWithdrawn[msg.sender]);\n\n        //Pay the rest of deposit and take taxes\n        _payout(msg.sender, withdrawalAmount);\n\n        //delete user record\n        _delete(msg.sender);\n    }\n\n    function() external payable {\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\n        if (msg.value == 0.00000112 ether) {\n            returnDeposit();\n        } else {\n            makeDeposit();\n        }\n    }\n\n    //Pays out, takes taxes according to holding time\n    function _payout(address addr, uint amount) private {\n        //Remember this payout\n        percentWithdrawn[addr] += amount;\n\n        //Get current holder adv percent\n        uint advPct = holderAdvPercent(addr);\n        //Calculate pure payout that user receives\n        uint interestPure = amount.mul(PERCENT_DIVIDER - PERCENT_CHARITY_FUND - advPct).div(PERCENT_DIVIDER);\n        percentWithdrawnPure[addr] += interestPure;\n        userTime[addr] = now;\n\n        //calculate money to charity\n        uint charityMoney = amount.mul(PERCENT_CHARITY_FUND).div(PERCENT_DIVIDER);\n        countOfCharity += charityMoney;\n\n        //calculate money for advertising\n        uint advTax = amount.sub(interestPure).sub(charityMoney);\n\n        //send money\n        ADDRESS_ADV_FUND.transfer(advTax);\n        ADDRESS_CHARITY_FUND.transfer(charityMoney);\n        addr.transfer(interestPure);\n    }\n\n    //Clears user from registry\n    function _delete(address addr) private {\n        userDeposit[addr] = 0;\n        userTime[addr] = 0;\n        percentWithdrawn[addr] = 0;\n        percentWithdrawnPure[addr] = 0;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdrawnPure\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"holderAdvPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "60806040526000600455600060055534801561001a57600080fd5b506108d98061002a6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308dcaa4781146100bd57806348e624eb146100f05780638090114f146101115780638271bd9914610126578063a36ce52d14610147578063aa66bfb91461015c578063c4b47ec81461017d578063d1260edd1461019e578063f3f7d633146101bf575b34650104c533c00014156100b3576100ae6101d4565b6100bb565b6100bb610293565b005b3480156100c957600080fd5b506100de600160a060020a0360043516610336565b60408051918252519081900360200190f35b3480156100fc57600080fd5b506100de600160a060020a0360043516610348565b34801561011d57600080fd5b506100de6103ed565b34801561013257600080fd5b506100de600160a060020a036004351661044d565b34801561015357600080fd5b506100de6104ef565b34801561016857600080fd5b506100de600160a060020a03600435166104f5565b34801561018957600080fd5b506100de600160a060020a0360043516610507565b3480156101aa57600080fd5b506100de600160a060020a0360043516610519565b3480156101cb57600080fd5b506100de61052b565b33600090815260208190526040812054811061025157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4465706f736974206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b33600090815260026020908152604080832054918390529091205461027b9163ffffffff61053116565b90506102873382610543565b610290336106c2565b50565b600034111561032c573360009081526020819052604090205415156102bc576004805460010190555b336000908152602081905260408120541180156102fa5750336000908152600160205260409020546102f690610e1063ffffffff6106fb16565b4210155b1561030757610307610711565b3360009081526020818152604080832080543401905560019091529020429055610334565b610334610711565b565b60036020526000908152604090205481565b600160a060020a0381166000908152600160205260408120544203620151808110156103785761271091506103e7565b6203f48081101561038d5761232891506103e7565b62093a808110156103a257611f4091506103e7565b621275008110156103b757611b5891506103e7565b621baf808110156103cc5761177091506103e7565b6224ea008110156103e15761138891506103e7565b610fa091505b50919050565b60003031683635c9adc5dea0000081101561040c5761010e9150610449565b68878678326eac900000811015610427576101409150610449565b69010f0cf064dd592000008110156104435761017c9150610449565b61019091505b5090565b600080600080600061045d6103ed565b600160a060020a03871660009081526020819052604090205490945061049e90620186a090610492908763ffffffff61087216565b9063ffffffff61089616565b600160a060020a0387166000908152600160205260409020549093506104d390610e109061049290429063ffffffff61053116565b91506104e5838363ffffffff61087216565b9695505050505050565b60055481565b60016020526000908152604090205481565b60026020526000908152604090205481565b60006020819052908152604090205481565b60045481565b60008282111561053d57fe5b50900390565b600160a060020a038216600090815260026020526040812080548301905580808061056d86610348565b935061058c620186a061049287620182b888900363ffffffff61087216565b600160a060020a03871660009081526003602090815260408083208054850190556001909152902042905592506105d2620186a0610492876103e863ffffffff61087216565b600580548201905591506105fc826105f0878663ffffffff61053116565b9063ffffffff61053116565b60405190915073e6ad1c76ec266348cb8e8ad2b1c95f372ad66c0e9082156108fc029083906000818181858888f19350505050158015610640573d6000803e3d6000fd5b5060405173c43cf609440b53e25cdffb4422efded78475c76b9083156108fc029084906000818181858888f19350505050158015610682573d6000803e3d6000fd5b50604051600160a060020a0387169084156108fc029085906000818181858888f193505050501580156106b9573d6000803e3d6000fd5b50505050505050565b600160a060020a031660009081526020818152604080832083905560018252808320839055600282528083208390556003909152812055565b60008282018381101561070a57fe5b9392505050565b33600090815260208190526040812054811061078e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4465706f736974206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b336000908152600160205260409020546107b090610e1063ffffffff6106fb16565b42101561081e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6f2066617374207061796f75742072657175657374000000000000000000604482015290519081900360640190fd5b33600090815260036020908152604080832054918390529091205461084a90600263ffffffff61087216565b1161085d57610858336106c2565b610290565b6108663361044d565b90506102903382610543565b600082820283158061088e575082848281151561088b57fe5b04145b151561070a57fe5b60008082848115156108a457fe5b049493505050505600a165627a7a72305820f9eed2c318af340639491b5adc6ea69744ce2bf19c0559ce32feeb8e847d83d00029"
}