{
  "address": "0xceec7aaa57e3a77c73a9954b9b7d5b32ab688318",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bloom: Attestation Logic",
  "contractName": "AttestationLogic",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity 0.4.24;\n\n\n\n/**\n * @dev Pulled from OpenZeppelin: https://git.io/vbaRf\n *   When this is in a public release we will switch to not vendoring this file\n *\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Extracting these values isn't possible without assembly\n    // solhint-disable no-inline-assembly\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n}\n\n\n/**\n * @title SigningLogic is contract implementing signature recovery from typed data signatures\n * @notice Recovers signatures based on the SignTypedData implementation provided by ethSigUtil\n * @dev This contract is inherited by other contracts.\n */\ncontract SigningLogic {\n\n  // Signatures contain a nonce to make them unique. usedSignatures tracks which signatures\n  //  have been used so they can't be replayed\n  mapping (bytes32 => bool) public usedSignatures;\n\n  function burnSignatureDigest(bytes32 _signatureDigest, address _sender) internal {\n    bytes32 _txDataHash = keccak256(abi.encode(_signatureDigest, _sender));\n    require(!usedSignatures[_txDataHash], \"Signature not unique\");\n    usedSignatures[_txDataHash] = true;\n  }\n\n  bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n  );\n\n  bytes32 constant ATTESTATION_REQUEST_TYPEHASH = keccak256(\n    \"AttestationRequest(bytes32 dataHash,bytes32 nonce)\"\n  );\n\n  bytes32 constant ADD_ADDRESS_TYPEHASH = keccak256(\n    \"AddAddress(address addressToAdd,bytes32 nonce)\"\n  );\n\n  bytes32 constant REMOVE_ADDRESS_TYPEHASH = keccak256(\n    \"RemoveAddress(address addressToRemove,bytes32 nonce)\"\n  );\n\n  bytes32 constant PAY_TOKENS_TYPEHASH = keccak256(\n    \"PayTokens(address sender,address receiver,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 constant RELEASE_TOKENS_FOR_TYPEHASH = keccak256(\n    \"ReleaseTokensFor(address sender,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 constant ATTEST_FOR_TYPEHASH = keccak256(\n    \"AttestFor(address subject,address requester,uint256 reward,bytes32 dataHash,bytes32 requestNonce)\"\n  );\n\n  bytes32 constant CONTEST_FOR_TYPEHASH = keccak256(\n    \"ContestFor(address requester,uint256 reward,bytes32 requestNonce)\"\n  );\n\n  bytes32 constant REVOKE_ATTESTATION_FOR_TYPEHASH = keccak256(\n    \"RevokeAttestationFor(bytes32 link,bytes32 nonce)\"\n  );\n\n  bytes32 constant VOTE_FOR_TYPEHASH = keccak256(\n    \"VoteFor(uint16 choice,address voter,bytes32 nonce,address poll)\"\n  );\n\n  bytes32 constant LOCKUP_TOKENS_FOR_TYPEHASH = keccak256(\n    \"LockupTokensFor(address sender,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 DOMAIN_SEPARATOR;\n\n  constructor (string name, string version, uint256 chainId) public {\n    DOMAIN_SEPARATOR = hash(EIP712Domain({\n      name: name,\n      version: version,\n      chainId: chainId,\n      verifyingContract: this\n    }));\n  }\n\n  struct EIP712Domain {\n      string  name;\n      string  version;\n      uint256 chainId;\n      address verifyingContract;\n  }\n\n  function hash(EIP712Domain eip712Domain) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      keccak256(bytes(eip712Domain.name)),\n      keccak256(bytes(eip712Domain.version)),\n      eip712Domain.chainId,\n      eip712Domain.verifyingContract\n    ));\n  }\n\n  struct AttestationRequest {\n      bytes32 dataHash;\n      bytes32 nonce;\n  }\n\n  function hash(AttestationRequest request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ATTESTATION_REQUEST_TYPEHASH,\n      request.dataHash,\n      request.nonce\n    ));\n  }\n\n  struct AddAddress {\n      address addressToAdd;\n      bytes32 nonce;\n  }\n\n  function hash(AddAddress request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ADD_ADDRESS_TYPEHASH,\n      request.addressToAdd,\n      request.nonce\n    ));\n  }\n\n  struct RemoveAddress {\n      address addressToRemove;\n      bytes32 nonce;\n  }\n\n  function hash(RemoveAddress request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      REMOVE_ADDRESS_TYPEHASH,\n      request.addressToRemove,\n      request.nonce\n    ));\n  }\n\n  struct PayTokens {\n      address sender;\n      address receiver;\n      uint256 amount;\n      bytes32 nonce;\n  }\n\n  function hash(PayTokens request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      PAY_TOKENS_TYPEHASH,\n      request.sender,\n      request.receiver,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  struct AttestFor {\n      address subject;\n      address requester;\n      uint256 reward;\n      bytes32 dataHash;\n      bytes32 requestNonce;\n  }\n\n  function hash(AttestFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ATTEST_FOR_TYPEHASH,\n      request.subject,\n      request.requester,\n      request.reward,\n      request.dataHash,\n      request.requestNonce\n    ));\n  }\n\n  struct ContestFor {\n      address requester;\n      uint256 reward;\n      bytes32 requestNonce;\n  }\n\n  function hash(ContestFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      CONTEST_FOR_TYPEHASH,\n      request.requester,\n      request.reward,\n      request.requestNonce\n    ));\n  }\n\n  struct RevokeAttestationFor {\n      bytes32 link;\n      bytes32 nonce;\n  }\n\n  function hash(RevokeAttestationFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      REVOKE_ATTESTATION_FOR_TYPEHASH,\n      request.link,\n      request.nonce\n    ));\n  }\n\n  struct VoteFor {\n      uint16 choice;\n      address voter;\n      bytes32 nonce;\n      address poll;\n  }\n\n  function hash(VoteFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      VOTE_FOR_TYPEHASH,\n      request.choice,\n      request.voter,\n      request.nonce,\n      request.poll\n    ));\n  }\n\n  struct LockupTokensFor {\n    address sender;\n    uint256 amount;\n    bytes32 nonce;\n  }\n\n  function hash(LockupTokensFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      LOCKUP_TOKENS_FOR_TYPEHASH,\n      request.sender,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  struct ReleaseTokensFor {\n    address sender;\n    uint256 amount;\n    bytes32 nonce;\n  }\n\n  function hash(ReleaseTokensFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      RELEASE_TOKENS_FOR_TYPEHASH,\n      request.sender,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  function generateRequestAttestationSchemaHash(\n    bytes32 _dataHash,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AttestationRequest(\n          _dataHash,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateAddAddressSchemaHash(\n    address _addressToAdd,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AddAddress(\n          _addressToAdd,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateRemoveAddressSchemaHash(\n    address _addressToRemove,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(RemoveAddress(\n          _addressToRemove,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generatePayTokensSchemaHash(\n    address _sender,\n    address _receiver,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(PayTokens(\n          _sender,\n          _receiver,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateAttestForDelegationSchemaHash(\n    address _subject,\n    address _requester,\n    uint256 _reward,\n    bytes32 _dataHash,\n    bytes32 _requestNonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AttestFor(\n          _subject,\n          _requester,\n          _reward,\n          _dataHash,\n          _requestNonce\n        ))\n      )\n      );\n  }\n\n  function generateContestForDelegationSchemaHash(\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(ContestFor(\n          _requester,\n          _reward,\n          _requestNonce\n        ))\n      )\n      );\n  }\n\n  function generateRevokeAttestationForDelegationSchemaHash(\n    bytes32 _link,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(RevokeAttestationFor(\n          _link,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateVoteForDelegationSchemaHash(\n    uint16 _choice,\n    address _voter,\n    bytes32 _nonce,\n    address _poll\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(VoteFor(\n          _choice,\n          _voter,\n          _nonce,\n          _poll\n        ))\n      )\n      );\n  }\n\n  function generateLockupTokensDelegationSchemaHash(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(LockupTokensFor(\n          _sender,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateReleaseTokensDelegationSchemaHash(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(ReleaseTokensFor(\n          _sender,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function recoverSigner(bytes32 _hash, bytes _sig) internal pure returns (address) {\n    address signer = ECRecovery.recover(_hash, _sig);\n    require(signer != address(0));\n\n    return signer;\n  }\n}\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @notice TokenEscrowMarketplace is an ERC20 payment channel that enables users to send BLT by exchanging signatures off-chain\n *  Users approve the contract address to transfer BLT on their behalf using the standard ERC20.approve function\n *  After approval, either the user or the contract admin initiates the transfer of BLT into the contract\n *  Once in the contract, users can send payments via a signed message to another user. \n *  The signature transfers BLT from lockup to the recipient's balance\n *  Users can withdraw funds at any time. Or the admin can release them on the user's behalf\n *  \n *  BLT is stored in the contract by address\n *  \n *  Only the AttestationLogic contract is authorized to release funds once a jobs is complete\n */\ncontract TokenEscrowMarketplace is SigningLogic {\n  using SafeERC20 for ERC20;\n  using SafeMath for uint256;\n\n  address public attestationLogic;\n\n  mapping(address => uint256) public tokenEscrow;\n  ERC20 public token;\n\n  event TokenMarketplaceWithdrawal(address escrowPayer, uint256 amount);\n  event TokenMarketplaceEscrowPayment(address escrowPayer, address escrowPayee, uint256 amount);\n  event TokenMarketplaceDeposit(address escrowPayer, uint256 amount);\n\n  /**\n   * @notice The TokenEscrowMarketplace constructor initializes the interfaces to the other contracts\n   * @dev Some actions are restricted to be performed by the attestationLogic contract.\n   *  Signing logic is upgradeable in case the signTypedData spec changes\n   * @param _token Address of BLT\n   * @param _attestationLogic Address of current attestation logic contract\n   */\n  constructor(\n    ERC20 _token,\n    address _attestationLogic\n    ) public SigningLogic(\"Bloom Token Escrow Marketplace\", \"2\", 1) {\n    token = _token;\n    attestationLogic = _attestationLogic;\n  }\n\n  modifier onlyAttestationLogic() {\n    require(msg.sender == attestationLogic);\n    _;\n  }\n\n  /**\n   * @notice Lockup tokens for set time period on behalf of user. Must be preceeded by approve\n   * @dev Authorized by a signTypedData signature by sender\n   *  Sigs can only be used once. They contain a unique nonce\n   *  So an action can be repeated, with a different signature\n   * @param _sender User locking up their tokens\n   * @param _amount Tokens to lock up\n   * @param _nonce Unique Id so signatures can't be replayed\n   * @param _delegationSig Signed hash of these input parameters so an admin can submit this on behalf of a user\n   */\n  function moveTokensToEscrowLockupFor(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _delegationSig\n    ) external {\n      validateLockupTokensSig(\n        _sender,\n        _amount,\n        _nonce,\n        _delegationSig\n      );\n      moveTokensToEscrowLockupForUser(_sender, _amount);\n  }\n\n  /**\n   * @notice Verify lockup signature is valid\n   * @param _sender User locking up their tokens\n   * @param _amount Tokens to lock up\n   * @param _nonce Unique Id so signatures can't be replayed\n   * @param _delegationSig Signed hash of these input parameters so an admin can submit this on behalf of a user\n   */\n  function validateLockupTokensSig(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _delegationSig\n  ) private {\n    bytes32 _signatureDigest = generateLockupTokensDelegationSchemaHash(_sender, _amount, _nonce);\n    require(_sender == recoverSigner(_signatureDigest, _delegationSig), 'Invalid LockupTokens Signature');\n    burnSignatureDigest(_signatureDigest, _sender);\n  }\n\n  /**\n   * @notice Lockup tokens by user. Must be preceeded by approve\n   * @param _amount Tokens to lock up\n   */\n  function moveTokensToEscrowLockup(uint256 _amount) external {\n    moveTokensToEscrowLockupForUser(msg.sender, _amount);\n  }\n\n  /**\n   * @notice Lockup tokens for set time. Must be preceeded by approve\n   * @dev Private function called by appropriate public function\n   * @param _sender User locking up their tokens\n   * @param _amount Tokens to lock up\n   */\n  function moveTokensToEscrowLockupForUser(\n    address _sender,\n    uint256 _amount\n    ) private {\n    token.safeTransferFrom(_sender, this, _amount);\n    addToEscrow(_sender, _amount);\n  }\n\n  /**\n   * @notice Withdraw tokens from escrow back to requester\n   * @dev Authorized by a signTypedData signature by sender\n   *  Sigs can only be used once. They contain a unique nonce\n   *  So an action can be repeated, with a different signature\n   * @param _sender User withdrawing their tokens\n   * @param _amount Tokens to withdraw\n   * @param _nonce Unique Id so signatures can't be replayed\n   * @param _delegationSig Signed hash of these input parameters so an admin can submit this on behalf of a user\n   */\n  function releaseTokensFromEscrowFor(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _delegationSig\n    ) external {\n      validateReleaseTokensSig(\n        _sender,\n        _amount,\n        _nonce,\n        _delegationSig\n      );\n      releaseTokensFromEscrowForUser(_sender, _amount);\n  }\n\n  /**\n   * @notice Verify lockup signature is valid\n   * @param _sender User withdrawing their tokens\n   * @param _amount Tokens to lock up\n   * @param _nonce Unique Id so signatures can't be replayed\n   * @param _delegationSig Signed hash of these input parameters so an admin can submit this on behalf of a user\n   */\n  function validateReleaseTokensSig(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _delegationSig\n\n  ) private {\n    bytes32 _signatureDigest = generateReleaseTokensDelegationSchemaHash(_sender, _amount, _nonce);\n    require(_sender == recoverSigner(_signatureDigest, _delegationSig), 'Invalid ReleaseTokens Signature');\n    burnSignatureDigest(_signatureDigest, _sender);\n  }\n\n  /**\n   * @notice Release tokens back to payer's available balance if lockup expires\n   * @dev Token balance retreived by accountId. Can be different address from the one that deposited tokens\n   * @param _amount Tokens to retreive from escrow\n   */\n  function releaseTokensFromEscrow(uint256 _amount) external {\n    releaseTokensFromEscrowForUser(msg.sender, _amount);\n  }\n\n  /**\n   * @notice Release tokens back to payer's available balance\n   * @param _payer User retreiving tokens from escrow\n   * @param _amount Tokens to retreive from escrow\n   */\n  function releaseTokensFromEscrowForUser(\n    address _payer,\n    uint256 _amount\n    ) private {\n      subFromEscrow(_payer, _amount);\n      token.safeTransfer(_payer, _amount);\n      emit TokenMarketplaceWithdrawal(_payer, _amount);\n  }\n\n  /**\n   * @notice Pay from escrow of payer to available balance of receiever\n   * @dev Private function to modify balances on payment\n   * @param _payer User with tokens in escrow\n   * @param _receiver User receiving tokens\n   * @param _amount Tokens being sent\n   */\n  function payTokensFromEscrow(address _payer, address _receiver, uint256 _amount) private {\n    subFromEscrow(_payer, _amount);\n    token.safeTransfer(_receiver, _amount);\n  }\n\n  /**\n   * @notice Pay tokens to receiver from payer's escrow given a valid signature\n   * @dev Execution restricted to attestationLogic contract\n   * @param _payer User paying tokens from escrow\n   * @param _receiver User receiving payment\n   * @param _amount Tokens being paid\n   * @param _nonce Unique Id for sig to make it one-time-use\n   * @param _paymentSig Signed parameters by payer authorizing payment\n   */\n  function requestTokenPayment(\n    address _payer,\n    address _receiver,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _paymentSig\n    ) external onlyAttestationLogic {\n\n    validatePaymentSig(\n      _payer,\n      _receiver,\n      _amount,\n      _nonce,\n      _paymentSig\n    );\n    payTokensFromEscrow(_payer, _receiver, _amount);\n    emit TokenMarketplaceEscrowPayment(_payer, _receiver, _amount);\n  }\n\n  /**\n   * @notice Verify payment signature is valid\n   * @param _payer User paying tokens from escrow\n   * @param _receiver User receiving payment\n   * @param _amount Tokens being paid\n   * @param _nonce Unique Id for sig to make it one-time-use\n   * @param _paymentSig Signed parameters by payer authorizing payment\n   */\n  function validatePaymentSig(\n    address _payer,\n    address _receiver,\n    uint256 _amount,\n    bytes32 _nonce,\n    bytes _paymentSig\n\n  ) private {\n    bytes32 _signatureDigest = generatePayTokensSchemaHash(_payer, _receiver, _amount, _nonce);\n    require(_payer == recoverSigner(_signatureDigest, _paymentSig), 'Invalid Payment Signature');\n    burnSignatureDigest(_signatureDigest, _payer);\n  }\n\n  /**\n   * @notice Helper function to add to escrow balance \n   * @param _from Account address for escrow mapping\n   * @param _amount Tokens to lock up\n   */\n  function addToEscrow(address _from, uint256 _amount) private {\n    tokenEscrow[_from] = tokenEscrow[_from].add(_amount);\n    emit TokenMarketplaceDeposit(_from, _amount);\n  }\n\n  /**\n   * Helper function to reduce escrow token balance of user\n   */\n  function subFromEscrow(address _from, uint256 _amount) private {\n    require(tokenEscrow[_from] >= _amount);\n    tokenEscrow[_from] = tokenEscrow[_from].sub(_amount);\n  }\n}\n\n/**\n * @title Initializable\n * @dev The Initializable contract has an initializer address, and provides basic authorization control\n * only while in initialization mode. Once changed to production mode the inializer loses authority\n */\ncontract Initializable {\n  address public initializer;\n  bool public initializing;\n\n  event InitializationEnded();\n\n  /**\n   * @dev The Initializable constructor sets the initializer to the provided address\n   */\n  constructor(address _initializer) public {\n    initializer = _initializer;\n    initializing = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyDuringInitialization() {\n    require(msg.sender == initializer, 'Method can only be called by initializer');\n    require(initializing, 'Method can only be called during initialization');\n    _;\n  }\n\n  /**\n   * @dev Allows the initializer to end the initialization period\n   */\n  function endInitialization() public onlyDuringInitialization {\n    initializing = false;\n    emit InitializationEnded();\n  }\n\n}\n\n\n/**\n * @title AttestationLogic allows users to submit attestations given valid signatures\n * @notice Attestation Logic Logic provides a public interface for Bloom and\n *  users to submit attestations.\n */\ncontract AttestationLogic is Initializable, SigningLogic{\n    TokenEscrowMarketplace public tokenEscrowMarketplace;\n\n  /**\n   * @notice AttestationLogic constructor sets the implementation address of all related contracts\n   * @param _tokenEscrowMarketplace Address of marketplace holding tokens which are\n   *  released to attesters upon completion of a job\n   */\n  constructor(\n    address _initializer,\n    TokenEscrowMarketplace _tokenEscrowMarketplace\n    ) Initializable(_initializer) SigningLogic(\"Bloom Attestation Logic\", \"2\", 1) public {\n    tokenEscrowMarketplace = _tokenEscrowMarketplace;\n  }\n\n  event TraitAttested(\n    address subject,\n    address attester,\n    address requester,\n    bytes32 dataHash\n    );\n  event AttestationRejected(address indexed attester, address indexed requester);\n  event AttestationRevoked(bytes32 link, address attester);\n  event TokenEscrowMarketplaceChanged(address oldTokenEscrowMarketplace, address newTokenEscrowMarketplace);\n\n  /**\n   * @notice Function for attester to submit attestation from their own account) \n   * @dev Wrapper for attestForUser using msg.sender\n   * @param _subject User this attestation is about\n   * @param _requester User requesting and paying for this attestation in BLT\n   * @param _reward Payment to attester from requester in BLT\n   * @param _requesterSig Signature authorizing payment from requester to attester\n   * @param _dataHash Hash of data being attested and nonce\n   * @param _requestNonce Nonce in sig signed by subject and requester so they can't be replayed\n   * @param _subjectSig Signed authorization from subject with attestation agreement\n   */\n  function attest(\n    address _subject,\n    address _requester,\n    uint256 _reward,\n    bytes _requesterSig,\n    bytes32 _dataHash,\n    bytes32 _requestNonce,\n    bytes _subjectSig // Sig of subject with requester, attester, dataHash, requestNonce\n  ) external {\n    attestForUser(\n      _subject,\n      msg.sender,\n      _requester,\n      _reward,\n      _requesterSig,\n      _dataHash,\n      _requestNonce,\n      _subjectSig\n    );\n  }\n\n  /**\n   * @notice Submit attestation for a user in order to pay the gas costs\n   * @dev Recover signer of delegation message. If attester matches delegation signature, add the attestation\n   * @param _subject user this attestation is about\n   * @param _attester user completing the attestation\n   * @param _requester user requesting this attestation be completed and paying for it in BLT\n   * @param _reward payment to attester from requester in BLT wei\n   * @param _requesterSig signature authorizing payment from requester to attester\n   * @param _dataHash hash of data being attested and nonce\n   * @param _requestNonce Nonce in sig signed by subject and requester so they can't be replayed\n   * @param _subjectSig signed authorization from subject with attestation agreement\n   * @param _delegationSig signature authorizing attestation on behalf of attester\n   */\n  function attestFor(\n    address _subject,\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes _requesterSig,\n    bytes32 _dataHash,\n    bytes32 _requestNonce,\n    bytes _subjectSig, // Sig of subject with dataHash and requestNonce\n    bytes _delegationSig\n  ) external {\n    // Confirm attester address matches recovered address from signature\n    validateAttestForSig(_subject, _attester, _requester, _reward, _dataHash, _requestNonce, _delegationSig);\n    attestForUser(\n      _subject,\n      _attester,\n      _requester,\n      _reward,\n      _requesterSig,\n      _dataHash,\n      _requestNonce,\n      _subjectSig\n    );\n  }\n\n  /**\n   * @notice Perform attestation\n   * @dev Verify valid certainty level and user addresses\n   * @param _subject user this attestation is about\n   * @param _attester user completing the attestation\n   * @param _requester user requesting this attestation be completed and paying for it in BLT\n   * @param _reward payment to attester from requester in BLT wei\n   * @param _requesterSig signature authorizing payment from requester to attester\n   * @param _dataHash hash of data being attested and nonce\n   * @param _requestNonce Nonce in sig signed by subject and requester so they can't be replayed\n   * @param _subjectSig signed authorization from subject with attestation agreement\n   */\n  function attestForUser(\n    address _subject,\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes _requesterSig,\n    bytes32 _dataHash,\n    bytes32 _requestNonce,\n    bytes _subjectSig\n    ) private {\n    \n    validateSubjectSig(\n      _subject,\n      _dataHash,\n      _requestNonce,\n      _subjectSig\n    );\n\n    emit TraitAttested(\n      _subject,\n      _attester,\n      _requester,\n      _dataHash\n    );\n\n    if (_reward > 0) {\n      tokenEscrowMarketplace.requestTokenPayment(_requester, _attester, _reward, _requestNonce, _requesterSig);\n    }\n  }\n\n  /**\n   * @notice Function for attester to reject an attestation and receive payment \n   *  without associating the negative attestation with the subject's bloomId\n   * @param _requester User requesting and paying for this attestation in BLT\n   * @param _reward Payment to attester from requester in BLT\n   * @param _requestNonce Nonce in sig signed by requester so it can't be replayed\n   * @param _requesterSig Signature authorizing payment from requester to attester\n   */\n  function contest(\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce,\n    bytes _requesterSig\n  ) external {\n    contestForUser(\n      msg.sender,\n      _requester,\n      _reward,\n      _requestNonce,\n      _requesterSig\n    );\n  }\n\n  /**\n   * @notice Function for attester to reject an attestation and receive payment \n   *  without associating the negative attestation with the subject's bloomId\n   *  Perform on behalf of attester to pay gas fees\n   * @param _requester User requesting and paying for this attestation in BLT\n   * @param _attester user completing the attestation\n   * @param _reward Payment to attester from requester in BLT\n   * @param _requestNonce Nonce in sig signed by requester so it can't be replayed\n   * @param _requesterSig Signature authorizing payment from requester to attester\n   */\n  function contestFor(\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce,\n    bytes _requesterSig,\n    bytes _delegationSig\n  ) external {\n    validateContestForSig(\n      _attester,\n      _requester,\n      _reward,\n      _requestNonce,\n      _delegationSig\n    );\n    contestForUser(\n      _attester,\n      _requester,\n      _reward,\n      _requestNonce,\n      _requesterSig\n    );\n  }\n\n  /**\n   * @notice Private function for attester to reject an attestation and receive payment \n   *  without associating the negative attestation with the subject's bloomId\n   * @param _attester user completing the attestation\n   * @param _requester user requesting this attestation be completed and paying for it in BLT\n   * @param _reward payment to attester from requester in BLT wei\n   * @param _requestNonce Nonce in sig signed by requester so it can't be replayed\n   * @param _requesterSig signature authorizing payment from requester to attester\n   */\n  function contestForUser(\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce,\n    bytes _requesterSig\n    ) private {\n\n    if (_reward > 0) {\n      tokenEscrowMarketplace.requestTokenPayment(_requester, _attester, _reward, _requestNonce, _requesterSig);\n    }\n    emit AttestationRejected(_attester, _requester);\n  }\n\n  /**\n   * @notice Verify subject signature is valid \n   * @param _subject user this attestation is about\n   * @param _dataHash hash of data being attested and nonce\n   * param _requestNonce Nonce in sig signed by subject so it can't be replayed\n   * @param _subjectSig Signed authorization from subject with attestation agreement\n   */\n  function validateSubjectSig(\n    address _subject,\n    bytes32 _dataHash,\n    bytes32 _requestNonce,\n    bytes _subjectSig\n  ) private {\n    bytes32 _signatureDigest = generateRequestAttestationSchemaHash(_dataHash, _requestNonce);\n    require(_subject == recoverSigner(_signatureDigest, _subjectSig));\n    burnSignatureDigest(_signatureDigest, _subject);\n  }\n\n  /**\n   * @notice Verify attester delegation signature is valid \n   * @param _subject user this attestation is about\n   * @param _attester user completing the attestation\n   * @param _requester user requesting this attestation be completed and paying for it in BLT\n   * @param _reward payment to attester from requester in BLT wei\n   * @param _dataHash hash of data being attested and nonce\n   * @param _requestNonce nonce in sig signed by subject so it can't be replayed\n   * @param _delegationSig signature authorizing attestation on behalf of attester\n   */\n  function validateAttestForSig(\n    address _subject,\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes32 _dataHash,\n    bytes32 _requestNonce,\n    bytes _delegationSig\n  ) private {\n    bytes32 _delegationDigest = generateAttestForDelegationSchemaHash(_subject, _requester, _reward, _dataHash, _requestNonce);\n    require(_attester == recoverSigner(_delegationDigest, _delegationSig), 'Invalid AttestFor Signature');\n    burnSignatureDigest(_delegationDigest, _attester);\n  }\n\n  /**\n   * @notice Verify attester delegation signature is valid \n   * @param _attester user completing the attestation\n   * @param _requester user requesting this attestation be completed and paying for it in BLT\n   * @param _reward payment to attester from requester in BLT wei\n   * @param _requestNonce nonce referenced in TokenEscrowMarketplace so payment sig can't be replayed\n   * @param _delegationSig signature authorizing attestation on behalf of attester\n   */\n  function validateContestForSig(\n    address _attester,\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce,\n    bytes _delegationSig\n  ) private {\n    bytes32 _delegationDigest = generateContestForDelegationSchemaHash(_requester, _reward, _requestNonce);\n    require(_attester == recoverSigner(_delegationDigest, _delegationSig), 'Invalid ContestFor Signature');\n    burnSignatureDigest(_delegationDigest, _attester);\n  }\n\n  /**\n   * @notice Submit attestation completed prior to deployment of this contract\n   * @dev Gives initializer privileges to write attestations during the initialization period without signatures\n   * @param _requester user requesting this attestation be completed \n   * @param _attester user completing the attestation\n   * @param _subject user this attestation is about\n   * @param _dataHash hash of data being attested\n   */\n  function migrateAttestation(\n    address _requester,\n    address _attester,\n    address _subject,\n    bytes32 _dataHash\n  ) public onlyDuringInitialization {\n    emit TraitAttested(\n      _subject,\n      _attester,\n      _requester,\n      _dataHash\n    );\n  }\n\n  /**\n   * @notice Revoke an attestation\n   * @dev Link is included in dataHash and cannot be directly connected to a BloomID\n   * @param _link bytes string embedded in dataHash to link revocation\n   */\n  function revokeAttestation(\n    bytes32 _link\n    ) external {\n      revokeAttestationForUser(_link, msg.sender);\n  }\n\n  /**\n   * @notice Revoke an attestation\n   * @dev Link is included in dataHash and cannot be directly connected to a BloomID\n   * @param _link bytes string embedded in dataHash to link revocation\n   */\n  function revokeAttestationFor(\n    address _sender,\n    bytes32 _link,\n    bytes32 _nonce,\n    bytes _delegationSig\n    ) external {\n      validateRevokeForSig(_sender, _link, _nonce, _delegationSig);\n      revokeAttestationForUser(_link, _sender);\n  }\n\n  /**\n   * @notice Verify revocation signature is valid \n   * @param _link bytes string embedded in dataHash to link revocation\n   * @param _sender user revoking attestation\n   * @param _delegationSig signature authorizing revocation on behalf of revoker\n   */\n  function validateRevokeForSig(\n    address _sender,\n    bytes32 _link,\n    bytes32 _nonce,\n    bytes _delegationSig\n  ) private {\n    bytes32 _delegationDigest = generateRevokeAttestationForDelegationSchemaHash(_link, _nonce);\n    require(_sender == recoverSigner(_delegationDigest, _delegationSig), 'Invalid RevokeFor Signature');\n    burnSignatureDigest(_delegationDigest, _sender);\n  }\n\n  /**\n   * @notice Revoke an attestation\n   * @dev Link is included in dataHash and cannot be directly connected to a BloomID\n   * @param _link bytes string embedded in dataHash to link revocation\n   * @param _sender address identify revoker\n   */\n  function revokeAttestationForUser(\n    bytes32 _link,\n    address _sender\n    ) private {\n      emit AttestationRevoked(_link, _sender);\n  }\n\n    /**\n   * @notice Set the implementation of the TokenEscrowMarketplace contract by setting a new address\n   * @dev Restricted to initializer\n   * @param _newTokenEscrowMarketplace Address of new SigningLogic implementation\n   */\n  function setTokenEscrowMarketplace(TokenEscrowMarketplace _newTokenEscrowMarketplace) external onlyDuringInitialization {\n    address oldTokenEscrowMarketplace = tokenEscrowMarketplace;\n    tokenEscrowMarketplace = _newTokenEscrowMarketplace;\n    emit TokenEscrowMarketplaceChanged(oldTokenEscrowMarketplace, tokenEscrowMarketplace);\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_attester\",\"type\":\"address\"},{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_requestNonce\",\"type\":\"bytes32\"},{\"name\":\"_requesterSig\",\"type\":\"bytes\"},{\"name\":\"_delegationSig\",\"type\":\"bytes\"}],\"name\":\"contestFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subject\",\"type\":\"address\"},{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_requesterSig\",\"type\":\"bytes\"},{\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"name\":\"_requestNonce\",\"type\":\"bytes32\"},{\"name\":\"_subjectSig\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenEscrowMarketplace\",\"type\":\"address\"}],\"name\":\"setTokenEscrowMarketplace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_requestNonce\",\"type\":\"bytes32\"},{\"name\":\"_requesterSig\",\"type\":\"bytes\"}],\"name\":\"contest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_link\",\"type\":\"bytes32\"}],\"name\":\"revokeAttestation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenEscrowMarketplace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_attester\",\"type\":\"address\"},{\"name\":\"_subject\",\"type\":\"address\"},{\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"migrateAttestation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subject\",\"type\":\"address\"},{\"name\":\"_attester\",\"type\":\"address\"},{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_requesterSig\",\"type\":\"bytes\"},{\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"name\":\"_requestNonce\",\"type\":\"bytes32\"},{\"name\":\"_subjectSig\",\"type\":\"bytes\"},{\"name\":\"_delegationSig\",\"type\":\"bytes\"}],\"name\":\"attestFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endInitialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_link\",\"type\":\"bytes32\"},{\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"name\":\"_delegationSig\",\"type\":\"bytes\"}],\"name\":\"revokeAttestationFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initializer\",\"type\":\"address\"},{\"name\":\"_tokenEscrowMarketplace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"TraitAttested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"AttestationRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"link\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"AttestationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTokenEscrowMarketplace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTokenEscrowMarketplace\",\"type\":\"address\"}],\"name\":\"TokenEscrowMarketplaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationEnded\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051604080620028d283398101806040528101908080519060200190929190805190602001909291905050506040805190810160405280601781526020017f426c6f6f6d204174746573746174696f6e204c6f6769630000000000000000008152506040805190810160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250600184806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff021916908315150217905550506200015b6080604051908101604052808581526020018481526020018381526020013073ffffffffffffffffffffffffffffffffffffffff16815250620001b1640100000000026401000000009004565b6002816000191690555050505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003fb565b600060405180807f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081526020017f76657273696f6e2c75696e7432353620636861696e49642c616464726573732081526020017f766572696679696e67436f6e74726163742900000000000000000000000000008152506052019050604051809103902082600001516040518082805190602001908083835b6020831015156200027157805182526020820191506020810190506020830392506200024a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902083602001516040518082805190602001908083835b602083101515620002da5780518252602082019150602081019050602083039250620002b3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902084604001518560600151604051602001808660001916600019168152602001856000191660001916815260200184600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040526040518082805190602001908083835b602083101515620003c75780518252602082019150602081019050602083039250620003a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b6124c7806200040b6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ca7a56a146100ca5780632599f159146101755780632a5502ad146101a45780633c7367781461025d5780634ae122bb146102a05780634d5e1da6146103135780634e46f6e3146103445780639a43a3141461039b5780639ce110d71461042c5780639f74474514610483578063b397657d14610574578063d0bad1d61461058b578063f978fd6114610602575b600080fd5b3480156100d657600080fd5b50610173600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560001916906020019092919080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939050505061064b565b005b34801561018157600080fd5b5061018a6106d3565b604051808215151515815260200191505060405180910390f35b3480156101b057600080fd5b5061025b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390803560001916906020019092919080356000191690602001909291908035906020019082018035906020019190919293919293905050506106e6565b005b34801561026957600080fd5b5061029e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610765565b005b3480156102ac57600080fd5b50610311600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390505050610a1e565b005b34801561031f57600080fd5b506103426004803603810190808035600019169060200190929190505050610a64565b005b34801561035057600080fd5b50610359610a71565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a757600080fd5b5061042a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050610a97565b005b34801561043857600080fd5b50610441610d0c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048f57600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190820180359060200191909192939192939080356000191690602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610d31565b005b34801561058057600080fd5b50610589610df4565b005b34801561059757600080fd5b50610600600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390505050610fd0565b005b34801561060e57600080fd5b50610631600480360381019080803560001916906020019092919050505061101f565b604051808215151515815260200191505060405180910390f35b61068a8888888886868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061103f565b6106c98888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061110c565b5050505050505050565b600060149054906101000a900460ff1681565b61075a89338a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611305565b505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610851576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420627920696e6981526020017f7469616c697a657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060149054906101000a900460ff1615156108fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420647572696e6781526020017f20696e697469616c697a6174696f6e000000000000000000000000000000000081525060400191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fff80ee77c85d9a66d44e11d38886b3f07748e818eaeb0660b75706962d0f56d581600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b610a5d3386868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061110c565b5050505050565b610a6e813361158e565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420627920696e6981526020017f7469616c697a657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060149054906101000a900460ff161515610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420647572696e6781526020017f20696e697469616c697a6174696f6e000000000000000000000000000000000081525060400191505060405180910390fd5b7f53931139c48182587fa8ce0ac76dd9cd86655899a636bffdce8138a0cdb2c1b582848684604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826000191660001916815260200194505050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d728c8c8c8c8a8a88888080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611605565b610de68c8c8c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508b8b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611305565b505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ede576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420627920696e6981526020017f7469616c697a657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060149054906101000a900460ff161515610f88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420647572696e6781526020017f20696e697469616c697a6174696f6e000000000000000000000000000000000081525060400191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f0cabb9c05f9eeeadb6765f175642f19876b512ba15100b1391420b714b0c3d0060405160405180910390a1565b61100e85858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506116d6565b611018848661158e565b5050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b600061104c8585856117a1565b905061105881836118ad565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415156110fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e76616c696420436f6e74657374466f72205369676e61747572650000000081525060200191505060405180910390fd5b6111048187611a13565b505050505050565b60008311156112a457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ed5eb5085878686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561123b578082015181840152602081019050611220565b50505050905090810190601f1680156112685780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9a53975728a25417448708f6de6b9c942bbe4461c6647852e0b60c91c3c2fad360405160405180910390a35050505050565b61131188848484611bab565b7f53931139c48182587fa8ce0ac76dd9cd86655899a636bffdce8138a0cdb2c1b588888886604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826000191660001916815260200194505050505060405180910390a1600085111561158457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ed5eb5087898886896040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561151b578082015181840152602081019050611500565b50505050905090810190601f1680156115485780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b505050505b5050505050505050565b7f59d1b98a5da8bbc1db92f7d8d2e21c3067da65edbe08f4ae23df11487ee4c8b082826040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60006116148887878787611c0d565b905061162081836118ad565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415156116c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e76616c696420417474657374466f72205369676e6174757265000000000081525060200191505060405180910390fd5b6116cc8188611a13565b5050505050505050565b60006116e28484611d41565b90506116ee81836118ad565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515611790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e76616c6964205265766f6b65466f72205369676e6174757265000000000081525060200191505060405180910390fd5b61179a8186611a13565b5050505050565b60006002546117e46060604051908101604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018560001916815250611e33565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156118775780518252602082019150602081019050602083039250611852565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090509392505050565b600080737a75cb349d9a9d4c2d3eb8a22cb3090222d8557b6319045a2585856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561194557808201518184015260208101905061192a565b50505050905090810190601f1680156119725780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561199057600080fd5b505af41580156119a4573d6000803e3d6000fd5b505050506040513d60208110156119ba57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a0957600080fd5b8091505092915050565b600082826040516020018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611aa65780518252602082019150602081019050602083039250611a81565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060016000826000191660001916815260200190815260200160002060009054906101000a900460ff16151515611b73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5369676e6174757265206e6f7420756e6971756500000000000000000000000081525060200191505060405180910390fd5b6001806000836000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000611bb78484611f9f565b9050611bc381836118ad565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515611bfc57600080fd5b611c068186611a13565b5050505050565b6000600254611c7660a0604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001866000191681526020018560001916815250612091565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611d095780518252602082019150602081019050602083039250611ce4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905095945050505050565b6000600254611d6b604080519081016040528086600019168152602001856000191681525061226f565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611dfe5780518252602082019150602081019050602083039250611dd9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b600060405180807f436f6e74657374466f722861646472657373207265717565737465722c75696e81526020017f74323536207265776172642c6279746573333220726571756573744e6f6e636581526020017f2900000000000000000000000000000000000000000000000000000000000000815250604101905060405180910390208260000151836020015184604001516040516020018085600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182600019166000191681526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515611f6b5780518252602082019150602081019050602083039250611f46565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b6000600254611fc96040805190810160405280866000191681526020018560001916815250612385565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561205c5780518252602082019150602081019050602083039250612037565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b600060405180807f417474657374466f722861646472657373207375626a6563742c61646472657381526020017f73207265717565737465722c75696e74323536207265776172642c627974657381526020017f33322064617461486173682c6279746573333220726571756573744e6f6e636581526020017f290000000000000000000000000000000000000000000000000000000000000081525060610190506040518091039020826000015183602001518460400151856060015186608001516040516020018087600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360001916600019168152602001826000191660001916815260200196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310151561223b5780518252602082019150602081019050602083039250612216565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060405180807f5265766f6b654174746573746174696f6e466f722862797465733332206c696e81526020017f6b2c62797465733332206e6f6e6365290000000000000000000000000000000081525060300190506040518091039020826000015183602001516040516020018084600019166000191681526020018360001916600019168152602001826000191660001916815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515612351578051825260208201915060208101905060208303925061232c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060405180807f4174746573746174696f6e52657175657374286279746573333220646174614881526020017f6173682c62797465733332206e6f6e636529000000000000000000000000000081525060320190506040518091039020826000015183602001516040516020018084600019166000191681526020018360001916600019168152602001826000191660001916815260200193505050506040516020818303038152906040526040518082805190602001908083835b6020831015156124675780518252602082019150602081019050602083039250612442565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090509190505600a165627a7a72305820bff582e58c664569a718e5ba7037128a0b9eb86816de1b987f598c644b6553fc002900000000000000000000000028c7ba752fd214a54ea25f075ab459ab17bd5fd20000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000028c7ba752fd214a54ea25f075ab459ab17bd5fd20000000000000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "ECRecovery",
      "address": "0x7a75cb349d9a9d4c2d3eb8a22cb3090222d8557b"
    }
  ]
}