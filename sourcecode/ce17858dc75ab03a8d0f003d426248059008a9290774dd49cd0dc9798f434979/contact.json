{
  "address": "0x6556d2ec4d96da39cf75cbe50d58fae90079800a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LOT",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\n/*\nSite: https://lukki.io\n*/\npragma solidity ^0.5.2;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n\n\ncontract ERC20Mintable is ERC20, MinterRole {\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n\ncontract ERC20Capped is ERC20Mintable {\n    uint256 private _cap;\n\n    constructor (uint256 cap) public {\n        require(cap > 0);\n        _cap = cap;\n    }\n\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap);\n        super._mint(account, value);\n    }\n}\n\n\n\ncontract LOT is ERC20Capped {\n    constructor (uint256 cap) public ERC20Capped(cap) {\n        \n    }\n string public constant name = \"Lukki Operating Token\";\n string public constant symbol = \"LOT\";\n uint8 public constant decimals = 18;\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610b0b8339810180604052602081101561003057600080fd5b5051806100453364010000000061005b810204565b6000811161005257600080fd5b60045550610138565b6100736003826401000000006108fe6100aa82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811615156100bf57600080fd5b6100d28282640100000000610101810204565b156100dc57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216151561011857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6109c4806101476000396000f3fe608060405234801561001057600080fd5b506004361061011d576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100b4578063a457c2d711610083578063a457c2d71461030b578063a9059cbb14610337578063aa271e1a14610363578063dd62ed3e146103895761011d565b806370a08231146102ad57806395d89b41146102d3578063983b2d56146102db57806398650275146103035761011d565b8063313ce567116100f0578063313ce5671461022f578063355274ea1461024d578063395093511461025557806340c10f19146102815761011d565b806306fdde0314610122578063095ea7b31461019f57806318160ddd146101df57806323b872dd146101f9575b600080fd5b61012a6103b7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016457818101518382015260200161014c565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cb600480360360408110156101b557600080fd5b50600160a060020a0381351690602001356103ee565b604080519115158252519081900360200190f35b6101e7610404565b60408051918252519081900360200190f35b6101cb6004803603606081101561020f57600080fd5b50600160a060020a0381358116916020810135909116906040013561040a565b610237610461565b6040805160ff9092168252519081900360200190f35b6101e7610466565b6101cb6004803603604081101561026b57600080fd5b50600160a060020a03813516906020013561046c565b6101cb6004803603604081101561029757600080fd5b50600160a060020a0381351690602001356104a8565b6101e7600480360360208110156102c357600080fd5b5035600160a060020a03166104c8565b61012a6104e3565b610301600480360360208110156102f157600080fd5b5035600160a060020a031661051a565b005b61030161053a565b6101cb6004803603604081101561032157600080fd5b50600160a060020a038135169060200135610545565b6101cb6004803603604081101561034d57600080fd5b50600160a060020a038135169060200135610581565b6101cb6004803603602081101561037957600080fd5b5035600160a060020a031661058e565b6101e76004803603604081101561039f57600080fd5b50600160a060020a03813581169160200135166105a7565b60408051808201909152601581527f4c756b6b69204f7065726174696e6720546f6b656e0000000000000000000000602082015281565b60006103fb3384846105d2565b50600192915050565b60025490565b600061041784848461065e565b600160a060020a038416600090815260016020908152604080832033808552925290912054610457918691610452908663ffffffff61072b16565b6105d2565b5060019392505050565b601281565b60045490565b336000818152600160209081526040808320600160a060020a038716845290915281205490916103fb918590610452908663ffffffff61074016565b60006104b33361058e565b15156104be57600080fd5b6103fb8383610759565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600381527f4c4f540000000000000000000000000000000000000000000000000000000000602082015281565b6105233361058e565b151561052e57600080fd5b6105378161078d565b50565b610543336107d5565b565b336000818152600160209081526040808320600160a060020a038716845290915281205490916103fb918590610452908663ffffffff61072b16565b60006103fb33848461065e565b60006105a160038363ffffffff61081d16565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a03821615156105e757600080fd5b600160a060020a03831615156105fc57600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216151561067357600080fd5b600160a060020a03831660009081526020819052604090205461069c908263ffffffff61072b16565b600160a060020a0380851660009081526020819052604080822093909355908416815220546106d1908263ffffffff61074016565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561073a57600080fd5b50900390565b60008282018381101561075257600080fd5b9392505050565b60045461077482610768610404565b9063ffffffff61074016565b111561077f57600080fd5b6107898282610854565b5050565b61079e60038263ffffffff6108fe16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6107e660038263ffffffff61094c16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a038216151561083457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a038216151561086957600080fd5b60025461087c908263ffffffff61074016565b600255600160a060020a0382166000908152602081905260409020546108a8908263ffffffff61074016565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038116151561091357600080fd5b61091d828261081d565b1561092757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116151561096157600080fd5b61096b828261081d565b151561097657600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a723058207d441027f898d93f4a2eda86fda666ca6280de79454528a1ef91edd961dfd5ce0029000000000000000000000000000000000000000006765c793fa10079d0000000",
  "constructorArguments": "000000000000000000000000000000000000000006765c793fa10079d0000000"
}