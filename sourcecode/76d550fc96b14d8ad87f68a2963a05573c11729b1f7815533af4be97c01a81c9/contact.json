{
  "address": "0xb705268213d593b8fd88d3fdeff93aff5cbdcfae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "IDEX Token",
  "contractName": "IDEX",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.5.6;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n  /**\n   * @dev Multiplies two unsigned integers, reverts on overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Adds two unsigned integers, reverts on overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n   * reverts when dividing by zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value) external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external\n    returns (bool);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external\n    view\n    returns (uint256);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on OpenZeppelin implementation\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\n *\n * This implementation is meant to be a migration of the original AURA token. On deployment\n * the total supply is set to equal that of AURA and locked in the new contract. New tokens\n * can only be obtained by calling the swap function\n */\ncontract IDEX is IERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) private _balances;\n  mapping(address => mapping(address => uint256)) private _allowed;\n  uint256 private _totalSupply;\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n  IERC20 _oldToken;\n\n  event Swap(address indexed owner, uint256 value);\n\n  constructor(\n    string memory name,\n    string memory symbol,\n    uint8 decimals,\n    IERC20 oldToken\n  ) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n    _totalSupply = oldToken.totalSupply();\n    _balances[address(this)] = _totalSupply;\n    _oldToken = oldToken;\n\n    emit Transfer(address(0), address(this), _totalSupply);\n  }\n\n  function swap(uint256 value) external returns (bool) {\n    require(\n      _oldToken.transferFrom(msg.sender, address(this), value),\n      \"AURA transfer failed\"\n    );\n    require(this.transfer(msg.sender, value), \"IDEX transfer failed\");\n\n    emit Swap(msg.sender, value);\n\n    return true;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev Total number of tokens in existence.\n   */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param owner The address to query the balance of.\n   * @return A uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address owner, address spender)\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n   * @dev Transfer token to a specified address.\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another.\n   * Note that while this function emits an Approval event, this is not required as per the specification,\n   * and other compliant implementations may not emit the event.\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address from, address to, uint256 value)\n    public\n    returns (bool)\n  {\n    _transfer(from, to, value);\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(address spender, uint256 addedValue)\n    public\n    returns (bool)\n  {\n    _approve(\n      msg.sender,\n      spender,\n      _allowed[msg.sender][spender].add(addedValue)\n    );\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * Emits an Approval event.\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    returns (bool)\n  {\n    _approve(\n      msg.sender,\n      spender,\n      _allowed[msg.sender][spender].sub(subtractedValue)\n    );\n    return true;\n  }\n\n  /**\n   * @dev Transfer token for a specified addresses.\n   * @param from The address to transfer from.\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(from != address(0), \"Invalid from\");\n    require(to != address(0), \"Invalid to\");\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Approve an address to spend another addresses' tokens.\n   * @param owner The address that owns the tokens.\n   * @param spender The address that will spend the tokens.\n   * @param value The number of tokens that can be spent.\n   */\n  function _approve(address owner, address spender, uint256 value) internal {\n    require(spender != address(0), \"Invalid spender\");\n\n    _allowed[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405162000c3638038062000c368339810180604052608081101561003557600080fd5b81019080805164010000000081111561004d57600080fd5b8201602081018481111561006057600080fd5b815164010000000081118282018710171561007a57600080fd5b5050929190602001805164010000000081111561009657600080fd5b820160208101848111156100a957600080fd5b81516401000000008111828201871017156100c357600080fd5b505060208083015160409093015186519295509293506100e891600391870190610206565b5082516100fc906004906020860190610206565b506005805460ff191660ff8416179055604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b038316916318160ddd916004808301926020929190829003018186803b15801561016557600080fd5b505afa158015610179573d6000803e3d6000fd5b505050506040513d602081101561018f57600080fd5b505160028190553060008181526020818152604080832085905560058054610100600160a81b0319166101006001600160a01b03891602179055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050506102a1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061024757805160ff1916838001178555610274565b82800160010185558215610274579182015b82811115610274578251825591602001919060010190610259565b50610280929150610284565b5090565b61029e91905b80821115610280576000815560010161028a565b90565b61098580620002b16000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461021057806394b918de1461023657806395d89b4114610253578063a457c2d71461025b578063a9059cbb14610287578063dd62ed3e146102b3576100b4565b806306fdde03146100b9578063095ea7b31461013657806318160ddd1461017657806323b872dd14610190578063313ce567146101c657806339509351146101e4575b600080fd5b6100c16102e1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101626004803603604081101561014c57600080fd5b506001600160a01b038135169060200135610377565b604080519115158252519081900360200190f35b61017e61038d565b60408051918252519081900360200190f35b610162600480360360608110156101a657600080fd5b506001600160a01b03813581169160208101359091169060400135610393565b6101ce6103ea565b6040805160ff9092168252519081900360200190f35b610162600480360360408110156101fa57600080fd5b506001600160a01b0381351690602001356103f3565b61017e6004803603602081101561022657600080fd5b50356001600160a01b031661042f565b6101626004803603602081101561024c57600080fd5b503561044a565b6100c1610632565b6101626004803603604081101561027157600080fd5b506001600160a01b038135169060200135610693565b6101626004803603604081101561029d57600080fd5b506001600160a01b0381351690602001356106cf565b61017e600480360360408110156102c957600080fd5b506001600160a01b03813581169160200135166106dc565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036d5780601f106103425761010080835404028352916020019161036d565b820191906000526020600020905b81548152906001019060200180831161035057829003601f168201915b5050505050905090565b6000610384338484610707565b50600192915050565b60025490565b60006103a08484846107c7565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546103e09186916103db908663ffffffff61092b16565b610707565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103849185906103db908663ffffffff61094016565b6001600160a01b031660009081526020819052604090205490565b60055460408051600160e01b6323b872dd02815233600482015230602482015260448101849052905160009261010090046001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b505050506040513d60208110156104d557600080fd5b505161052b5760408051600160e51b62461bcd02815260206004820152601460248201527f41555241207472616e73666572206661696c6564000000000000000000000000604482015290519081900360640190fd5b60408051600160e01b63a9059cbb028152336004820152602481018490529051309163a9059cbb9160448083019260209291908290030181600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b505050506040513d602081101561059e57600080fd5b50516105f45760408051600160e51b62461bcd02815260206004820152601460248201527f49444558207472616e73666572206661696c6564000000000000000000000000604482015290519081900360640190fd5b60408051838152905133917f562c219552544ec4c9d7a8eb850f80ea152973e315372bf4999fe7c953ea004f919081900360200190a2506001919050565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036d5780601f106103425761010080835404028352916020019161036d565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103849185906103db908663ffffffff61092b16565b60006103843384846107c7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0382166107655760408051600160e51b62461bcd02815260206004820152600f60248201527f496e76616c6964207370656e6465720000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166108255760408051600160e51b62461bcd02815260206004820152600c60248201527f496e76616c69642066726f6d0000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166108735760408051600160e51b62461bcd02815260206004820152600a6024820152600160b01b69496e76616c696420746f02604482015290519081900360640190fd5b6001600160a01b03831660009081526020819052604090205461089c908263ffffffff61092b16565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108d1908263ffffffff61094016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561093a57600080fd5b50900390565b60008282018381101561095257600080fd5b939250505056fea165627a7a72305820598b7d66251910acd1adcdc3ea386935568f1394d6cafc791b7c58a97054758d0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000cdcfc0f66c522fd086a1b725ea3c0eeb9f9e8814000000000000000000000000000000000000000000000000000000000000000a4944455820546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044944455800000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000cdcfc0f66c522fd086a1b725ea3c0eeb9f9e8814000000000000000000000000000000000000000000000000000000000000000a4944455820546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044944455800000000000000000000000000000000000000000000000000000000"
}