{
  "address": "0x4a7109c3978bb76e3c2e275ac8a5a8127f1392e9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AFRI",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-14\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title FIRST AFם™  Project\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract AFRI is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public Claimed; \n\n    string public constant name = \"AFRI\";\n    string public constant symbol = \"AFם™\";\n    uint public constant decimals = 8;\n    uint public deadline = now + 37 * 1 days;\n    uint public round2 = now + 32 * 1 days;\n    uint public round1 = now + 22 * 1 days;\n    \n    uint256 public totalSupply = 10000000000e8;\n    uint256 public totalDistributed;\n    uint256 public constant requestMinimum = 1 ether / 100000; // 0.00001 Ether\n    uint256 public tokensPerEth = 25000000e8;\n    \n    uint public target0drop = 1000000;\n    uint public progress0drop = 0;\n    \n    //here u will write your ether address\n    address multisig = 0xFdde77aFD3cCF136d44317937058B5A31E9B6107\n    ;\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n\n    event TokensPerEthUpdated(uint _tokensPerEth);\n    \n    event Burn(address indexed burner, uint256 value);\n    \n    event Add(uint256 value);\n\n    bool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public {\n        uint256 teamFund = 8400000000e8;\n        owner = msg.sender;\n        distr(owner, teamFund);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);        \n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n    \n    function Distribute(address _participant, uint _amount) onlyOwner internal {\n\n        require( _amount > 0 );      \n        require( totalDistributed < totalSupply );\n        balances[_participant] = balances[_participant].add(_amount);\n        totalDistributed = totalDistributed.add(_amount);\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n\n        // log\n        emit Airdrop(_participant, _amount, balances[_participant]);\n        emit Transfer(address(0), _participant, _amount);\n    }\n    \n    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        \n        Distribute(_participant, _amount);\n    }\n\n    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        \n        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);\n    }\n\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n        tokensPerEth = _tokensPerEth;\n        emit TokensPerEthUpdated(_tokensPerEth);\n    }\n           \n    function () external payable {\n        getTokens();\n     }\n\n    function getTokens() payable canDistr  public {\n        uint256 tokens = 0;\n        uint256 bonus = 0;\n        uint256 countbonus = 0;\n        uint256 bonusCond1 = 1 ether / 10;\n        uint256 bonusCond2 = 1 ether;\n        uint256 bonusCond3 = 5 ether;\n\n        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n        address investor = msg.sender;\n\n        if (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {\n            if(msg.value >= bonusCond1 && msg.value < bonusCond2){\n                countbonus = tokens * 5 / 100;\n            }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){\n                countbonus = tokens * 10 / 100;\n            }else if(msg.value >= bonusCond3){\n                countbonus = tokens * 15 / 100;\n            }\n        }else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){\n            if(msg.value >= bonusCond2 && msg.value < bonusCond3){\n                countbonus = tokens * 5 / 100;\n            }else if(msg.value >= bonusCond3){\n                countbonus = tokens * 10 / 100;\n            }\n        }else{\n            countbonus = 0;\n        }\n\n        bonus = tokens + countbonus;\n        \n        if (tokens == 0) {\n            uint256 valdrop = 1100e8;\n            if (Claimed[investor] == false && progress0drop <= target0drop ) {\n                distr(investor, valdrop);\n                Claimed[investor] = true;\n                progress0drop++;\n            }else{\n                require( msg.value >= requestMinimum );\n            }\n        }else if(tokens > 0 && msg.value >= requestMinimum){\n            if( now >= deadline && now >= round1 && now < round2){\n                distr(investor, tokens);\n            }else{\n                if(msg.value >= bonusCond1){\n                    distr(investor, bonus);\n                }else{\n                    distr(investor, tokens);\n                }   \n            }\n        }else{\n            require( msg.value >= requestMinimum );\n        }\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        \n        //here we will send all wei to your address\n        multisig.transfer(msg.value);\n    }\n    \n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdrawAll() onlyOwner public {\n        address myAddress = this;\n        uint256 etherBalance = myAddress.balance;\n        owner.transfer(etherBalance);\n    }\n\n    function withdraw(uint256 _wdamount) onlyOwner public {\n        uint256 wantAmount = _wdamount;\n        owner.transfer(wantAmount);\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function add(uint256 _value) onlyOwner public {\n        uint256 counter = totalSupply.add(_value);\n        totalSupply = counter; \n        emit Add(_value);\n    }\n    \n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "60806040526001805433600160a060020a031991821617909155426230c7808101600555622a30008101600655621d010001600755670de0b6b3a76400006008556608e1bc9bf04000600a55620f4240600b556000600c55600d805473fdde77afd3ccf136d44317937058b5a31e9b610792169190911760a060020a60ff02191690553480156200008f57600080fd5b5060018054600160a060020a031916331790819055670ba8478cab54000090620000cc90600160a060020a031682640100000000620000d4810204565b505062000203565b600d5460009074010000000000000000000000000000000000000000900460ff16156200010057600080fd5b6009546200011d90836401000000006200132a620001ef82021704565b600955600160a060020a0383166000908152600260205260409020546200015390836401000000006200132a620001ef82021704565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b81810182811015620001fd57fe5b92915050565b6114d680620002136000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610194578063095ea7b31461021e5780631003e2d21461025657806318160ddd1461026e57806323b872dd1461029557806329dcb0cf146102bf5780632e1a7d4d146102d4578063313ce567146102ec57806342966c6814610301578063532b581c1461031957806370a082311461032e57806374ff23241461034f5780637809231c14610364578063836e81801461038857806383afd6da1461039d578063853828b6146103b257806395d89b41146103c75780639b1cbccc146103dc5780639ea407be146103f1578063a9059cbb14610409578063aa6ca8081461018a578063b449c24d1461042d578063c108d5421461044e578063c489744b14610463578063cbdd69b51461048a578063dd62ed3e1461049f578063e58fc54c146104c6578063e6a092f5146104e7578063efca2eed146104fc578063f2fde38b14610511578063f3ccb40114610532575b610192610556565b005b3480156101a057600080fd5b506101a961085e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e35781810151838201526020016101cb565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022a57600080fd5b50610242600160a060020a0360043516602435610895565b604080519115158252519081900360200190f35b34801561026257600080fd5b5061019260043561093d565b34801561027a57600080fd5b506102836109aa565b60408051918252519081900360200190f35b3480156102a157600080fd5b50610242600160a060020a03600435811690602435166044356109b0565b3480156102cb57600080fd5b50610283610b23565b3480156102e057600080fd5b50610192600435610b29565b3480156102f857600080fd5b50610283610b83565b34801561030d57600080fd5b50610192600435610b88565b34801561032557600080fd5b50610283610c67565b34801561033a57600080fd5b50610283600160a060020a0360043516610c6d565b34801561035b57600080fd5b50610283610c88565b34801561037057600080fd5b50610192600160a060020a0360043516602435610c92565b34801561039457600080fd5b50610283610cb7565b3480156103a957600080fd5b50610283610cbd565b3480156103be57600080fd5b50610192610cc3565b3480156103d357600080fd5b506101a9610d20565b3480156103e857600080fd5b50610242610d57565b3480156103fd57600080fd5b50610192600435610ddb565b34801561041557600080fd5b50610242600160a060020a0360043516602435610e2d565b34801561043957600080fd5b50610242600160a060020a0360043516610f0c565b34801561045a57600080fd5b50610242610f21565b34801561046f57600080fd5b50610283600160a060020a0360043581169060243516610f31565b34801561049657600080fd5b50610283610fe2565b3480156104ab57600080fd5b50610283600160a060020a0360043581169060243516610fe8565b3480156104d257600080fd5b50610242600160a060020a0360043516611013565b3480156104f357600080fd5b50610283611167565b34801561050857600080fd5b5061028361116d565b34801561051d57600080fd5b50610192600160a060020a0360043516611173565b34801561053e57600080fd5b506101926024600480358281019291013590356111c5565b600080600080600080600080600d60149054906101000a900460ff1615151561057e57600080fd5b600a546000985088975087965067016345785d8a00009550670de0b6b3a76400009450674563918244f40000935084906105be903463ffffffff61121e16565b8115156105c757fe5b0497503391506509184e72a00034101580156105e4575060055442105b80156105f1575060075442105b80156105fe575060065442105b1561065c5784341015801561061257508334105b15610626576064600589025b049550610657565b83341015801561063557508234105b15610645576064600a890261061e565b348311610657576064600f89025b0495505b6106c8565b6509184e72a0003410158015610673575060055442105b8015610680575060075442115b801561068d575060065442105b156106c3578334101580156106a157508234105b156106b15760646005890261061e565b348311610657576064600a8902610653565b600095505b87860196508715156107655750600160a060020a03811660009081526004602052604090205464199c82cc009060ff161580156107095750600b54600c5411155b1561074d576107188282611247565b50600160a060020a0382166000908152600460205260409020805460ff19166001908117909155600c80549091019055610760565b6509184e72a00034101561076057600080fd5b6107ea565b60008811801561077b57506509184e72a0003410155b156107d757600554421015801561079457506007544210155b80156107a1575060065442105b156107b6576107b08289611247565b50610760565b3485116107c7576107b08288611247565b6107d18289611247565b506107ea565b6509184e72a0003410156107ea57600080fd5b6008546009541061081a57600d805474ff0000000000000000000000000000000000000000191660a060020a1790555b600d54604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610853573d6000803e3d6000fd5b505050505050505050565b60408051808201909152600481527f4146524900000000000000000000000000000000000000000000000000000000602082015281565b600081158015906108c85750336000908152600360209081526040808320600160a060020a038716845290915290205415155b156108d557506000610937565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600154600090600160a060020a0316331461095757600080fd5b60085461096a908363ffffffff61132a16565b60088190556040805184815290519192507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f919081900360200190a15050565b60085481565b6000606060643610156109bf57fe5b600160a060020a03841615156109d457600080fd5b600160a060020a0385166000908152600260205260409020548311156109f957600080fd5b600160a060020a0385166000908152600360209081526040808320338452909152902054831115610a2957600080fd5b600160a060020a038516600090815260026020526040902054610a52908463ffffffff61133716565b600160a060020a0386166000908152600260209081526040808320939093556003815282822033835290522054610a8f908463ffffffff61133716565b600160a060020a038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054610ad3908463ffffffff61132a16565b600160a060020a03808616600081815260026020908152604091829020949094558051878152905191939289169260008051602061148b83398151915292918290030190a3506001949350505050565b60055481565b600154600090600160a060020a03163314610b4357600080fd5b506001546040518291600160a060020a03169082156108fc029083906000818181858888f19350505050158015610b7e573d6000803e3d6000fd5b505050565b600881565b600154600090600160a060020a03163314610ba257600080fd5b33600090815260026020526040902054821115610bbe57600080fd5b5033600081815260026020526040902054610bdf908363ffffffff61133716565b600160a060020a038216600090815260026020526040902055600854610c0b908363ffffffff61133716565b600855600954610c21908363ffffffff61133716565b600955604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60065481565b600160a060020a031660009081526002602052604090205490565b6509184e72a00081565b600154600160a060020a03163314610ca957600080fd5b610cb38282611349565b5050565b60075481565b600c5481565b6001546000908190600160a060020a03163314610cdf57600080fd5b50506001546040513091823191600160a060020a03909116906108fc8315029083906000818181858888f19350505050158015610b7e573d6000803e3d6000fd5b60408051808201909152600781527f4146d79de284a200000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a03163314610d7157600080fd5b600d5460a060020a900460ff1615610d8857600080fd5b600d805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600154600160a060020a03163314610df257600080fd5b600a8190556040805182815290517ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c0039181900360200190a150565b600060406044361015610e3c57fe5b600160a060020a0384161515610e5157600080fd5b33600090815260026020526040902054831115610e6d57600080fd5b33600090815260026020526040902054610e8d908463ffffffff61133716565b3360009081526002602052604080822092909255600160a060020a03861681522054610ebf908463ffffffff61132a16565b600160a060020a03851660008181526002602090815260409182902093909355805186815290519192339260008051602061148b8339815191529281900390910190a35060019392505050565b60046020526000908152604090205460ff1681565b600d5460a060020a900460ff1681565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610fad57600080fd5b505af1158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b505195945050505050565b600a5481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015460009081908190600160a060020a0316331461103157600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b505050506040513d602081101561115d57600080fd5b5051949350505050565b600b5481565b60095481565b600154600160a060020a0316331461118a57600080fd5b600160a060020a038116156111c2576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600154600090600160a060020a031633146111df57600080fd5b5060005b82811015611218576112108484838181106111fa57fe5b90506020020135600160a060020a031683611349565b6001016111e3565b50505050565b600082151561122f57506000610937565b5081810281838281151561123f57fe5b041461093757fe5b600d5460009060a060020a900460ff161561126157600080fd5b600954611274908363ffffffff61132a16565b600955600160a060020a0383166000908152600260205260409020546112a0908363ffffffff61132a16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a0385169160009160008051602061148b8339815191529181900360200190a350600192915050565b8181018281101561093757fe5b60008282111561134357fe5b50900390565b600154600160a060020a0316331461136057600080fd5b6000811161136d57600080fd5b6008546009541061137d57600080fd5b600160a060020a0382166000908152600260205260409020546113a6908263ffffffff61132a16565b600160a060020a0383166000908152600260205260409020556009546113d2908263ffffffff61132a16565b60098190556008541161140457600d805474ff0000000000000000000000000000000000000000191660a060020a1790555b600160a060020a0382166000818152600260209081526040918290205482518581529182015281517fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d272929181900390910190a2604080518281529051600160a060020a0384169160009160008051602061148b8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e9dbacedd8f644ed08660198770f3f575e065382d6ecfed1201188ed99f5c3c90029"
}