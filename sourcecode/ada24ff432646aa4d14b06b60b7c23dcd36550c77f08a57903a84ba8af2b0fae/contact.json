{
  "address": "0x4126632bd44dd9c82604252e3466e5766e266b0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EternalStorageProxyForBulkTokenSending",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-31\n*/\n\n// File: contracts/EternalStorage.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n\n/**\n * @title EternalStorage\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n */\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n// File: contracts/Proxy.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract Proxy {\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function () public payable {\n        address _impl = implementation();\n        require(_impl != address(0));\n        bytes memory data = msg.data;\n\n        assembly {\n            let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\n            let size := returndatasize\n\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function implementation() public view returns (address);\n}\n\n// File: contracts/UpgradeabilityStorage.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n/**\n * @title UpgradeabilityStorage\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\n */\ncontract UpgradeabilityStorage {\n  // Version name of the current implementation\n    string internal _version;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the version name of the current implementation\n    * @return string representing the name of the current version\n    */\n    function version() public view returns (string) {\n        return _version;\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\n// File: contracts/UpgradeabilityProxy.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n */\ncontract UpgradeabilityProxy is Proxy, UpgradeabilityStorage {\n  /**\n  * @dev This event will be emitted every time the implementation gets upgraded\n  * @param version representing the version name of the upgraded implementation\n  * @param implementation representing the address of the upgraded implementation\n  */\n    event Upgraded(string version, address indexed implementation);\n\n    /**\n    * @dev Upgrades the implementation address\n    * @param version representing the version name of the new implementation to be set\n    * @param implementation representing the address of the new implementation to be set\n    */\n    function _upgradeTo(string version, address implementation) internal {\n        require(_implementation != implementation);\n        _version = version;\n        _implementation = implementation;\n        emit Upgraded(version, implementation);\n    }\n}\n\n// File: contracts/UpgradeabilityOwnerStorage.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n/**\n * @title UpgradeabilityOwnerStorage\n * @dev This contract keeps track of the upgradeability owner\n */\ncontract UpgradeabilityOwnerStorage {\n  // Owner of the contract\n    address private _upgradeabilityOwner;\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n\n}\n\n// File: contracts/OwnedUpgradeabilityProxy.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedUpgradeabilityProxy is UpgradeabilityOwnerStorage, UpgradeabilityProxy {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor(address _owner) public {\n        setUpgradeabilityOwner(_owner);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyProxyOwner() {\n        require(msg.sender == proxyOwner());\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the proxy owner\n    * @return the address of the proxy owner\n    */\n    function proxyOwner() public view returns (address) {\n        return upgradeabilityOwner();\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\n        require(newOwner != address(0));\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\n        setUpgradeabilityOwner(newOwner);\n    }\n\n    /**\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy.\n    * @param version representing the version name of the new implementation to be set.\n    * @param implementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(string version, address implementation) public onlyProxyOwner {\n        _upgradeTo(version, implementation);\n    }\n\n    /**\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation\n    * to initialize whatever is needed through a low level call.\n    * @param version representing the version name of the new implementation to be set.\n    * @param implementation representing the address of the new implementation to be set.\n    * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\n    * signature of the implementation to be called with the needed payload\n    */\n    function upgradeToAndCall(string version, address implementation, bytes data) payable public onlyProxyOwner {\n        upgradeTo(version, implementation);\n        require(address(this).call.value(msg.value)(data));\n    }\n}\n\n// File: contracts\\EternalStorageProxyForBulkTokenSending.sol\n\n// Initial code from Roman Storm Multi Sender\n// To Use this Dapp: https://bulktokensending.github.io/bulktokensending\npragma solidity 0.4.23;\n\n\n\n/**\n * @title EternalStorageProxy\n * @dev This proxy holds the storage of the token contract and delegates every call to the current implementation set.\n * Besides, it allows to upgrade the token's behaviour towards further implementations, and provides basic\n * authorization control functionalities\n */\ncontract EternalStorageProxyForBulkTokenSending is OwnedUpgradeabilityProxy, EternalStorage {\n    constructor(address _owner) public OwnedUpgradeabilityProxy(_owner) {}\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061079e8339810160405251806100358164010000000061003c810204565b505061005e565b60008054600160a060020a031916600160a060020a0392909216919091179055565b6107318061006d6000396000f3006080604052600436106100825763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100ff57806354fd4d50146101305780635a8b1a9f146101ba5780635c60da1b146102205780636fde820214610235578063958a41dd1461024a578063f1739cae146102e3575b6000606061008e610304565b9150600160a060020a03821615156100a557600080fd5b6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509050600080825160208401855af43d604051816000823e8280156100fb578282f35b8282fd5b34801561010b57600080fd5b50610114610314565b60408051600160a060020a039092168252519081900360200190f35b34801561013c57600080fd5b50610145610323565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017f578181015183820152602001610167565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261021e94369492936024939284019190819084018382808284375094975050509235600160a060020a031693506103b892505050565b005b34801561022c57600080fd5b50610114610304565b34801561024157600080fd5b506101146103ed565b6040805160206004803580820135601f810184900484028501840190955284845261021e94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b600160a060020a038b35169b909a9099940197509195509182019350915081908401838280828437509497506103fc9650505050505050565b3480156102ef57600080fd5b5061021e600160a060020a03600435166104b5565b600254600160a060020a03165b90565b600061031e6103ed565b905090565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ae5780601f10610383576101008083540402835291602001916103ae565b820191906000526020600020905b81548152906001019060200180831161039157829003601f168201915b5050505050905090565b6103c0610314565b600160a060020a031633600160a060020a03161415156103df57600080fd5b6103e98282610548565b5050565b600054600160a060020a031690565b610404610314565b600160a060020a031633600160a060020a031614151561042357600080fd5b61042d83836103b8565b30600160a060020a0316348260405180828051906020019080838360005b8381101561046357818101518382015260200161044b565b50505050905090810190601f1680156104905780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af19250505015156104b057600080fd5b505050565b6104bd610314565b600160a060020a031633600160a060020a03161415156104dc57600080fd5b600160a060020a03811615156104f157600080fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd961051a610314565b60408051600160a060020a03928316815291841660208301528051918290030190a16105458161063e565b50565b600254600160a060020a038281169116141561056357600080fd5b815161057690600190602085019061066d565b506002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831690811790915560408051602080825285518183015285517f8e05e0e35ff592971ca8b477d4285a33a61ded208d644042667b78693a472f5e938793928392918301919085019080838360005b838110156106005781810151838201526020016105e8565b50505050905090810190601f16801561062d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106ae57805160ff19168380011785556106db565b828001600101855582156106db579182015b828111156106db5782518255916020019190600101906106c0565b506106e79291506106eb565b5090565b61031191905b808211156106e757600081556001016106f15600a165627a7a72305820035bd44c4ca460541220fb1ba3df77f18831896dd74e7af17a83ec784380a81500290000000000000000000000006ccf57d5abaf7356dc1b6d583efdcdbe603535c8",
  "constructorArguments": "0000000000000000000000006ccf57d5abaf7356dc1b6d583efdcdbe603535c8"
}