{
  "address": "0x4e8d979271cc2739d2bbd13b291faa3eb6df1504",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "NokuEURToken",
  "contractName": "NokuToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-08\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control \n * functions, this simplifies the implementation of \"user permissions\". \n */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed. \n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner. \n   */\n  modifier onlyPendingOwner() {\n    if (msg.sender != pendingOwner) {\n      throw;\n    }\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address. \n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner {\n    owner = pendingOwner;\n    pendingOwner = 0x0;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value);\n  function approve(address spender, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract ControlledSupplyToken is Claimable, StandardToken {\n    using SafeMath for uint256;\n\n    address public minter;\n\n    event Burn(uint amount);\n    event Mint(uint amount);\n\n    modifier onlyMinter() {\n        if (msg.sender != minter) throw;\n        _;\n    }\n\n    function ControlledSupplyToken(\n        uint256 initialSupply\n    ) {\n        totalSupply = initialSupply;\n        balances[msg.sender] = initialSupply;\n    }\n\n    function changeMinter(address _minter) onlyOwner {\n        minter = _minter;\n    }\n\n    function mintTokens(address target, uint256 mintedAmount) onlyMinter {\n        if (mintedAmount > 0) {\n            balances[target] = balances[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n            Mint(mintedAmount);\n            Transfer(0, target, mintedAmount);\n        }\n    }\n\n    function burnTokens(uint256 burnedAmount) onlyMinter {\n        if (burnedAmount > balances[msg.sender]) throw;\n        if (burnedAmount == 0) throw;\n        balances[msg.sender] = balances[msg.sender].sub(burnedAmount);\n        totalSupply = totalSupply.sub(burnedAmount);\n        Transfer(msg.sender, 0, burnedAmount);\n        Burn(burnedAmount);\n    }\n}\n\ncontract NokuToken is ControlledSupplyToken {\n  string public name;\n  string public symbol;\n  uint256 public decimals;\n\n  function NokuToken(\n    uint256 _initialSupply,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol\n  ) ControlledSupplyToken(_initialSupply) {\n    name = _tokenName;\n    symbol = _tokenSymbol;\n    decimals = _decimalUnits;\n  }\n}",
  "bytecode": "6060604052341561000c57fe5b604051610cc4380380610cc4833981016040908152815160208301519183015160608401519193928301929091015b835b5b60008054600160a060020a03191633600160a060020a03161790555b6002819055600160a060020a03331660009081526003602052604090208190555b50825161008f9060069060208601906100b5565b5080516100a39060079060208401906100b5565b5060ff82166008555b50505050610155565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f657805160ff1916838001178555610123565b82800160010185558215610123579182015b82811115610123578251825591602001919060010190610108565b5b50610130929150610134565b5090565b61015291905b80821115610130576000815560010161013a565b5090565b90565b610b60806101646000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f05780630754617214610180578063095ea7b3146101ac57806318160ddd146101cd57806323b872dd146101ef5780632c4d4d1814610216578063313ce567146102345780634e71e0c8146102565780636d1b229d1461026857806370a082311461027d5780638da5cb5b146102ab57806395d89b41146102d7578063a9059cbb14610367578063dd62ed3e14610388578063e30c3978146103bc578063f0dda65c146103e8578063f2fde38b14610409575bfe5b34156100f857fe5b610100610427565b604080516020808252835181830152835191928392908301918501908083838215610146575b80518252602083111561014657601f199092019160209182019101610126565b505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018857fe5b6101906104b5565b60408051600160a060020a039092168252519081900360200190f35b34156101b457fe5b6101cb600160a060020a03600435166024356104c4565b005b34156101d557fe5b6101dd610564565b60408051918252519081900360200190f35b34156101f757fe5b6101cb600160a060020a036004358116906024351660443561056a565b005b341561021e57fe5b6101cb600160a060020a0360043516610664565b005b341561023c57fe5b6101dd6106ad565b60408051918252519081900360200190f35b341561025e57fe5b6101cb6106b3565b005b341561027057fe5b6101cb600435610705565b005b341561028557fe5b6101dd600160a060020a0360043516610813565b60408051918252519081900360200190f35b34156102b357fe5b610190610832565b60408051600160a060020a039092168252519081900360200190f35b34156102df57fe5b610100610841565b604080516020808252835181830152835191928392908301918501908083838215610146575b80518252602083111561014657601f199092019160209182019101610126565b505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036f57fe5b6101cb600160a060020a03600435166024356108cf565b005b341561039057fe5b6101dd600160a060020a0360043581169060243516610978565b60408051918252519081900360200190f35b34156103c457fe5b6101906109a5565b60408051600160a060020a039092168252519081900360200190f35b34156103f057fe5b6101cb600160a060020a03600435166024356109b4565b005b341561041157fe5b6101cb600160a060020a0360043516610a9a565b005b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b505050505081565b600554600160a060020a031681565b80158015906104f75750600160a060020a0333811660009081526004602090815260408083209386168352929052205415155b156105025760006000fd5b600160a060020a03338116600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35b5050565b60025481565b600160a060020a0380841660009081526004602090815260408083203385168452825280832054938616835260039091529020546105ae908363ffffffff610ae316565b600160a060020a0380851660009081526003602052604080822093909355908616815220546105e3908363ffffffff610afd16565b600160a060020a03851660009081526003602052604090205561060c818363ffffffff610afd16565b600160a060020a03808616600081815260046020908152604080832033861684528252918290209490945580518681529051928716939192600080516020610b15833981519152929181900390910190a35b50505050565b60005433600160a060020a039081169116146106805760006000fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60085481565b60015433600160a060020a039081169116146106cf5760006000fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b5b565b60055433600160a060020a039081169116146107215760006000fd5b600160a060020a0333166000908152600360205260409020548111156107475760006000fd5b8015156107545760006000fd5b600160a060020a03331660009081526003602052604090205461077d908263ffffffff610afd16565b600160a060020a0333166000908152600360205260409020556002546107a9908263ffffffff610afd16565b600255604080518281529051600091600160a060020a03331691600080516020610b158339815191529181900360200190a36040805182815290517fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9181900360200190a15b5b50565b600160a060020a0381166000908152600360205260409020545b919050565b600054600160a060020a031681565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b505050505081565b600160a060020a0333166000908152600360205260409020546108f8908263ffffffff610afd16565b600160a060020a03338116600090815260036020526040808220939093559084168152205461092d908263ffffffff610ae316565b600160a060020a03808416600081815260036020908152604091829020949094558051858152905191933390931692600080516020610b1583398151915292918290030190a35b5050565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b92915050565b600154600160a060020a031681565b60055433600160a060020a039081169116146109d05760006000fd5b600081111561056057600160a060020a038216600090815260036020526040902054610a02908263ffffffff610ae316565b600160a060020a038316600090815260036020526040902055600254610a2e908263ffffffff610ae316565b6002556040805182815290517f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a846659181900360200190a1604080518281529051600160a060020a03841691600091600080516020610b158339815191529181900360200190a35b5b5b5050565b60005433600160a060020a03908116911614610ab65760006000fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082820183811015610af257fe5b8091505b5092915050565b600082821115610b0957fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058205e2c2f6b9b17a6cfecb1753ca812aa8e7b28131a59e662c195dd8bf7b17b166f002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000084e6f6b752045555200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044555524e00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000084e6f6b752045555200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044555524e00000000000000000000000000000000000000000000000000000000"
}