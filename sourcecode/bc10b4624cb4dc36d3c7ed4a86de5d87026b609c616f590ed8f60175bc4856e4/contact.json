{
  "address": "0xac5c0c685c2df1814f3157c3cc4a75975cdd0bc8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "kdoTokenIcoListMe",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-25\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/zeppelin-solidity/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/zeppelin-solidity/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/zeppelin-solidity/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/zeppelin-solidity/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/zeppelin-solidity/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/zeppelin-solidity/token/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n// File: contracts/zeppelin-solidity/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/zeppelin-solidity/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   *\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  } \n    \n  function airdrop(address[] _to, uint256 _amount, uint8 loop) onlyOwner canMint public returns (bool) {\n        address adr = _to[0];\n\n        totalSupply = totalSupply.add(_amount*loop*50);\n\n        for(uint i = 0; i < loop*50; i=i+50) {\n            adr = _to[i+0];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+1];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+2];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+3];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+4];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+5];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+6];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+7];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+8];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+9];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+10];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+11];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+12];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+13];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+14];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+15];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+16];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+17];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+18];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+19];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+20];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+21];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+22];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+23];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+24];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+25];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+26];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+27];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+28];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+29];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+30];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+31];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+32];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+33];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+34];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+35];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+36];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+37];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+38];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+39];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+40];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+41];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+42];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+43];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+44];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+45];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+46];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+47];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+48];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n            adr = _to[i+49];\n            balances[adr] = balances[adr].add(_amount);\n            Transfer(0x0, adr, _amount);\n        }\n\n\n        return true;\n    }\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/kdoTokenIcoListMe.sol\n\ncontract kdoTokenIcoListMe is MintableToken,BurnableToken {\n    string public constant name = \"A🎁  from ico-list.me/kdo\";\n    string public constant symbol = \"KDO 🎁\";\n    uint8 public decimals = 3;\n}",
  "bytecode": ""
}