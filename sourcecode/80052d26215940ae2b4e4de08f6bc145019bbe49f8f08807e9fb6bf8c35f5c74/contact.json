{
  "address": "0x946551dd05c5abd7cc808927480225ce36d8c475",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity ^0.5.6;\n\nlibrary SafeMath {\n  /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n\n  /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n  /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  mapping(address => bool) public adminList;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier onlyAdmin() {\n    require(adminList[msg.sender] == true || msg.sender == owner);\n    _;\n  }\n\n  function addAdmin(address _address) public onlyOwner {\n      adminList[_address] = true;\n  }\n\n  function removeAdmin(address _address) public onlyOwner {\n      adminList[_address] = false;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Standard ERC20 token\n */\ncontract StandardToken {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 internal totalSupply_;\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 vaule\n  );\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n}\n\n/**\n * Overriding ERC-20 specification that lets owner Pause all trading.\n */\ncontract PausableToken is StandardToken, Pausable {\n\n  event Burn(address indexed from, uint256 value);\n  event Mint(address indexed to, uint256 value);\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public onlyOwner {\n    require(balances[msg.sender] >= _value);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Transfer(msg.sender, address(0x00), _value);\n    emit Burn(msg.sender, _value);\n  }\n\n  function mint(uint256 _value) public onlyOwner {\n    balances[msg.sender] = balances[msg.sender].add(_value);\n    totalSupply_ = totalSupply_.add(_value);\n    emit Transfer(address(0x00), msg.sender, _value);\n    emit Mint(msg.sender, _value);\n  }\n}\n\ncontract FreezeToken is PausableToken {\n  mapping(address=>bool) public frozenAccount;\n  event FrozenAccount(address indexed target, bool frozen);\n\n  function frozenCheck(address target) internal view {\n    require(!frozenAccount[target]);\n  }\n\n  function freezeAccount(address target, bool frozen) public onlyAdmin {\n    frozenAccount[target] = frozen;\n    emit FrozenAccount(target, frozen);\n  }\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    frozenCheck(msg.sender);\n    frozenCheck(_to);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    frozenCheck(msg.sender);\n    frozenCheck(_from);\n    frozenCheck(_to);\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\ncontract Token is FreezeToken {\n  string public constant name = \"BigONE Token\";  // name of Token \n  string public constant symbol = \"ONE\"; // symbol of Token \n  uint8 public constant decimals = 18;\n  mapping (address => string) public keys;\n\n  event Register (address user, string key);\n  \n  constructor() public {\n    totalSupply_ = 1350852214721 * 10 ** uint256(decimals - 2);\n    balances[msg.sender] = totalSupply_;\n    emit Transfer(address(0x00), msg.sender,totalSupply_);\n  }\n  \n  function register(string memory key) public {\n    keys[msg.sender] = key;\n    emit Register(msg.sender, key);\n  }\n}",
  "bytecode": "60806040526005805460ff1916905534801561001a57600080fd5b50600380546001600160a01b031916339081179091556b2ba5fcd4f4247b277f810000600281905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610ff9806100966000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370480275116100c3578063a9059cbb1161007c578063a9059cbb146103bb578063b414d4b6146103e7578063dd62ed3e1461040d578063e724529c1461043b578063f2c298be14610469578063f2fde38b1461050f5761014d565b8063704802751461031e57806370a08231146103445780638456cb591461036a5780638da5cb5b1461037257806395d89b4114610396578063a0712d681461039e5761014d565b806327304dfd1161011557806327304dfd14610287578063313ce567146102ad5780633f4ba83a146102cb57806342966c68146102d35780635c975abb146102f0578063670d14b2146102f85761014d565b806306fdde0314610152578063095ea7b3146101cf5780631785f53c1461020f57806318160ddd1461023757806323b872dd14610251575b600080fd5b61015a610535565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019457818101518382015260200161017c565b50505050905090810190601f1680156101c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fb600480360360408110156101e557600080fd5b506001600160a01b03813516906020013561055d565b604080519115158252519081900360200190f35b6102356004803603602081101561022557600080fd5b50356001600160a01b0316610581565b005b61023f6105b9565b60408051918252519081900360200190f35b6101fb6004803603606081101561026757600080fd5b506001600160a01b038135811691602081013590911690604001356105c0565b6101fb6004803603602081101561029d57600080fd5b50356001600160a01b0316610601565b6102b5610616565b6040805160ff9092168252519081900360200190f35b61023561061b565b610235600480360360208110156102e957600080fd5b5035610676565b6101fb61074e565b61015a6004803603602081101561030e57600080fd5b50356001600160a01b0316610757565b6102356004803603602081101561033457600080fd5b50356001600160a01b03166107f2565b61023f6004803603602081101561035a57600080fd5b50356001600160a01b031661082d565b610235610848565b61037a6108a7565b604080516001600160a01b039092168252519081900360200190f35b61015a6108b6565b610235600480360360208110156103b457600080fd5b50356108d5565b6101fb600480360360408110156103d157600080fd5b506001600160a01b038135169060200135610991565b6101fb600480360360208110156103fd57600080fd5b50356001600160a01b03166109af565b61023f6004803603604081101561042357600080fd5b506001600160a01b03813581169160200135166109c4565b6102356004803603604081101561045157600080fd5b506001600160a01b03813516906020013515156109ef565b6102356004803603602081101561047f57600080fd5b81019060208101813564010000000081111561049a57600080fd5b8201836020820111156104ac57600080fd5b803590602001918460018302840111640100000000831117156104ce57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a85945050505050565b6102356004803603602081101561052557600080fd5b50356001600160a01b0316610b5c565b6040518060400160405280600c81526020016b2134b3a7a722902a37b5b2b760a11b81525081565b60055460009060ff161561057057600080fd5b61057a8383610b7f565b9392505050565b6003546001600160a01b0316331461059857600080fd5b6001600160a01b03166000908152600460205260409020805460ff19169055565b6002545b90565b60055460009060ff16156105d357600080fd5b6105dc33610be5565b6105e584610be5565b6105ee83610be5565b6105f9848484610c0b565b949350505050565b60046020526000908152604090205460ff1681565b601281565b6003546001600160a01b0316331461063257600080fd5b60055460ff1661064157600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6003546001600160a01b0316331461068d57600080fd5b336000908152602081905260409020548111156106a957600080fd5b336000908152602081905260409020546106c9908263ffffffff610c2916565b336000908152602081905260409020556002546106ec908263ffffffff610c2916565b6002556040805182815290516000913391600080516020610fa58339815191529181900360200190a360408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b60055460ff1681565b60076020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156107ea5780601f106107bf576101008083540402835291602001916107ea565b820191906000526020600020905b8154815290600101906020018083116107cd57829003601f168201915b505050505081565b6003546001600160a01b0316331461080957600080fd5b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205490565b6003546001600160a01b0316331461085f57600080fd5b60055460ff161561086f57600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6003546001600160a01b031681565b604051806040016040528060038152602001624f4e4560e81b81525081565b6003546001600160a01b031633146108ec57600080fd5b3360009081526020819052604090205461090c908263ffffffff610c3e16565b3360009081526020819052604090205560025461092f908263ffffffff610c3e16565b6002556040805182815290513391600091600080516020610fa58339815191529181900360200190a360408051828152905133917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a250565b600061099c33610be5565b6109a583610be5565b61057a8383610c50565b60066020526000908152604090205460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3360009081526004602052604090205460ff16151560011480610a1c57506003546001600160a01b031633145b610a2557600080fd5b6001600160a01b038216600081815260066020908152604091829020805460ff1916851515908117909155825190815291517f67a17b8db8ff8fa7cff69c2328bf8a35f9be2c88abeea30be900fc28eece28ed9281900390910190a25050565b3360009081526007602090815260409091208251610aa592840190610f0c565b507f6ba0831d2f62ae5cbf7214bcc1d79c5da1d705f12811efda0beaa840006f874e338260405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b1e578181015183820152602001610b06565b50505050905090810190601f168015610b4b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6003546001600160a01b03163314610b7357600080fd5b610b7c81610c6d565b50565b3360008181526001602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6001600160a01b03811660009081526006602052604090205460ff1615610b7c57600080fd5b60055460009060ff1615610c1e57600080fd5b6105f9848484610cdc565b600082821115610c3857600080fd5b50900390565b60008282018381101561057a57600080fd5b60055460009060ff1615610c6357600080fd5b61057a8383610e3f565b6001600160a01b038116610c8057600080fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038316610cf157600080fd5b6001600160a01b038416600090815260208190526040902054821115610d1657600080fd5b6001600160a01b0384166000908152600160209081526040808320338452909152902054821115610d4657600080fd5b6001600160a01b038416600090815260208190526040902054610d6f908363ffffffff610c2916565b6001600160a01b038086166000908152602081905260408082209390935590851681522054610da4908363ffffffff610c3e16565b6001600160a01b03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610de6908363ffffffff610c2916565b6001600160a01b0380861660008181526001602090815260408083203384528252918290209490945580518681529051928716939192600080516020610fa5833981519152929181900390910190a35060019392505050565b60006001600160a01b038316610e5457600080fd5b33600090815260208190526040902054821115610e7057600080fd5b33600090815260208190526040902054610e90908363ffffffff610c2916565b33600090815260208190526040808220929092556001600160a01b03851681522054610ec2908363ffffffff610c3e16565b6001600160a01b03841660008181526020818152604091829020939093558051858152905191923392600080516020610fa58339815191529281900390910190a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f4d57805160ff1916838001178555610f7a565b82800160010185558215610f7a579182015b82811115610f7a578251825591602001919060010190610f5f565b50610f86929150610f8a565b5090565b6105bd91905b80821115610f865760008155600101610f9056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa265627a7a723058207a4f15493e94fd84bf353d52742ce50e6ffc9b351b9d81d425aed5ff8f67a16f64736f6c63430005090032",
  "constructorArguments": "00490600052602060002090601f016020900481019282601f10610f4d57805160ff1916838001178555610f7a565b82800160010185558215610f7a579182015b82811115610f7a578251825591602001919060010190610f5f565b50610f86929150610f8a565b5090565b6105bd91905b80821115610f865760008155600101610f9056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa265627a7a723058207a4f15493e94fd84bf353d52742ce50e6ffc9b351b9d81d425aed5ff8f67a16f64736f6c63430005090032"
}