{
  "address": "0x8a07183cec562506f7ec29be42d7f5a14ee9e484",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KingOfEthHouses",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-13\n*/\n\n// File: contracts/GodMode.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title God Mode\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a basic interface for God\n///  in a contract as well as the ability for God to pause\n///  the contract\ncontract GodMode {\n    /// @dev Is the contract paused?\n    bool public isPaused;\n\n    /// @dev God's address\n    address public god;\n\n    /// @dev Only God can run this function\n    modifier onlyGod()\n    {\n        require(god == msg.sender);\n        _;\n    }\n\n    /// @dev This function can only be run while the contract\n    ///  is not paused\n    modifier notPaused()\n    {\n        require(!isPaused);\n        _;\n    }\n\n    /// @dev This event is fired when the contract is paused\n    event GodPaused();\n\n    /// @dev This event is fired when the contract is unpaused\n    event GodUnpaused();\n\n    constructor() public\n    {\n        // Make the creator of the contract God\n        god = msg.sender;\n    }\n\n    /// @dev God can change the address of God\n    /// @param _newGod The new address for God\n    function godChangeGod(address _newGod) public onlyGod\n    {\n        god = _newGod;\n    }\n\n    /// @dev God can pause the game\n    function godPause() public onlyGod\n    {\n        isPaused = true;\n\n        emit GodPaused();\n    }\n\n    /// @dev God can unpause the game\n    function godUnpause() public onlyGod\n    {\n        isPaused = false;\n\n        emit GodUnpaused();\n    }\n}\n\n// File: contracts/KingOfEthAuctionsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Auctions Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for auctions of houses\ncontract KingOfEthAuctionsAbstractInterface {\n    /// @dev Determines if there is an auction at a particular location\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    /// @return true if there is an existing auction\n    function existingAuction(uint _x, uint _y) public view returns(bool);\n}\n\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Blind Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the blind auctions contract\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\n    /// @dev The address of the blind auctions contract\n    address public blindAuctionsContract;\n\n    /// @dev Only the blind auctions contract can run this\n    modifier onlyBlindAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new blind auctions contract\n    /// @param _blindAuctionsContract the address of the blind auctions\n    ///  contract\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\n        public\n        onlyGod\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Open Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the open auctions contract\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\n    /// @dev The address of the auctions contract\n    address public openAuctionsContract;\n\n    /// @dev Only the open auctions contract can run this\n    modifier onlyOpenAuctionsContract()\n    {\n        require(openAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new auctions contract\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\n        public\n        onlyGod\n    {\n        openAuctionsContract = _openAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title King of Eth: Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the auctions contracts\ncontract KingOfEthAuctionsReferencer is\n      KingOfEthBlindAuctionsReferencer\n    , KingOfEthOpenAuctionsReferencer\n{\n    /// @dev Only an auctions contract can run this\n    modifier onlyAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender\n             || openAuctionsContract == msg.sender);\n        _;\n    }\n}\n\n// File: contracts/KingOfEthAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for titles and taxes\ncontract KingOfEthAbstractInterface {\n    /// @dev The address of the current King\n    address public king;\n\n    /// @dev The address of the current Wayfarer\n    address public wayfarer;\n\n    /// @dev Anyone can pay taxes\n    function payTaxes() public payable;\n}\n\n// File: contracts/KingOfEthReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the king contract\ncontract KingOfEthReferencer is GodMode {\n    /// @dev The address of the king contract\n    address public kingOfEthContract;\n\n    /// @dev Only the king contract can run this\n    modifier onlyKingOfEthContract()\n    {\n        require(kingOfEthContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the king contract\n    /// @param _kingOfEthContract The new address\n    function godSetKingOfEthContract(address _kingOfEthContract)\n        public\n        onlyGod\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n}\n\n// File: contracts/KingOfEthBoard.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/// @title King of Eth: Board\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for board\ncontract KingOfEthBoard is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthReferencer\n{\n    /// @dev x coordinate of the top left corner of the boundary\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev y coordinate of the top left corner of the boundary\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev x coordinate of the bottom right corner of the boundary\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev y coordinate of the bottom right corner of the boundary\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev Number used to divide the total number of house locations\n    /// after any expansion to yield the number of auctions that  will be\n    /// available to start for the expansion's duration\n    uint public constant auctionsAvailableDivisor = 10;\n\n    /// @dev Amount of time the King must wait between increasing the board\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\n\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\n\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\n    ///  before increasing the board\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\n\n    /// @dev The last time the board was increased in size\n    uint public lastIncreaseTime;\n\n    /// @dev The direction of the next increase\n    uint8 public nextIncreaseDirection;\n\n    /// @dev The number of auctions that players may choose to start\n    ///  for this expansion\n    uint public auctionsRemaining;\n\n    constructor() public\n    {\n        // Game is paused as God must start it\n        isPaused = true;\n\n        // Set the auctions remaining\n        setAuctionsAvailableForBounds();\n    }\n\n    /// @dev Fired when the board is increased in size\n    event BoardSizeIncreased(\n          address initiator\n        , uint newBoundX1\n        , uint newBoundY1\n        , uint newBoundX2\n        , uint newBoundY2\n        , uint lastIncreaseTime\n        , uint nextIncreaseDirection\n        , uint auctionsRemaining\n    );\n\n    /// @dev Only the King can run this\n    modifier onlyKing()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\n        _;\n    }\n\n    /// @dev Only the Wayfarer can run this\n    modifier onlyWayfarer()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\n        _;\n    }\n\n    /// @dev Set the total auctions available\n    function setAuctionsAvailableForBounds() private\n    {\n        uint boundDiffX = boundX2 - boundX1;\n        uint boundDiffY = boundY2 - boundY1;\n\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\n    }\n\n    /// @dev Increase the board's size making sure to keep steady at\n    ///  the maximum outer bounds\n    function increaseBoard() private\n    {\n        // The length of increase\n        uint _increaseLength;\n\n        // If this increase direction is right\n        if(0 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n            uint _updatedX2 = boundX2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\n            {\n                boundX2 = ~uint(0);\n            }\n            else\n            {\n                boundX2 = _updatedX2;\n            }\n        }\n        // If this increase direction is down\n        else if(1 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n            uint _updatedY2 = boundY2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\n            {\n                boundY2 = ~uint(0);\n            }\n            else\n            {\n                boundY2 = _updatedY2;\n            }\n        }\n        // If this increase direction is left\n        else if(2 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n\n            // Stay within bounds\n            if(boundX1 <= _increaseLength)\n            {\n                boundX1 = 0;\n            }\n            else\n            {\n                boundX1 -= _increaseLength;\n            }\n        }\n        // If this increase direction is up\n        else if(3 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n\n            // Stay within bounds\n            if(boundY1 <= _increaseLength)\n            {\n                boundY1 = 0;\n            }\n            else\n            {\n                boundY1 -= _increaseLength;\n            }\n        }\n\n        // The last increase time is now\n        lastIncreaseTime = now;\n\n        // Set the next increase direction\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\n\n        // Reset the auctions available\n        setAuctionsAvailableForBounds();\n\n        emit BoardSizeIncreased(\n              msg.sender\n            , boundX1\n            , boundY1\n            , boundX2\n            , boundY2\n            , now\n            , nextIncreaseDirection\n            , auctionsRemaining\n        );\n    }\n\n    /// @dev God can start the game\n    function godStartGame() public onlyGod\n    {\n        // Reset increase times\n        lastIncreaseTime = now;\n\n        // Unpause the game\n        godUnpause();\n    }\n\n    /// @dev The auctions contracts can decrement the number\n    ///  of auctions that are available to be started\n    function auctionsDecrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining -= 1;\n    }\n\n    /// @dev The auctions contracts can increment the number\n    ///  of auctions that are available to be started when\n    ///  an auction ends wihout a winner\n    function auctionsIncrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining += 1;\n    }\n\n    /// @dev The King can increase the board much faster than the plebs\n    function kingIncreaseBoard()\n        public\n        onlyKing\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev The Wayfarer can increase the board faster than the plebs\n    function wayfarerIncreaseBoard()\n        public\n        onlyWayfarer\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev Any old pleb can increase the board\n    function plebIncreaseBoard() public\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n}\n\n// File: contracts/KingOfEthBoardReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Board Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the board contract\ncontract KingOfEthBoardReferencer is GodMode {\n    /// @dev The address of the board contract\n    address public boardContract;\n\n    /// @dev Only the board contract can run this\n    modifier onlyBoardContract()\n    {\n        require(boardContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the board contract\n    /// @param _boardContract The new address\n    function godSetBoardContract(address _boardContract)\n        public\n        onlyGod\n    {\n        boardContract = _boardContract;\n    }\n}\n\n// File: contracts/KingOfEthHousesAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Houses Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for houses\ncontract KingOfEthHousesAbstractInterface {\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address);\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8);\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthHousesReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Houses Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the houses contract\ncontract KingOfEthHousesReferencer is GodMode {\n    /// @dev The houses contract's address\n    address public housesContract;\n\n    /// @dev Only the houses contract can run this function\n    modifier onlyHousesContract()\n    {\n        require(housesContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _housesContract The new address\n    function godSetHousesContract(address _housesContract)\n        public\n        onlyGod\n    {\n        housesContract = _housesContract;\n    }\n}\n\n// File: contracts/KingOfEthHouseRealty.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/// @title King of Eth: House Realty\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for controlling sales of houses\ncontract KingOfEthHouseRealty is\n      GodMode\n    , KingOfEthHousesReferencer\n    , KingOfEthReferencer\n{\n    /// @dev The number that divides the amount payed for any sale to produce\n    ///  the amount payed in taxes\n    uint public constant taxDivisor = 25;\n\n    /// @dev Mapping from the x, y coordinates of a house to the current sale\n    ///  price (0 if there is no sale)\n    mapping (uint => mapping (uint => uint)) housePrices;\n\n    /// @dev Fired when there is a new house for sale\n    event HouseForSale(\n          uint x\n        , uint y\n        , address owner\n        , uint amount\n    );\n\n    /// @dev Fired when the owner changes the price of a house\n    event HousePriceChanged(uint x, uint y, uint amount);\n\n    /// @dev Fired when a house is sold\n    event HouseSold(\n          uint x\n        , uint y\n        , address from\n        , address to\n        , uint amount\n        , uint8 level\n    );\n\n    /// @dev Fired when the sale for a house is cancelled by the owner\n    event HouseSaleCancelled(\n          uint x\n        , uint y\n        , address owner\n    );\n\n    /// @dev Only the owner of the house at a location can run this\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier onlyHouseOwner(uint _x, uint _y)\n    {\n        require(KingOfEthHousesAbstractInterface(housesContract).ownerOf(_x, _y) == msg.sender);\n        _;\n    }\n\n    /// @dev This can only be run if there is *not* an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier noExistingHouseSale(uint _x, uint _y)\n    {\n        require(0 == housePrices[_x][_y]);\n        _;\n    }\n\n    /// @dev This can only be run if there is an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier existingHouseSale(uint _x, uint _y)\n    {\n        require(0 != housePrices[_x][_y]);\n        _;\n    }\n\n    /// @param _kingOfEthContract The address of the king contract\n    constructor(address _kingOfEthContract) public\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n\n    /// @dev The houses contract can cancel a sale when a house is transfered\n    ///  to another player\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function housesCancelHouseSale(uint _x, uint _y)\n        public\n        onlyHousesContract\n    {\n        // If there is indeed a sale\n        if(0 != housePrices[_x][_y])\n        {\n            // Cancel the sale\n            housePrices[_x][_y] = 0;\n\n            emit HouseSaleCancelled(_x, _y, msg.sender);\n        }\n    }\n\n    /// @dev The owner of a house can start a sale\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _askingPrice The price that must be payed by another player\n    ///  to purchase the house\n    function startHouseSale(uint _x, uint _y, uint _askingPrice)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        noExistingHouseSale(_x, _y)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        housePrices[_x][_y] = _askingPrice;\n\n        emit HouseForSale(_x, _y, msg.sender, _askingPrice);\n    }\n\n    /// @dev The owner of a house can change the price of a sale\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _askingPrice The new price that must be payed by another\n    ///  player to purchase the house\n    function changeHousePrice(uint _x, uint _y, uint _askingPrice)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        existingHouseSale(_x, _y)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        housePrices[_x][_y] = _askingPrice;\n\n        emit HousePriceChanged(_x, _y, _askingPrice);\n    }\n\n    /// @dev Anyone can purchase a house as long as the sale exists\n    /// @param _x The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    function purchaseHouse(uint _x, uint _y)\n        public\n        payable\n        notPaused\n        existingHouseSale(_x, _y)\n    {\n        // Require that the exact price was paid\n        require(housePrices[_x][_y] == msg.value);\n\n        // End the sale\n        housePrices[_x][_y] = 0;\n\n        // Calculate the taxes to be paid\n        uint taxCut = msg.value / taxDivisor;\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Determine the previous owner\n        address _oldOwner = _housesContract.ownerOf(_x, _y);\n\n        // Send the buyer the house\n        _housesContract.houseRealtyTransferOwnership(\n              _x\n            , _y\n            , _oldOwner\n            , msg.sender\n        );\n\n        // Send the previous owner his share\n        _oldOwner.transfer(msg.value - taxCut);\n\n        emit HouseSold(\n              _x\n            , _y\n            , _oldOwner\n            , msg.sender\n            , msg.value\n            , _housesContract.level(_x, _y)\n        );\n    }\n\n    /// @dev The owner of a house can cancel a sale\n    /// @param _x The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    function cancelHouseSale(uint _x, uint _y)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        existingHouseSale(_x, _y)\n    {\n        // Cancel the sale\n        housePrices[_x][_y] = 0;\n\n        emit HouseSaleCancelled(_x, _y, msg.sender);\n    }\n}\n\n// File: contracts/KingOfEthHouseRealtyReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: House Realty Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the house realty contract\ncontract KingOfEthHouseRealtyReferencer is GodMode {\n    /// @dev The realty contract's address\n    address public houseRealtyContract;\n\n    /// @dev Only the house realty contract can run this function\n    modifier onlyHouseRealtyContract()\n    {\n        require(houseRealtyContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the house realty contract\n    /// @param _houseRealtyContract The new address\n    function godSetHouseRealtyContract(address _houseRealtyContract)\n        public\n        onlyGod\n    {\n        houseRealtyContract = _houseRealtyContract;\n    }\n}\n\n// File: contracts/KingOfEthRoadsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Roads Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for roads\ncontract KingOfEthRoadsAbstractInterface {\n    /// @dev Get the owner of the road at some location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road (either\n    ///  0 for right or 1 for down)\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y, uint8 _direction) public view returns(address);\n\n    /// @dev The road realty contract can transfer road ownership\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _from The previous owner of road\n    /// @param _to The new owner of road\n    function roadRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthRoadsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Roads Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the roads contract\ncontract KingOfEthRoadsReferencer is GodMode {\n    /// @dev The roads contract's address\n    address public roadsContract;\n\n    /// @dev Only the roads contract can run this function\n    modifier onlyRoadsContract()\n    {\n        require(roadsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _roadsContract The new address\n    function godSetRoadsContract(address _roadsContract)\n        public\n        onlyGod\n    {\n        roadsContract = _roadsContract;\n    }\n}\n\n// File: contracts/KingOfEthEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-ETH Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  ETH exchange contract\ncontract KingOfEthEthExchangeReferencer is GodMode {\n    /// @dev Address of the ETH exchange contract\n    address public ethExchangeContract;\n\n    /// @dev Only the ETH exchange contract may run this function\n    modifier onlyEthExchangeContract()\n    {\n        require(ethExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the ETH exchange contract's address\n    /// @dev _ethExchangeContract The new address\n    function godSetEthExchangeContract(address _ethExchangeContract)\n        public\n        onlyGod\n    {\n        ethExchangeContract = _ethExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthResourceExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-Resource Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  resource-to-resource contract\ncontract KingOfEthResourceExchangeReferencer is GodMode {\n    /// @dev Address of the resource-to-resource contract\n    address public resourceExchangeContract;\n\n    /// @dev Only the resource-to-resource contract may run this function\n    modifier onlyResourceExchangeContract()\n    {\n        require(resourceExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the resource-to-resource contract's address\n    /// @dev _resourceExchangeContract The new address\n    function godSetResourceExchangeContract(address _resourceExchangeContract)\n        public\n        onlyGod\n    {\n        resourceExchangeContract = _resourceExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n/// @title King of Eth: Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the exchange contract\ncontract KingOfEthExchangeReferencer is\n      GodMode\n    , KingOfEthEthExchangeReferencer\n    , KingOfEthResourceExchangeReferencer\n{\n    /// @dev Only one of the exchange contracts may\n    ///  run this function\n    modifier onlyExchangeContract()\n    {\n        require(\n               ethExchangeContract == msg.sender\n            || resourceExchangeContract == msg.sender\n        );\n        _;\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resources Interface Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the resource interface contract\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\n    /// @dev The interface contract's address\n    address public interfaceContract;\n\n    /// @dev Only the interface contract can run this function\n    modifier onlyInterfaceContract()\n    {\n        require(interfaceContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _interfaceContract The new address\n    function godSetInterfaceContract(address _interfaceContract)\n        public\n        onlyGod\n    {\n        interfaceContract = _interfaceContract;\n    }\n}\n\n// File: contracts/KingOfEthResource.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title ERC20Interface\n/// @dev ERC20 token interface contract\ncontract ERC20Interface {\n    function totalSupply() public constant returns(uint);\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\n    function transfer(address _to, uint _tokens) public returns(bool success);\n    function approve(address _spender, uint _tokens) public returns(bool success);\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n/// @title King of Eth: Resource\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Common contract implementation for resources\ncontract KingOfEthResource is\n      ERC20Interface\n    , GodMode\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev Current resource supply\n    uint public resourceSupply;\n\n    /// @dev ERC20 token's decimals\n    uint8 public constant decimals = 0;\n\n    /// @dev mapping of addresses to holdings\n    mapping (address => uint) holdings;\n\n    /// @dev mapping of addresses to amount of tokens frozen\n    mapping (address => uint) frozenHoldings;\n\n    /// @dev mapping of addresses to mapping of allowances for an address\n    mapping (address => mapping (address => uint)) allowances;\n\n    /// @dev ERC20 total supply\n    /// @return The current total supply of the resource\n    function totalSupply()\n        public\n        constant\n        returns(uint)\n    {\n        return resourceSupply;\n    }\n\n    /// @dev ERC20 balance of address\n    /// @param _tokenOwner The address to look up\n    /// @return The balance of the address\n    function balanceOf(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return holdings[_tokenOwner];\n    }\n\n    /// @dev Total resources frozen for an address\n    /// @param _tokenOwner The address to look up\n    /// @return The frozen balance of the address\n    function frozenTokens(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return frozenHoldings[_tokenOwner];\n    }\n\n    /// @dev The allowance for a spender on an account\n    /// @param _tokenOwner The account that allows withdrawels\n    /// @param _spender The account that is allowed to withdraw\n    /// @return The amount remaining in the allowance\n    function allowance(address _tokenOwner, address _spender)\n        public\n        constant\n        returns(uint remaining)\n    {\n        return allowances[_tokenOwner][_spender];\n    }\n\n    /// @dev Only run if player has at least some amount of tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens required\n    modifier hasAvailableTokens(address _owner, uint _tokens)\n    {\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Only run if player has at least some amount of tokens frozen\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of frozen tokens required\n    modifier hasFrozenTokens(address _owner, uint _tokens)\n    {\n        require(frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Set up the exact same state in each resource\n    constructor() public\n    {\n        // God gets 200 to put on exchange\n        holdings[msg.sender] = 200;\n\n        resourceSupply = 200;\n    }\n\n    /// @dev The resources interface can burn tokens for building\n    ///  roads or houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceBurnTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        holdings[_owner] -= _tokens;\n\n        resourceSupply -= _tokens;\n\n        // Pretend the tokens were sent to 0x0\n        emit Transfer(_owner, 0x0, _tokens);\n    }\n\n    /// @dev The resources interface contract can mint tokens for houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceMintTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        holdings[_owner] += _tokens;\n\n        resourceSupply += _tokens;\n\n        // Pretend the tokens were sent from the interface contract\n        emit Transfer(interfaceContract, _owner, _tokens);\n    }\n\n    /// @dev The interface can freeze tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function interfaceFreezeTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] += _tokens;\n    }\n\n    /// @dev The interface can thaw tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function interfaceThawTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] -= _tokens;\n    }\n\n    /// @dev The interface can transfer tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function interfaceTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        assert(holdings[_from] >= _tokens);\n\n        holdings[_from] -= _tokens;\n        holdings[_to]   += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev The interface can transfer frozend tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_from, _tokens)\n    {\n        // Make sure to deduct the tokens from both the total and frozen amounts\n        holdings[_from]       -= _tokens;\n        frozenHoldings[_from] -= _tokens;\n        holdings[_to]         += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev ERC20 transfer\n    /// @param _to The address to transfer to\n    /// @param _tokens The amount of tokens to transfer\n    function transfer(address _to, uint _tokens)\n        public\n        hasAvailableTokens(msg.sender, _tokens)\n        returns(bool success)\n    {\n        holdings[_to]        += _tokens;\n        holdings[msg.sender] -= _tokens;\n\n        emit Transfer(msg.sender, _to, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 approve\n    /// @param _spender The address to approve\n    /// @param _tokens The amount of tokens to approve\n    function approve(address _spender, uint _tokens)\n        public\n        returns(bool success)\n    {\n        allowances[msg.sender][_spender] = _tokens;\n\n        emit Approval(msg.sender, _spender, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 transfer from\n    /// @param _from The address providing the allowance\n    /// @param _to The address using the allowance\n    /// @param _tokens The amount of tokens to transfer\n    function transferFrom(address _from, address _to, uint _tokens)\n        public\n        hasAvailableTokens(_from, _tokens)\n        returns(bool success)\n    {\n        require(allowances[_from][_to] >= _tokens);\n\n        holdings[_to]          += _tokens;\n        holdings[_from]        -= _tokens;\n        allowances[_from][_to] -= _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n\n        return true;\n    }\n}\n\n// File: contracts/KingOfEthResourceType.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Resource Type\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides enum to choose resource types\ncontract KingOfEthResourceType {\n    /// @dev Enum describing a choice of a resource\n    enum ResourceType {\n          ETH\n        , BRONZE\n        , CORN\n        , GOLD\n        , OIL\n        , ORE\n        , STEEL\n        , URANIUM\n        , WOOD\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n/// @title King of Eth: Resources Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for interacting with resources\ncontract KingOfEthResourcesInterface is\n      GodMode\n    , KingOfEthExchangeReferencer\n    , KingOfEthHousesReferencer\n    , KingOfEthResourceType\n    , KingOfEthRoadsReferencer\n{\n    /// @dev Amount of resources a user gets for building a house\n    uint public constant resourcesPerHouse = 3;\n\n    /// @dev Address for the bronze contract\n    address public bronzeContract;\n\n    /// @dev Address for the corn contract\n    address public cornContract;\n\n    /// @dev Address for the gold contract\n    address public goldContract;\n\n    /// @dev Address for the oil contract\n    address public oilContract;\n\n    /// @dev Address for the ore contract\n    address public oreContract;\n\n    /// @dev Address for the steel contract\n    address public steelContract;\n\n    /// @dev Address for the uranium contract\n    address public uraniumContract;\n\n    /// @dev Address for the wood contract\n    address public woodContract;\n\n    /// @param _bronzeContract The address of the bronze contract\n    /// @param _cornContract The address of the corn contract\n    /// @param _goldContract The address of the gold contract\n    /// @param _oilContract The address of the oil contract\n    /// @param _oreContract The address of the ore contract\n    /// @param _steelContract The address of the steel contract\n    /// @param _uraniumContract The address of the uranium contract\n    /// @param _woodContract The address of the wood contract\n    constructor(\n          address _bronzeContract\n        , address _cornContract\n        , address _goldContract\n        , address _oilContract\n        , address _oreContract\n        , address _steelContract\n        , address _uraniumContract\n        , address _woodContract\n    )\n        public\n    {\n        bronzeContract  = _bronzeContract;\n        cornContract    = _cornContract;\n        goldContract    = _goldContract;\n        oilContract     = _oilContract;\n        oreContract     = _oreContract;\n        steelContract   = _steelContract;\n        uraniumContract = _uraniumContract;\n        woodContract    = _woodContract;\n    }\n\n    /// @dev Return the particular address for a certain resource type\n    /// @param _type The resource type\n    /// @return The address for that resource\n    function contractFor(ResourceType _type)\n        public\n        view\n        returns(address)\n    {\n        // ETH does not have a contract\n        require(ResourceType.ETH != _type);\n\n        if(ResourceType.BRONZE == _type)\n        {\n            return bronzeContract;\n        }\n        else if(ResourceType.CORN == _type)\n        {\n            return cornContract;\n        }\n        else if(ResourceType.GOLD == _type)\n        {\n            return goldContract;\n        }\n        else if(ResourceType.OIL == _type)\n        {\n            return oilContract;\n        }\n        else if(ResourceType.ORE == _type)\n        {\n            return oreContract;\n        }\n        else if(ResourceType.STEEL == _type)\n        {\n            return steelContract;\n        }\n        else if(ResourceType.URANIUM == _type)\n        {\n            return uraniumContract;\n        }\n        else if(ResourceType.WOOD == _type)\n        {\n            return woodContract;\n        }\n    }\n\n    /// @dev Determine the resource type of a tile\n    /// @param _x The x coordinate of the top left corner of the tile\n    /// @param _y The y coordinate of the top left corner of the tile\n    function resourceType(uint _x, uint _y)\n        public\n        pure\n        returns(ResourceType resource)\n    {\n        uint _seed = (_x + 7777777) ^  _y;\n\n        if(0 == _seed % 97)\n        {\n          return ResourceType.URANIUM;\n        }\n        else if(0 == _seed % 29)\n        {\n          return ResourceType.OIL;\n        }\n        else if(0 == _seed % 23)\n        {\n          return ResourceType.STEEL;\n        }\n        else if(0 == _seed % 17)\n        {\n          return ResourceType.GOLD;\n        }\n        else if(0 == _seed % 11)\n        {\n          return ResourceType.BRONZE;\n        }\n        else if(0 == _seed % 5)\n        {\n          return ResourceType.WOOD;\n        }\n        else if(0 == _seed % 2)\n        {\n          return ResourceType.CORN;\n        }\n        else\n        {\n          return ResourceType.ORE;\n        }\n    }\n\n    /// @dev Lookup the number of resource points for a certain\n    ///  player\n    /// @param _player The player in question\n    function lookupResourcePoints(address _player)\n        public\n        view\n        returns(uint)\n    {\n        uint result = 0;\n\n        result += KingOfEthResource(bronzeContract).balanceOf(_player);\n        result += KingOfEthResource(goldContract).balanceOf(_player)    * 3;\n        result += KingOfEthResource(steelContract).balanceOf(_player)   * 6;\n        result += KingOfEthResource(oilContract).balanceOf(_player)     * 10;\n        result += KingOfEthResource(uraniumContract).balanceOf(_player) * 44;\n\n        return result;\n    }\n\n    /// @dev Burn the resources necessary to build a house\n    /// @param _count the number of houses being built\n    /// @param _player The player who is building the house\n    function burnHouseCosts(uint _count, address _player)\n        public\n        onlyHousesContract\n    {\n        // Costs 2 corn per house\n        KingOfEthResource(contractFor(ResourceType.CORN)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 2 ore per house\n        KingOfEthResource(contractFor(ResourceType.ORE)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 1 wood per house\n        KingOfEthResource(contractFor(ResourceType.WOOD)).interfaceBurnTokens(\n              _player\n            , _count\n        );\n    }\n\n    /// @dev Burn the costs of upgrading a house\n    /// @param _currentLevel The level of the house before the upgrade\n    /// @param _player The player who is upgrading the house\n    function burnUpgradeCosts(uint8 _currentLevel, address _player)\n        public\n        onlyHousesContract\n    {\n        // Do not allow upgrades after level 4\n        require(5 > _currentLevel);\n\n        // Burn the base house cost\n        burnHouseCosts(1, _player);\n\n        if(0 == _currentLevel)\n        {\n            // Level 1 costs bronze\n            KingOfEthResource(contractFor(ResourceType.BRONZE)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(1 == _currentLevel)\n        {\n            // Level 2 costs gold\n            KingOfEthResource(contractFor(ResourceType.GOLD)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(2 == _currentLevel)\n        {\n            // Level 3 costs steel\n            KingOfEthResource(contractFor(ResourceType.STEEL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(3 == _currentLevel)\n        {\n            // Level 4 costs oil\n            KingOfEthResource(contractFor(ResourceType.OIL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(4 == _currentLevel)\n        {\n            // Level 5 costs uranium\n            KingOfEthResource(contractFor(ResourceType.URANIUM)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n    }\n\n    /// @dev Mint resources for a house and distribute all to its owner\n    /// @param _owner The owner of the house\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _level The new level of the house\n    function distributeResources(address _owner, uint _x, uint _y, uint8 _level)\n        public\n        onlyHousesContract\n    {\n        // Calculate the count of resources for this level\n        uint _count = resourcesPerHouse * uint(_level + 1);\n\n        // Distribute the top left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the top right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n    }\n\n    /// @dev Burn the costs necessary to build a road\n    /// @param _length The length of the road\n    /// @param _player The player who is building the house\n    function burnRoadCosts(uint _length, address _player)\n        public\n        onlyRoadsContract\n    {\n        // Burn corn\n        KingOfEthResource(cornContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n\n        // Burn ore\n        KingOfEthResource(oreContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n    }\n\n    /// @dev The exchange can freeze tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function exchangeFreezeTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFreezeTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can thaw tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function exchangeThawTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceThawTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can transfer tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function exchangeTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceTransfer(_from, _to, _tokens);\n    }\n\n    /// @dev The exchange can transfer frozend tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function exchangeFrozenTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFrozenTransfer(_from, _to, _tokens);\n    }\n}\n\n// File: contracts/KingOfEthHouses.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/// @title King of Eth: Houses\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for houses\ncontract KingOfEthHouses is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthBoardReferencer\n    , KingOfEthHouseRealtyReferencer\n    , KingOfEthHousesAbstractInterface\n    , KingOfEthReferencer\n    , KingOfEthRoadsReferencer\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev ETH cost to build or upgrade a house\n    uint public houseCost = 0.001 ether;\n\n    /// @dev Struct to hold info about a house location on the board\n    struct LocationInfo {\n        /// @dev The owner of the house at this location\n        address owner;\n\n        /// @dev The level of the house at this location\n        uint8 level;\n    }\n\n    /// @dev Mapping from the (x, y) coordinate of the location to its info\n    mapping (uint => mapping (uint => LocationInfo)) locationInfo;\n\n    /// @dev Mapping from a player's address to his points\n    mapping (address => uint) pointCounts;\n\n    /// @param _blindAuctionsContract The address of the blind auctions contract\n    /// @param _boardContract The address of the board contract\n    /// @param _kingOfEthContract The address of the king contract\n    /// @param _houseRealtyContract The address of the house realty contract\n    /// @param _openAuctionsContract The address of the open auctions contract\n    /// @param _roadsContract The address of the roads contract\n    /// @param _interfaceContract The address of the resources\n    ///  interface contract\n    constructor(\n          address _blindAuctionsContract\n        , address _boardContract\n        , address _kingOfEthContract\n        , address _houseRealtyContract\n        , address _openAuctionsContract\n        , address _roadsContract\n        , address _interfaceContract\n    )\n        public\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n        boardContract         = _boardContract;\n        kingOfEthContract     = _kingOfEthContract;\n        houseRealtyContract   = _houseRealtyContract;\n        openAuctionsContract  = _openAuctionsContract;\n        roadsContract         = _roadsContract;\n        interfaceContract     = _interfaceContract;\n    }\n\n    /// @dev Fired when new houses are built\n    event NewHouses(address owner, uint[] locations);\n\n    /// @dev Fired when a house is sent from one player to another\n    event SentHouse(uint x, uint y, address from, address to, uint8 level);\n\n    /// @dev Fired when a house is upgraded\n    event UpgradedHouse(uint x, uint y, address owner, uint8 newLevel);\n\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address)\n    {\n        return locationInfo[_x][_y].owner;\n    }\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8)\n    {\n        return locationInfo[_x][_y].level;\n    }\n\n    /// @dev Get the number of points held by a player\n    /// @param _player The player's address\n    /// @return The number of points\n    function numberOfPoints(address _player) public view returns(uint)\n    {\n        return pointCounts[_player];\n    }\n\n    /// @dev Helper function to build a house at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function buildHouseInner(uint _x, uint _y) private\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        KingOfEthBoard _boardContract = KingOfEthBoard(boardContract);\n\n        // Require the house to be within the current bounds of the game\n        require(_boardContract.boundX1() <= _x);\n        require(_boardContract.boundY1() <= _y);\n        require(_boardContract.boundX2() > _x);\n        require(_boardContract.boundY2() > _y);\n\n        // Require the spot to be empty\n        require(0x0 == _locationInfo.owner);\n\n        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);\n\n        // Require either either the right, bottom, left or top road\n        // to be owned by the player\n        require(\n                _roadsContract.ownerOf(_x, _y, 0) == msg.sender\n             || _roadsContract.ownerOf(_x, _y, 1) == msg.sender\n             || _roadsContract.ownerOf(_x - 1, _y, 0) == msg.sender\n             || _roadsContract.ownerOf(_x, _y - 1, 1) == msg.sender\n        );\n\n        // Require that there is no existing blind auction at the location\n        require(!KingOfEthAuctionsAbstractInterface(blindAuctionsContract).existingAuction(_x, _y));\n\n        // Require that there is no existing open auction at the location\n        require(!KingOfEthAuctionsAbstractInterface(openAuctionsContract).existingAuction(_x, _y));\n\n        // Set new owner\n        _locationInfo.owner = msg.sender;\n\n        // Update player's points\n        ++pointCounts[msg.sender];\n\n        // Distribute resources to the player\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              msg.sender\n            , _x\n            , _y\n            , 0 // Level 0\n        );\n    }\n\n    /// @dev God can change the house cost\n    /// @param _newHouseCost The new cost of a house\n    function godChangeHouseCost(uint _newHouseCost)\n        public\n        onlyGod\n    {\n        houseCost = _newHouseCost;\n    }\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner)\n        public\n        onlyAuctionsContract\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that nobody already owns the house.\n        // Note that this would be an assert if only the blind auctions\n        // contract used this code, but the open auctions contract\n        // depends on this require to save space.\n        require(0x0 == _locationInfo.owner);\n\n        // Set the house's new owner\n        _locationInfo.owner = _owner;\n\n        // Give the player a point for the house\n        ++pointCounts[_owner];\n\n        // Distribute the resources for the house\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              _owner\n            , _x\n            , _y\n            , 0 // Level 0\n        );\n\n        // Set up the locations for the event\n        uint[] memory _locations = new uint[](2);\n        _locations[0] = _x;\n        _locations[1] = _y;\n\n        emit NewHouses(_owner, _locations);\n    }\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    )\n        public\n        onlyHouseRealtyContract\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Assert that the previous owner still has the house\n        assert(_locationInfo.owner == _from);\n\n        // Set the new owner\n        _locationInfo.owner = _to;\n\n        // Calculate the total points of the house\n        uint _points = _locationInfo.level + 1;\n\n        // Update the point counts\n        pointCounts[_from] -= _points;\n        pointCounts[_to]   += _points;\n    }\n\n    /// @dev Build multiple houses at once\n    /// @param _locations An array of coordinates for the houses. These\n    ///  are specified sequentially like [x1, y1, x2, y2] representing\n    ///  location (x1, y1) and location (x2, y2).\n    function buildHouses(uint[] _locations)\n        public\n        payable\n    {\n        // Require that there are an even number of locations\n        require(0 == _locations.length % 2);\n\n        uint _count = _locations.length / 2;\n\n        // Require the house cost\n        require(houseCost * _count == msg.value);\n\n        // Pay taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        // Burn the required resource costs for the houses\n        KingOfEthResourcesInterface(interfaceContract).burnHouseCosts(\n              _count\n            , msg.sender\n        );\n\n        // Build a house at each one of the locations\n        for(uint i = 0; i < _locations.length; i += 2)\n        {\n            buildHouseInner(_locations[i], _locations[i + 1]);\n        }\n\n        emit NewHouses(msg.sender, _locations);\n    }\n\n    /// @dev Send a house to another player\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _to The recipient of the house\n    function sendHouse(uint _x, uint _y, address _to) public\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that the sender is the owner\n        require(_locationInfo.owner == msg.sender);\n\n        // Set the new owner\n        _locationInfo.owner = _to;\n\n        // Calculate the points of the house\n        uint _points = _locationInfo.level + 1;\n\n        // Update point counts\n        pointCounts[msg.sender] -= _points;\n        pointCounts[_to]        += _points;\n\n        // Cancel any sales that exist\n        KingOfEthHouseRealty(houseRealtyContract).housesCancelHouseSale(_x, _y);\n\n        emit SentHouse(_x, _y, msg.sender, _to, _locationInfo.level);\n    }\n\n    /// @dev Upgrade a house\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function upgradeHouse(uint _x, uint _y) public payable\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that the sender is the owner\n        require(_locationInfo.owner == msg.sender);\n\n        // Require the house cost be payed\n        require(houseCost == msg.value);\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        // Burn the resource costs of the upgrade\n        KingOfEthResourcesInterface(interfaceContract).burnUpgradeCosts(\n              _locationInfo.level\n            , msg.sender\n        );\n\n        // Update the house's level\n        ++locationInfo[_x][_y].level;\n\n        // Update the owner's points\n        ++pointCounts[msg.sender];\n\n        // Distribute the resources for the house\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              msg.sender\n            , _x\n            , _y\n            , _locationInfo.level\n        );\n\n        emit UpgradedHouse(_x, _y, msg.sender, _locationInfo.level);\n    }\n}",
  "bytecode": "608060405266038d7ea4c6800060085534801561001b57600080fd5b5060405160e08061192683398101604090815281516020830151918301516060840151608085015160a086015160c0909601516000805461010060a860020a031916336101000217815560018054600160a060020a0319908116600160a060020a03988916179091556003805482169888169890981790975560058054881695871695909517909455600480548716938616939093179092556002805486169185169190911790556006805485169584169590951790945560078054909316919093161790556118359081906100f190396000f30060806040526004361061015b5763ffffffff60e060020a6000350416630aa39daa8114610160578063121e0d4e146101835780634e9a542b1461019857806364369525146101b057806364abb80b146101d757806375fb4b62146101fe5780637a0a836c1461022f57806387e8a98014610244578063954969f61461026557806398a0d465146102865780639b05376c146102a7578063a0dfbaf9146102bc578063a52cd440146102dd578063a570d13f146102f2578063a71a13e114610323578063a730428714610338578063b09b98541461034d578063b187bd261461036e578063ba56f6ee14610397578063bbe6a8fb146103ac578063c70b470d146103cd578063d263f5ce146103ee578063d705779714610415578063d9dad80d14610423578063f1c55ac11461043e578063f417fae214610453578063f67714b31461049b578063f6da0698146104bc578063f7ace48d146104e9575b600080fd5b34801561016c57600080fd5b50610181600160a060020a03600435166104fe565b005b34801561018f57600080fd5b5061018161053c565b3480156101a457600080fd5b5061018160043561058e565b3480156101bc57600080fd5b506101c56105af565b60408051918252519081900360200190f35b3480156101e357600080fd5b50610181600435602435600160a060020a03604435166105b5565b34801561020a57600080fd5b506102136107c0565b60408051600160a060020a039092168252519081900360200190f35b34801561023b57600080fd5b506102136107cf565b34801561025057600080fd5b50610181600160a060020a03600435166107de565b34801561027157600080fd5b50610181600160a060020a036004351661082f565b34801561029257600080fd5b50610181600160a060020a036004351661086d565b3480156102b357600080fd5b506102136108ab565b3480156102c857600080fd5b506101c5600160a060020a03600435166108ba565b3480156102e957600080fd5b506102136108d5565b3480156102fe57600080fd5b5061030d6004356024356108e4565b6040805160ff9092168252519081900360200190f35b34801561032f57600080fd5b5061021361090b565b34801561034457600080fd5b5061018161091a565b34801561035957600080fd5b50610181600160a060020a0360043516610969565b34801561037a57600080fd5b506103836109a7565b604080519115158252519081900360200190f35b3480156103a357600080fd5b506102136109b0565b3480156103b857600080fd5b50610181600160a060020a03600435166109c4565b3480156103d957600080fd5b50610181600160a060020a0360043516610a02565b3480156103fa57600080fd5b50610181600435602435600160a060020a0360443516610a40565b610181600435602435610ba7565b34801561042f57600080fd5b50610213600435602435610e2f565b34801561044a57600080fd5b50610213610e55565b6040805160206004803580820135838102808601850190965280855261018195369593946024949385019291829185019084908082843750949750610e649650505050505050565b3480156104a757600080fd5b50610181600160a060020a036004351661106b565b3480156104c857600080fd5b50610181600435602435600160a060020a03604435811690606435166110a9565b3480156104f557600080fd5b50610213611154565b6000546101009004600160a060020a0316331461051a57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000546101009004600160a060020a0316331461055857600080fd5b6000805460ff191660011781556040517f02b2464d82b27b9e05464c651333aa75ab50f9ab9bc79a218dd84c200c6fc7999190a1565b6000546101009004600160a060020a031633146105aa57600080fd5b600855565b60085481565b600154600090606090600160a060020a03163314806105de5750600254600160a060020a031633145b15156105e957600080fd5b600085815260096020908152604080832087845290915290208054909250600160a060020a03161561061a57600080fd5b8154600160a060020a031916600160a060020a0384811691821784556000828152600a60205260408082208054600101905560075481517f7a8d7fc30000000000000000000000000000000000000000000000000000000081526004810195909552602485018a905260448501899052606485018390529051921692637a8d7fc3926084808301939282900301818387803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b505060408051600280825260608201835290935091506020830190803883390190505090508481600081518110151561070157fe5b60209081029091010152805184908290600190811061071c57fe5b90602001906020020181815250507f42d31e0a18e3d3edce3b0d26eb2cd91e747bc6c4ab1feb981879fd73ae37ea4e83826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156107a557818101518382015260200161078d565b50505050905001935050505060405180910390a15050505050565b600354600160a060020a031681565b600254600160a060020a031681565b6000546101009004600160a060020a031633146107fa57600080fd5b60008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000546101009004600160a060020a0316331461084b57600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b6000546101009004600160a060020a0316331461088957600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a031681565b600160a060020a03166000908152600a602052604090205490565b600654600160a060020a031681565b600091825260096020908152604080842092845291905290205460a060020a900460ff1690565b600754600160a060020a031681565b6000546101009004600160a060020a0316331461093657600080fd5b6000805460ff191681556040517f0f0519ab053b7af599830cff5b49ec5284889db5b2dfcfdad2838d25e281e83c9190a1565b6000546101009004600160a060020a0316331461098557600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b60005460ff1681565b6000546101009004600160a060020a031681565b6000546101009004600160a060020a031633146109e057600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b6000546101009004600160a060020a03163314610a1e57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600083815260096020908152604080832085845290915281208054909190600160a060020a03163314610a7257600080fd5b508054600160a060020a031916600160a060020a03838116918217808455336000908152600a6020526040808220805460a060020a90940460ff908116600101169384900390559381528381208054830190556004805485517fe966403a0000000000000000000000000000000000000000000000000000000081529182018a905260248201899052945192949093169263e966403a926044808301939282900301818387803b158015610b2557600080fd5b505af1158015610b39573d6000803e3d6000fd5b5050835460408051898152602081018990523381830152600160a060020a038816606082015260ff60a060020a909304929092166080830152517fd0bacf11f28d8c2d5360611a9cb3a998a0137790584a0256962daa21f9b81b5093509081900360a0019150a15050505050565b600082815260096020908152604080832084845290915290208054600160a060020a03163314610bd657600080fd5b6008543414610be457600080fd5b600560009054906101000a9004600160a060020a0316600160a060020a031663e10e384a346040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610c3757600080fd5b505af1158015610c4b573d6000803e3d6000fd5b50506007548454604080517f0d6e023100000000000000000000000000000000000000000000000000000000815260a060020a90920460ff16600483015233602483015251600160a060020a039092169450630d6e02319350604480820193506000929182900301818387803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050600084815260096020908152604080832086845282528083208054600160ff60a060020a808404821683018216810274ff0000000000000000000000000000000000000000199094169390931790935533808752600a90955283862080549091019055600754875484517f7a8d7fc30000000000000000000000000000000000000000000000000000000081526004810196909652602486018b9052604486018a90529190910490911660648401529051600160a060020a03919091169350637a8d7fc39260848084019391929182900301818387803b158015610dbe57600080fd5b505af1158015610dd2573d6000803e3d6000fd5b505082546040805187815260208101879052338183015260ff60a060020a909304929092166060830152517f707a1df51936fed72412cec20df24787bf51d66072cb468bc14465cd327e52a39350908190036080019150a1505050565b6000918252600960209081526040808420928452919052902054600160a060020a031690565b600454600160a060020a031681565b60008060028351811515610e7457fe5b0615610e7f57600080fd5b82516008546002909104925082023414610e9857600080fd5b600560009054906101000a9004600160a060020a0316600160a060020a031663e10e384a346040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610eeb57600080fd5b505af1158015610eff573d6000803e3d6000fd5b5050600754604080517f303eb23d000000000000000000000000000000000000000000000000000000008152600481018890523360248201529051600160a060020a03909216945063303eb23d9350604480820193506000929182900301818387803b158015610f6e57600080fd5b505af1158015610f82573d6000803e3d6000fd5b50505050600090505b8251811015610fd757610fcf8382815181101515610fa557fe5b906020019060200201518483600101815181101515610fc057fe5b90602001906020020151611163565b600201610f8b565b7f42d31e0a18e3d3edce3b0d26eb2cd91e747bc6c4ab1feb981879fd73ae37ea4e33846040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561105257818101518382015260200161103a565b50505050905001935050505060405180910390a1505050565b6000546101009004600160a060020a0316331461108757600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b6004546000908190600160a060020a031633146110c557600080fd5b600086815260096020908152604080832088845290915290208054909250600160a060020a038581169116146110f757fe5b508054600160a060020a031916600160a060020a0392831690811791829055929091166000908152600a6020526040808220805460a060020a90940460ff9081166001011693849003905592815291909120805490910190555050565b600554600160a060020a031681565b6000828152600960209081526040808320848452825280832060035482517ffed84f2100000000000000000000000000000000000000000000000000000000815292519194600160a060020a039091169390928792859263fed84f21926004808201939182900301818887803b1580156111dc57600080fd5b505af11580156111f0573d6000803e3d6000fd5b505050506040513d602081101561120657600080fd5b5051111561121357600080fd5b8382600160a060020a031663fd4fbf916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b505050506040513d602081101561127c57600080fd5b5051111561128957600080fd5b8482600160a060020a031663fc419a2c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b505050506040513d60208110156112f257600080fd5b5051116112fe57600080fd5b8382600160a060020a031663af9913d06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561133d57600080fd5b505af1158015611351573d6000803e3d6000fd5b505050506040513d602081101561136757600080fd5b50511161137357600080fd5b8254600160a060020a03161561138857600080fd5b506006546040805160e060020a63e53dceff02815260048101879052602481018690526000604482018190529151600160a060020a03909316923392849263e53dceff9260648083019360209383900390910190829087803b1580156113ed57600080fd5b505af1158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5051600160a060020a031614806114bd57506040805160e060020a63e53dceff02815260048101879052602481018690526001604482015290513391600160a060020a0384169163e53dceff916064808201926020929091908290030181600087803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050506040513d60208110156114b057600080fd5b5051600160a060020a0316145b8061155b57506040805160e060020a63e53dceff028152600019870160048201526024810186905260006044820181905291513392600160a060020a0385169263e53dceff9260648083019360209383900390910190829087803b15801561152457600080fd5b505af1158015611538573d6000803e3d6000fd5b505050506040513d602081101561154e57600080fd5b5051600160a060020a0316145b806115f857506040805160e060020a63e53dceff02815260048101879052600019860160248201526001604482015290513391600160a060020a0384169163e53dceff916064808201926020929091908290030181600087803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b505050506040513d60208110156115eb57600080fd5b5051600160a060020a0316145b151561160357600080fd5b600154604080517f5e67a4a300000000000000000000000000000000000000000000000000000000815260048101889052602481018790529051600160a060020a0390921691635e67a4a3916044808201926020929091908290030181600087803b15801561167157600080fd5b505af1158015611685573d6000803e3d6000fd5b505050506040513d602081101561169b57600080fd5b5051156116a757600080fd5b600254604080517f5e67a4a300000000000000000000000000000000000000000000000000000000815260048101889052602481018790529051600160a060020a0390921691635e67a4a3916044808201926020929091908290030181600087803b15801561171557600080fd5b505af1158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b50511561174b57600080fd5b8254600160a060020a0319163390811784556000818152600a60205260408082208054600101905560075481517f7a8d7fc300000000000000000000000000000000000000000000000000000000815260048101949094526024840189905260448401889052606484018390529051600160a060020a039190911692637a8d7fc392608480830193919282900301818387803b1580156117ea57600080fd5b505af11580156117fe573d6000803e3d6000fd5b5050505050505050505600a165627a7a72305820d94c70f7dc5def6b92516e246c23a2621645f9eabcc2aa2d58056745f47d2d8000290000000000000000000000001e19bec0e4ec6d524585f1d89f57afa2d0e951060000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d00000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc69481000000000000000000000000e1254b9025b9e9dc4c22b1e48ad0d279c090af24000000000000000000000000214c1c9962761be484e365a14d9bca3739020517000000000000000000000000c8e072145f8aa3507a291141beae1109070a6fb80000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59",
  "constructorArguments": "0000000000000000000000001e19bec0e4ec6d524585f1d89f57afa2d0e951060000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d00000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc69481000000000000000000000000e1254b9025b9e9dc4c22b1e48ad0d279c090af24000000000000000000000000214c1c9962761be484e365a14d9bca3739020517000000000000000000000000c8e072145f8aa3507a291141beae1109070a6fb80000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59"
}