{
  "address": "0x59835E285509b363E360eFBc444a90930e0808d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Refund",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.0;\n\n\ncontract IOwnable {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnerChanged(address _oldOwner, address _newOwner);\n\n    function changeOwner(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\ncontract Ownable is IOwnable {\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        emit OwnerChanged(address(0), owner);\n    }\n\n    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerChanged(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\ncontract IERC20Token {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value)  public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n    function approve(address _spender, uint256 _value)  public returns (bool success);\n    function allowance(address _owner, address _spender)  public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract IWinbixToken is IERC20Token {\n\n    uint256 public votableTotal;\n    uint256 public accruableTotal;\n    address public issuer;\n    bool public transferAllowed;\n\n    mapping (address => bool) public isPayable;\n\n    event SetIssuer(address _address);\n    event TransferAllowed(bool _newState);\n    event FreezeWallet(address _address);\n    event UnfreezeWallet(address _address);\n    event IssueTokens(address indexed _to, uint256 _value);\n    event IssueVotable(address indexed _to, uint256 _value);\n    event IssueAccruable(address indexed _to, uint256 _value);\n    event BurnTokens(address indexed _from, uint256 _value);\n    event BurnVotable(address indexed _from, uint256 _value);\n    event BurnAccruable(address indexed _from, uint256 _value);\n    event SetPayable(address _address, bool _state);\n\n    function setIssuer(address _address) public;\n    function allowTransfer(bool _allowTransfer) public;\n    function freeze(address _address) public;\n    function unfreeze(address _address) public;\n    function isFrozen(address _address) public returns (bool);\n    function issue(address _to, uint256 _value) public;\n    function issueVotable(address _to, uint256 _value) public;\n    function issueAccruable(address _to, uint256 _value) public;\n    function votableBalanceOf(address _address) public view returns (uint256);\n    function accruableBalanceOf(address _address) public view returns (uint256);\n    function burn(uint256 _value) public;\n    function burnAll() public;\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool);\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool);\n    function setMePayable(bool _state) public;\n}\n\ncontract ITap is IOwnable {\n\n    uint8[12] public tapPercents = [2, 2, 3, 11, 11, 17, 11, 11, 8, 8, 8, 8];\n    uint8 public nextTapNum;\n    uint8 public nextTapPercent = tapPercents[nextTapNum];\n    uint public nextTapDate;\n    uint public remainsForTap;\n    uint public baseEther;\n\n    function init(uint _baseEther, uint _startDate) public;\n    function changeNextTap(uint8 _newPercent) public;\n    function getNext() public returns (uint);\n    function subRemainsForTap(uint _delta) public;\n}\n\ncontract IRefund is IOwnable {\n    \n    ITap public tap;\n    uint public refundedTokens;\n    uint public tokensBase;\n\n    function init(uint _tokensBase, address _tap, uint _startDate) public;\n    function refundEther(uint _value) public returns (uint);\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint);\n}\n\ncontract Refund is IRefund, Ownable {\n\n    uint startDate;\n\n    function init(uint _tokensBase, address _tap, uint _startDate) public onlyOwner {\n        tap = ITap(_tap);\n        tokensBase = _tokensBase;\n        startDate = _startDate;\n    }\n\n    function refundEther(uint _value) public onlyOwner returns (uint) {\n        uint etherForRefund = calculateEtherForRefund(_value);\n        refundedTokens += _value;\n        return etherForRefund;\n    }\n\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint) {\n        require(startDate > 0 && now > startDate && tokensBase > 0);\n        uint etherRemains = tap.remainsForTap();\n        if (_tokensAmount == 0 || etherRemains == 0) {\n            return 0;\n        }\n\n        uint etherForRefund;\n\n        uint startPart = refundedTokens + 1;\n        uint endValue = refundedTokens + _tokensAmount;\n        require(endValue <= tokensBase);\n\n        uint refundCoeff;\n        uint nextStart;\n        uint endPart;\n        uint partTokensValue;\n        uint tokensRemains = tokensBase - refundedTokens;\n\n        while (true) {\n            refundCoeff = _refundCoeff(startPart);\n            nextStart = _nextStart(refundCoeff);\n            endPart = nextStart - 1;\n            if (endPart > endValue) endPart = endValue;\n            partTokensValue = endPart - startPart + 1;\n            etherForRefund += refundCoeff * (etherRemains - etherForRefund) * partTokensValue / tokensRemains / 100;\n            if (nextStart > endValue) break;\n            startPart = nextStart;\n            tokensRemains -= partTokensValue;\n        }\n        return etherForRefund;\n    }\n\n    function _refundCoeff(uint _tokensValue) private view returns (uint) {\n        uint refundedPercent = 100 * _tokensValue / tokensBase;\n        if (refundedPercent < 10) {\n            return 80;\n        } else if (refundedPercent < 20) {\n            return 85;\n        } else if (refundedPercent < 30) {\n            return 90;\n        } else if (refundedPercent < 40) {\n            return 95;\n        } else {\n            return 100;\n        }\n    }\n\n    function _nextStart(uint _refundCoefficient) private view returns (uint) {\n        uint res;\n        if (_refundCoefficient == 80) {\n            res = tokensBase * 10 / 100;\n        } else if (_refundCoefficient == 85) {\n            res = tokensBase * 20 / 100;\n        } else if (_refundCoefficient == 90) {\n            res = tokensBase * 30 / 100;\n        } else if (_refundCoefficient == 95) {\n            res = tokensBase * 40 / 100;\n        } else {\n            return tokensBase+1;\n        }\n        if (_refundCoeff(res) == _refundCoefficient) res += 1;\n        return res;\n    }\n}",
  "bytecode": "6080604081815260008054600160a060020a0319163317808255908352600160a060020a031660a0527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a16105ed8061005a6000396000f3fe608060405234801561001057600080fd5b50600436106100bb576000357c010000000000000000000000000000000000000000000000000000000090048063aa9fa86811610083578063aa9fa8681461014b578063d4ee1d9014610153578063ea2299f81461015b578063fd2210311461018d578063fd53520314610195576100bb565b806365afabec146100c057806379ba5097146100da5780638da5cb5b146100e457806393db956b14610108578063a6f9dae114610125575b600080fd5b6100c86101b2565b60408051918252519081900360200190f35b6100e26101b8565b005b6100ec61024f565b60408051600160a060020a039092168252519081900360200190f35b6100c86004803603602081101561011e57600080fd5b503561025e565b6100e26004803603602081101561013b57600080fd5b5035600160a060020a03166103de565b6100c8610424565b6100ec61042a565b6100e26004803603606081101561017157600080fd5b50803590600160a060020a036020820135169060400135610439565b6100ec610489565b6100c8600480360360208110156101ab57600080fd5b5035610498565b60045481565b600154600160a060020a031633146101cf57600080fd5b60005460015460408051600160a060020a03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a1600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600080600554118015610272575060055442115b801561028057506000600454115b151561028b57600080fd5b600254604080517f0a0432f30000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691630a0432f3916004808301926020929190829003018186803b1580156102e957600080fd5b505afa1580156102fd573d6000803e3d6000fd5b505050506040513d602081101561031357600080fd5b50519050821580610322575080155b156103315760009150506103d9565b60035460045460009160018101919086019081111561034f57600080fd5b60008060008060006003546004540390505b61036a876104cb565b945061037585610537565b935060018403925085831115610389578592505b8683036001019150606481838a8c038802028115156103a457fe5b048115156103ae57fe5b0488019750858411156103c0576103cd565b8396508181039050610361565b50959750505050505050505b919050565b600054600160a060020a031633146103f557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035481565b600154600160a060020a031681565b600054600160a060020a0316331461045057600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039390931692909217909155600491909155600555565b600254600160a060020a031681565b60008054600160a060020a031633146104b057600080fd5b60006104bb8361025e565b6003805485019055915050919050565b600080600454836064028115156104de57fe5b049050600a8110156104f45760509150506103d9565b60148110156105075760559150506103d9565b601e81101561051a57605a9150506103d9565b602881101561052d57605f9150506103d9565b60649150506103d9565b600080826050141561055557600454606490600a025b0490506105a7565b826055141561056c5760045460649060140261054d565b82605a141561058357600454606490601e0261054d565b82605f141561059a5760045460649060280261054d565b50506004546001016103d9565b826105b1826104cb565b14156105bb576001015b9291505056fea165627a7a723058209f237d602ef4a1db581ad76c553d0d6d72554f38dfae793dd2a5101327f3a8420029"
}