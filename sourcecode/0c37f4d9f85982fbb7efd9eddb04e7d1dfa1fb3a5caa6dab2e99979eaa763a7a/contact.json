{
  "address": "0xb9e31a22e3a1c743c6720f3b723923e91f3c0f8b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Usdcoins",
  "compilerVersion": "v0.4.25-nightly.2018.5.23+commit.18c651b7",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\npragma solidity ^0.4.17;\n\nlibrary SafeMathMod { // Partial SafeMath Library\n\n    function mul(uint256 a, uint256 b) constant internal returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) constant internal returns(uint256) {\n        assert(b != 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        require((c = a - b) < a);\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        require((c = a + b) > a);\n    }\n}\n\ncontract Usdcoins { //is inherently ERC20\n    using SafeMathMod\n    for uint256;\n\n    /**\n     * @constant name The name of the token\n     * @constant symbol  The symbol used to display the currency\n     * @constant decimals  The number of decimals used to dispay a balance\n     * @constant totalSupply The total number of tokens times 10^ of the number of decimals\n     * @constant MAX_UINT256 Magic number for unlimited allowance\n     * @storage balanceOf Holds the balances of all token holders\n     * @storage allowed Holds the allowable balance to be transferable by another address.\n     */\n\n    address owner;\n\n\n\n    string constant public name = \"USDC\";\n\n    string constant public symbol = \"USDC\";\n\n    uint256 constant public decimals = 18;\n\n    uint256 constant public totalSupply = 100000000e18;\n\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function() payable {\n        revert();\n    }\n\n    function Usdcoins() public {\n        balanceOf[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n\n\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n\n\n    /**\n     * @dev function that sells available tokens\n     */\n\n\n    function transfer(address _to, uint256 _value) public returns(bool success) {\n        /* Ensures that tokens are not sent to address \"0x0\" */\n        require(_to != address(0));\n        /* Prevents sending tokens directly to contracts. */\n\n\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n        /* Ensures that tokens are not sent to address \"0x0\" */\n        require(_to != address(0));\n        /* Ensures tokens are not sent to this contract */\n\n\n        uint256 allowance = allowed[_from][msg.sender];\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\n        require(_value <= allowance || _from == msg.sender);\n\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\n        /* Balance holder does not need allowance to send from self. */\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\n     * @dev Be aware that there is no check for duplicate recipients.\n     *\n     * @param _toAddresses Receiver addresses.\n     * @param _amounts Amounts of tokens that will be transferred.\n     */\n    function multiPartyTransfer(address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transfer(_toAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\n     * @dev Be aware that there is no check for duplicate recipients.\n     *\n     * @param _from The address of the sender\n     * @param _toAddresses The addresses of the recipients (MAX 255)\n     * @param _amounts The amounts of tokens to be transferred\n     */\n    function multiPartyTransferFrom(address _from, address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n     *\n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint256 _value) public returns(bool success) {\n        /* Ensures address \"0x0\" is not assigned allowance. */\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\n        remaining = allowed[_owner][_spender];\n    }\n\n    function isNotContract(address _addr) private view returns(bool) {\n        uint length;\n        assembly {\n            /* retrieve the size of the code on target address, this needs assembly */\n            length: = extcodesize(_addr)\n        }\n        return (length == 0);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506a52b7d2dcc80cd2e4000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611081806100af6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df578063313ce567146102645780635c6581651461028f5780636e96433f1461030657806370a08231146103cf57806395d89b4114610426578063a9059cbb146104b6578063b22c14c71461051b578063dd62ed3e146105c4575b600080fd5b3480156100cb57600080fd5b506100d461063b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610674565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c96107a1565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107b0565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610c3b565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c40565b6040518082815260200191505060405180910390f35b34801561031257600080fd5b506103cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610c65565b005b3480156103db57600080fd5b50610410600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cec565b6040518082815260200191505060405180910390f35b34801561043257600080fd5b5061043b610d04565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047b578082015181840152602081019050610460565b50505050905090810190601f1680156104a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c257600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d3d565b604051808215151515815260200191505060405180910390f35b34801561052757600080fd5b506105c26004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610f13565b005b3480156105d057600080fd5b50610625600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f98565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f555344430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106b157600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6a52b7d2dcc80cd2e400000081565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156107ef57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115806108a857503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15156108b357600080fd5b61090583600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101f90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061099a83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461103a90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610ab557503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610bca57610b4983600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461103a90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b601281565b6002602052816000526040600020602052806000526040600020600091509150505481565b600060ff835111151515610c7857600080fd5b81518351141515610c8857600080fd5b600090505b82518160ff161015610ce657610cd884848360ff16815181101515610cae57fe5b90602001906020020151848460ff16815181101515610cc957fe5b906020019060200201516107b0565b508080600101915050610c8d565b50505050565b60016020528060005260406000206000915090505481565b6040805190810160405280600481526020017f555344430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d7a57600080fd5b610dcc82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461103a90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e6182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060ff835111151515610f2657600080fd5b81518351141515610f3657600080fd5b600090505b82518160ff161015610f9357610f85838260ff16815181101515610f5b57fe5b90602001906020020151838360ff16815181101515610f7657fe5b90602001906020020151610d3d565b508080600101915050610f3b565b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282840191508111151561103457600080fd5b92915050565b60008282840391508110151561104f57600080fd5b929150505600a165627a7a723058209ca757789f9787d78f827a15a5aa32d0f3e618d85125c908604dae43d4dc2c900029"
}