{
  "address": "0x45d257558598076de596d49f10ba7326acd89212",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SVChain",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\n//* SVChain.org \n\npragma solidity ^0.4.20;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract SVChain{\n    \n    string public name = \"SVChain.org\";\n    string public symbol = \"SVCO\";\n    uint8 public decimals = 18;\n    \n    uint256 public totalSupply;\n    uint256 public SVChainSupply = 10000000;\n    uint256 public buyPrice = 10000;\n    address public creator;\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n   \n   \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function SVChain() public {\n        totalSupply = SVChainSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;   \n        creator = msg.sender;\n    }\n    /**MAPP\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        \n        require(_to != 0x0);\n        \n        require(balanceOf[_from] >= _value);\n        \n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        \n        balanceOf[_from] -= _value;\n        \n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n     \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n   \n   \n    /// @notice tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                   \n        uint amountRaised;                                    \n        amountRaised += msg.value;                            \n        require(balanceOf[creator] >= amount);               \n        require(msg.value < 10**17);                        \n        balanceOf[msg.sender] += amount;                  \n        balanceOf[creator] -= amount;                        \n        Transfer(creator, msg.sender, amount);              \n        creator.transfer(amountRaised);\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600b81527f5356436861696e2e6f72670000000000000000000000000000000000000000006020820152600090805161004b929160200190610101565b5060408051908101604052600481527f5356434f0000000000000000000000000000000000000000000000000000000060208201526001908051610093929160200190610101565b506002805460ff191660121790556298968060045561271060055534156100b957600080fd5b60025460045460ff909116600a0a026003819055600160a060020a03331660008181526007602052604090209190915560068054600160a060020a031916909117905561019c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014257805160ff191683800117855561016f565b8280016001018555821561016f579182015b8281111561016f578251825591602001919060010190610154565b5061017b92915061017f565b5090565b61019991905b8082111561017b5760008155600101610185565b90565b61059f806101ab6000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461018e57806306fdde03146101bd57806318160ddd14610247578063313ce5671461026c57806370a08231146102955780638620410b146102b457806395d89b41146102c7578063a9059cbb146102da578063dabff28d146102fe578063dd62ed3e14610311575b600554600654600160a060020a0316600090815260076020526040902054349182029190829010156100d457600080fd5b67016345785d8a000034106100e857600080fd5b600160a060020a03338116600081815260076020526040808220805487019055600680548516835291819020805487900390559054919291909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600654600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561018a57600080fd5b5050005b341561019957600080fd5b6101a1610336565b604051600160a060020a03909116815260200160405180910390f35b34156101c857600080fd5b6101d0610345565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561020c5780820151838201526020016101f4565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025257600080fd5b61025a6103e3565b60405190815260200160405180910390f35b341561027757600080fd5b61027f6103e9565b60405160ff909116815260200160405180910390f35b34156102a057600080fd5b61025a600160a060020a03600435166103f2565b34156102bf57600080fd5b61025a610404565b34156102d257600080fd5b6101d061040a565b34156102e557600080fd5b6102fc600160a060020a0360043516602435610475565b005b341561030957600080fd5b61025a610484565b341561031c57600080fd5b61025a600160a060020a036004358116906024351661048a565b600654600160a060020a031681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103db5780601f106103b0576101008083540402835291602001916103db565b820191906000526020600020905b8154815290600101906020018083116103be57829003601f168201915b505050505081565b60035481565b60025460ff1681565b60076020526000908152604090205481565b60055481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103db5780601f106103b0576101008083540402835291602001916103db565b6104803383836104a7565b5050565b60045481565b600860209081526000928352604080842090915290825290205481565b600160a060020a03821615156104bc57600080fd5b600160a060020a038316600090815260076020526040902054819010156104e257600080fd5b600160a060020a038216600090815260076020526040902054818101101561050957600080fd5b600160a060020a038084166000818152600760205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a723058205d1c670222ee349f031ae6cca4441221ebc0c9382759b030f36de327e30624090029"
}