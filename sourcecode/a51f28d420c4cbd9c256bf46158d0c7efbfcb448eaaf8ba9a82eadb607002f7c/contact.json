{
  "address": "0x1a1770568f8ed3c64dab338dafd0ff9d7d642e12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NauticusToken",
  "compilerVersion": "v0.4.22-nightly.2018.3.21+commit.8fd53c1c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-28\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// 'NTS' Nauticus Token Fixed Supply\n//\n// Symbol      : NTS\n// Name        : NauticusToken\n// Total supply: 2,500,000,000.000000000000000000\n// Decimals    : 18\n//\n// (c) Nauticus \n// ----------------------------------------------------------------------------\n\n/**\n * @dev the Permission contract provides basic access control.\n */\ncontract Permission {\n    address public owner;\n\tfunction Permission() public {\n        owner = msg.sender;\n    }\n\n\tmodifier onlyOwner() { \n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction changeOwner(address newOwner) onlyOwner public returns (bool) {\n\t\trequire(newOwner != address(0));\n\t\towner = newOwner;\n        return true;\n\t}\n\t\t\n}\t\n\n/**\n * @dev maintains the safety of mathematical operations.\n */\nlibrary Math {\n\n\tfunction add(uint a, uint b) internal pure returns (uint c) {\n\t\tc = a + b;\n\t\t//require(c >= a);\n\t\t//require(c >= b);\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns (uint c) {\n\t\trequire(b <= a);\n\t\tc = a - b;\n\t}\n\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\n\t\tc = a * b;\n\t\trequire(a == 0 || c / a == b);\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\n\t\trequire(b > 0);\n\t\tc = a / b;\n\t}\n}\n\n\n/**\n * @dev implements ERC20 standard, contains the token logic.\n */\ncontract NauticusToken is Permission {\n\n    //Transfer and Approval events\n    event Approval(address indexed owner, address indexed spender, uint val);\n    event Transfer(address indexed sender, address indexed recipient, uint val);\n\n    //implement Math lib for safe mathematical transactions.\n    using Math for uint;\n    \n    //Inception and Termination of Nauticus ICO\n    //          DD/MM/YYYY\n    // START    18/03/2018 NOON GMT\n    // END      18/05/2018 NOON GMT\n    //          \n    uint public constant inception = 1521331200;\n    uint public constant termination = 1526601600;\n\n    //token details\n    string public constant name = \"NauticusToken\";\n\tstring public constant symbol = \"NTS\";\n\tuint8 public constant decimals = 18;\n\n    //number of tokens that exist, totally.\n    uint public totalSupply;\n    \n    //if the tokens have been minted.\n    bool public minted = false;\n\n    //hardcap, maximum amount of tokens that can exist\n    uint public constant hardCap = 2500000000000000000000000000;\n    \n    //if if users are able to transfer tokens between each toher.\n    bool public transferActive = false;\n    \n    //mappings for token balances and allowances.\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    /*\n        MODIFIERS\n    */\n\tmodifier canMint(){\n\t    require(!minted);\n\t    _;\n\t}\n\t\n\t/*modifier ICOActive() { \n\t\trequire(now > inception * 1 seconds && now < termination * 1 seconds); \n\t\t_; \n\t}*/\n\t\n\tmodifier ICOTerminated() {\n\t    require(now > termination * 1 seconds);\n\t    _;\n\t}\n\n\tmodifier transferable() { \n\t\t//if you are NOT owner\n\t\tif(msg.sender != owner) {\n\t\t\trequire(transferActive);\n\t\t}\n\t\t_;\n\t}\n\t\n    /*\n        FUNCTIONS\n    */  \n    /**\n        @dev approves a spender to spend an amount.\n        @param spender address of the spender\n        @param val the amount they will be approved to spend.\n        @return true\n     */\n    function approve(address spender, uint val) public returns (bool) {\n        allowed[msg.sender][spender] = val;\n        Approval(msg.sender, spender, val);\n        return true;\n    }\n\n    /**\n        @dev function to transfer tokens inter-user\n        @param to address of the recipient of the tokens\n        @param val the amount to transfer\n        @return true\n     */\n\tfunction transfer(address to, uint val) transferable ICOTerminated public returns (bool) {\n\t\t//only send to a valid address\n\t\trequire(to != address(0));\n\t\trequire(val <= balances[msg.sender]);\n\n\t\t//deduct the val from sender\n\t\tbalances[msg.sender] = balances[msg.sender] - val;\n\n\t\t//give the val to the recipient\n\t\tbalances[to] = balances[to] + val;\n\n\t\t//emit transfer event \n\t\tTransfer(msg.sender, to, val);\n\t\treturn true;\n\t}\n\n    /**\n        @dev returns the balance of NTS for an address\n        @return balance NTS balance\n     */\n\tfunction balanceOf(address client) public constant returns (uint) {\n\t\treturn balances[client];\n\t}\n\n    /**\n        @dev transfer tokens from one address to another, independant of executor.\n        @param from the address of the sender of the tokens.\n        @param recipient the recipient of the tokens\n        @param val the amount of tokens\n        @return true\n     */\n\tfunction transferFrom(address from, address recipient, uint val) transferable ICOTerminated public returns (bool) {\n\t\t//to and from must be valid addresses\n\t\trequire(recipient != address(0));\n\t\trequire(from != address(0));\n\t\t//tokens must exist in from account\n\t\trequire(val <= balances[from]);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(val);\n\t\tbalances[from] = balances[from] - val;\n\t\tbalances[recipient] = balances[recipient] + val;\n\n\t\tTransfer(from,recipient,val);\n        return true;\n\t}\n\t\n    /**\n        @dev allows Nauticus to toggle disable all inter-user transfers, ICE.\n        @param newTransferState whether inter-user transfers are allowed.\n        @return true\n     */\n\tfunction toggleTransfer(bool newTransferState) onlyOwner public returns (bool) {\n\t    require(newTransferState != transferActive);\n\t    transferActive = newTransferState;\n\t    return true;\n\t}\n\t\n    /**\n        @dev mint the appropriate amount of tokens, which is relative to tokens sold, unless hardcap is reached.\n        @param tokensToExist the amount of tokens purchased on the Nauticus platform.\n        @return true\n     */\n\tfunction mint(uint tokensToExist) onlyOwner ICOTerminated canMint public returns (bool) {\n\t    tokensToExist > hardCap ? totalSupply = hardCap : totalSupply = tokensToExist;\n\t    balances[owner] = balances[owner].add(totalSupply);\n        minted = true;\n        transferActive = true;\n\t    return true;\n\t    \n\t}\n    /**\n        @dev allocate an allowance to a user\n        @param holder person who holds the allowance\n        @param recipient the recipient of a transfer from the holder\n        @return remaining tokens left in allowance\n     */\n\t\n    function allowance(address holder, address recipient) public constant returns (uint) {\n        return allowed[holder][recipient];\n    }\n    \n    /**\n        @dev constructor, nothing needs to happen upon contract creation, left blank.\n     */\n    function NauticusToken () public {}\n\t\n}",
  "bytecode": "60606040526000600260006101000a81548160ff0219169083151502179055506000600260016101000a81548160ff021916908315150217905550341561004557600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061130d806100946000396000f3006060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610101578063095ea7b31461018f57806312a187f3146101e957806318160ddd146102265780632331af611461024f57806323b872dd1461027c578063313ce567146102f557806340734387146103245780634f02c4201461034d57806370a082311461037a57806380f4432a146103c75780638da5cb5b146103f057806395d89b4114610445578063a0712d68146104d3578063a6f9dae11461050e578063a9059cbb1461055f578063dd62ed3e146105b9578063fb86a40414610625575b600080fd5b341561010c57600080fd5b61011461064e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610154578082015181840152602081019050610139565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019a57600080fd5b6101cf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610687565b604051808215151515815260200191505060405180910390f35b34156101f457600080fd5b61020c60048080351515906020019091905050610779565b604051808215151515815260200191505060405180910390f35b341561023157600080fd5b61023961081b565b6040518082815260200191505060405180910390f35b341561025a57600080fd5b610262610821565b604051808215151515815260200191505060405180910390f35b341561028757600080fd5b6102db600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610834565b604051808215151515815260200191505060405180910390f35b341561030057600080fd5b610308610c0c565b604051808260ff1660ff16815260200191505060405180910390f35b341561032f57600080fd5b610337610c11565b6040518082815260200191505060405180910390f35b341561035857600080fd5b610360610c19565b604051808215151515815260200191505060405180910390f35b341561038557600080fd5b6103b1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c2c565b6040518082815260200191505060405180910390f35b34156103d257600080fd5b6103da610c75565b6040518082815260200191505060405180910390f35b34156103fb57600080fd5b610403610c7d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561045057600080fd5b610458610ca2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049857808201518184015260208101905061047d565b50505050905090810190601f1680156104c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104de57600080fd5b6104f46004808035906020019091905050610cdb565b604051808215151515815260200191505060405180910390f35b341561051957600080fd5b610545600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eb3565b604051808215151515815260200191505060405180910390f35b341561056a57600080fd5b61059f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f95565b604051808215151515815260200191505060405180910390f35b34156105c457600080fd5b61060f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611221565b6040518082815260200191505060405180910390f35b341561063057600080fd5b6106386112a8565b6040518082815260200191505060405180910390f35b6040805190810160405280600d81526020017f4e61757469637573546f6b656e0000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107d657600080fd5b600260019054906101000a900460ff161515821515141515156107f857600080fd5b81600260016101000a81548160ff02191690831515021790555060019050919050565b60015481565b600260019054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108a857600260019054906101000a900460ff1615156108a757600080fd5b5b6001635afe178002421115156108bd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156108f957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561093557600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561098357600080fd5b610a1282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112b890919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b635afe178081565b600260009054906101000a900460ff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b635aadac0081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4e5453000000000000000000000000000000000000000000000000000000000081525081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d3857600080fd5b6001635afe17800242111515610d4d57600080fd5b600260009054906101000a900460ff16151515610d6957600080fd5b6b0813f3978f894098440000008211610d8757816001819055610d9a565b6b0813f3978f8940984400000060018190555b50610e10600154600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112d490919063ffffffff16565b600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600260006101000a81548160ff0219169083151502179055506001600260016101000a81548160ff02191690831515021790555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4c57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100957600260019054906101000a900460ff16151561100857600080fd5b5b6001635afe1780024211151561101e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561105a57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156110a857600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6b0813f3978f8940984400000081565b60008282111515156112c957600080fd5b818303905092915050565b60008183019050929150505600a165627a7a72305820fc209ce9e279bdaeff43db26aefe2af36e84d6a8113e75fc38a34041ae58a3450029"
}