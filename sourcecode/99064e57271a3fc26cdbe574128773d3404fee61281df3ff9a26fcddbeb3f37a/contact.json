{
  "address": "0x221a79d1afef9b7aac72504c6e688a3cbfe56afa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "sellTokens",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity 0.5.8;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract sellTokens is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public token;\n\n\n    uint256 public rate;\n\n\n    constructor(uint256 _rate, address _token) public {\n        require(_token != address(0) );\n\n        token = IERC20(_token);\n        rate = _rate;\n    }\n\n\n    function() payable external {\n        buyTokens();\n    }\n\n\n    function buyTokens() payable public {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(msg.sender, weiAmount);\n\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        if (tokens > token.balanceOf(address(this))) {\n            tokens = token.balanceOf(address(this));\n\n            uint price = tokens.div(rate);\n\n            uint _diff =  weiAmount.sub(price);\n\n            if (_diff > 0) {\n                msg.sender.transfer(_diff);\n            }\n        }\n\n        _processPurchase(msg.sender, tokens);\n    }\n\n\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n        require(token.balanceOf(address(this)) > 0);\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n    }\n\n\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(rate);\n    }\n\n\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        token.safeTransfer(_beneficiary, _tokenAmount);\n    }\n\n\n    function setRate(uint256 _rate) onlyOwner external {\n        rate = _rate;\n    }\n\n\n    function withdrawETH() onlyOwner external{\n        owner.transfer(address(this).balance);\n    }\n\n    \n    function withdrawTokens(address _t) onlyOwner external {\n        IERC20 _token = IERC20(_t);\n        uint balance = _token.balanceOf(address(this));\n        _token.safeTransfer(owner, balance);\n    }\n\n}\n\n\ncontract ReentrancyGuard {\n\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor() internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n\n}\n\n\ncontract buyTokens is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public token;\n\n    uint256 public rate;\n\n    constructor(uint256 _rate, address _token) public {\n        require(_token != address(0) );\n\n        token = IERC20(_token);\n        rate = _rate;\n    }\n\n\n    function() external payable{\n    }\n\n\n    function sellToken(uint _amount) public {\n        _sellTokens(msg.sender, _amount);\n    }\n\n\n    function _sellTokens(address payable _from, uint256 _amount) nonReentrant  internal {\n        require(_amount > 0);\n        token.safeTransferFrom(_from, address(this), _amount);\n\n        uint256 tokensAmount = _amount;\n\n        uint weiAmount = tokensAmount.div(rate);\n\n        if (weiAmount > address(this).balance) {\n            tokensAmount = address(this).balance.mul(rate);\n            weiAmount = address(this).balance;\n\n            uint _diff =  _amount.sub(tokensAmount);\n\n            if (_diff > 0) {\n                token.safeTransfer(_from, _diff);\n            }\n        }\n\n        _from.transfer(weiAmount);\n    }\n\n\n    function receiveApproval(address payable _from, uint256 _value, address _token, bytes memory _extraData) public {\n        require(_token == address(token));\n        require(msg.sender == address(token));\n\n        _extraData;\n        _sellTokens(_from, _value);\n    }\n\n\n    function setRate(uint256 _rate) onlyOwner external {\n        rate = _rate;\n    }\n\n\n    function withdrawETH() onlyOwner external{\n        owner.transfer(address(this).balance);\n    }\n\n\n    function withdrawTokens(address _t) onlyOwner external {\n        IERC20 _token = IERC20(_t);\n        uint balance = _token.balanceOf(address(this));\n        _token.safeTransfer(owner, balance);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610d248339810180604052604081101561003057600080fd5b810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561014157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055505050610b8a8061019a6000396000f3fe6080604052600436106100865760003560e01c80638f32d59b116100595780638f32d59b1461019e578063d0febe4c146101cd578063e086e5ec146101d7578063f2fde38b146101ee578063fc0c546a1461023f57610086565b80632c4e722e1461009057806334fcf437146100bb57806349df728c146100f65780638da5cb5b14610147575b61008e610296565b005b34801561009c57600080fd5b506100a5610501565b6040518082815260200191505060405180910390f35b3480156100c757600080fd5b506100f4600480360360208110156100de57600080fd5b8101908080359060200190929190505050610507565b005b34801561010257600080fd5b506101456004803603602081101561011957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610522565b005b34801561015357600080fd5b5061015c610645565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101aa57600080fd5b506101b361066a565b604051808215151515815260200191505060405180910390f35b6101d5610296565b005b3480156101e357600080fd5b506101ec6106c1565b005b3480156101fa57600080fd5b5061023d6004803603602081101561021157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610753565b005b34801561024b57600080fd5b50610254610770565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60003490506102a53382610796565b60006102b0826108c8565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561035157600080fd5b505afa158015610365573d6000803e3d6000fd5b505050506040513d602081101561037b57600080fd5b81019080805190602001909291905050508111156104f357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561043257600080fd5b505afa158015610446573d6000803e3d6000fd5b505050506040513d602081101561045c57600080fd5b810190808051906020019092919050505090506000610486600254836108e690919063ffffffff16565b9050600061049d82856108fa90919063ffffffff16565b905060008111156104f0573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104ee573d6000803e3d6000fd5b505b50505b6104fd3382610911565b5050565b60025481565b61050f61066a565b61051857600080fd5b8060028190555050565b61052a61066a565b61053357600080fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105b757600080fd5b505afa1580156105cb573d6000803e3d6000fd5b505050506040513d60208110156105e157600080fd5b810190808051906020019092919050505090506106406000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166109629092919063ffffffff16565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6106c961066a565b6106d257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610750573d6000803e3d6000fd5b50565b61075b61066a565b61076457600080fd5b61076d81610a32565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561083757600080fd5b505afa15801561084b573d6000803e3d6000fd5b505050506040513d602081101561086157600080fd5b81019080805190602001909291905050501161087c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108b657600080fd5b60008114156108c457600080fd5b5050565b60006108df60025483610b2a90919063ffffffff16565b9050919050565b60008183816108f157fe5b04905092915050565b60008282111561090657fe5b818303905092915050565b61095e8282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109629092919063ffffffff16565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d6020811015610a1357600080fd5b8101908080519060200190929190505050610a2d57600080fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a6c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831415610b3d5760009050610b58565b818302905081838281610b4c57fe5b0414610b5457fe5b8090505b9291505056fea165627a7a7230582074183701a022aefa13824a023672a5680400b8470944acda8035e90280cd84080029000000000000000000000000000000000000000000000000000000000000003200000000000000000000000019bdea9d39dd922af59e623b8102bb9b36c56fbd",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000003200000000000000000000000019bdea9d39dd922af59e623b8102bb9b36c56fbd"
}