{
  "address": "0x038d5044c7a8e7146763524f84f8850e2805673b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SlonpayToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-27\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev El contrato de propiedad tiene una dirección de propietario y proporciona un control de autorización básico\n * funciones, esto simplifica la implementación de \"permisos de usuario\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n/**\n    * @dev El constructor Ownable establece el \"propietario\" original del contrato al remitente\n    * cuenta.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Lanza si es llamado por cualquier cuenta que no sea el propietario.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n/**\n    * @dev Permite al propietario actual transferir el control del contrato a un nuevo propietario.\n    * @param newOwner La dirección a la que se transfiere la propiedad.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n    * @dev Permite al propietario actual ceder el control del contrato.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Operaciones matemáticas con controles de seguridad que arrojan por error.\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplica dos números, lanza en desbordamiento.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev División entera de dos números, truncando el cociente.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n    * @dev Resta dos números, arroja en desbordamiento (es decir, si el sustraendo es mayor que el minuendo).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Agrega dos números, arroja sobre desbordamiento.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Versión más sencilla de la interfaz ERC20\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementación del token estándar básico.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n// This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n     /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply_ -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n        balances[_from] -= _value;                         // Subtract from the targeted balance\n        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply_ -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n    * @dev Funciónpara acuñar fichas\n    * @param _to La dirección que recibirá las fichas acuñadas.\n    * @param _amount La cantidad de fichas para acuñar.\n    * @return Un valor booleano que indica si la operación se realizó correctamente.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Función para dejar de acuñar nuevas fichas.\n    * @return Es cierto si la operación fue exitosa.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\ncontract Coinbase is Ownable {\n    using SafeMath for uint256;\n    uint256 public blockHeight;\n    uint256 public decimals; \n    uint256 public coinbaseInit;\n\n    // Generar nuevo bloque cada 6 horas. Reducir a la mitad la base de monedas cada 120 días.\n    uint256 public halvingPeriod = 4 * 120;\n\n    uint256 public maxSupply;\n    uint256[6] private coinbaseArray;\n    uint256 public exodus;\n\n    event LogBlockHeight(uint256 blockHeight);\n\n    constructor(uint256 _decimals) public{\n        decimals = _decimals;\n        maxSupply = 710000000 * (10 ** uint256(decimals));\n        // 10% of maxSupply acuñar antes de bloque de genesis\n        exodus = maxSupply / 10;\n\n        // 90% de maxSupply para los próximos 2 años.\n        coinbaseInit = 196875 * (10 ** uint256(decimals));\n        coinbaseArray = [\n            coinbaseInit,\n            coinbaseInit / 2,\n            coinbaseInit / 4,\n            coinbaseInit / 8,\n            coinbaseInit / 16,\n            coinbaseInit / 16\n        ];\n       \n    }\n    \n    /**\n    * @dev Función para aumentar la altura del bloque.\n    * @return \n    */\n    function nextBlock() onlyOwner public {\n        blockHeight = blockHeight.add(1);\n        emit LogBlockHeight(blockHeight);\n    }\n\n    /**\n    * @dev Función para calcular la cantidad de coinbase del bloque en este momento.\n    * @return Un booleano que indica si la operación se realizó correctamente.\n    */\n    function coinbaseAmount() view internal returns (uint){\n        uint256 index = blockHeight.sub(1).div(halvingPeriod);\n        if (index > 5 || index < 0) {\n            return 0;\n        }\n        return coinbaseArray[index];\n    }\n\n}\n\ncontract SlonpayToken is MintableToken, PausableToken, Coinbase {\n    string public constant name = \"Slonpay Token\"; \n    string public constant symbol = \"SLPT\"; \n    uint256 public constant decimals = 18; \n\n\n    constructor() Coinbase(decimals) public{\n        mint(owner, exodus);\n    }\n\n    /**\n    * @dev Función para coinbase en nuevo bloque \n    * @return Un booleano que indica si la operación se realizó correctamente.\n    */\n    function coinbase() onlyOwner canMint whenNotPaused public returns (bool) {\n        nextBlock();\n        uint256 _amount =  coinbaseAmount();\n        if (_amount == 0) {\n            finishMinting();\n            return false;\n        }\n        return super.mint(owner, _amount);\n    }\n\n    /**\n    * @dev Función para dejar de acuñar nuevas fichas.\n    * @return Es cierto si la operación fue exitosa.\n    */\n    function finishMinting() onlyOwner canMint whenNotPaused public returns (bool) {\n        return super.finishMinting();\n    }\n\n    /**\n    * @dev Permite al propietario actual transferir el control del contrato a un nuevo propietario.\n    * @param newOwner La dirección para transferir la propiedad a.\n    */\n    function transferOwnership(address newOwner) onlyOwner whenNotPaused public {\n        super.transferOwnership(newOwner);\n    }\n\n    /**\n    * The fallback function.\n    */\n    function() payable public {\n        revert();\n    }\n}",
  "bytecode": "60806040526003805460a060020a61ffff02191690556101e06007553480156200002857600080fd5b5060038054600160a060020a03191633179055601260058190556b024b4c591f8c5b0c860000006008556a3abad5b65ad5e7a7000000600f556929b09d79838b954c000060068181556040805160c0810182529283526914d84ebcc1c5caa600006020840152690a6c275e60e2e55300009083015269053613af307172a98000606083015269029b09d79838b954c0006080830181905260a0830152620000d29160099162000244565b5050600354600f54620000f891600160a060020a031690640100000000620000ff810204565b50620002a7565b600354600090600160a060020a031633146200011a57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156200014357600080fd5b60015462000160908364010000000062000e156200023082021704565b600155600160a060020a03831660009081526020819052604090205462000196908364010000000062000e156200023082021704565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b818101828110156200023e57fe5b92915050565b826006810192821562000275579160200282015b828111156200027557825182559160200191906001019062000258565b506200028392915062000287565b5090565b620002a491905b808211156200028357600081556001016200028e565b90565b61125d80620002b76000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461017957806306fdde03146101a2578063095ea7b31461022c57806318160ddd1461025057806323b872dd14610277578063313ce567146102a15780633f4ba83a146102b657806340c10f19146102cd57806342966c68146102f15780634b641f52146103095780635a3e251f1461031e5780635c975abb14610333578063661884631461034857806370a082311461036c578063715018a61461038d57806379cc6790146103a25780637d64bcb4146103c657806383788fce146103db5780638456cb59146103f05780638da5cb5b1461040557806395d89b4114610436578063a6ae0aac1461044b578063a9059cbb14610460578063ad1d0dcf14610484578063d5abeb0114610499578063d73dd623146104ae578063dd62ed3e146104d2578063f2fde38b146104f9578063f44ff7121461051a575b600080fd5b34801561018557600080fd5b5061018e61052f565b604080519115158252519081900360200190f35b3480156101ae57600080fd5b506101b761053f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f15781810151838201526020016101d9565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023857600080fd5b5061018e600160a060020a0360043516602435610576565b34801561025c57600080fd5b506102656105a1565b60408051918252519081900360200190f35b34801561028357600080fd5b5061018e600160a060020a03600435811690602435166044356105a7565b3480156102ad57600080fd5b506102656105d4565b3480156102c257600080fd5b506102cb6105d9565b005b3480156102d957600080fd5b5061018e600160a060020a0360043516602435610652565b3480156102fd57600080fd5b5061018e60043561075c565b34801561031557600080fd5b506102656107d2565b34801561032a57600080fd5b506102656107d8565b34801561033f57600080fd5b5061018e6107de565b34801561035457600080fd5b5061018e600160a060020a03600435166024356107ee565b34801561037857600080fd5b50610265600160a060020a0360043516610812565b34801561039957600080fd5b506102cb61082d565b3480156103ae57600080fd5b5061018e600160a060020a036004351660243561089b565b3480156103d257600080fd5b5061018e61096a565b3480156103e757600080fd5b506102cb6109bf565b3480156103fc57600080fd5b506102cb610a23565b34801561041157600080fd5b5061041a610aa1565b60408051600160a060020a039092168252519081900360200190f35b34801561044257600080fd5b506101b7610ab0565b34801561045757600080fd5b5061018e610ae7565b34801561046c57600080fd5b5061018e600160a060020a0360043516602435610b79565b34801561049057600080fd5b50610265610b9d565b3480156104a557600080fd5b50610265610ba3565b3480156104ba57600080fd5b5061018e600160a060020a0360043516602435610ba9565b3480156104de57600080fd5b50610265600160a060020a0360043581169060243516610bcd565b34801561050557600080fd5b506102cb600160a060020a0360043516610bf8565b34801561052657600080fd5b50610265610c32565b60035460a060020a900460ff1681565b60408051808201909152600d81527f536c6f6e70617920546f6b656e00000000000000000000000000000000000000602082015281565b60035460009060a860020a900460ff161561059057600080fd5b61059a8383610c38565b9392505050565b60015490565b60035460009060a860020a900460ff16156105c157600080fd5b6105cc848484610c9e565b949350505050565b601281565b600354600160a060020a031633146105f057600080fd5b60035460a860020a900460ff16151561060857600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600090600160a060020a0316331461066c57600080fd5b60035460a060020a900460ff161561068357600080fd5b600154610696908363ffffffff610e1516565b600155600160a060020a0383166000908152602081905260409020546106c2908363ffffffff610e1516565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b3360009081526020819052604081205482111561077857600080fd5b336000818152602081815260409182902080548690039055600180548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60065481565b60075481565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff161561080857600080fd5b61059a8383610e28565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461084457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600160a060020a0382166000908152602081905260408120548211156108c057600080fd5b600160a060020a03831660009081526002602090815260408083203384529091529020548211156108f057600080fd5b600160a060020a038316600081815260208181526040808320805487900390556002825280832033845282529182902080548690039055600180548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600354600090600160a060020a0316331461098457600080fd5b60035460a060020a900460ff161561099b57600080fd5b60035460a860020a900460ff16156109b257600080fd5b6109ba610f18565b905090565b600354600160a060020a031633146109d657600080fd5b6004546109ea90600163ffffffff610e1516565b600481905560408051918252517ff9047a5012749374f64e29bd91dc5c31ea06f38b1d4d0cd43476e94e4ad7cc239181900360200190a1565b600354600160a060020a03163314610a3a57600080fd5b60035460a860020a900460ff1615610a5157600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600481527f534c505400000000000000000000000000000000000000000000000000000000602082015281565b6003546000908190600160a060020a03163314610b0357600080fd5b60035460a060020a900460ff1615610b1a57600080fd5b60035460a860020a900460ff1615610b3157600080fd5b610b396109bf565b610b41610f9c565b9050801515610b5c57610b5261096a565b5060009150610b75565b600354610b7290600160a060020a031682610652565b91505b5090565b60035460009060a860020a900460ff1615610b9357600080fd5b61059a8383610ffb565b600f5481565b60085481565b60035460009060a860020a900460ff1615610bc357600080fd5b61059a83836110dc565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610c0f57600080fd5b60035460a860020a900460ff1615610c2657600080fd5b610c2f81611175565b50565b60045481565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610cb557600080fd5b600160a060020a038416600090815260208190526040902054821115610cda57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610d0a57600080fd5b600160a060020a038416600090815260208190526040902054610d33908363ffffffff61120a16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610d68908363ffffffff610e1516565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610daa908363ffffffff61120a16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b81810182811015610e2257fe5b92915050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610e7d57336000908152600260209081526040808320600160a060020a0388168452909152812055610eb2565b610e8d818463ffffffff61120a16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600090600160a060020a03163314610f3257600080fd5b60035460a060020a900460ff1615610f4957600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600080610fc7600754610fbb600160045461120a90919063ffffffff16565b9063ffffffff61121c16565b90506005811180610fd85750600081105b15610fe65760009150610b75565b60098160068110610ff357fe5b015491505090565b6000600160a060020a038316151561101257600080fd5b3360009081526020819052604090205482111561102e57600080fd5b3360009081526020819052604090205461104e908363ffffffff61120a16565b3360009081526020819052604080822092909255600160a060020a03851681522054611080908363ffffffff610e1516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054611110908363ffffffff610e1516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600354600160a060020a0316331461118c57600080fd5b600160a060020a03811615156111a157600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561121657fe5b50900390565b6000818381151561122957fe5b0493925050505600a165627a7a723058208c9416d0ef2727023ed936b9393e4c2d6888d33898e0005fefa3faf8a98983740029"
}