{
  "address": "0xeedb29344eb7cf6e5e654f1b4a8632365cc9e527",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HPBToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-14\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n\n\n\n\n/// @title HPB Protocol Token.\n/// For more information about this token sale, please visit https://gxn.io\n/// @author Arnold - <[email protected]>, Bob - <[email protected]>.\ncontract HPBToken is StandardToken {\n    string public constant NAME = \"HPBCoin\";\n    string public constant SYMBOL = \"HPB\";\n    uint public constant DECIMALS = 18;\n\n    /// During token sale, we use one consistent price: 1000 HPB/ETH.\n    /// We split the entire token sale period into 3 phases, each\n    /// phase has a different bonus setting as specified in `bonusPercentages`.\n    /// The real price for phase i is `(1 + bonusPercentages[i]/100.0) * BASE_RATE`.\n    /// The first phase or early-bird phase has a much higher bonus.\n    uint8[10] public bonusPercentages = [\n        20,\n        10,\n        0\n    ];\n\n    uint public constant NUM_OF_PHASE = 3;\n  \n    /// Each phase contains exactly 29000 Ethereum blocks, which is roughly 7 days,\n    /// which makes this 3-phase sale period roughly 21 days.\n    /// See https://www.ethereum.org/crowdsale#scheduling-a-call\n    uint16 public constant BLOCKS_PER_PHASE = 29000;\n\n    /// This is where we hold ETH during this token sale. We will not transfer any Ether\n    /// out of this address before we invocate the `close` function to finalize the sale. \n    /// This promise is not guanranteed by smart contract by can be verified with public\n    /// Ethereum transactions data available on several blockchain browsers.\n    /// This is the only address from which `start` and `close` can be invocated.\n    ///\n    /// Note: this will be initialized during the contract deployment.\n    address public target;\n\n    /// `firstblock` specifies from which block our token sale starts.\n    /// This can only be modified once by the owner of `target` address.\n    uint public firstblock = 0;\n\n    /// Indicates whether unsold token have been issued. This part of HPB token\n    /// is managed by the project team and is issued directly to `target`.\n    bool public unsoldTokenIssued = false;\n\n    /// Minimum amount of funds to be raised for the sale to succeed. \n    uint256 public constant GOAL = 3000 ether;\n\n    /// Maximum amount of fund to be raised, the sale ends on reaching this amount.\n    uint256 public constant HARD_CAP = 4500 ether;\n\n    /// Base exchange rate is set to 1 ETH = 1050 HPB.\n    uint256 public constant BASE_RATE = 1050;\n\n    /// A simple stat for emitting events.\n    uint public totalEthReceived = 0;\n\n    /// Issue event index starting from 0.\n    uint public issueIndex = 0;\n\n    /* \n     * EVENTS\n     */\n\n    /// Emitted only once after token sale starts.\n    event SaleStarted();\n\n    /// Emitted only once after token sale ended (all token issued).\n    event SaleEnded();\n\n    /// Emitted when a function is invocated by unauthorized addresses.\n    event InvalidCaller(address caller);\n\n    /// Emitted when a function is invocated without the specified preconditions.\n    /// This event will not come alone with an exception.\n    event InvalidState(bytes msg);\n\n    /// Emitted for each sucuessful token purchase.\n    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n\n    /// Emitted if the token sale succeeded.\n    event SaleSucceeded();\n\n    /// Emitted if the token sale failed.\n    /// When token sale failed, all Ether will be return to the original purchasing\n    /// address with a minor deduction of transaction fee锛坓as)\n    event SaleFailed();\n\n    /*\n     * MODIFIERS\n     */\n\n    modifier onlyOwner {\n        if (target == msg.sender) {\n            _;\n        } else {\n            InvalidCaller(msg.sender);\n            throw;\n        }\n    }\n\n    modifier beforeStart {\n        if (!saleStarted()) {\n            _;\n        } else {\n            InvalidState(\"Sale has not started yet\");\n            throw;\n        }\n    }\n\n    modifier inProgress {\n        if (saleStarted() && !saleEnded()) {\n            _;\n        } else {\n            InvalidState(\"Sale is not in progress\");\n            throw;\n        }\n    }\n\n    modifier afterEnd {\n        if (saleEnded()) {\n            _;\n        } else {\n            InvalidState(\"Sale is not ended yet\");\n            throw;\n        }\n    }\n\n    /**\n     * CONSTRUCTOR \n     * \n     * @dev Initialize the HPB Token\n     * @param _target The escrow account address, all ethers will\n     * be sent to this address.\n     * This address will be : 0xe597c5ab87e9d20ad445976d9b016c37f864da2b\n     */\n    function HPBToken(address _target) {\n        target = _target;\n        totalSupply = 10 ** 26;\n        balances[target] = totalSupply;\n    }\n\n    /*\n     * PUBLIC FUNCTIONS\n     */\n\n    /// @dev Start the token sale.\n    /// @param _firstblock The block from which the sale will start.\n    function start(uint _firstblock) public onlyOwner beforeStart {\n        if (_firstblock <= block.number) {\n            // Must specify a block in the future.\n            throw;\n        }\n\n        firstblock = _firstblock;\n        SaleStarted();\n    }\n\n    /// @dev Triggers unsold tokens to be issued to `target` address.\n    function close() public onlyOwner afterEnd {\n        if (totalEthReceived < GOAL) {\n            SaleFailed();\n        } else {\n            SaleSucceeded();\n        }\n    }\n\n    /// @dev Returns the current price.\n    function price() public constant returns (uint tokens) {\n        return computeTokenAmount(1 ether);\n    }\n\n    /// @dev This default function allows token to be purchased by directly\n    /// sending ether to this smart contract.\n    function () payable {\n        issueToken(msg.sender);\n    }\n\n    /// @dev Issue token based on Ether received.\n    /// @param recipient Address that newly issued token will be sent to.\n    function issueToken(address recipient) payable inProgress {\n        // We only accept minimum purchase of 0.01 ETH.\n        assert(msg.value >= 0.01 ether);\n\n        // We only accept maximum purchase of 35 ETH.\n        assert(msg.value <= 35 ether);\n\n        // We only accept totalEthReceived < HARD_CAP\n        uint ethReceived = totalEthReceived + msg.value;\n        assert(ethReceived <= HARD_CAP);\n\n        uint tokens = computeTokenAmount(msg.value);\n        totalEthReceived = totalEthReceived.add(msg.value);\n        \n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        balances[target] = balances[target].sub(tokens);\n\n        Issue(\n            issueIndex++,\n            recipient,\n            msg.value,\n            tokens\n        );\n\n        if (!target.send(msg.value)) {\n            throw;\n        }\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n  \n    /// @dev Compute the amount of HPB token that can be purchased.\n    /// @param ethAmount Amount of Ether to purchase HPB.\n    /// @return Amount of HPB token to purchase\n    function computeTokenAmount(uint ethAmount) internal constant returns (uint tokens) {\n        uint phase = (block.number - firstblock).div(BLOCKS_PER_PHASE);\n\n        // A safe check\n        if (phase >= bonusPercentages.length) {\n            phase = bonusPercentages.length - 1;\n        }\n\n        uint tokenBase = ethAmount.mul(BASE_RATE);\n        uint tokenBonus = tokenBase.mul(bonusPercentages[phase]).div(100);\n\n        tokens = tokenBase.add(tokenBonus);\n    }\n\n    /// @return true if sale has started, false otherwise.\n    function saleStarted() constant returns (bool) {\n        return (firstblock > 0 && block.number >= firstblock);\n    }\n\n    /// @return true if sale has ended, false otherwise.\n    function saleEnded() constant returns (bool) {\n        return firstblock > 0 && (saleDue() || hardCapReached());\n    }\n\n    /// @return true if sale is due when the last phase is finished.\n    function saleDue() constant returns (bool) {\n        return block.number >= firstblock + BLOCKS_PER_PHASE * NUM_OF_PHASE;\n    }\n\n    /// @return true if the hard cap is reached.\n    function hardCapReached() constant returns (bool) {\n        return totalEthReceived >= HARD_CAP;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstblock\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_OF_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052606060405190810160405280601460ff168152602001600a60ff168152602001600060ff1681525060039060036200003e92919062000153565b5060006005556000600660006101000a81548160ff0219169083151502179055506000600755600060085534156200007257fe5b60405160208062001a8d833981016040528080519060200190919050505b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a52b7d2dcc80cd2e400000060008190555060005460016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5062000227565b82600a601f01602090048101928215620001e15791602002820160005b83821115620001b057835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000170565b8015620001df5782816101000a81549060ff0219169055600101602081600001049283019260010302620001b0565b505b509050620001f09190620001f4565b5090565b6200022491905b808211156200022057600081816101000a81549060ff021916905550600101620001fb565b5090565b90565b61185680620002376000396000f30060606040523615610168576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461017a57806318160ddd146101b95780631e85107c146101df57806323b872dd146102195780632e0f2625146102775780632e5ab94f1461029d5780633a03171c146102cb57806341910f90146102f157806343d726d6146103175780635c474f9e146103295780636a28f8281461035357806370a082311461037957806389034082146103c357806395805dad146103f15780639762f802146104115780639b8906ae1461043b5780639d0f17c814610465578063a035b1fe1461048f578063a1bed0be146104b5578063a3f4df7e146104db578063a9059cbb14610574578063a9a18dda146105b3578063bea4ae88146105d9578063d4b8399214610603578063dbefe78914610655578063dd62ed3e1461067b578063e85365d5146106e4578063f76f8d781461070a575b6101785b610175336107a3565b5b565b005b341561018257fe5b6101b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b08565b005b34156101c157fe5b6101c9610c8c565b6040518082815260200191505060405180910390f35b34156101e757fe5b6101fd6004808035906020019091905050610c92565b604051808260ff1660ff16815260200191505060405180910390f35b341561022157fe5b610275600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cbc565b005b341561027f57fe5b610287610f7f565b6040518082815260200191505060405180910390f35b34156102a557fe5b6102ad610f84565b604051808261ffff1661ffff16815260200191505060405180910390f35b34156102d357fe5b6102db610f8a565b6040518082815260200191505060405180910390f35b34156102f957fe5b610301610f97565b6040518082815260200191505060405180910390f35b341561031f57fe5b610327610f9d565b005b341561033157fe5b61033961115d565b604051808215151515815260200191505060405180910390f35b341561035b57fe5b610363611179565b6040518082815260200191505060405180910390f35b341561038157fe5b6103ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061117f565b6040518082815260200191505060405180910390f35b6103ef600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107a3565b005b34156103f957fe5b61040f60048080359060200190919050506111c9565b005b341561041957fe5b610421611359565b604051808215151515815260200191505060405180910390f35b341561044357fe5b61044b611370565b604051808215151515815260200191505060405180910390f35b341561046d57fe5b61047561139d565b604051808215151515815260200191505060405180910390f35b341561049757fe5b61049f6113b0565b6040518082815260200191505060405180910390f35b34156104bd57fe5b6104c56113c9565b6040518082815260200191505060405180910390f35b34156104e357fe5b6104eb6113d6565b604051808060200182810382528381815181526020019150805190602001908083836000831461053a575b80518252602083111561053a57602082019150602081019050602083039250610516565b505050905090810190601f1680156105665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561057c57fe5b6105b1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611410565b005b34156105bb57fe5b6105c36115bd565b6040518082815260200191505060405180910390f35b34156105e157fe5b6105e96115c3565b604051808215151515815260200191505060405180910390f35b341561060b57fe5b6106136115dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065d57fe5b610665611602565b6040518082815260200191505060405180910390f35b341561068357fe5b6106ce600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611607565b6040518082815260200191505060405180910390f35b34156106ec57fe5b6106f461168f565b6040518082815260200191505060405180910390f35b341561071257fe5b61071a611695565b6040518080602001828103825283818151815260200191508051906020019080838360008314610769575b80518252602083111561076957602082019150602081019050602083039250610745565b505050905090810190601f1680156107955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600060006107af61115d565b80156107c057506107be611370565b155b15610a9457662386f26fc1000034101515156107d857fe5b6801e5b8fa8fe2ac000034111515156107ed57fe5b3460075401915068f3f20b8dfa69d00000821115151561080957fe5b610812346116cf565b90506108293460075461178d90919063ffffffff16565b60078190555061088181600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109388160016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117ad90919063ffffffff16565b60016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe316e9c07bf6ee91102f762d73f95b6cab9dcc157278814c7408906855c6a3a66008600081548092919060010191905055843484604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f193505050501515610a8e5760006000fd5b5b610b02565b7fa24636c18e73457917a92dad223d797b84c2f7a4bdd82892f15a8c4cd9aec1b76040518080602001828103825260178152602001807f53616c65206973206e6f7420696e2070726f677265737300000000000000000081525060200191505060405180910390a160006000fd5b5b505050565b60008114158015610b9657506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610ba15760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b600381600a81101515610ca157fe5b602091828204019190065b915054906101000a900460ff1681565b600060606004810160003690501015610cd55760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150610da683600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117ad90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e9183836117ad90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b601281565b61714881565b68f3f20b8dfa69d0000081565b61041a81565b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110f157610ffb611370565b1561107d5768a2a15d09519be000006007541015611047577f100c98fe43bef515268f854995b9fe23e0d72dbe3f2726094d9f1864ab4afde260405180905060405180910390a1611077565b7f0151fbf6d2def4666ab0f87412daa4ac6a67e9fa86a50cfbd7b36b16d72705d960405180905060405180910390a15b5b6110eb565b7fa24636c18e73457917a92dad223d797b84c2f7a4bdd82892f15a8c4cd9aec1b76040518080602001828103825260158152602001807f53616c65206973206e6f7420656e64656420796574000000000000000000000081525060200191505060405180910390a160006000fd5b5b61115a565b7fcbd9d2e0b97a08f1b662bf4d639e76b32edd97a5d890cafbd2b3cf1b803243a433604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160006000fd5b5b565b6000600060055411801561117357506005544310155b90505b90565b60085481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ec5761122761115d565b151561127857438111151561123c5760006000fd5b806005819055507f912ee23dde46ec889d6748212cce445d667f7041597691dc89e8549ad8bc0acb60405180905060405180910390a15b6112e6565b7fa24636c18e73457917a92dad223d797b84c2f7a4bdd82892f15a8c4cd9aec1b76040518080602001828103825260188152602001807f53616c6520686173206e6f74207374617274656420796574000000000000000081525060200191505060405180910390a160006000fd5b5b611355565b7fcbd9d2e0b97a08f1b662bf4d639e76b32edd97a5d890cafbd2b3cf1b803243a433604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160006000fd5b5b50565b600068f3f20b8dfa69d00000600754101590505b90565b6000600060055411801561139757506113876115c3565b806113965750611395611359565b5b5b90505b90565b600660009054906101000a900460ff1681565b60006113c3670de0b6b3a76400006116cf565b90505b90565b68a2a15d09519be0000081565b604060405190810160405280600781526020017f485042436f696e0000000000000000000000000000000000000000000000000081525081565b604060048101600036905010156114275760006000fd5b61147982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117ad90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b60075481565b6000600361714861ffff16026005540143101590505b90565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60055481565b604060405190810160405280600381526020017f485042000000000000000000000000000000000000000000000000000000000081525081565b60006000600060006116f461714861ffff1660055443036117c790919063ffffffff16565b9250600a83101515611708576001600a0392505b61171d61041a866117e490919063ffffffff16565b915061176d606461175f600386600a8110151561173657fe5b602091828204019190065b9054906101000a900460ff1660ff16856117e490919063ffffffff16565b6117c790919063ffffffff16565b9050611782818361178d90919063ffffffff16565b93505b505050919050565b6000600082840190506117a284821015611819565b8091505b5092915050565b60006117bb83831115611819565b81830390505b92915050565b6000600082848115156117d657fe5b0490508091505b5092915050565b60006000828402905061180e6000851480611809575083858381151561180657fe5b04145b611819565b8091505b5092915050565b8015156118265760006000fd5b5b505600a165627a7a72305820bb32b0c18685177dfb2d307c3441c8d1389a8c98b089b8b7c66be625be06367c002900000000000000000000000035482bbddaad1ade1941e77c088195725cf47b82",
  "constructorArguments": "00000000000000000000000035482bbddaad1ade1941e77c088195725cf47b82"
}