{
  "address": "0x0d068b35c5eda0fe336fe629718c00dbde36d27a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MoonProjectToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-21\n*/\n\npragma solidity ^0.4.25;\n\n/*\n [Rules]\n\n [✓] 10% Deposit fee\n            33% => referrer (or contract owner, if none)\n            10% => contract owner\n            57% => dividends\n [✓] 4% Withdraw fee\n            25% => contract owner\n            75% => dividends\n [✓] 1% Token transfer\n            100% => dividends\n*/\n\ncontract MoonProjectToken {\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n    string public name = \"Moon Project Token\";\n    string public symbol = \"MPT\";\n    address constant internal boss = 0x72A823166f7e34247DFce06fd95fE0b180618a3f;\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 10;\n    uint8 constant internal transferFee_ = 1;\n    uint8 constant internal exitFee_ = 4;\n    uint8 constant internal refferalFee_ = 33;\n    uint8 constant internal ownerFee1 = 10;\n    uint8 constant internal ownerFee2 = 25;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n\n    function buy(address _referredBy) public payable returns (uint256) {\n        return purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 forBoss = SafeMath.div(SafeMath.mul(_dividends, ownerFee2), 100);\n        _dividends = SafeMath.sub(_dividends, forBoss);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n\n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n        return true;\n    }\n\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function buyPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 forBoss = SafeMath.div(SafeMath.mul(_undividedDividends, ownerFee1), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            referralBalance_[boss] = SafeMath.add(referralBalance_[boss], _referralBonus);\n        }\n\n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n            (\n                (\n                    SafeMath.sub(\n                        (sqrt\n                            (\n                                (_tokenPriceInitial ** 2)\n                                +\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                                +\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                                +\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                            )\n                        ), _tokenPriceInitial\n                    )\n                ) / (tokenPriceIncremental_)\n            ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n            (\n                SafeMath.sub(\n                    (\n                        (\n                            (\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                            ) - tokenPriceIncremental_\n                        ) * (tokens_ - 1e18)\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n                )\n                / 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052601260808190527f4d6f6f6e2050726f6a65637420546f6b656e000000000000000000000000000060a0908152620000409160009190620000a9565b506040805180820190915260038082527f4d5054000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000a9565b506802b5e3af16b1880000600255348015620000a257600080fd5b506200014e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ec57805160ff19168380011785556200011c565b828001600101855582156200011c579182015b828111156200011c578251825591602001919060010190620000ff565b506200012a9291506200012e565b5090565b6200014b91905b808211156200012a576000815560010162000135565b90565b6110ed806200015e6000396000f3006080604052600436106101105763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461011e57806306fdde031461015157806310d0ffdd146101db57806318160ddd146101f35780632260937314610208578063313ce567146102205780633ccfd60b1461024b5780634b7503341461026257806356d399e814610277578063688abbf71461028c5780636b2f4632146102a657806370a08231146102bb5780638620410b146102dc578063949e8acd146102f157806395d89b4114610306578063a9059cbb1461031b578063e4849b3214610353578063e9fad8ee1461036b578063f088d54714610380578063fdb5a03e14610394575b61011b3460006103a9565b50005b34801561012a57600080fd5b5061013f600160a060020a03600435166106cf565b60408051918252519081900360200190f35b34801561015d57600080fd5b5061016661070a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a0578181015183820152602001610188565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e757600080fd5b5061013f600435610798565b3480156101ff57600080fd5b5061013f6107cb565b34801561021457600080fd5b5061013f6004356107d1565b34801561022c57600080fd5b5061023561080d565b6040805160ff9092168252519081900360200190f35b34801561025757600080fd5b50610260610812565b005b34801561026e57600080fd5b5061013f6108e5565b34801561028357600080fd5b5061013f61093c565b34801561029857600080fd5b5061013f6004351515610942565b3480156102b257600080fd5b5061013f610985565b3480156102c757600080fd5b5061013f600160a060020a036004351661098a565b3480156102e857600080fd5b5061013f6109a5565b3480156102fd57600080fd5b5061013f6109f0565b34801561031257600080fd5b50610166610a02565b34801561032757600080fd5b5061033f600160a060020a0360043516602435610a5c565b604080519115158252519081900360200190f35b34801561035f57600080fd5b50610260600435610bff565b34801561037757600080fd5b50610260610df0565b61013f600160a060020a0360043516610e1d565b3480156103a057600080fd5b50610260610e2f565b60003381808080808080806103c96103c28d600a610ee5565b6064610f1e565b97506103d96103c2896021610ee5565b96506103e96103c289600a610ee5565b95506103f58888610f41565b94506104018c89610f41565b935061040c84610f56565b9250680100000000000000008502915060008311801561043657506006546104348482610fee565b115b151561044157600080fd5b600160a060020a038b161580159061046b575088600160a060020a03168b600160a060020a031614155b80156104915750600254600160a060020a038c1660009081526003602052604090205410155b156104d757600160a060020a038b166000908152600460205260409020546104b99088610fee565b600160a060020a038c1660009081526004602052604090205561053c565b7372a823166f7e34247dfce06fd95fe0b180618a3f60005260046020526000805160206110a28339815191525461050e9088610fee565b7372a823166f7e34247dfce06fd95fe0b180618a3f60005260046020526000805160206110a2833981519152555b7372a823166f7e34247dfce06fd95fe0b180618a3f60005260046020526000805160206110a2833981519152546105739087610fee565b7372a823166f7e34247dfce06fd95fe0b180618a3f600090815260046020526000805160206110a2833981519152919091556006541115610607576105ba60065484610fee565b60068190556801000000000000000086028115156105d457fe5b600780549290910490910190556006546801000000000000000086028115156105f957fe5b04830282038203915061060d565b60068390555b600160a060020a0389166000908152600360205260409020546106309084610fee565b600160a060020a03808b166000818152600360209081526040808320959095556007546005909152939020805493870286900393840190559192508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e864261069a6109a5565b604080519485526020850193909352838301919091526060830152519081900360800190a350909a9950505050505050505050565b600160a060020a0316600090815260056020908152604080832054600390925290912054600754680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b505050505081565b60008080806107ab6103c286600a610ee5565b92506107b78584610f41565b91506107c282610f56565b95945050505050565b60065490565b60008060008060065485111515156107e857600080fd5b6107f185611000565b92506108016103c2846004610ee5565b91506107c28383610f41565b601281565b60008060006108216001610942565b1161082b57600080fd5b3391506108386000610942565b600160a060020a038316600081815260056020908152604080832080546801000000000000000087020190556004909152808220805490839055905193019350909183156108fc0291849190818181858888f193505050501580156108a1573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b60008060008060065460001415610903576414f46b04009350610936565b610914670de0b6b3a7640000611000565b92506109246103c2846004610ee5565b91506109308383610f41565b90508093505b50505090565b60025481565b6000338261095857610953816106cf565b61097c565b600160a060020a03811660009081526004602052604090205461097a826106cf565b015b91505b50919050565b303190565b600160a060020a031660009081526003602052604090205490565b600080600080600654600014156109c35764199c82cc009350610936565b6109d4670de0b6b3a7640000611000565b92506109e46103c284600a610ee5565b91506109308383610fee565b6000336109fc8161098a565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b600080600080600080610a6d6109f0565b11610a7757600080fd5b33600081815260036020526040902054909450861115610a9657600080fd5b6000610aa26001610942565b1115610ab057610ab0610812565b610abe6103c2876001610ee5565b9250610aca8684610f41565b9150610ad583611000565b9050610ae360065484610f41565b600655600160a060020a038416600090815260036020526040902054610b099087610f41565b600160a060020a038086166000908152600360205260408082209390935590891681522054610b389083610fee565b600160a060020a0388811660008181526003602090815260408083209590955560078054948a16835260059091528482208054948c02909403909355825491815292909220805492850290920190915554600654610bac9190680100000000000000008402811515610ba657fe5b04610fee565b600755604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b600080600080600080600080610c136109f0565b11610c1d57600080fd5b33600081815260036020526040902054909750881115610c3c57600080fd5b879550610c4886611000565b9450610c586103c2866004610ee5565b9350610c686103c2856019610ee5565b9250610c748484610f41565b9350610c808585610f41565b9150610c8e60065487610f41565b600655600160a060020a038716600090815260036020526040902054610cb49087610f41565b600160a060020a038816600090815260036020908152604080832093909355600754600582529282208054938a02680100000000000000008702019384900390557372a823166f7e34247dfce06fd95fe0b180618a3f909152600490526000805160206110a283398151915254909150610d2e9084610fee565b7372a823166f7e34247dfce06fd95fe0b180618a3f600090815260046020526000805160206110a2833981519152919091556006541115610d8b57610d87600754600654680100000000000000008702811515610ba657fe5b6007555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e878442610dc16109a5565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b3360008181526003602052604081205490811115610e1157610e1181610bff565b610e19610812565b5050565b6000610e2934836103a9565b92915050565b600080600080610e3f6001610942565b11610e4957600080fd5b610e536000610942565b33600081815260056020908152604080832080546801000000000000000087020190556004909152812080549082905590920194509250610e959084906103a9565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610ef85760009150610f17565b50828202828482811515610f0857fe5b0414610f1357600080fd5b8091505b5092915050565b600080808311610f2d57600080fd5b8284811515610f3857fe5b04949350505050565b600082821115610f5057600080fd5b50900390565b6006546000906c01431e0fae6d7217caa00000009082906402540be400610fdb610fd5730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161106c565b85610f41565b811515610fe457fe5b0403949350505050565b600082820183811015610f1357600080fd5b600654600090670de0b6b3a76400008381019181019083906110596414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561105357fe5b04610f41565b81151561106257fe5b0495945050505050565b80600260018201045b8181101561097f57809150600281828581151561108e57fe5b040181151561109957fe5b04905061107556005db607f7527136fcd14d9f2d779e2760273c77e63d7796277b631b4695edb65fa165627a7a72305820d5f5efa2d4d06cb98876a9e95fb9c1b9a6b2523a8a89f4ccc205c5017b5fd09d0029"
}