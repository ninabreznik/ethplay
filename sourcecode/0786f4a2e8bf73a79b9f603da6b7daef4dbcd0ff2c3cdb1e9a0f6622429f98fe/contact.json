{
  "address": "0x059d4329078dca62c521779c0ce98eb9329349e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MiniMeToken",
  "compilerVersion": "v0.4.6+commit.2dabbdf0",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-12-15\n*/\n\npragma solidity ^0.4.4;\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy to clone this token and\n///  spawn new tokens using the token distribution at a given block.\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n\n// The controller must implement this interface\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a transfer\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The ammount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount)\n        returns(bool);\n}\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { if (msg.sender != controller) throw; _; }\n\n    address public controller;\n\n    function Controlled() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to the a\n    ///  given value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the Block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (!transfersEnabled) throw;\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) returns (bool success) {\n\n        // The controller of this contract can move tokens around at will, this\n        //  is important to recognize! Confirm that you trust the controller of\n        //  this contract, which in most situations should be another open\n        //  source smart contract or 0x0\n        if (msg.sender != controller) {\n            if (!transfersEnabled) throw;\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount) return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n\n           if (_amount == 0) {\n               return true;\n           }\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           if ((_to == 0) || (_to == address(this))) throw;\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           if (previousBalanceFrom < _amount) {\n               return false;\n           }\n\n           if ((controller != 0)&&(isContract(controller))) {\n               if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               throw;\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        if (!transfersEnabled) throw;\n\n        // To change the approve amount you first have to reduce the addresses´\n        // allowance to zero by calling `approve(_spender,0)` if it is not\n        // already 0 https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\n\n        if ((controller != 0)&&(isContract(controller))) {\n            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n                throw;\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n\n        // This portion is copied from ConsenSys's Standard Token Contract. It\n        //  calls the receiveApproval function that is part of the contract that\n        //  is being approved (`_spender`). The function should look like:\n        //  `receiveApproval(address _from, uint256 _amount, address\n        //  _tokenContract, bytes _extraData)` It is assumed that the call\n        //  *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(\n            bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))),\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n            )) { throw;\n        }\n        return true;\n    }\n\n    /// @return The total amount of tokens\n    function totalSupply() constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @notice Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) constant\n        returns (uint) {\n\n        // If the `_blockNumber` requested is before the genesis block for the\n        //  the token being queried, the value returned is 0\n        if (_blockNumber < creationBlock) {\n            return 0;\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        } else if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, parentSnapShotBlock);\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt( balances[_owner], _blockNumber);\n        }\n\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n\n        // If the `_blockNumber` requested is before the genesis block for the\n        //  the token being queried, the value returned is 0\n        if (_blockNumber < creationBlock) {\n            return 0;\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        } else if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(parentSnapShotBlock);\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt( totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Units of the clone token\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is higher than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) returns(address) {\n        if (_snapshotBlock > block.number) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        var previousBalanceTo = balanceOf(_owner);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n        if (curTotalSupply < _amount) throw;\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        var previousBalanceFrom = balanceOf(_owner);\n        if (previousBalanceFrom < _amount) throw;\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    // Internal function to determine if an address is a cntract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    /// set to 0, the ether is sent to the controller (normally the token\n    /// creation contract) using the `proxyPayment` method.\n    function ()  payable {\n        if (controller == 0) throw;\n        if (isContract(controller)) {\n            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\n                throw;\n        } else {\n            if (! controller.send(msg.value)) throw;\n        }\n    }\n\n\n////////////////\n// Events\n////////////////\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n// This contract is used to generate clone contracts from a contract.\n// In solidity this is the way to create a contract from a contract of the same\n//  class\ncontract MiniMeTokenFactory {\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00490600052602060002090601f016020900481019282601f10620001ee57805160ff19168380011785556200021e565b828001600101855582156200021e579182015b828111156200021e57825182559160200191906001019062000201565b5b50620002429291505b80821115620000fb5760008155600101620000e5565b5090565b50506002805460ff19167f010000000000000000000000000000000000000000000000000000000000000085810204178155825160038054600082905290927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b60206101006001851615026000190190931691909104601f90810183900482019392870190839010620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b5b50620003359291505b80821115620000fb5760008155600101620000e5565b5090565b505060058054600160a060020a0319166c01000000000000000000000000888102041790556006859055600b805460ff19167f010000000000000000000000000000000000000000000000000000000000000083810204179055436007555b505050505050505b61181880620003ab6000396000f36060604052361561011c5760e060020a600035046306fdde038114610213578063095ea7b31461028e57806317634514146102b557806318160ddd146102d457806323b872dd146102f3578063313ce5671461031d5780633cebb823146103405780634ee2cd7e1461035257806354fd4d50146103775780636638c087146103f257806370a08231146104aa57806380a54001146104cc578063827f32c0146104f557806395d89b411461051c578063981b24d014610597578063a9059cbb146105b9578063bef97c87146105e0578063c5bcc4f114610601578063cae9ca5114610620578063d3ce77fe1461068b578063dd62ed3e146106b2578063e77772fe146106d7578063f41e60c514610700578063f77c479114610712575b6102115b600054600160a060020a0316151561013757610000565b60005461014c90600160a060020a031661073b565b156101d957600060009054906101000a9004600160a060020a0316600160a060020a031663f48c305434336000604051602001526040518360e060020a0281526004018082600160a060020a031681526020019150506020604051808303818588803b156100005761235a5a03f11561000057505060405151151591506101d4905057610000565b61020d565b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050151561020d57610000565b5b5b565b005b346100005761022061074a565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576102a16004356024356107d7565b604080519115158252519081900360200190f35b34610000576102c2610955565b60408051918252519081900360200190f35b34610000576102c261095b565b60408051918252519081900360200190f35b34610000576102a160043560243560443561096c565b604080519115158252519081900360200190f35b346100005761032a610a0e565b6040805160ff9092168252519081900360200190f35b3461000057610211600435610a17565b005b34610000576102c2600435602435610a67565b60408051918252519081900360200190f35b3461000057610220610bbc565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761048e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989a8a359a90999401975091955091820193509150819084018382808284375094965050843594602001359350610c4a92505050565b60408051600160a060020a039092168252519081900360200190f35b34610000576102c2600435610e51565b60408051918252519081900360200190f35b346100005761048e610e65565b60408051600160a060020a039092168252519081900360200190f35b34610000576102a1600435602435610e74565b604080519115158252519081900360200190f35b3461000057610220610f2d565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576102c2600435610fbb565b60408051918252519081900360200190f35b34610000576102a16004356024356110bb565b604080519115158252519081900360200190f35b34610000576102a16110e3565b604080519115158252519081900360200190f35b34610000576102c26110ec565b60408051918252519081900360200190f35b3461000057604080516020600460443581810135601f81018490048402850184019095528484526102a19482359460248035956064949293919092019181908401838280828437509496506110f295505050505050565b604080519115158252519081900360200190f35b34610000576102a1600435602435611277565b604080519115158252519081900360200190f35b34610000576102c2600435602435611349565b60408051918252519081900360200190f35b346100005761048e611376565b60408051600160a060020a039092168252519081900360200190f35b346100005761021160043561138a565b005b346100005761048e6113be565b60408051600160a060020a039092168252519081900360200190f35b6000813b908111905b50919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b505050505081565b600b5460009060ff1615156107eb57610000565b811580159061081e5750600160a060020a0333811660009081526009602090815260408083209387168352929052205415155b1561082857610000565b600054600160a060020a031615801590610852575060005461085290600160a060020a031661073b565b5b156108ed576000805460408051602090810184905281517fda682aeb000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301528881166024830152604482018890529251929093169363da682aeb9360648082019492918390030190829087803b156100005760325a03f11561000057505060405151151590506108ed57610000565b5b600160a060020a03338116600081815260096020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b60075481565b600061096643610fbb565b90505b90565b6000805433600160a060020a039081169116146109f957600b5460ff16151561099457610000565b600160a060020a0380851660009081526009602090815260408083203390941683529290522054829010156109cb57506000610a07565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b610a048484846113cd565b90505b9392505050565b60025460ff1681565b60005433600160a060020a03908116911614610a3257610000565b6000805473ffffffffffffffffffffffffffffffffffffffff19166c01000000000000000000000000838102041790555b5b50565b6000600754821015610a7f5750600061094f5661094f565b600160a060020a0383166000908152600860205260409020541580610ade5750600160a060020a0383166000908152600860205260408120805484929081101561000057906000526020600020900160005b50546001608060020a0316115b15610b8b57600554600160a060020a031615610b7e57600560009054906101000a9004600160a060020a0316600160a060020a0316634ee2cd7e846006546000604051602001526040518360e060020a0281526004018083600160a060020a0316815260200182815260200192505050602060405180830381600087803b156100005760325a03f11561000057505060405151915061094f905056610b86565b50600061094f565b61094f565b600160a060020a0383166000908152600860205260409020610bad90836115a3565b905061094f565b5b5b92915050565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b505050505081565b6000600043841115610c5a574393505b600b60019054906101000a9004600160a060020a0316600160a060020a0316635b7b72c130868a8a8a896000604051602001526040518760e060020a0281526004018087600160a060020a03168152602001868152602001806020018560ff1681526020018060200184151581526020018381038352878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610d235780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610d7c5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b156100005760325a03f1156100005750505060405180519060200150905080600160a060020a0316633cebb823336040518260e060020a0281526004018082600160a060020a03168152602001915050600060405180830381600087803b156100005760325a03f115610000575050604080518681529051600160a060020a03841692507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade9181900360200190a28091505b5095945050505050565b6000610e5d8243610a67565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610e9457610000565b610e9f600a436115a3565b9150610eae600a8584016116f3565b610eb785610e51565b600160a060020a0386166000908152600860205260409020909150610ede908583016116f3565b604080518581529051600160a060020a038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3600192505b5b505092915050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b505050505081565b6000600754821015610fd357506000610e6056610e60565b600a541580611006575081600a6000815481101561000057906000526020600020900160005b50546001608060020a0316115b156110a257600554600160a060020a03161561109557600560009054906101000a9004600160a060020a0316600160a060020a031663981b24d06006546000604051602001526040518260e060020a02815260040180828152602001915050602060405180830381600087803b156100005760325a03f115610000575050604051519150610e6090505661109d565b506000610e60565b610e60565b6110ad600a836115a3565b9050610e60565b5b5b919050565b600b5460009060ff1615156110cf57610000565b6110da3384846113cd565b90505b92915050565b600b5460ff1681565b60065481565b600160a060020a03338116600081815260096020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815260200150602e019050604051809103902060e060020a9004338530866040518560e060020a0281526004018085600160a060020a0316815260200184815260200183600160a060020a031681526020018280519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156112445780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000876161da5a03f192505050151561126c57610000565b5060015b9392505050565b600080548190819033600160a060020a0390811691161461129757610000565b6112a2600a436115a3565b9150838210156112b157610000565b6112be600a8584036116f3565b6112c785610e51565b9050838110156112d657610000565b600160a060020a03851660009081526008602052604090206112fa908583036116f3565b604080518581529051600091600160a060020a038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3600192505b5b505092915050565b600160a060020a038083166000908152600960209081526040808320938516835292905220545b92915050565b600b546101009004600160a060020a031681565b60005433600160a060020a039081169116146113a557610000565b600b805460ff191660f860020a838102041790555b5b50565b600054600160a060020a031681565b600080808315156113e1576001925061159a565b600160a060020a0385161580611408575030600160a060020a031685600160a060020a0316145b1561141257610000565b61141c8643610a67565b91508382101561142f576000925061159a565b600054600160a060020a031615801590611459575060005461145990600160a060020a031661073b565b5b156114f4576000805460408051602090810184905281517f4a393149000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301528a81166024830152604482018a905292519290931693634a3931499360648082019492918390030190829087803b156100005760325a03f11561000057505060405151151590506114f457610000565b5b600160a060020a0386166000908152600860205260409020611519908584036116f3565b6115238543610a67565b600160a060020a038616600090815260086020526040902090915061154a908583016116f3565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60006000600060008580549050600014156115c157600093506116ea565b8554869060001981019081101561000057906000526020600020900160005b50546001608060020a03168510611629578554869060001981019081101561000057906000526020600020900160005b5054608060020a90046001608060020a031693506116ea565b856000815481101561000057906000526020600020900160005b50546001608060020a031685101561165e57600093506116ea565b8554600093506000190191505b828211156116bc576002600183850101049050848682815481101561000057906000526020600020900160005b50546001608060020a0316116116b0578092506116b7565b6001810391505b61166b565b8583815481101561000057906000526020600020900160005b5054608060020a90046001608060020a031693505b50505092915050565b81546000908190158061172f575083544390859060001981019081101561000057906000526020600020900160005b50546001608060020a0316105b156117d45783848054809190600101815481835581811511611776576000838152602090206117769181019083015b80821115611772576000815560010161175e565b5090565b5b505050815481101561000057906000526020600020900160005b508054608060020a8581028190048102438202919091046fffffffffffffffffffffffffffffffff19909216919091176001608060020a03161781559150611811565b8354849060001981019081101561000057906000526020600020900160005b5080546001608060020a0316608060020a8581028190040217815590505b5b5050505056"
}