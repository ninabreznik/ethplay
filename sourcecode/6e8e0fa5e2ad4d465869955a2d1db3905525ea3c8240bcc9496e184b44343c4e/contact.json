{
  "address": "0x81cce0b68f2c2264a3a24a7fc3096611d9294f6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PassiveForwarderFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-18\n*/\n\npragma solidity ^0.4.24;\n\n/// @title Smart contract for forwarding ETH to a pre-defined recipient in the passive mode i.e. someone has to trigger the transfer.\n/// It also allows recipient to call any smart contracts. For example: Calling Trustcoin smart contract to transfer TRST.\n/// @author WeTrustPlatform\ncontract PassiveForwarder {\n  /// @dev recipient must be a normal account or a smart contract with the standard payable fallback method.\n  /// Otherwise, fund will be stuck!\n  address public recipient;\n\n  event Received(address indexed sender, uint256 value);\n\n  constructor(address _recipient) public {\n    recipient = _recipient;\n  }\n\n  function () public payable {\n    require(msg.value > 0);\n    emit Received(msg.sender, msg.value);\n  }\n\n  function sweep() public {\n    recipient.transfer(address(this).balance);\n  }\n\n  /// @dev Courtesy of https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n  /// This method allows the pre-defined recipient to call other smart contracts.\n  function externalCall(address destination, uint256 value, bytes data) public returns (bool) {\n    require(msg.sender == recipient, \"Sender must be the recipient.\");\n    uint256 dataLength = data.length;\n    bool result;\n    assembly {\n      let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n      let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n      result := call(\n        sub(gas, 34710),     // 34710 is the value that solidity is currently emitting\n                             // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                             // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n        destination,\n        value,\n        d,\n        dataLength,          // Size of the input (in bytes) - this is what fixes the padding problem\n        x,\n        0                    // Output is ignored, therefore the output size is zero\n      )\n    }\n    return result;\n  }\n}\n\n\n/// @dev This contract is used for creating the Forwarder.\n/// It also keeps track of all the Forwarders and their recipients\ncontract PassiveForwarderFactory {\n\n  address public owner;\n\n  /// @dev This will generate a public getter with two parameters\n  /// recipient address and contract index\n  mapping(address => address[]) public recipients;\n\n  event Created(address indexed recipient, address indexed newContract);\n\n  constructor(address _owner) public {\n    owner = _owner;\n  }\n\n  function create(address recipient) public returns (address){\n    require(msg.sender == owner, \"Sender must be the owner.\");\n\n    PassiveForwarder pf = new PassiveForwarder(recipient);\n    recipients[recipient].push(pf);\n    emit Created(recipient, pf);\n    return pf;\n  }\n\n  /// @dev This method helps iterate through the recipients mapping\n  function getNumberOfContracts(address recipient) public view returns (uint256) {\n    return recipients[recipient].length;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806109e283398101806040528101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061095f806100836000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806372e3bae3146100675780638da5cb5b146100be5780639ed9331814610115578063ea8b902514610198575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610225565b6040518082815260200191505060405180910390f35b3480156100ca57600080fd5b506100d3610271565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012157600080fd5b50610156600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610296565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a457600080fd5b506101e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104c1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561035d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53656e646572206d75737420626520746865206f776e65722e0000000000000081525060200191505060405180910390fd5b8261036661050e565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156103b8573d6000803e3d6000fd5b509050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c60405160405180910390a380915050919050565b6001602052816000526040600020818154811015156104dc57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040516104158061051f833901905600608060405234801561001057600080fd5b5060405160208061041583398101806040528101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610392806100836000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806335faa416146100b6578063397750b2146100cd57806366d003ac14610178575b60003411151561006657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a2005b3480156100c257600080fd5b506100cb6101cf565b005b3480156100d957600080fd5b5061015e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610250565b604051808215151515815260200191505060405180910390f35b34801561018457600080fd5b5061018d610341565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561024d573d6000803e3d6000fd5b50565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53656e646572206d7573742062652074686520726563697069656e742e00000081525060200191505060405180910390fd5b835191506040516020850160008285838a8c6187965a03f19250505080925050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820de37c69ace77fd3171e31925c22ccbbe089f7a5e81777f9f5fec1f60dd6c99d20029a165627a7a72305820a4b639de2ab9515340174ee91057614cb3273ba4e45a225fb60f9f7c07346b200029000000000000000000000000d5efc2da1b4913121058972828e0f5b8a76377c0",
  "constructorArguments": "000000000000000000000000d5efc2da1b4913121058972828e0f5b8a76377c0"
}