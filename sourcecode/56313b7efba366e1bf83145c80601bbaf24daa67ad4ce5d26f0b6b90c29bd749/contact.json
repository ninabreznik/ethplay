{
  "address": "0x44f588aeeb8c44471439d1270b3603c66a9262f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnipCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-29\n*/\n\npragma solidity ^0.4.15;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    // function totalSupply() public constant returns (uint supply);\n    // `totalSupply` is defined below because the automatically generated\n    // getter function does not match the abstract function above\n    uint public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n}\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        if (balances[msg.sender] >= _value &&          // Account has sufficient balance\n            balances[_to] + _value >= balances[_to]) { // Overflow check\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { throw; }\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        if (balances[_from] >= _value &&                // Account has sufficient balance\n            allowed[_from][msg.sender] >= _value &&     // Amount has been approved\n            balances[_to] + _value >= balances[_to]) {  // Overflow check\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { throw; }\n    }\n\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n}\n\n// Based on TokenFactory(https://github.com/ConsenSys/Token-Factory)\n\ncontract SnipCoin is StandardToken {\n\n    string public constant name = \"SnipCoin\";         // Token name\n    string public symbol = \"SNIP\";                    // Token identifier\n    uint8 public constant decimals = 18;              // Decimal points for token\n    uint public totalEthReceivedInWei;                // The total amount of Ether received during the sale in WEI\n    uint public totalUsdReceived;                     // The total amount of Ether received during the sale in USD terms\n    uint public totalUsdValueOfAllTokens;             // The total USD value of 100% of tokens\n    string public version = \"1.0\";                    // Code version\n    address public saleWalletAddress;                 // The wallet address where the Ether from the sale will be stored\n\n    mapping (address => bool) public uncappedBuyerList;      // The list of buyers allowed to participate in the sale without a cap\n    mapping (address => uint) public cappedBuyerList;        // The list of buyers allowed to participate in the sale, with their updated payment sum\n\n    uint public snipCoinToEtherExchangeRate = 76250; // This is the ratio of SnipCoin to Ether, could be updated by the owner, change before the sale\n    bool public isSaleOpen = false;                   // This opens and closes upon external command\n    bool public transferable = false;                 // Tokens are transferable\n\n    uint public ethToUsdExchangeRate = 282;           // Number of USD in one Eth\n\n    address public contractOwner;                     // Address of the contract owner\n    // Address of an additional account to manage the sale without risk to the tokens or eth. Change before the sale\n    address public accountWithUpdatePermissions = 0x6933784a82F5daDEbB600Bed8670667837aD196f;\n\n    uint public constant PERCENTAGE_OF_TOKENS_SOLD_IN_SALE = 28;     // Percentage of all the tokens being sold in the current sale\n    uint public constant DECIMALS_MULTIPLIER = 10**uint(decimals);   // Multiplier for the decimals\n    uint public constant SALE_CAP_IN_USD = 8000000;                  // The total sale cap in USD\n    uint public constant MINIMUM_PURCHASE_IN_USD = 50;               // It is impossible to purchase tokens for more than $50 in the sale.\n    uint public constant USD_PURCHASE_AMOUNT_REQUIRING_ID = 4500;    // Above this purchase amount an ID is required.\n\n    modifier onlyPermissioned() {\n        require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions));\n        _;\n    }\n\n    modifier verifySaleNotOver() {\n        require(isSaleOpen);\n        require(totalUsdReceived < SALE_CAP_IN_USD); // Make sure that sale isn't over\n        _;\n    }\n\n    modifier verifyBuyerCanMakePurchase() {\n        uint currentPurchaseValueInUSD = uint(msg.value / getWeiToUsdExchangeRate()); // The USD worth of tokens sold\n        uint totalPurchaseIncludingCurrentPayment = currentPurchaseValueInUSD +  cappedBuyerList[msg.sender]; // The USD worth of all tokens this buyer bought\n\n        require(currentPurchaseValueInUSD > MINIMUM_PURCHASE_IN_USD); // Minimum transfer is of $50\n\n        uint EFFECTIVE_MAX_CAP = SALE_CAP_IN_USD + 1000;  // This allows for the end of the sale by passing $8M and reaching the cap\n        require(EFFECTIVE_MAX_CAP - totalUsdReceived > currentPurchaseValueInUSD); // Make sure that there is enough usd left to buy.\n\n        if (!uncappedBuyerList[msg.sender]) // If buyer is on uncapped white list then no worries, else need to make sure that they're okay\n        {\n            require(cappedBuyerList[msg.sender] > 0); // Check that the sender has been initialized.\n            require(totalPurchaseIncludingCurrentPayment < USD_PURCHASE_AMOUNT_REQUIRING_ID); // Check that they're not buying too much\n        }\n        _;\n    }\n\n    function SnipCoin() public {\n        initializeSaleWalletAddress();\n        initializeEthReceived();\n        initializeUsdReceived();\n\n        contractOwner = msg.sender;                      // The creator of the contract is its owner\n        totalSupply = 10000000000 * DECIMALS_MULTIPLIER; // In total, 10 billion tokens\n        balances[contractOwner] = totalSupply;           // Initially give owner all of the tokens \n        Transfer(0x0, contractOwner, totalSupply);\n    }\n\n    function initializeSaleWalletAddress() internal {\n        saleWalletAddress = 0xb4Ad56E564aAb5409fe8e34637c33A6d3F2a0038; // Change before the sale\n    }\n\n    function initializeEthReceived() internal {\n        totalEthReceivedInWei = 14018 * 1 ether; // Ether received before public sale. Verify this figure before the sale starts.\n    }\n\n    function initializeUsdReceived() internal {\n        totalUsdReceived = 3953076; // USD received before public sale. Verify this figure before the sale starts.\n        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\n    }\n\n    function getWeiToUsdExchangeRate() public constant returns(uint) {\n        return 1 ether / ethToUsdExchangeRate; // Returns how much Wei one USD is worth\n    }\n\n    function updateEthToUsdExchangeRate(uint newEthToUsdExchangeRate) public onlyPermissioned {\n        ethToUsdExchangeRate = newEthToUsdExchangeRate; // Change exchange rate to new value, influences the counter of when the sale is over.\n    }\n\n    function updateSnipCoinToEtherExchangeRate(uint newSnipCoinToEtherExchangeRate) public onlyPermissioned {\n        snipCoinToEtherExchangeRate = newSnipCoinToEtherExchangeRate; // Change the exchange rate to new value, influences tokens received per purchase\n    }\n\n    function openOrCloseSale(bool saleCondition) public onlyPermissioned {\n        require(!transferable);\n        isSaleOpen = saleCondition; // Decide if the sale should be open or closed (default: closed)\n    }\n\n    function allowTransfers() public onlyPermissioned {\n        require(!isSaleOpen);\n        transferable = true;\n    }\n\n    function addAddressToCappedAddresses(address addr) public onlyPermissioned {\n        cappedBuyerList[addr] = 1; // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n    }\n\n    function addMultipleAddressesToCappedAddresses(address[] addrList) public onlyPermissioned {\n        for (uint i = 0; i < addrList.length; i++) {\n            addAddressToCappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n        }\n    }\n\n    function addAddressToUncappedAddresses(address addr) public onlyPermissioned {\n        uncappedBuyerList[addr] = true; // Allow a certain address to purchase SnipCoin above the cap (>=$4500)\n    }\n\n    function addMultipleAddressesToUncappedAddresses(address[] addrList) public onlyPermissioned {\n        for (uint i = 0; i < addrList.length; i++) {\n            addAddressToUncappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n        }\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(transferable);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(transferable);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function () public payable verifySaleNotOver verifyBuyerCanMakePurchase {\n        uint tokens = snipCoinToEtherExchangeRate * msg.value;\n        balances[contractOwner] -= tokens;\n        balances[msg.sender] += tokens;\n        Transfer(contractOwner, msg.sender, tokens);\n\n        totalEthReceivedInWei = totalEthReceivedInWei + msg.value; // total eth received counter\n        uint usdReceivedInCurrentTransaction = uint(msg.value / getWeiToUsdExchangeRate());\n        totalUsdReceived = totalUsdReceived + usdReceivedInCurrentTransaction; // total usd received counter\n        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\n\n        if (cappedBuyerList[msg.sender] > 0)\n        {\n            cappedBuyerList[msg.sender] = cappedBuyerList[msg.sender] + usdReceivedInCurrentTransaction;\n        }\n\n        saleWalletAddress.transfer(msg.value); // Transfer ether to safe sale address\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cappedBuyerList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snipCoinToEtherExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_IN_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTAGE_OF_TOKENS_SOLD_IN_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"addMultipleAddressesToCappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_PURCHASE_AMOUNT_REQUIRING_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"addMultipleAddressesToUncappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceivedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiToUsdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToUsdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_CAP_IN_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdValueOfAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSnipCoinToEtherExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateSnipCoinToEtherExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToCappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToUncappedAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uncappedBuyerList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountWithUpdatePermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleCondition\",\"type\":\"bool\"}],\"name\":\"openOrCloseSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthToUsdExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateEthToUsdExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600481527f534e495000000000000000000000000000000000000000000000000000000000602082015260039080516200004d92916020019062000200565b5060408051908101604052600381527f312e300000000000000000000000000000000000000000000000000000000000602082015260079080516200009792916020019062000200565b50620129da600b55600c805461ffff1916905561011a600d55600f8054600160a060020a031916736933784a82f5dadebb600bed8670667837ad196f1790553415620000e257600080fd5b5b620000fb6401000000006200131c620001b082021704565b6200011364010000000062001352620001d982021704565b6200012b64010000000062001363620001ea82021704565b600e8054600160a060020a03191633600160a060020a03908116919091178083556b204fce5e3e25026110000000600081815591831682526001602052604080832082905593549092169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a35b620002aa565b60088054600160a060020a03191673b4ad56e564aab5409fe8e34637c33a6d3f2a00381790555b565b6902f7ead45973f1c800006004555b565b623c51b4600555601c63178fea505b046006555b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024357805160ff191683800117855562000273565b8280016001018555821562000273579182015b828111156200027357825182559160200191906001019062000256565b5b506200028292915062000286565b5090565b620002a791905b808211156200028257600081556001016200028d565b5090565b90565b6113a580620002ba6000396000f300606060405236156101bf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663051eed7881146103ca57806306fdde03146103fb57806308d7557a14610486578063095ea7b3146104ab57806318160ddd146104e15780631a081330146105065780631fedd70b1461052d5780632185810b1461055257806323b872dd146105675780632782ca8d146105a3578063313ce567146105c8578063352fd696146105f157806345fb0cd61461061657806354fd4d5014610667578063558234f0146106f257806370a082311461071757806373384fd514610748578063884ae10b146107995780638858fa3b146107c85780638cfa8eea146107ed57806392ff0d311461081257806395d89b4114610839578063a9059cbb146108c4578063b4f181c6146108fa578063b869f1e21461091f578063bbdd366a14610944578063c157b86914610969578063c9bc2bf51461098e578063ce606ee0146109a6578063d371d551146109d5578063dd62ed3e146109f6578063eb1301a214610a2d578063ebfaacce14610a4e578063f25aed5414610a81578063fd3bbba514610ab0578063fe59955914610aca575b5b600c54600090819060ff1615156101d657600080fd5b600554627a120090106101e857600080fd5b60008060006101f5610ae2565b348115156101ff57fe5b600160a060020a0333166000908152600a60205260409020549190049350830191506032831161022e57600080fd5b50600554627a15e890810383901161024557600080fd5b600160a060020a03331660009081526009602052604090205460ff16151561029857600160a060020a0333166000908152600a60205260408120541161028a57600080fd5b611194821061029857600080fd5b5b600b54600e8054600160a060020a039081166000908152600160205260408082208054349096029586900390553383168083529181902080548601905592549398509216907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9088905190815260200160405180910390a36004805434019055610321610ae2565b3481151561032b57fe5b0493508360055401600581905550601c60055460640281151561034a57fe5b04600655600160a060020a0333166000908152600a6020526040812054111561038c57600160a060020a0333166000908152600a602052604090208054850190555b600854600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156103c057600080fd5b5b5b5050505b5050005b34156103d557600080fd5b6103e9600160a060020a0360043516610b00565b60405190815260200160405180910390f35b341561040657600080fd5b61040e610b12565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561044b5780820151818401525b602001610432565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049157600080fd5b6103e9610b49565b60405190815260200160405180910390f35b34156104b657600080fd5b6104cd600160a060020a0360043516602435610b4f565b604051901515815260200160405180910390f35b34156104ec57600080fd5b6103e9610bf6565b60405190815260200160405180910390f35b341561051157600080fd5b6104cd610bfc565b604051901515815260200160405180910390f35b341561053857600080fd5b6103e9610c05565b60405190815260200160405180910390f35b341561055d57600080fd5b610565610c0b565b005b341561057257600080fd5b6104cd600160a060020a0360043581169060243516604435610c64565b604051901515815260200160405180910390f35b34156105ae57600080fd5b6103e9610c92565b60405190815260200160405180910390f35b34156105d357600080fd5b6105db610c97565b60405160ff909116815260200160405180910390f35b34156105fc57600080fd5b6103e9610c9c565b60405190815260200160405180910390f35b341561062157600080fd5b6105656004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610ca195505050505050565b005b341561067257600080fd5b61040e610d14565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561044b5780820151818401525b602001610432565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106fd57600080fd5b6103e9610db2565b60405190815260200160405180910390f35b341561072257600080fd5b6103e9600160a060020a0360043516610db8565b60405190815260200160405180910390f35b341561075357600080fd5b6105656004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610dd795505050505050565b005b34156107a457600080fd5b6107ac610e4a565b604051600160a060020a03909116815260200160405180910390f35b34156107d357600080fd5b6103e9610e59565b60405190815260200160405180910390f35b34156107f857600080fd5b6103e9610ae2565b60405190815260200160405180910390f35b341561081d57600080fd5b6104cd610e5f565b604051901515815260200160405180910390f35b341561084457600080fd5b61040e610e6d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561044b5780820151818401525b602001610432565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108cf57600080fd5b6104cd600160a060020a0360043516602435610f0b565b604051901515815260200160405180910390f35b341561090557600080fd5b6103e9610f37565b60405190815260200160405180910390f35b341561092a57600080fd5b6103e9610f3d565b60405190815260200160405180910390f35b341561094f57600080fd5b6103e9610f44565b60405190815260200160405180910390f35b341561097457600080fd5b6103e9610f50565b60405190815260200160405180910390f35b341561099957600080fd5b610565600435610f56565b005b34156109b157600080fd5b6107ac610f96565b604051600160a060020a03909116815260200160405180910390f35b34156109e057600080fd5b610565600160a060020a0360043516610fa5565b005b3415610a0157600080fd5b6103e9600160a060020a0360043581169060243516610ffc565b60405190815260200160405180910390f35b3415610a3857600080fd5b610565600160a060020a0360043516611029565b005b3415610a5957600080fd5b6104cd600160a060020a0360043516611087565b604051901515815260200160405180910390f35b3415610a8c57600080fd5b6107ac61109c565b604051600160a060020a03909116815260200160405180910390f35b3415610abb57600080fd5b61056560043515156110ab565b005b3415610ad557600080fd5b610565600435611109565b005b6000600d54670de0b6b3a7640000811515610af957fe5b0490505b90565b600a6020526000908152604090205481565b60408051908101604052600881527f536e6970436f696e000000000000000000000000000000000000000000000000602082015281565b60055481565b6000811580610b815750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b1515610b8c57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600c5460ff1681565b600b5481565b600e5433600160a060020a0390811691161480610c365750600f5433600160a060020a039081169116145b1515610c4157600080fd5b600c5460ff1615610c5157600080fd5b600c805461ff0019166101001790555b5b565b600c54600090610100900460ff161515610c7d57600080fd5b610c88848484611149565b90505b9392505050565b603281565b601281565b601c81565b600e5460009033600160a060020a0390811691161480610ccf5750600f5433600160a060020a039081169116145b1515610cda57600080fd5b5060005b8151811015610d0e57610d05828281518110610cf657fe5b90602001906020020151610fa5565b5b600101610cde565b5b5b5050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b505050505081565b61119481565b600160a060020a0381166000908152600160205260409020545b919050565b600e5460009033600160a060020a0390811691161480610e055750600f5433600160a060020a039081169116145b1515610e1057600080fd5b5060005b8151811015610d0e57610e3b828281518110610e2c57fe5b90602001906020020151611029565b5b600101610e14565b5b5b5050565b600854600160a060020a031681565b60045481565b600c54610100900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b505050505081565b600c54600090610100900460ff161515610f2457600080fd5b610f2e838361125b565b90505b92915050565b600d5481565b627a120081565b670de0b6b3a764000081565b60065481565b600e5433600160a060020a0390811691161480610f815750600f5433600160a060020a039081169116145b1515610f8c57600080fd5b600b8190555b5b50565b600e54600160a060020a031681565b600e5433600160a060020a0390811691161480610fd05750600f5433600160a060020a039081169116145b1515610fdb57600080fd5b600160a060020a0381166000908152600a60205260409020600190555b5b50565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600e5433600160a060020a03908116911614806110545750600f5433600160a060020a039081169116145b151561105f57600080fd5b600160a060020a0381166000908152600960205260409020805460ff191660011790555b5b50565b60096020526000908152604090205460ff1681565b600f54600160a060020a031681565b600e5433600160a060020a03908116911614806110d65750600f5433600160a060020a039081169116145b15156110e157600080fd5b600c54610100900460ff16156110f657600080fd5b600c805460ff19168215151790555b5b50565b600e5433600160a060020a03908116911614806111345750600f5433600160a060020a039081169116145b151561113f57600080fd5b600d8190555b5b50565b600160a060020a0383166000908152600160205260408120548290108015906111995750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156111bf5750600160a060020a03831660009081526001602052604090205482810110155b1561124e57600160a060020a0380851660008181526001602081815260408084208054899003905560028252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610c8b565b600080fd5b5b9392505050565b600160a060020a03331660009081526001602052604081205482901080159061129e5750600160a060020a03831660009081526001602052604090205482810110155b1561124e57600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610bf0565b600080fd5b5b92915050565b6008805473ffffffffffffffffffffffffffffffffffffffff191673b4ad56e564aab5409fe8e34637c33a6d3f2a00381790555b565b6902f7ead45973f1c800006004555b565b623c51b4600555601c63178fea505b046006555b5600a165627a7a72305820ac4d0f84168d4f404f2f557d3135aee390af91ea7be7d9bee3eb7aa96b6136db0029"
}