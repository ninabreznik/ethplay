{
  "address": "0x80fb784b7ed66730e8b1dbd9820afd29931aab03",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EthLend Token",
  "contractName": "EthLendToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-17\n*/\n\npragma solidity ^0.4.16;\n\ncontract SafeMath {\n     function safeMul(uint a, uint b) internal returns (uint) {\n          uint c = a * b;\n          assert(a == 0 || c / a == b);\n          return c;\n     }\n\n     function safeSub(uint a, uint b) internal returns (uint) {\n          assert(b <= a);\n          return a - b;\n     }\n\n     function safeAdd(uint a, uint b) internal returns (uint) {\n          uint c = a + b;\n          assert(c>=a && c>=b);\n          return c;\n     }\n}\n\n// Standard token interface (ERC 20)\n// https://github.com/ethereum/EIPs/issues/20\ncontract Token is SafeMath {\n     // Functions:\n     /// @return total amount of tokens\n     function totalSupply() constant returns (uint256 supply);\n\n     /// @param _owner The address from which the balance will be retrieved\n     /// @return The balance\n     function balanceOf(address _owner) constant returns (uint256 balance);\n\n     /// @notice send `_value` token to `_to` from `msg.sender`\n     /// @param _to The address of the recipient\n     /// @param _value The amount of token to be transferred\n     function transfer(address _to, uint256 _value) returns(bool);\n\n     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     /// @param _from The address of the sender\n     /// @param _to The address of the recipient\n     /// @param _value The amount of token to be transferred\n     /// @return Whether the transfer was successful or not\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool);\n\n     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n     /// @param _spender The address of the account able to transfer the tokens\n     /// @param _value The amount of wei to be approved for transfer\n     /// @return Whether the approval was successful or not\n     function approve(address _spender, uint256 _value) returns (bool success);\n\n     /// @param _owner The address of the account owning tokens\n     /// @param _spender The address of the account able to transfer the tokens\n     /// @return Amount of remaining tokens allowed to spent\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n     // Events:\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract StdToken is Token {\n     // Fields:\n     mapping(address => uint256) balances;\n     mapping (address => mapping (address => uint256)) allowed;\n     uint public supply = 0;\n\n     // Functions:\n     function transfer(address _to, uint256 _value) returns(bool) {\n          require(balances[msg.sender] >= _value);\n          require(balances[_to] + _value > balances[_to]);\n\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\n          balances[_to] = safeAdd(balances[_to],_value);\n\n          Transfer(msg.sender, _to, _value);\n          return true;\n     }\n\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n          require(balances[_from] >= _value);\n          require(allowed[_from][msg.sender] >= _value);\n          require(balances[_to] + _value > balances[_to]);\n\n          balances[_to] = safeAdd(balances[_to],_value);\n          balances[_from] = safeSub(balances[_from],_value);\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n\n          Transfer(_from, _to, _value);\n          return true;\n     }\n\n     function totalSupply() constant returns (uint256) {\n          return supply;\n     }\n\n     function balanceOf(address _owner) constant returns (uint256) {\n          return balances[_owner];\n     }\n\n     function approve(address _spender, uint256 _value) returns (bool) {\n          // To change the approve amount you first have to reduce the addresses`\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\n          //  already 0 to mitigate the race condition described here:\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n          allowed[msg.sender][_spender] = _value;\n          Approval(msg.sender, _spender, _value);\n\n          return true;\n     }\n\n     function allowance(address _owner, address _spender) constant returns (uint256) {\n          return allowed[_owner][_spender];\n     }\n}\n\ncontract EthLendToken is StdToken\n{\n/// Fields:\n    string public constant name = \"EthLend Token\";\n    string public constant symbol = \"LEND\";\n    uint public constant decimals = 18;\n\n    // this includes DEVELOPERS_BONUS\n    uint public constant TOTAL_SUPPLY = 1300000000 * (1 ether / 1 wei);\n    uint public constant DEVELOPERS_BONUS = 300000000 * (1 ether / 1 wei);\n\n    uint public constant PRESALE_PRICE = 30000;  // per 1 Ether\n    uint public constant PRESALE_MAX_ETH = 2000;\n    // 60 mln tokens sold during presale\n    uint public constant PRESALE_TOKEN_SUPPLY_LIMIT = PRESALE_PRICE * PRESALE_MAX_ETH * (1 ether / 1 wei);\n\n    uint public constant ICO_PRICE1 = 27500;     // per 1 Ether\n    uint public constant ICO_PRICE2 = 26250;     // per 1 Ether\n    uint public constant ICO_PRICE3 = 25000;     // per 1 Ether\n\n    // 1bln - this includes presale tokens\n    uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 1000000000* (1 ether / 1 wei);\n\n    enum State{\n       Init,\n       Paused,\n\n       PresaleRunning,\n       PresaleFinished,\n\n       ICORunning,\n       ICOFinished\n    }\n\n    State public currentState = State.Init;\n    bool public enableTransfers = false;\n\n    address public teamTokenBonus = 0;\n\n    // Gathered funds can be withdrawn only to escrow's address.\n    address public escrow = 0;\n\n    // Token manager has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public tokenManager = 0;\n\n    uint public presaleSoldTokens = 0;\n    uint public icoSoldTokens = 0;\n    uint public totalSoldTokens = 0;\n\n/// Modifiers:\n    modifier onlyTokenManager()\n    {\n        require(msg.sender==tokenManager); \n        _; \n    }\n\n    modifier onlyInState(State state)\n    {\n        require(state==currentState); \n        _; \n    }\n\n/// Events:\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n\n/// Functions:\n    /// @dev Constructor\n    /// @param _tokenManager Token manager address.\n    function EthLendToken(address _tokenManager, address _escrow, address _teamTokenBonus) \n    {\n        tokenManager = _tokenManager;\n        teamTokenBonus = _teamTokenBonus;\n        escrow = _escrow;\n\n        // send team bonus immediately\n        uint teamBonus = DEVELOPERS_BONUS;\n        balances[_teamTokenBonus] += teamBonus;\n        supply+= teamBonus;\n\n        assert(PRESALE_TOKEN_SUPPLY_LIMIT==60000000 * (1 ether / 1 wei));\n        assert(TOTAL_SOLD_TOKEN_SUPPLY_LIMIT==1000000000 * (1 ether / 1 wei));\n    }\n\n    function buyTokens() public payable\n    {\n        require(currentState==State.PresaleRunning || currentState==State.ICORunning);\n\n        if(currentState==State.PresaleRunning){\n            return buyTokensPresale();\n        }else{\n            return buyTokensICO();\n        }\n    }\n\n    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)\n    {\n        // min - 1 ETH\n        require(msg.value >= (1 ether / 1 wei));\n        uint newTokens = msg.value * PRESALE_PRICE;\n\n        require(presaleSoldTokens + newTokens <= PRESALE_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        presaleSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function buyTokensICO() public payable onlyInState(State.ICORunning)\n    {\n        // min - 0.01 ETH\n        require(msg.value >= ((1 ether / 1 wei) / 100));\n        uint newTokens = msg.value * getPrice();\n\n        require(totalSoldTokens + newTokens <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        icoSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function getPrice()constant returns(uint)\n    {\n        if(currentState==State.ICORunning){\n             if(icoSoldTokens<(200000000 * (1 ether / 1 wei))){\n                  return ICO_PRICE1;\n             }\n             \n             if(icoSoldTokens<(300000000 * (1 ether / 1 wei))){\n                  return ICO_PRICE2;\n             }\n\n             return ICO_PRICE3;\n        }else{\n             return PRESALE_PRICE;\n        }\n    }\n\n    function setState(State _nextState) public onlyTokenManager\n    {\n        //setState() method call shouldn't be entertained after ICOFinished\n        require(currentState != State.ICOFinished);\n        \n        currentState = _nextState;\n        // enable/disable transfers\n        //enable transfers only after ICOFinished, disable otherwise\n        enableTransfers = (currentState==State.ICOFinished);\n    }\n\n    function withdrawEther() public onlyTokenManager\n    {\n        if(this.balance > 0) \n        {\n            require(escrow.send(this.balance));\n        }\n    }\n\n/// Overrides:\n    function transfer(address _to, uint256 _value) returns(bool){\n        require(enableTransfers);\n        return super.transfer(_to,_value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n        require(enableTransfers);\n        return super.transferFrom(_from,_to,_value);\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool) {\n        require(enableTransfers);\n        return super.approve(_spender,_value);\n    }\n\n/// Setters/getters\n    function setTokenManager(address _mgr) public onlyTokenManager\n    {\n        tokenManager = _mgr;\n    }\n\n    // Default fallback function\n    function() payable \n    {\n        buyTokens();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokenBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SOLD_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAX_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PRICE1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPERS_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensICO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PRICE3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PRICE2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_teamTokenBonus\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000fe1a6056ee03235f30f7a48407a5673bbf25ed48000000000000000000000000a8eb8ee66e94f883d764ee55df9da2b3d517a6620000000000000000000000003533f9798c34e3971888043871e0b4fc1702adea"
}