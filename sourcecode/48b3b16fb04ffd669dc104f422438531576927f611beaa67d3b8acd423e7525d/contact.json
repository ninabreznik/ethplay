{
  "address": "0x8eeb9e0df7092ebe81b02447af77914482b546c5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VIVACHAIN",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-25\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract Z_ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract Z_ERC20 is Z_ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n \n\n/**\n * @title Basic token implementation\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract Z_BasicToken is Z_ERC20Basic {\n   \n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token, implementing  transfer by agents \n *\n * @dev Implementation of the basic standard token with allowances.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract Z_StandardToken is Z_ERC20, Z_BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n \n  /**\n   * @dev Transfer tokens from one address to another by agents within allowance limit \n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   * @return true\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] -= _value;\n    balances[_to] += _value;\n    allowed[_from][msg.sender] -= _value;\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to  by admin , without any allowance limit\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   * @return true\n   */\n  function transferFromByAdmin(address _from, address _to, uint256 _value) internal returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    //require(_value <= 100000);\n\n    balances[_from] -= _value;\n    balances[_to] += _value;\n\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @return true\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified *additional* amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The additional amount of tokens to be spent.\n   * @return true\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + (_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the allownance quota by the specified amount of tokens\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to be decreased\n   * @return true\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue - (_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and multiple admin addresses, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Z_Ownable {\n  address public owner;\n  mapping (address => bool) internal admin_accounts;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    // set msg.sender as owner\n    owner = msg.sender;\n    // set msg.sender as first administrator\n    admin_accounts[msg.sender]= true;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner );\n    _;\n  }\n\n  /**\n   * @dev check if msg.sender is owner\n   * @return true  if msg.sender is owner\n   */\n  function  isOwner() internal view returns (bool) {\n    return (msg.sender == owner );\n    \n  }\n  \n  /**\n   * @dev Throws if called by any account other than admins.\n   */\n  modifier onlyAdmin() {\n    require (admin_accounts[msg.sender]==true);\n    _;\n  }\n\n  /**\n   * @dev check if msg.sender is admin\n   * @return true  if msg.sender is admin\n   */\n  function  isAdmin() internal view returns (bool) {\n    return  (admin_accounts[msg.sender]==true);\n    \n  }\n \n}\n\n\n/** @title main contract for viva token. we should deploy this contract. needs about 5,500,000 gas */\n\ncontract VIVACHAIN is Z_StandardToken, Z_Ownable {\n    string  public  constant name = \"VIVACHAIN\";\n    string  public  constant symbol = \"VIVA\";\n    uint8   public  constant decimals = 18; // token traded in integer amounts, no period\n\n    // total token supply: 10 billion viva\n    uint256 internal constant _totalTokenAmount = 10 * (10 ** 9) * (10 ** 18);\n\n    uint256 internal constant WEI_PER_ETHER= 1000000000000000000; // 10^18 wei = 1 ether\n    uint256 internal constant NUM_OF_SALE_STAGES= 5; // support upto five sale stages\n\n    // enum type definition for sale status (0 ~ 13)\n    enum Sale_Status {\n      Initialized_STATUS, // 0\n      Stage0_Sale_Started_STATUS, // 1, stage0\n      Stage0_Sale_Stopped_STATUS, // 2, stage0\n      Stage1_Sale_Started_STATUS, // 3, stage1\n      Stage1_Sale_Stopped_STATUS, // 4, stage1\n      Stage2_Sale_Started_STATUS, // 5, stage2\n      Stage2_Sale_Stopped_STATUS, // 6, stage2\n      Stage3_Sale_Started_STATUS, // 7, stage3\n      Stage3_Sale_Stopped_STATUS, // 8, stage3\n      Stage4_Sale_Started_STATUS, // 9,  stage4\n      Stage4_Sale_Stopped_STATUS, // 10, stage4\n      Public_Allowed_To_Trade_STATUS, // 11\n      Stage0_Allowed_To_Trade_STATUS, // 12\n      Closed_STATUS  // 13\n    }\n\n    // sale status variable: 0 ~ 13 (enum Sale_Status )\n    Sale_Status  public  sale_status= Sale_Status.Initialized_STATUS;\n\n    // sale stage index : 0 ~ 4 ( 0:1~2,  1:3~4, 2:5~6, 3:7~8, 4:9~10) \n    uint256   public  sale_stage_index= 0; // 0 ~ 4 for stage0 ~ 4\n\n    // initiazlied time\n    uint256  public  when_initialized= 0;\n\n    // timestamp when public trade begins except stage0\n    uint256  public  when_public_allowed_to_trade_started= 0;\n\n    // timestamp when *all* tokens trade begins including stage0\n    uint256  public  when_stage0_allowed_to_trade_started= 0;\n\n    // array of sale starting time's timestamp\n    uint256 [NUM_OF_SALE_STAGES] public  when_stageN_sale_started;\n\n    // array of sale stopping time's timestamp\n    uint256 [NUM_OF_SALE_STAGES] public  when_stageN_sale_stopped;\n\n    // sum of all sold tokens\n    uint256 public sold_tokens_total= 0;\n\n    // sum of ethers received during all token sale stages\n    uint256 public raised_ethers_total= 0;\n\n    // array of sold tokens per sale stage\n    uint256[NUM_OF_SALE_STAGES] public sold_tokens_per_stage;\n\n    // array of received ethers per sale stage\n    uint256[NUM_OF_SALE_STAGES] public raised_ethers_per_stage;\n\n    // target ether amount to gather in each sale stage, when fullfilled, the sale stage automatically forced to stop\n    uint256[NUM_OF_SALE_STAGES] public target_ethers_per_stage= [\n       1000 * WEI_PER_ETHER, // stage0 for staff\n       9882 * WEI_PER_ETHER, // stage1 for black sale\n      11454 * WEI_PER_ETHER, // stage2 for private sale\n      11200 * WEI_PER_ETHER, // stage3 for public sale\n      11667 * WEI_PER_ETHER  // stage4 for crowd sale\n    ];\n\n    // array of token sale price for each stage (wei per viva)\n    uint256[NUM_OF_SALE_STAGES] internal  sale_price_per_stage_wei_per_viva = [\n      uint256(1000000000000000000/ uint256(100000)),// stage0 for staff\n      uint256(1000000000000000000/ uint256(38000)), // stage1 for black sale\n      uint256(1000000000000000000/ uint256(23000)), // stage2 for private sale\n      uint256(1000000000000000000/ uint256(17000)), // stage3 for public sale\n      uint256(1000000000000000000/ uint256(10000))  // stage4 for crowd sale\n    ];\n\n    // struct definition for token transfer history\n    struct history_token_transfer_obj {\n      address _from;\n      address _to;\n      uint256 _token_value; // in viva token\n      uint256 _when; \n    }\n\n    // struct definition for token burning history\n    struct history_token_burning_obj {\n      address _from;\n      uint256 _token_value_burned; // in viva token\n      uint256 _when; \n    }\n\n    // token transfer history\n    history_token_transfer_obj[] internal history_token_transfer;\n\n    // token burning history\n    history_token_burning_obj[]  internal history_token_burning;\n\n    // token sale amount for each account per stage 0 ~ 4\n    mapping (address => uint256) internal sale_amount_stage0_account;\n    mapping (address => uint256) internal sale_amount_stage1_account;\n    mapping (address => uint256) internal sale_amount_stage2_account;\n    mapping (address => uint256) internal sale_amount_stage3_account;\n    mapping (address => uint256) internal sale_amount_stage4_account;\n\n    \n    // array for list of  holders and their receiving amounts\n    mapping (address => uint256) internal holders_received_accumul;\n\n    // array for list of holders accounts (including even inactive holders) \n    address[] public holders;\n\n    // array for list of sale holders accounts for each sale stage\n    address[] public holders_stage0_sale;\n    address[] public holders_stage1_sale;\n    address[] public holders_stage2_sale;\n    address[] public holders_stage3_sale;\n    address[] public holders_stage4_sale;\n    \n    // array for list of trading holders which are not sale holders\n    address[] public holders_trading;\n\n    // array for list of burning holders accounts\n    address[] public holders_burned;\n\n    // array for list of frozen holders accounts\n    address[] public holders_frozen;\n\n    // burned tokens for each holders account\n    mapping (address => uint256) public burned_amount;\n\n    // sum of all burned tokens\n    uint256 public totalBurned= 0;\n\n    // total ether value withdrawed from this contract by contract owner\n    uint256 public totalEtherWithdrawed= 0;\n\n    // addess to timestamp mapping  to  mark the account freezing time ( 0 means later unfreezed )\n    mapping (address => uint256) internal account_frozen_time;\n\n    // unused\n    mapping (address => mapping (string => uint256)) internal traded_monthly;\n\n    // cryptocurrency exchange office  ether address, for monitorig purpose\n    address[] public cryptocurrency_exchange_company_accounts;\n\n    \n    /////////////////////////////////////////////////////////////////////////\n \n    event AddNewAdministrator(address indexed _admin, uint256 indexed _when);\n    event RemoveAdministrator(address indexed _admin, uint256 indexed _when);\n  \n    /**\n     *  @dev   add new admin accounts \n     *        (run by admin, public function) \n     *  @param _newAdmin   new admin address\n     */\n    function z_admin_add_admin(address _newAdmin) public onlyOwner {\n      require(_newAdmin != address(0));\n      admin_accounts[_newAdmin]=true;\n    \n      emit AddNewAdministrator(_newAdmin, block.timestamp);\n    }\n  \n    /**\n     *  @dev   remove old admin accounts\n     *        (run by admin, public function) \n     *  @param _oldAdmin   old admin address\n     */\n    function z_admin_remove_admin(address _oldAdmin) public onlyOwner {\n      require(_oldAdmin != address(0));\n      require(admin_accounts[_oldAdmin]==true);\n      admin_accounts[_oldAdmin]=false;\n    \n      emit RemoveAdministrator(_oldAdmin, block.timestamp);\n    }\n  \n    event AddNewExchangeAccount(address indexed _exchange_account, uint256 indexed _when);\n\n    /**\n     *  @dev   add new exchange office accounts\n     *        (run by admin, public function) \n     *  @param _exchange_account   new exchange address\n     */\n    function z_admin_add_exchange(address _exchange_account) public onlyAdmin {\n      require(_exchange_account != address(0));\n      cryptocurrency_exchange_company_accounts.push(_exchange_account);\n    \n      emit AddNewExchangeAccount(_exchange_account, block.timestamp);\n    }\n \n    event SaleTokenPriceSet(uint256 _stage_index, uint256 _wei_per_viva_value, uint256 indexed _when);\n\n    /**\n     * @dev  set new token sale price for current sale stage\n     *       (run buy admin, public function)\n     * return  _how_many_wei_per_viva   new token sale price (wei per viva)\n     */\n    function z_admin_set_sale_price(uint256 _how_many_wei_per_viva) public\n        onlyAdmin \n    {\n        if(_how_many_wei_per_viva == 0) revert();\n        if(sale_stage_index >= 5) revert();\n        sale_price_per_stage_wei_per_viva[sale_stage_index] = _how_many_wei_per_viva;\n        emit SaleTokenPriceSet(sale_stage_index, _how_many_wei_per_viva, block.timestamp);\n    }\n\n    /**\n     * @dev  return current or last token sale price\n     *       (public view function)\n     * return  _sale_price   get current token sale price (wei per viva)\n     * return  _current_sale_stage_index   get current sale stage index ( 0 ~ 4)\n     */\n    function CurrentSalePrice() public view returns (uint256 _sale_price, uint256 _current_sale_stage_index)  {\n        if(sale_stage_index >= 5) revert();\n        _current_sale_stage_index= sale_stage_index;\n        _sale_price= sale_price_per_stage_wei_per_viva[sale_stage_index];\n    }\n\n\n    event InitializedStage(uint256 indexed _when);\n    event StartStage0TokenSale(uint256 indexed _when);\n    event StartStage1TokenSale(uint256 indexed _when);\n    event StartStage2TokenSale(uint256 indexed _when);\n    event StartStage3TokenSale(uint256 indexed _when);\n    event StartStage4TokenSale(uint256 indexed _when);\n\n    /**\n     * @dev  start _new_sale_stage_index sale stage\n     *    (run by admin )\n     */\n    function start_StageN_Sale(uint256 _new_sale_stage_index) internal\n    {\n        if(sale_status==Sale_Status.Initialized_STATUS || sale_stage_index+1<= _new_sale_stage_index)\n           sale_stage_index= _new_sale_stage_index;\n        else\n           revert();\n        sale_status= Sale_Status(1 + sale_stage_index * 2); // 0=>1, 1=>3, 2=>5, 3=>7, 4=>9\n        when_stageN_sale_started[sale_stage_index]= block.timestamp;\n        if(sale_stage_index==0) emit StartStage0TokenSale(block.timestamp); \n        if(sale_stage_index==1) emit StartStage1TokenSale(block.timestamp); \n        if(sale_stage_index==2) emit StartStage2TokenSale(block.timestamp); \n        if(sale_stage_index==3) emit StartStage3TokenSale(block.timestamp); \n        if(sale_stage_index==4) emit StartStage4TokenSale(block.timestamp); \n    }\n\n\n\n    event StopStage0TokenSale(uint256 indexed _when);\n    event StopStage1TokenSale(uint256 indexed _when);\n    event StopStage2TokenSale(uint256 indexed _when);\n    event StopStage3TokenSale(uint256 indexed _when);\n    event StopStage4TokenSale(uint256 indexed _when);\n\n    /**\n     * @dev  stop this [_old_sale_stage_index] sale stage\n     *     (run by admin )\n     */\n    function stop_StageN_Sale(uint256 _old_sale_stage_index) internal \n    {\n        if(sale_stage_index != _old_sale_stage_index)\n           revert();\n        sale_status= Sale_Status(2 + sale_stage_index * 2); // 0=>2, 1=>4, 2=>6, 3=>8, 4=>10\n        when_stageN_sale_stopped[sale_stage_index]= block.timestamp;\n        if(sale_stage_index==0) emit StopStage0TokenSale(block.timestamp); \n        if(sale_stage_index==1) emit StopStage1TokenSale(block.timestamp); \n        if(sale_stage_index==2) emit StopStage2TokenSale(block.timestamp); \n        if(sale_stage_index==3) emit StopStage3TokenSale(block.timestamp); \n        if(sale_stage_index==4) emit StopStage4TokenSale(block.timestamp); \n    }\n\n\n\n    event StartTradePublicSaleTokens(uint256 indexed _when);\n\n    /**\n     *  @dev  allow stage1~4 token trading \n     *      (run by admin )\n     */\n    function start_Public_Trade() internal\n        onlyAdmin\n    {\n        // if current sale stage had not been stopped, first stop current active sale stage \n        Sale_Status new_sale_status= Sale_Status(2 + sale_stage_index * 2);\n        if(new_sale_status > sale_status)\n          stop_StageN_Sale(sale_stage_index);\n\n        sale_status= Sale_Status.Public_Allowed_To_Trade_STATUS;\n        when_public_allowed_to_trade_started= block.timestamp;\n        emit StartTradePublicSaleTokens(block.timestamp); \n    }\n\n    event StartTradeStage0SaleTokens(uint256 indexed _when);\n\n    /**\n     *  @dev  allow stage0 token trading\n     *        (run by admin )\n     */\n    function start_Stage0_Trade() internal\n        onlyAdmin\n    {\n        if(sale_status!= Sale_Status.Public_Allowed_To_Trade_STATUS) revert();\n        \n        // allowed 1 year later after stage1 tokens trading is enabled\n\n        uint32 stage0_locked_year= 1;\n \n        bool is_debug= false; // change to false if this contract source  is release version \n        if(is_debug==false && block.timestamp <  stage0_locked_year*365*24*60*60\n            + when_public_allowed_to_trade_started  )  \n\t      revert();\n        if(is_debug==true  && block.timestamp <  stage0_locked_year*10*60\n            + when_public_allowed_to_trade_started  )  \n\t      revert();\n\t      \n        sale_status= Sale_Status.Stage0_Allowed_To_Trade_STATUS;\n        when_stage0_allowed_to_trade_started= block.timestamp;\n        emit StartTradeStage0SaleTokens(block.timestamp); \n    }\n\n\n\n\n    event CreateTokenContract(uint256 indexed _when);\n\n    /**\n     *  @dev  token contract constructor(), initialized tokens supply and sale status variables\n     *         (run by owner when contract deploy)\n     */\n    constructor() public\n    {\n        totalSupply = _totalTokenAmount;\n        balances[msg.sender] = _totalTokenAmount;\n\n        sale_status= Sale_Status.Initialized_STATUS;\n        sale_stage_index= 0;\n\n        when_initialized= block.timestamp;\n\n        holders.push(msg.sender); \n        holders_received_accumul[msg.sender] += _totalTokenAmount;\n\n        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);\n        emit InitializedStage(block.timestamp);\n        emit CreateTokenContract(block.timestamp); \n    }\n\n\n\n\n    /**\n     * @dev check if specified token transfer request is valid \n     *           ( internal modifier function).\n     *           revert  if transfer should be NOT allowed, otherwise do nothing\n     * @param _from   source account from whom tokens should be transferred\n     * @param _to   destination account to whom tokens should be transferred\n     * @param _value   number of tokens to be transferred\n     */\n    modifier validTransaction( address _from, address _to, uint256 _value)\n    {\n        require(_to != address(0x0));\n        require(_to != _from);\n        require(_value > 0);\n        if(isAdmin()==false)  {\n\t    // if _from is frozen account, disallow this request\n\t    if(account_frozen_time[_from] > 0) revert();\n\t    if(_value == 0 ) revert();\n\n            // if token trading is not enabled yet, disallow this request\n            if(sale_status < Sale_Status.Public_Allowed_To_Trade_STATUS) revert();\n\n            // if stage0 token trading is not enabled yet, disallow this request\n            if( sale_amount_stage0_account[_from] > 0 ) {\n                if(sale_status < Sale_Status.Stage0_Allowed_To_Trade_STATUS)  \n                    revert();\n            }  else {\n            }\n  \t }\n        _;\n    }\n\n\n    event TransferToken(address indexed _from_whom,address indexed _to_whom,\n         uint _token_value, uint256 indexed _when);\n    event TransferTokenFrom(address indexed _from_whom,address indexed _to_whom, address _agent,\n\t uint _token_value, uint256 indexed _when);\n    event TransferTokenFromByAdmin(address indexed _from_whom,address indexed _to_whom, address _admin, \n \t uint _token_value, uint256 indexed _when);\n\n    /**\n     * @dev transfer specified amount of tokens from my account to _to account \n     *     (run by self, public function)\n     * @param _to   destination account to whom tokens should be transferred\n     * @param _value   number of tokens to be transferred\n     * @return _success   report if transfer was successful, on failure revert()\n     */\n    function transfer(address _to, uint _value) public \n        validTransaction(msg.sender, _to,  _value)\n    returns (bool _success) \n    {\n        _success= super.transfer(_to, _value);\n        if(_success==false) revert();\n\n  \temit TransferToken(msg.sender,_to,_value,block.timestamp);\n\n\t// check if new trading holder\n        if(holders_received_accumul[_to]==0x0) {\n\t   // new holder comes\n           holders.push(_to); \n           holders_trading.push(_to);\n\t   emit NewHolderTrading(_to, block.timestamp);\n        }\n        holders_received_accumul[_to] += _value;\n\n\t// leave a transfer history entry\n        history_token_transfer.push( history_token_transfer_obj( {\n\t       _from: msg.sender,\n\t       _to: _to,\n\t       _token_value: _value,\n\t       _when: block.timestamp\n        } ) );\n    }\n\n    /**\n     * @dev transfer specified amount of tokens from _from account to _to account\n     *     (run by agent, public function)\n     * @param _from   client account who approved transaction performed by this sender as agent\n     * @param _to   destination account to whom tokens should be transferred\n     * @param _value   number of tokens to be transferred\n     * @return _success   report if transfer was successful, on failure revert()\n     */\n    function transferFrom(address _from, address _to, uint _value) public \n        validTransaction(_from, _to, _value)\n    returns (bool _success) \n    {\n        if(isAdmin()==true) {\n            // admins can transfer tokens of **ANY** accounts\n            emit TransferTokenFromByAdmin(_from,_to,msg.sender,_value,block.timestamp);\n            _success= super.transferFromByAdmin(_from,_to, _value);\n        }\n        else {\n            // approved agents can transfer tokens of their clients (clients shoukd 'approve()' agents first)\n            emit TransferTokenFrom(_from,_to,msg.sender,_value,block.timestamp);\n            _success= super.transferFrom(_from, _to, _value);\n        }\n\n        if(_success==false) revert();\n        \n\t// check if new trading holder\n        if(holders_received_accumul[_to]==0x0) {\n\t   // new holder comes\n           holders.push(_to); \n           holders_trading.push(_to); \n\t   emit NewHolderTrading(_to, block.timestamp);\n        }\n        holders_received_accumul[_to] += _value;\n\n\t// leave a transfer history entry\n        history_token_transfer.push( history_token_transfer_obj( {\n\t       _from: _from,\n\t       _to: _to,\n\t       _token_value: _value,\n\t       _when: block.timestamp\n        } ) );\n\n    }\n\n    \n    event IssueTokenSale(address indexed _buyer, uint _ether_value, uint _token_value,\n           uint _exchange_rate_viva_per_wei, uint256 indexed _when);\n\n    /**\n     * @dev  fallback function for incoming ether, receive ethers and give tokens back\n     */\n    function () public payable {\n        buy();\n    }\n\n    event NewHolderTrading(address indexed _new_comer, uint256 indexed _when);\n    event NewHolderSale(address indexed _new_comer, uint256 indexed _when);\n    \n    /**\n     *  @dev   buy viva tokens by sending some ethers  to this contract address\n     *       (payable public function )\n     */\n    function buy() public payable {\n        if(sale_status < Sale_Status.Stage0_Sale_Started_STATUS) \n           revert();\n        \n        if(sale_status > Sale_Status.Stage4_Sale_Stopped_STATUS) \n           revert();\n        \n        if((uint256(sale_status)%2)!=1)  revert(); // not in started sale status\n        if(isAdmin()==true)  revert(); // admins are not allowed to buy tokens\n\t  \n        uint256 tokens;\n        \n        uint256 wei_per_viva= sale_price_per_stage_wei_per_viva[sale_stage_index];\n\n        // if sent ether value is less than exch_rate, revert\n        if (msg.value <  wei_per_viva) revert();\n\n        // calculate num of bought tokens based on sent ether value (in wei)\n\ttokens = uint256( msg.value /  wei_per_viva );\n      \n        if (tokens + sold_tokens_total > totalSupply) revert();\n\n        // update token sale statistics  per stage\n\tif(sale_stage_index==0) sale_amount_stage0_account[msg.sender] += tokens; else\t\n\tif(sale_stage_index==1) sale_amount_stage1_account[msg.sender] += tokens; else\t\n\tif(sale_stage_index==2) sale_amount_stage2_account[msg.sender] += tokens; else\t\n\tif(sale_stage_index==3) sale_amount_stage3_account[msg.sender] += tokens; else\t\n\tif(sale_stage_index==4) sale_amount_stage4_account[msg.sender] += tokens;\t\n\tsold_tokens_per_stage[sale_stage_index] += tokens;\n        sold_tokens_total += tokens;\n\n        // update ether statistics\n\traised_ethers_per_stage[sale_stage_index] +=  msg.value;\n        raised_ethers_total +=  msg.value;\n\n        super.transferFromByAdmin(owner, msg.sender, tokens);\n\n\t// check if this holder is new\n        if(holders_received_accumul[msg.sender]==0x0) {\n\t   // new holder comes\n           holders.push(msg.sender); \n\t   if(sale_stage_index==0) holders_stage0_sale.push(msg.sender); else \n\t   if(sale_stage_index==1) holders_stage1_sale.push(msg.sender); else \n\t   if(sale_stage_index==2) holders_stage2_sale.push(msg.sender); else \n\t   if(sale_stage_index==3) holders_stage3_sale.push(msg.sender); else \n\t   if(sale_stage_index==4) holders_stage4_sale.push(msg.sender); \n\t   emit NewHolderSale(msg.sender, block.timestamp);\n        }\n        holders_received_accumul[msg.sender] += tokens;\n\n        emit IssueTokenSale(msg.sender, msg.value, tokens, wei_per_viva, block.timestamp);\n        \n        // if target ether is reached, stop this sale stage \n\tif( target_ethers_per_stage[sale_stage_index] <= raised_ethers_per_stage[sale_stage_index])\n    \t    stop_StageN_Sale(sale_stage_index);\n    }\n\n\n    event FreezeAccount(address indexed _account_to_freeze, uint256 indexed _when);\n    event UnfreezeAccount(address indexed _account_to_unfreeze, uint256 indexed _when);\n    \n    /**\n     * @dev freeze a holder account, prohibit further token transfer \n     *     (run by ADMIN, public function)\n     * @param _account_to_freeze   account to freeze\n     */\n    function z_admin_freeze(address _account_to_freeze) public onlyAdmin   {\n        account_frozen_time[_account_to_freeze]= block.timestamp;\n        holders_frozen.push(_account_to_freeze);\n        emit FreezeAccount(_account_to_freeze,block.timestamp); \n    }\n\n    /**\n     * @dev unfreeze a holder account \n     *     (run by ADMIN, public function)\n     * @param _account_to_unfreeze   account to unfreeze (previously frozen)\n     */\n    function z_admin_unfreeze(address _account_to_unfreeze) public onlyAdmin   {\n        account_frozen_time[_account_to_unfreeze]= 0; // reset time to zero\n        emit UnfreezeAccount(_account_to_unfreeze,block.timestamp); \n    }\n\n\n\n\n    event CloseTokenContract(uint256 indexed _when);\n\n    /**\n     * @dev close this contract after burning all tokens \n     *     (run by ADMIN, public function )\n     */\n    function closeContract() onlyAdmin internal {\n\tif(sale_status < Sale_Status.Stage0_Allowed_To_Trade_STATUS)  revert();\n\tif(totalSupply > 0)  revert();\n    \taddress ScAddress = this;\n        emit CloseTokenContract(block.timestamp); \n        emit WithdrawEther(owner,ScAddress.balance,block.timestamp); \n\tselfdestruct(owner);\n    } \n\n\n\n    /**\n     * @dev retrieve contract's ether balance info \n     *     (public view function)\n     * @return _current_ether_balane   current contract ethereum balance ( in wei unit)\n     * @return _ethers_withdrawn   withdrawen ethers in wei\n     * @return _ethers_raised_total   total ethers gathered from token sale\n     */\n    function ContractEtherBalance() public view\n    returns (\n      uint256 _current_ether_balance,\n      uint256 _ethers_withdrawn,\n      uint256 _ethers_raised_total \n     ) {\n\t_current_ether_balance= address(this).balance;\n\t_ethers_withdrawn= totalEtherWithdrawed;\n\t_ethers_raised_total= raised_ethers_total;\n    } \n\n    event WithdrawEther(address indexed _addr, uint256 _value, uint256 indexed _when);\n\n    /**\n     * @dev transfer this contract ether balance to owner's account \n     *    ( public function )\n     * @param _withdraw_wei_value   amount to widthdraw ( in wei unit)\n     */\n    function z_admin_withdraw_ether(uint256 _withdraw_wei_value) onlyAdmin public {\n    \taddress ScAddress = this;\n    \tif(_withdraw_wei_value > ScAddress.balance) revert();\n    \t//if(owner.call.value(_withdraw_wei_value).gas(5000)()==false) revert();\n    \tif(owner.send(_withdraw_wei_value)==false) revert();\n        totalEtherWithdrawed += _withdraw_wei_value;\n        emit WithdrawEther(owner,_withdraw_wei_value,block.timestamp); \n    } \n\n\n    /**\n     * @dev return  list of active holders accounts and their balances \n     *     ( public view function )\n     * @param _max_num_of_items_to_display   Max Number of latest accounts items to display ( 0 means 1 )\n     * @return  _num_of_active_holders   number of latest holders accounts\n     * @return  _active_holders   array of active( balance > 0) holders\n     * @return  _token_balances   array of token balances \n     */\n    function list_active_holders_and_balances(uint _max_num_of_items_to_display) public view \n      returns (uint _num_of_active_holders,address[] _active_holders,uint[] _token_balances){\n      uint len = holders.length;\n      _num_of_active_holders = 0;\n      if(_max_num_of_items_to_display==0) _max_num_of_items_to_display=1;\n      for (uint i = len-1 ; i >= 0 ; i--) {\n         if( balances[ holders[i] ] != 0x0) _num_of_active_holders++;\n         if(_max_num_of_items_to_display == _num_of_active_holders) break;\n      }\n      _active_holders = new address[](_num_of_active_holders);\n      _token_balances = new uint[](_num_of_active_holders);\n      uint num=0;\n      for (uint j = len-1 ; j >= 0 && _num_of_active_holders > num ; j--) {\n         address addr = holders[j];\n         if( balances[ addr ] == 0x0) continue; // assure balance > 0\n         _active_holders[num] = addr;\n         _token_balances[num] = balances[addr];\n         num++;\n      }\n    }\n\n\n    /**\n     * @dev return  list of latest #N transfer history\n     *      ( public view function )\n     * @param _max_num_of_items_to_display   Max Number of latest history items to display ( 0 means 1 )\n     * @return  _num   number of latest transfer history items\n     * @return  _senders   array of senders\n     * @return  _receivers   array of receivers\n     * @return  _tokens   array of tokens transferred\n     * @return  _whens   array of transfer times\n     */\n    function list_history_of_token_transfer(uint _max_num_of_items_to_display) public view \n      returns (uint _num,address[] _senders,address[] _receivers,uint[] _tokens,uint[] _whens){\n      uint len = history_token_transfer.length;\n      uint n= len;\n      if(_max_num_of_items_to_display == 0) _max_num_of_items_to_display= 1;\n      if(_max_num_of_items_to_display <  n) n= _max_num_of_items_to_display;\n      _senders = new address[](n);\n      _receivers = new address[](n);\n      _tokens = new uint[](n);\n      _whens = new uint[](n);\n      _num=0;\n      for (uint j = len-1 ; j >= 0 && n > _num ; j--) {\n         history_token_transfer_obj storage obj= history_token_transfer[j];\n         _senders[_num]= obj._from;\n         _receivers[_num]= obj._to;\n         _tokens[_num]=  obj._token_value;\n         _whens[_num]=   obj._when;\n         _num++;\n      }\n    }\n\n    /**\n     * @dev return  list of latest address-filtered #N transfer history \n     *     ( public view function )\n     * @param _addr   address as filter for transfer history (default 0x0)\n     * @return  _num   number of latest transfer history items\n     * @return  _senders   array of senders\n     * @return  _receivers   array of receivers\n     * @return  _tokens   array of tokens transferred\n     * @return  _whens   array of transfer times\n     */\n    function list_history_of_token_transfer_filtered_by_addr(address _addr) public view \n      returns (uint _num,address[] _senders,address[] _receivers,uint[] _tokens,uint[] _whens){\n      uint len = history_token_transfer.length;\n      uint _max_num_of_items_to_display= 0;\n      history_token_transfer_obj storage obj= history_token_transfer[0];\n      uint j;\n      for (j = len-1 ; j >= 0 ; j--) {\n         obj= history_token_transfer[j];\n         if(obj._from== _addr || obj._to== _addr) _max_num_of_items_to_display++;\n      }\n      if(_max_num_of_items_to_display == 0) _max_num_of_items_to_display= 1;\n      _senders = new address[](_max_num_of_items_to_display);\n      _receivers = new address[](_max_num_of_items_to_display);\n      _tokens = new uint[](_max_num_of_items_to_display);\n      _whens = new uint[](_max_num_of_items_to_display);\n      _num=0;\n      for (j = len-1 ; j >= 0 && _max_num_of_items_to_display > _num ; j--) {\n         obj= history_token_transfer[j];\n         if(obj._from!= _addr && obj._to!= _addr) continue;\n         _senders[_num]= obj._from;\n         _receivers[_num]= obj._to;\n         _tokens[_num]=  obj._token_value;\n         _whens[_num]=   obj._when;\n         _num++;\n      }\n    }\n\n    /**\n     * @dev return frozen accounts and their balances \n     *     ( public view function )\n     * @param _max_num_of_items_to_display   Max Number of items to display ( 0 means 1 )\n     * @return  _num   number of currently frozen accounts\n     * @return  _frozen_holders   array of frozen accounts\n     * @return  _whens   array of frozen times\n     */\n    function list_frozen_accounts(uint _max_num_of_items_to_display) public view\n      returns (uint _num,address[] _frozen_holders,uint[] _whens){\n      uint len = holders_frozen.length;\n      uint num_of_frozen_holders = 0;\n      if(_max_num_of_items_to_display==0) _max_num_of_items_to_display=1;\n      for (uint i = len-1 ; i >= 0 ; i--) {\n         // assure currently in frozen state\n         if( account_frozen_time[ holders_frozen[i] ] > 0x0) num_of_frozen_holders++;\n         if(_max_num_of_items_to_display == num_of_frozen_holders) break;\n      }\n      _frozen_holders = new address[](num_of_frozen_holders);\n      _whens = new uint[](num_of_frozen_holders);\n      _num=0;\n      for (uint j = len-1 ; j >= 0 && num_of_frozen_holders > _num ; j--) {\n         address addr= holders_frozen[j];\n         uint256 when= account_frozen_time[ addr ];\n         if( when == 0x0) continue; // assure if frozen true\n         _frozen_holders[_num]= addr;\n         _whens[_num]= when;\n         _num++;\n      }\n    }\n\n\n    /**\n     * @dev Admin menu: Token Sale Status management\n     *      (run by admin, public function)\n     * @param _next_status  next status index (1 ~ 13). refer to enum Sale_Status \n     */\n    function z_admin_next_status(Sale_Status _next_status) onlyAdmin public {\n      if(_next_status== Sale_Status.Stage0_Sale_Started_STATUS) { start_StageN_Sale(0); return;} // 1\n      if(_next_status== Sale_Status.Stage0_Sale_Stopped_STATUS) { stop_StageN_Sale(0); return;} // 2\n      if(_next_status== Sale_Status.Stage1_Sale_Started_STATUS) { start_StageN_Sale(1); return;} // 3\n      if(_next_status== Sale_Status.Stage1_Sale_Stopped_STATUS) { stop_StageN_Sale(1); return;} // 4\n      if(_next_status== Sale_Status.Stage2_Sale_Started_STATUS) { start_StageN_Sale(2); return;} // 5\n      if(_next_status== Sale_Status.Stage2_Sale_Stopped_STATUS) { stop_StageN_Sale(2); return;} // 6\n      if(_next_status== Sale_Status.Stage3_Sale_Started_STATUS) { start_StageN_Sale(3); return;} // 7\n      if(_next_status== Sale_Status.Stage3_Sale_Stopped_STATUS) { stop_StageN_Sale(3); return;} // 8\n      if(_next_status== Sale_Status.Stage4_Sale_Started_STATUS) { start_StageN_Sale(4); return;} // 9\n      if(_next_status== Sale_Status.Stage4_Sale_Stopped_STATUS) { stop_StageN_Sale(4); return;} // 10\n      if(_next_status== Sale_Status.Public_Allowed_To_Trade_STATUS) { start_Public_Trade(); return;} //11\n      if(_next_status== Sale_Status.Stage0_Allowed_To_Trade_STATUS) { start_Stage0_Trade(); return;} //12\n      if(_next_status== Sale_Status.Closed_STATUS) { closeContract(); return;} //13\n      revert();\n    } \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_max_num_of_items_to_display\",\"type\":\"uint256\"}],\"name\":\"list_frozen_accounts\",\"outputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_frozen_holders\",\"type\":\"address[]\"},{\"name\":\"_whens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"when_initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_stage0_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"z_admin_add_admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised_ethers_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burned_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_max_num_of_items_to_display\",\"type\":\"uint256\"}],\"name\":\"list_history_of_token_transfer\",\"outputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_senders\",\"type\":\"address[]\"},{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"name\":\"_whens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"when_public_allowed_to_trade_started\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account_to_unfreeze\",\"type\":\"address\"}],\"name\":\"z_admin_unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account_to_freeze\",\"type\":\"address\"}],\"name\":\"z_admin_freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_how_many_wei_per_viva\",\"type\":\"uint256\"}],\"name\":\"z_admin_set_sale_price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ContractEtherBalance\",\"outputs\":[{\"name\":\"_current_ether_balance\",\"type\":\"uint256\"},{\"name\":\"_ethers_withdrawn\",\"type\":\"uint256\"},{\"name\":\"_ethers_raised_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_next_status\",\"type\":\"uint8\"}],\"name\":\"z_admin_next_status\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"when_stageN_sale_started\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_burned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_stage1_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentSalePrice\",\"outputs\":[{\"name\":\"_sale_price\",\"type\":\"uint256\"},{\"name\":\"_current_sale_stage_index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"z_admin_remove_admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_stage2_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_max_num_of_items_to_display\",\"type\":\"uint256\"}],\"name\":\"list_active_holders_and_balances\",\"outputs\":[{\"name\":\"_num_of_active_holders\",\"type\":\"uint256\"},{\"name\":\"_active_holders\",\"type\":\"address[]\"},{\"name\":\"_token_balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptocurrency_exchange_company_accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchange_account\",\"type\":\"address\"}],\"name\":\"z_admin_add_exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"when_stage0_allowed_to_trade_started\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raised_ethers_per_stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_stage3_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sold_tokens_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_stage4_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdraw_wei_value\",\"type\":\"uint256\"}],\"name\":\"z_admin_withdraw_ether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_stage_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sold_tokens_per_stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_trading\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"list_history_of_token_transfer_filtered_by_addr\",\"outputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_senders\",\"type\":\"address[]\"},{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"name\":\"_whens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"target_ethers_per_stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"when_stageN_sale_stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"AddNewAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"RemoveAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_exchange_account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"AddNewExchangeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_stage_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wei_per_viva_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"SaleTokenPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"InitializedStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartStage0TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartStage1TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartStage2TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartStage3TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartStage4TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StopStage0TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StopStage1TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StopStage2TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StopStage3TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StopStage4TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartTradePublicSaleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"StartTradeStage0SaleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"CreateTokenContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from_whom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to_whom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from_whom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to_whom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"TransferTokenFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from_whom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to_whom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"TransferTokenFromByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ether_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_exchange_rate_viva_per_wei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"IssueTokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_new_comer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"NewHolderTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_new_comer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"NewHolderSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account_to_freeze\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"FreezeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account_to_unfreeze\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"UnfreezeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"CloseTokenContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600560006101000a81548160ff0219169083600d8111156200002457fe5b021790555060006006556000600755600060085560006009556000601455600060155560a060405190810160405280670de0b6b3a76400006103e8028152602001670de0b6b3a764000061269a028152602001670de0b6b3a7640000612cbe028152602001670de0b6b3a7640000612bc0028152602001670de0b6b3a7640000612d93028152506020906005620000bd92919062000441565b5060a060405190810160405280620186a0670de0b6b3a7640000811515620000e157fe5b048152602001619470670de0b6b3a7640000811515620000fd57fe5b0481526020016159d8670de0b6b3a76400008115156200011957fe5b048152602001614268670de0b6b3a76400008115156200013557fe5b048152602001612710670de0b6b3a76400008115156200015157fe5b0481525060259060056200016792919062000441565b506000603c556000603d553480156200017f57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506b204fce5e3e250261100000006000819055506b204fce5e3e25026110000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560006101000a81548160ff0219169083600d8111156200029c57fe5b021790555060006006819055504260078190555060323390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506b204fce5e3e25026110000000603160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6b204fce5e3e250261100000006040518082815260200191505060405180910390a3427f2265810ab7e480870948434d942a3cc86169f66292ca8c3ee460f74d70bfe99a60405160405180910390a2427f1800f6b36d5219844d0043587316a934b42f0236398c441f134929efe14e4fbb60405160405180910390a2620004ae565b826005810192821562000473579160200282015b828111156200047257825182559160200191906001019062000455565b5b50905062000482919062000486565b5090565b620004ab91905b80821115620004a75760008160009055506001016200048d565b5090565b90565b61573980620004be6000396000f300608060405260043610610270576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b32531461027a57806286ed571461034b57806306b3c6871461037657806306fdde03146103e3578063095ea7b3146104735780630e19efed146104d857806317312fb61461054557806318160ddd146105885780631eae1436146105b3578063220b4664146105de57806323b872dd14610635578063259ee0fa146106ba5780632a11ced01461081b578063313ce5671461088857806336ac1b9b146108b957806338164c1e146108e457806349d8d6ac1461091d5780634e7d183314610948578063568068411461098b5780635a2b7909146109ce57806366188463146109fb578063679496ef14610a6057806370a0823114610a995780637646d81814610af057806379573b4a14610b205780637e2c187d14610b6157806383944ef714610bce5780638509bee214610c3b57806386037c0f14610c6d5780638ac845a314610cb05780638adc350e14610d1d5780638da5cb5b14610dee57806395d89b4114610e455780639633cd4314610ed5578063a20db2c514610f42578063a224a20f14610f85578063a6f2ae3a14610fb0578063a9059cbb14610fba578063b28889191461101f578063b4eb62a814611060578063b6229158146110cd578063ba1b0e43146110f8578063bba9e22914611165578063cb98748d14611192578063d486dce3146111bd578063d73dd623146111fe578063d759a33414611263578063d89135cd146112d0578063dd62ed3e146112fb578063e592676a14611372578063e68747fd146114e9578063f67c1b801461152a575b61027861156b565b005b34801561028657600080fd5b506102a560048036038101908080359060200190929190505050611cee565b604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f25780820151818401526020810190506102d7565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610334578082015181840152602081019050610319565b505050509050019550505050505060405180910390f35b34801561035757600080fd5b50610360611f68565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b506103a160048036038101908080359060200190929190505050611f6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ef57600080fd5b506103f8611fac565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043857808201518184015260208101905061041d565b50505050905090810190601f1680156104655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047f57600080fd5b506104be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fe5565b604051808215151515815260200191505060405180910390f35b3480156104e457600080fd5b50610503600480360381019080803590602001909291905050506120d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055157600080fd5b50610586600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612115565b005b34801561059457600080fd5b5061059d61224c565b6040518082815260200191505060405180910390f35b3480156105bf57600080fd5b506105c8612252565b6040518082815260200191505060405180910390f35b3480156105ea57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612258565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b506106a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612270565b604051808215151515815260200191505060405180910390f35b3480156106c657600080fd5b506106e560048036038101908080359060200190929190505050612869565b6040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561073a57808201518184015260208101905061071f565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561077c578082015181840152602081019050610761565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156107be5780820151818401526020810190506107a3565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156108005780820151818401526020810190506107e5565b50505050905001995050505050505050505060405180910390f35b34801561082757600080fd5b5061084660048036038101908080359060200190929190505050612ae6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089457600080fd5b5061089d612b24565b604051808260ff1660ff16815260200191505060405180910390f35b3480156108c557600080fd5b506108ce612b29565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506108f9612b2f565b6040518082600d81111561090957fe5b60ff16815260200191505060405180910390f35b34801561092957600080fd5b50610932612b42565b6040518082815260200191505060405180910390f35b34801561095457600080fd5b50610989600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b48565b005b34801561099757600080fd5b506109cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c33565b005b3480156109da57600080fd5b506109f960048036038101908080359060200190929190505050612d83565b005b348015610a0757600080fd5b50610a46600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e5d565b604051808215151515815260200191505060405180910390f35b348015610a6c57600080fd5b50610a756130de565b60405180848152602001838152602001828152602001935050505060405180910390f35b348015610aa557600080fd5b50610ada600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061310c565b6040518082815260200191505060405180910390f35b348015610afc57600080fd5b50610b1e600480360381019080803560ff169060200190929190505050613155565b005b348015610b2c57600080fd5b50610b4b6004803603810190808035906020019092919050505061340b565b6040518082815260200191505060405180910390f35b348015610b6d57600080fd5b50610b8c60048036038101908080359060200190929190505050613425565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bda57600080fd5b50610bf960048036038101908080359060200190929190505050613463565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c4757600080fd5b50610c506134a1565b604051808381526020018281526020019250505060405180910390f35b348015610c7957600080fd5b50610cae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134d3565b005b348015610cbc57600080fd5b50610cdb60048036038101908080359060200190929190505050613669565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d2957600080fd5b50610d48600480360381019080803590602001909291905050506136a7565b604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610d95578082015181840152602081019050610d7a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610dd7578082015181840152602081019050610dbc565b505050509050019550505050505060405180910390f35b348015610dfa57600080fd5b50610e0361395c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e5157600080fd5b50610e5a613982565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e9a578082015181840152602081019050610e7f565b50505050905090810190601f168015610ec75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ee157600080fd5b50610f00600480360381019080803590602001909291905050506139bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4e57600080fd5b50610f83600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506139f9565b005b348015610f9157600080fd5b50610f9a613b41565b6040518082815260200191505060405180910390f35b610fb861156b565b005b348015610fc657600080fd5b50611005600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613b47565b604051808215151515815260200191505060405180910390f35b34801561102b57600080fd5b5061104a60048036038101908080359060200190929190505050614049565b6040518082815260200191505060405180910390f35b34801561106c57600080fd5b5061108b60048036038101908080359060200190929190505050614063565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156110d957600080fd5b506110e26140a1565b6040518082815260200191505060405180910390f35b34801561110457600080fd5b50611123600480360381019080803590602001909291905050506140a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561117157600080fd5b50611190600480360381019080803590602001909291905050506140e5565b005b34801561119e57600080fd5b506111a761425a565b6040518082815260200191505060405180910390f35b3480156111c957600080fd5b506111e860048036038101908080359060200190929190505050614260565b6040518082815260200191505060405180910390f35b34801561120a57600080fd5b50611249600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061427a565b604051808215151515815260200191505060405180910390f35b34801561126f57600080fd5b5061128e60048036038101908080359060200190929190505050614466565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156112dc57600080fd5b506112e56144a4565b6040518082815260200191505060405180910390f35b34801561130757600080fd5b5061135c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144aa565b6040518082815260200191505060405180910390f35b34801561137e57600080fd5b506113b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614531565b6040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156114085780820151818401526020810190506113ed565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561144a57808201518184015260208101905061142f565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561148c578082015181840152602081019050611471565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156114ce5780820151818401526020810190506114b3565b50505050905001995050505050505050505060405180910390f35b3480156114f557600080fd5b5061151460048036038101908080359060200190929190505050614977565b6040518082815260200191505060405180910390f35b34801561153657600080fd5b5061155560048036038101908080359060200190929190505050614991565b6040518082815260200191505060405180910390f35b6000806001600d81111561157b57fe5b600560009054906101000a900460ff16600d81111561159657fe5b10156115a157600080fd5b600a600d8111156115ae57fe5b600560009054906101000a900460ff16600d8111156115c957fe5b11156115d457600080fd5b60016002600560009054906101000a900460ff16600d8111156115f357fe5b8115156115fc57fe5b0614151561160957600080fd5b600115156116156149ab565b1515141561162257600080fd5b602560065460058110151561163357fe5b015490508034101561164457600080fd5b803481151561164f57fe5b0491506000546014548301111561166557600080fd5b600060065414156116c25781602c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611836565b6001600654141561171f5781602d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611835565b6002600654141561177c5781602e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611834565b600360065414156117d95781602f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611833565b600460065414156118325781603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5b5b5b5b81601660065460058110151561184857fe5b01600082825401925050819055508160146000828254019250508190555034601b60065460058110151561187857fe5b0160008282540192505081905550346015600082825401925050819055506118c3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384614a06565b506000603160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611c055760323390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600060065414156119e85760333390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611bc0565b60016006541415611a5e5760343390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611bbf565b60026006541415611ad45760353390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611bbe565b60036006541415611b4a5760363390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611bbd565b60046006541415611bbc5760373390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5b5b5b5b423373ffffffffffffffffffffffffffffffffffffffff167fdfbbd92fa84605298e8255325babfce525871f71b71ddb09f7bfcdf06805d83860405160405180910390a35b81603160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550423373ffffffffffffffffffffffffffffffffffffffff167f0616d25e7d4a7c475b8d5c7932c940501359127deab9774e065e896543fdb70534858560405180848152602001838152602001828152602001935050505060405180910390a3601b600654600581101515611cc257fe5b01546020600654600581101515611cd557fe5b0154111515611cea57611ce9600654614b9b565b5b5050565b6000606080600080600080600080603a8054905095506000945060008a1415611d1657600199505b6001860393505b600084101515611dcc576000603e6000603a87815481101515611d3c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611db15784806001019550505b848a1415611dbe57611dcc565b838060019003945050611d1d565b84604051908082528060200260200182016040528015611dfb5781602001602082028038833980820191505090505b50975084604051908082528060200260200182016040528015611e2d5781602001602082028038833980820191505090505b509650600098506001860392505b60008310158015611e4b57508885115b15611f5b57603a83815481101515611e5f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611edc57611f4d565b81888a815181101515611eeb57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080878a815181101515611f3657fe5b906020019060200201818152505088806001019950505b828060019003935050611e3b565b5050505050509193909250565b60075481565b603a81815481101515611f7d57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600981526020017f56495641434841494e000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6033818154811015156120e657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156121ad57600080fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550428173ffffffffffffffffffffffffffffffffffffffff167fe8d0613950bbaf681b515c7616837293254dc3bd2ff4e2dc30b5ba381169c4c360405160405180910390a350565b60005481565b60155481565b603b6020528060005260406000206000915090505481565b6000838383600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122b157600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122ec57600080fd5b6000811115156122fb57600080fd5b600015156123076149ab565b1515141561241f576000603e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561235c57600080fd5b600081141561236a57600080fd5b600b600d81111561237757fe5b600560009054906101000a900460ff16600d81111561239257fe5b101561239d57600080fd5b6000602c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561241d57600c600d8111156123f257fe5b600560009054906101000a900460ff16600d81111561240d57fe5b101561241857600080fd5b61241e565b5b5b6001151561242b6149ab565b151514156124df57428673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a8691b7731a68025cb04f1fe407871ec879ebfcb04a5e9db3a186a240bd65703389604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a46124d8878787614a06565b9350612587565b428673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f1e4c31452fba925ab739c54cd032a46d670893611464178ede98dc71be5142db3389604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a4612584878787614d18565b93505b60001515841515141561259957600080fd5b6000603160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156126f25760328690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060388690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050428673ffffffffffffffffffffffffffffffffffffffff167fe8c26b33ff4bd8ed5ba9a981867a1d6c50076613d1ef533dfcc4e74399bfb3d360405160405180910390a35b84603160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550602a6080604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001428152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050505050509392505050565b6000606080606080600080600080602a80549050935083925060008a141561289057600199505b828a101561289c578992505b826040519080825280602002602001820160405280156128cb5781602001602082028038833980820191505090505b509750826040519080825280602002602001820160405280156128fd5781602001602082028038833980820191505090505b5096508260405190808252806020026020018201604052801561292f5781602001602082028038833980820191505090505b509550826040519080825280602002602001820160405280156129615781602001602082028038833980820191505090505b509450600098506001840391505b6000821015801561297f57508883115b15612ad957602a8281548110151561299357fe5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888a8151811015156129d657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878a815181101515612a4557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060020154868a815181101515612a9457fe5b90602001906020020181815250508060030154858a815181101515612ab557fe5b9060200190602002018181525050888060010199505081806001900392505061296f565b5050505091939590929450565b603281815481101515612af557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601281565b603d5481565b600560009054906101000a900460ff1681565b60085481565b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612ba757600080fd5b6000603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550428173ffffffffffffffffffffffffffffffffffffffff167ff67d0d4b7ca0eca71dadf2f6932939037bfba6c749697d796ef58728caf4992560405160405180910390a350565b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612c9257600080fd5b42603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550603a8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050428173ffffffffffffffffffffffffffffffffffffffff167fbf5c4988d9aa8454116d269a474f4c3f3122746020fde010ea528e2659d5f97060405160405180910390a350565b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612de257600080fd5b6000811415612df057600080fd5b6005600654101515612e0157600080fd5b806025600654600581101515612e1357fe5b0181905550427f507eebd523402c2c10ee45e9b13d60d944832a7647d87888a701ed1091e95b7560065483604051808381526020018281526020019250505060405180910390a250565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115612f6e576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ff2565b828103600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060003073ffffffffffffffffffffffffffffffffffffffff16319250603d5491506015549050909192565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156131b457600080fd5b6001600d8111156131c157fe5b81600d8111156131cd57fe5b14156131e2576131dd6000614fc2565b613408565b6002600d8111156131ef57fe5b81600d8111156131fb57fe5b14156132105761320b6000614b9b565b613408565b6003600d81111561321d57fe5b81600d81111561322957fe5b141561323e576132396001614fc2565b613408565b6004600d81111561324b57fe5b81600d81111561325757fe5b141561326c576132676001614b9b565b613408565b6005600d81111561327957fe5b81600d81111561328557fe5b141561329a576132956002614fc2565b613408565b6006600d8111156132a757fe5b81600d8111156132b357fe5b14156132c8576132c36002614b9b565b613408565b6007600d8111156132d557fe5b81600d8111156132e157fe5b14156132f6576132f16003614fc2565b613408565b6008600d81111561330357fe5b81600d81111561330f57fe5b14156133245761331f6003614b9b565b613408565b6009600d81111561333157fe5b81600d81111561333d57fe5b14156133525761334d6004614fc2565b613408565b600a600d81111561335f57fe5b81600d81111561336b57fe5b14156133805761337b6004614b9b565b613408565b600b600d81111561338d57fe5b81600d81111561339957fe5b14156133ac576133a761517e565b613408565b600c600d8111156133b957fe5b81600d8111156133c557fe5b14156133d8576133d3615289565b613408565b600d808111156133e457fe5b81600d8111156133f057fe5b1415613403576133fe6153e3565b613408565b600080fd5b50565b600a8160058110151561341a57fe5b016000915090505481565b60398181548110151561343457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60348181548110151561347257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060056006541015156134b557600080fd5b600654905060256006546005811015156134cb57fe5b015491509091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561352f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561356b57600080fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156135ca57600080fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550428173ffffffffffffffffffffffffffffffffffffffff167f6424a5a2f854f2243153a07519e134f9f5d9240aed88fb63a5565ab994cda55760405160405180910390a350565b60358181548110151561367857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606080600080600080600060328054905094506000975060008914156136ce57600198505b6001850393505b600084101515613785576000600160006032878154811015156136f457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561376a5787806001019850505b8789141561377757613785565b8380600190039450506136d5565b876040519080825280602002602001820160405280156137b45781602001602082028038833980820191505090505b509650876040519080825280602002602001820160405280156137e65781602001602082028038833980820191505090505b509550600092506001850391505b6000821015801561380457508288115b156139505760328281548110151561381857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561389257613942565b8087848151811015156138a157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054868481518110151561392b57fe5b906020019060200201818152505082806001019350505b8180600190039250506137f4565b50505050509193909250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f564956410000000000000000000000000000000000000000000000000000000081525081565b6040818154811015156139ca57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515613a5857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613a9457600080fd5b60408190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050428173ffffffffffffffffffffffffffffffffffffffff167f992baa943afa9da614a640a465086ec12dd3400df96fe1313a082b650efb33be60405160405180910390a350565b60095481565b6000338383600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613b8857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613bc357600080fd5b600081111515613bd257600080fd5b60001515613bde6149ab565b15151415613cf6576000603e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613c3357600080fd5b6000811415613c4157600080fd5b600b600d811115613c4e57fe5b600560009054906101000a900460ff16600d811115613c6957fe5b1015613c7457600080fd5b6000602c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613cf457600c600d811115613cc957fe5b600560009054906101000a900460ff16600d811115613ce457fe5b1015613cef57600080fd5b613cf5565b5b5b613d008686615579565b9350600015158415151415613d1457600080fd5b428673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f59158d23d62750f16cd67dd3dce5fcfeb193d88db7c46f085a2eac8fa5d8b950886040518082815260200191505060405180910390a46000603160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613ed35760328690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060388690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050428673ffffffffffffffffffffffffffffffffffffffff167fe8c26b33ff4bd8ed5ba9a981867a1d6c50076613d1ef533dfcc4e74399bfb3d360405160405180910390a35b84603160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550602a6080604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001428152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550505050505092915050565b601b8160058110151561405857fe5b016000915090505481565b60368181548110151561407257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60145481565b6037818154811015156140b657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561414657600080fd5b3090508073ffffffffffffffffffffffffffffffffffffffff163182111561416d57600080fd5b60001515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050151514156141d557600080fd5b81603d6000828254019250508190555042600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ffd68f27313402be52d2f46b6d391b7b8657000a3062853a4be930f1281072a01846040518082815260200191505060405180910390a35050565b60065481565b60168160058110151561426f57fe5b016000915090505481565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60388181548110151561447557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603c5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000606080606080600080600080602a80549050935060009250602a600081548110151561455b57fe5b906000526020600020906004020191506001840390505b60008110151561466457602a8181548110151561458b57fe5b906000526020600020906004020191508973ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061464857508973ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156146565782806001019350505b808060019003915050614572565b600083141561467257600192505b826040519080825280602002602001820160405280156146a15781602001602082028038833980820191505090505b509750826040519080825280602002602001820160405280156146d35781602001602082028038833980820191505090505b509650826040519080825280602002602001820160405280156147055781602001602082028038833980820191505090505b509550826040519080825280602002602001820160405280156147375781602001602082028038833980820191505090505b509450600098506001840390505b6000811015801561475557508883115b1561496a57602a8181548110151561476957fe5b906000526020600020906004020191508973ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561482957508973ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156148335761495c565b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888a81518110151561486657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878a8151811015156148d557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160020154868a81518110151561492457fe5b90602001906020020181815250508160030154858a81518110151561494557fe5b906020019060200201818152505088806001019950505b808060019003915050614745565b5050505091939590929450565b60208160058110151561498657fe5b016000915090505481565b600f816005811015156149a057fe5b016000915090505481565b600060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515614a4357600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515614a9157600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600654141515614bab57600080fd5b600260065402600201600d811115614bbf57fe5b600560006101000a81548160ff0219169083600d811115614bdc57fe5b021790555042600f600654600581101515614bf357fe5b018190555060006006541415614c3157427f2e656a7a630907d9289b573a853aa7db39da6d0515c8c8b77b1b862e50992d9a60405160405180910390a25b60016006541415614c6a57427f9ea98a34c6296214408b07f4f105df2bb12a829bb765bb412a5b03bd0fd827c860405160405180910390a25b60026006541415614ca357427fa2de4f11ff5cf2f896330e83e1da3be25dbd71e593e75ed861c0bcd36de87cf060405160405180910390a25b60036006541415614cdc57427f37287f5565a365ca02fcaa78ee5f7e00a5995117bd62394e58fae5f88e32a4cb60405160405180910390a25b60046006541415614d1557427fb7cb9381bd452254379d8eed1ebfc251c20f01ef7632dac83684b62182a13f0c60405160405180910390a25b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515614d5557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515614da357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515614e2e57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600d811115614fcf57fe5b600560009054906101000a900460ff16600d811115614fea57fe5b1480614ffb57508060016006540111155b1561500c5780600681905550615011565b600080fd5b600260065402600101600d81111561502557fe5b600560006101000a81548160ff0219169083600d81111561504257fe5b021790555042600a60065460058110151561505957fe5b01819055506000600654141561509757427fe600c9a84693d12931240f39bf7102aea48d8ba62c88da255ea93de8a9a6f63260405160405180910390a25b600160065414156150d057427f18ca6a0ebb231d570169838d9d555d420128359301667df14581d8d435d65eb260405160405180910390a25b6002600654141561510957427fe4db9fd5eedc48f9378e8e0edc353bb074846b9038ed5f6e560adf609865e14f60405160405180910390a25b6003600654141561514257427f83a4f74626b46f9216650717e54fca50ac4f5bd71756e6f726ea7cbf2cc8a6ee60405160405180910390a25b6004600654141561517b57427fd63592c14beab35d9e66f8d25544695203772a412d1c2d39215abb17d0f10c7760405160405180910390a25b50565b600060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156151df57600080fd5b600260065402600201600d8111156151f357fe5b9050600560009054906101000a900460ff16600d81111561521057fe5b81600d81111561521c57fe5b111561522e5761522d600654614b9b565b5b600b600560006101000a81548160ff0219169083600d81111561524d57fe5b021790555042600881905550427f4ee9bac00d2810a9b4916f007d18f446224322c661e20c4d11cf2e220ef2777460405160405180910390a250565b60008060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156152eb57600080fd5b600b600d8111156152f857fe5b600560009054906101000a900460ff16600d81111561531357fe5b14151561531f57600080fd5b6001915060009050600015158115151480156153505750600854603c80601861016d860202020263ffffffff160142105b1561535a57600080fd5b6001151581151514801561537d5750600854603c600a84020263ffffffff160142105b1561538757600080fd5b600c600560006101000a81548160ff0219169083600d8111156153a657fe5b021790555042600981905550427f21957c597c07fa579d084b799285b380657eaa5d7efe8dbfbb6c3ae6287b20bb60405160405180910390a25050565b600060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561544457600080fd5b600c600d81111561545157fe5b600560009054906101000a900460ff16600d81111561546c57fe5b101561547757600080fd5b60008054111561548657600080fd5b309050427fc9739e2a064553737bc079ecc1f26a0857817455f8b8443b2331953b2c327de260405160405180910390a242600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ffd68f27313402be52d2f46b6d391b7b8657000a3062853a4be930f1281072a018373ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156155b657600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561560457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820222c743320f29afaa846d7971fe65c6b25e4a22dceedcd8f98704a57a553f17a0029"
}