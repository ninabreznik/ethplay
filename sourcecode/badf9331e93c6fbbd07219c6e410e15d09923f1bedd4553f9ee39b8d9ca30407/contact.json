{
  "address": "0x59b941b53403f84f42d5c11117b35564881b72f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenUnidirectional",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n *\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n *\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * @dev and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      \"\\x19Ethereum Signed Message:\\n32\",\n      hash\n    );\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/// @title Unidirectional payment channels contract for ERC20 tokens.\ncontract TokenUnidirectional {\n    using SafeMath for uint256;\n\n    struct PaymentChannel {\n        address sender;\n        address receiver;\n        uint256 value; // Total amount of money deposited to the channel.\n\n        uint256 settlingPeriod; // How many blocks to wait for the receiver to claim her funds, after sender starts settling.\n        uint256 settlingUntil; // Starting with this block number, anyone can settle the channel.\n        address tokenContract; // Address of ERC20 token contract.\n    }\n\n    mapping (bytes32 => PaymentChannel) public channels;\n\n    event DidOpen(bytes32 indexed channelId, address indexed sender, address indexed receiver, uint256 value, address tokenContract);\n    event DidDeposit(bytes32 indexed channelId, uint256 deposit);\n    event DidClaim(bytes32 indexed channelId);\n    event DidStartSettling(bytes32 indexed channelId);\n    event DidSettle(bytes32 indexed channelId);\n\n    /*** ACTIONS AND CONSTRAINTS ***/\n\n    /// @notice Open a new channel between `msg.sender` and `receiver`, and do an initial deposit to the channel.\n    /// @param channelId Unique identifier of the channel to be created.\n    /// @param receiver Receiver of the funds, counter-party of `msg.sender`.\n    /// @param settlingPeriod Number of blocks to wait for receiver to `claim` her funds after the sender starts settling period (see `startSettling`).\n    /// After that period is over anyone could call `settle`, and move all the channel funds to the sender.\n    /// @param tokenContract Address of ERC20 token contract.\n    /// @param value Initial channel amount.\n    /// @dev Before opening a channel, the sender should `approve` spending the token by TokenUnidirectional contract.\n    function open(bytes32 channelId, address receiver, uint256 settlingPeriod, address tokenContract, uint256 value) public {\n        require(isAbsent(channelId), \"Channel with the same id is present\");\n\n        StandardToken token = StandardToken(tokenContract);\n        require(token.transferFrom(msg.sender, address(this), value), \"Unable to transfer token to the contract\");\n\n        channels[channelId] = PaymentChannel({\n            sender: msg.sender,\n            receiver: receiver,\n            value: value,\n            settlingPeriod: settlingPeriod,\n            settlingUntil: 0,\n            tokenContract: tokenContract\n        });\n\n        emit DidOpen(channelId, msg.sender, receiver, value, tokenContract);\n    }\n\n    /// @notice Ensure `origin` address can deposit funds into the channel identified by `channelId`.\n    /// @dev Constraint `deposit` call.\n    /// @param channelId Identifier of the channel.\n    /// @param origin Caller of `deposit` function.\n    function canDeposit(bytes32 channelId, address origin) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        bool isSender = channel.sender == origin;\n        return isOpen(channelId) && isSender;\n    }\n\n    /// @notice Add more funds to the contract.\n    /// @param channelId Identifier of the channel.\n    /// @param value Amount to be deposited.\n    function deposit(bytes32 channelId, uint256 value) public {\n        require(canDeposit(channelId, msg.sender), \"canDeposit returned false\");\n\n        PaymentChannel storage channel = channels[channelId];\n        StandardToken token = StandardToken(channel.tokenContract);\n        require(token.transferFrom(msg.sender, address(this), value), \"Unable to transfer token to the contract\");\n        channel.value = channel.value.add(value);\n\n        emit DidDeposit(channelId, value);\n    }\n\n    /// @notice Ensure `origin` address can start settling the channel identified by `channelId`.\n    /// @dev Constraint `startSettling` call.\n    /// @param channelId Identifier of the channel.\n    /// @param origin Caller of `startSettling` function.\n    function canStartSettling(bytes32 channelId, address origin) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        bool isSender = channel.sender == origin;\n        return isOpen(channelId) && isSender;\n    }\n\n    /// @notice Sender initiates settling of the contract.\n    /// @dev Actually set `settlingUntil` field of the PaymentChannel structure.\n    /// @param channelId Identifier of the channel.\n    function startSettling(bytes32 channelId) public {\n        require(canStartSettling(channelId, msg.sender), \"canStartSettling returned false\");\n\n        PaymentChannel storage channel = channels[channelId];\n        channel.settlingUntil = block.number.add(channel.settlingPeriod);\n\n        emit DidStartSettling(channelId);\n    }\n\n    /// @notice Ensure one can settle the channel identified by `channelId`.\n    /// @dev Check if settling period is over by comparing `settlingUntil` to a current block number.\n    /// @param channelId Identifier of the channel.\n    function canSettle(bytes32 channelId) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        bool isWaitingOver = block.number >= channel.settlingUntil;\n        return isSettling(channelId) && isWaitingOver;\n    }\n\n    /// @notice Move the money to sender, and close the channel.\n    /// After the settling period is over, and receiver has not claimed the funds, anyone could call that.\n    /// @param channelId Identifier of the channel.\n    function settle(bytes32 channelId) public {\n        require(canSettle(channelId), \"canSettle returned false\");\n\n        PaymentChannel storage channel = channels[channelId];\n        StandardToken token = StandardToken(channel.tokenContract);\n\n        require(token.transfer(channel.sender, channel.value), \"Unable to transfer token to channel sender\");\n\n        delete channels[channelId];\n        emit DidSettle(channelId);\n    }\n\n    /// @notice Ensure `origin` address can claim `payment` amount on channel identified by `channelId`.\n    /// @dev Check if `signature` is made by sender part of the channel, and is for payment promise (see `paymentDigest`).\n    /// @param channelId Identifier of the channel.\n    /// @param payment Amount claimed.\n    /// @param origin Caller of `claim` function.\n    /// @param signature Signature for the payment promise.\n    function canClaim(bytes32 channelId, uint256 payment, address origin, bytes signature) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        bool isReceiver = origin == channel.receiver;\n        bytes32 hash = recoveryPaymentDigest(channelId, payment, channel.tokenContract);\n        bool isSigned = channel.sender == ECRecovery.recover(hash, signature);\n\n        return isReceiver && isSigned;\n    }\n\n    /// @notice Claim the funds, and close the channel.\n    /// @dev Can be claimed by channel receiver only. Guarded by `canClaim`.\n    /// @param channelId Identifier of the channel.\n    /// @param payment Amount claimed.\n    /// @param signature Signature for the payment promise.\n    function claim(bytes32 channelId, uint256 payment, bytes signature) public {\n        require(canClaim(channelId, payment, msg.sender, signature), \"canClaim returned false\");\n\n        PaymentChannel storage channel = channels[channelId];\n        StandardToken token = StandardToken(channel.tokenContract);\n\n        if (payment >= channel.value) {\n            require(token.transfer(channel.receiver, channel.value), \"Unable to transfer token to channel receiver\");\n        } else {\n            require(token.transfer(channel.receiver, payment), \"Unable to transfer token to channel receiver\");\n            uint256 change = channel.value.sub(payment);\n            require(token.transfer(channel.sender, change), \"Unable to transfer token to channel sender\");\n        }\n\n        delete channels[channelId];\n\n        emit DidClaim(channelId);\n    }\n\n    /*** CHANNEL STATE ***/\n\n    /// @notice Check if the channel is not present.\n    /// @param channelId Identifier of the channel.\n    function isAbsent(bytes32 channelId) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        return channel.sender == 0;\n    }\n\n    /// @notice Check if the channel is present: in open or settling state.\n    /// @param channelId Identifier of the channel.\n    function isPresent(bytes32 channelId) public view returns(bool) {\n        return !isAbsent(channelId);\n    }\n\n    /// @notice Check if the channel is in settling state: waits till the settling period is over.\n    /// @dev It is settling, if `settlingUntil` is set to non-zero.\n    /// @param channelId Identifier of the channel.\n    function isSettling(bytes32 channelId) public view returns(bool) {\n        PaymentChannel storage channel = channels[channelId];\n        return channel.settlingUntil != 0;\n    }\n\n    /// @notice Check if the channel is open: present and not settling.\n    /// @param channelId Identifier of the channel.\n    function isOpen(bytes32 channelId) public view returns(bool) {\n        return isPresent(channelId) && !isSettling(channelId);\n    }\n\n    /*** PAYMENT DIGEST ***/\n\n    /// @return Hash of the payment promise to sign.\n    /// @param channelId Identifier of the channel.\n    /// @param payment Amount to send, and to claim later.\n    /// @param tokenContract Address of ERC20 token contract.\n    function paymentDigest(bytes32 channelId, uint256 payment, address tokenContract) public view returns(bytes32) {\n        return keccak256(abi.encodePacked(address(this), channelId, payment, tokenContract));\n    }\n\n    /// @return Actually signed hash of the payment promise, considering \"Ethereum Signed Message\" prefix.\n    /// @param channelId Identifier of the channel.\n    /// @param payment Amount to send, and to claim later.\n    function recoveryPaymentDigest(bytes32 channelId, uint256 payment, address tokenContract) internal view returns(bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, paymentDigest(channelId, payment, tokenContract)));\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5061139c806100206000396000f3006080604052600436106100d95763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662f31e7681146100de57806303e8c9fa1461010a5780631de26e161461013d5780632f8f0c92146101585780634722361c14610158578063605466021461017c5780636683f9ae146101945780637964ea87146101ac5780637a7ebd7b1461020c5780637c35be7a14610265578063987757dd1461027d578063ad37908914610295578063dee6c895146102ad578063e62eea47146102e6578063ec8be5b9146102fe575b600080fd5b3480156100ea57600080fd5b506100f660043561036a565b604080519115158252519081900360200190f35b34801561011657600080fd5b5061013b600435600160a060020a03602435811690604435906064351660843561037c565b005b34801561014957600080fd5b5061013b60043560243561069b565b34801561016457600080fd5b506100f6600435600160a060020a0360243516610880565b34801561018857600080fd5b506100f66004356108b9565b3480156101a057600080fd5b506100f66004356108d5565b3480156101b857600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261013b9482359460248035953695946064949201919081908401838280828437509497506108ec9650505050505050565b34801561021857600080fd5b50610224600435610cf6565b60408051600160a060020a0397881681529587166020870152858101949094526060850192909252608084015290921660a082015290519081900360c00190f35b34801561027157600080fd5b506100f6600435610d38565b34801561028957600080fd5b5061013b600435610d59565b3480156102a157600080fd5b506100f6600435610f44565b3480156102b957600080fd5b506102d4600435602435600160a060020a0360443516610f74565b60408051918252519081900360200190f35b3480156102f257600080fd5b5061013b600435611028565b34801561030a57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526100f6948035946024803595600160a060020a036044351695369560849493019181908401838280828437509497506110e39650505050505050565b6000610375826108b9565b1592915050565b6000610387866108b9565b1515610403576040805160e560020a62461bcd02815260206004820152602360248201527f4368616e6e656c2077697468207468652073616d65206964206973207072657360448201527f656e740000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905290518391600160a060020a038316916323b872dd916064808201926020929091908290030181600087803b15801561047557600080fd5b505af1158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b5051151561051d576040805160e560020a62461bcd02815260206004820152602860248201527f556e61626c6520746f207472616e7366657220746f6b656e20746f207468652060448201527f636f6e7472616374000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60c06040519081016040528033600160a060020a0316815260200186600160a060020a031681526020018381526020018581526020016000815260200184600160a060020a0316815250600080886000191660001916815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a815481600160a060020a030219169083600160a060020a0316021790555090505084600160a060020a031633600160a060020a031687600019167f8f7d1ea1dfb1f5cc2f05d16f7712e0b73c0b172edb09bad6e6fb5a8015cadc7885876040518083815260200182600160a060020a0316600160a060020a031681526020019250505060405180910390a4505050505050565b6000806106a88433610880565b15156106fe576040805160e560020a62461bcd02815260206004820152601960248201527f63616e4465706f7369742072657475726e65642066616c736500000000000000604482015290519081900360640190fd5b5050600082815260208181526040808320600581015482517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905292519194600160a060020a039091169384936323b872dd9360648083019491928390030190829087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506040513d60208110156107ac57600080fd5b5051151561082a576040805160e560020a62461bcd02815260206004820152602860248201527f556e61626c6520746f207472616e7366657220746f6b656e20746f207468652060448201527f636f6e7472616374000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600282015461083f908463ffffffff61115216565b600283015560408051848152905185917f6f850cda6d6b2f5cca622bc2d4739e4ed917c12d29f9a92b9e6c127abe398424919081900360200190a250505050565b60008281526020819052604081208054600160a060020a038481169116146108a785610d38565b80156108b05750805b95945050505050565b600090815260208190526040902054600160a060020a03161590565b600090815260208190526040902060040154151590565b60008060006108fd868633876110e3565b1515610953576040805160e560020a62461bcd02815260206004820152601760248201527f63616e436c61696d2072657475726e65642066616c7365000000000000000000604482015290519081900360640190fd5b600086815260208190526040902060058101546002820154919450600160a060020a031692508510610a7a57600183015460028401546040805160e060020a63a9059cbb028152600160a060020a0393841660048201526024810192909252519184169163a9059cbb916044808201926020929091908290030181600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505050506040513d6020811015610a0957600080fd5b50511515610a75576040805160e560020a62461bcd02815260206004820152602c602482015260008051602061135183398151915260448201527f6e656c2072656365697665720000000000000000000000000000000000000000606482015290519081900360840190fd5b610c71565b60018301546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810188905290519184169163a9059cbb916044808201926020929091908290030181600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b505050506040513d6020811015610aff57600080fd5b50511515610b6b576040805160e560020a62461bcd02815260206004820152602c602482015260008051602061135183398151915260448201527f6e656c2072656365697665720000000000000000000000000000000000000000606482015290519081900360840190fd5b6002830154610b80908663ffffffff61115f16565b83546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050506040513d6020811015610c0557600080fd5b50511515610c71576040805160e560020a62461bcd02815260206004820152602a602482015260008051602061135183398151915260448201527f6e656c2073656e64657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b600086815260208190526040808220805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054821690556002820184905560038201849055600482018490556005909101805490911690555187917f3de43c9e481138453c3cfea2781e18a609abb6448556669b257edc7de710fd6491a2505050505050565b600060208190529081526040902080546001820154600283015460038401546004850154600590950154600160a060020a039485169593851694929391921686565b6000610d438261036a565b8015610d535750610375826108d5565b92915050565b600080610d6583610f44565b1515610dbb576040805160e560020a62461bcd02815260206004820152601860248201527f63616e536574746c652072657475726e65642066616c73650000000000000000604482015290519081900360640190fd5b5050600081815260208181526040808320600581015481546002830154845160e060020a63a9059cbb028152600160a060020a039283166004820152602481019190915293519295911693849363a9059cbb9360448083019491928390030190829087803b158015610e2c57600080fd5b505af1158015610e40573d6000803e3d6000fd5b505050506040513d6020811015610e5657600080fd5b50511515610ec2576040805160e560020a62461bcd02815260206004820152602a602482015260008051602061135183398151915260448201527f6e656c2073656e64657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260208190526040808220805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054821690556002820184905560038201849055600482018490556005909101805490911690555184917f74fb75c3de2cff5e8a78cf9b1f49a5bea60126b42ed45bb4b2b25b7da03e4d1b91a2505050565b60008181526020819052604081206004810154431015610f63846108d5565b8015610f6c5750805b949350505050565b604080516c010000000000000000000000003081026020808401919091526034830187905260548301869052600160a060020a0385169091026074830152825160688184030181526088909201928390528151600093918291908401908083835b60208310610ff45780518252601f199092019160209182019101610fd5565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b60006110348233610880565b151561108a576040805160e560020a62461bcd02815260206004820152601f60248201527f63616e5374617274536574746c696e672072657475726e65642066616c736500604482015290519081900360640190fd5b50600081815260208190526040902060038101546110af90439063ffffffff61115216565b600482015560405182907fd6461a3a92fd600fe23f236b2e25c2fd0c197a66b2f990989f0b210d578f461790600090a25050565b600084815260208190526040812060018101546005820154600160a060020a0391821686831614918491829161111d918b918b9116611171565b9150611129828761127b565b8454600160a060020a0390811691161490508280156111455750805b9998505050505050505050565b81810182811015610d5357fe5b60008282111561116b57fe5b50900390565b60408051808201909152601c81527f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152600090806111b4868686610f74565b6040516020018083805190602001908083835b602083106111e65780518252601f1990920191602091820191016111c7565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106112465780518252601f199092019160209182019101611227565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600080600080845160411415156112955760009350611347565b50505060208201516040830151606084015160001a601b60ff821610156112ba57601b015b8060ff16601b141580156112d257508060ff16601c14155b156112e05760009350611347565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561133a573d6000803e3d6000fd5b5050506020604051035193505b505050929150505600556e61626c6520746f207472616e7366657220746f6b656e20746f206368616ea165627a7a723058208a9cf56a6fc05f6e682dec87b314ecd14fef4e303e146116048063887283cbff0029"
}