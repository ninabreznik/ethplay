{
  "address": "0x4800ffc4f8baa08cb50f4dba1843f8a4eddb28e5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptantCrabMarket",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.4.24;\n\ncontract CrabData {\n  modifier crabDataLength(uint256[] memory _crabData) {\n    require(_crabData.length == 8);\n    _;\n  }\n\n  struct CrabPartData {\n    uint256 hp;\n    uint256 dps;\n    uint256 blockRate;\n    uint256 resistanceBonus;\n    uint256 hpBonus;\n    uint256 dpsBonus;\n    uint256 blockBonus;\n    uint256 mutiplierBonus;\n  }\n\n  function arrayToCrabPartData(\n    uint256[] _partData\n  ) \n    internal \n    pure \n    crabDataLength(_partData) \n    returns (CrabPartData memory _parsedData) \n  {\n    _parsedData = CrabPartData(\n      _partData[0],   // hp\n      _partData[1],   // dps\n      _partData[2],   // block rate\n      _partData[3],   // resistance bonus\n      _partData[4],   // hp bonus\n      _partData[5],   // dps bonus\n      _partData[6],   // block bonus\n      _partData[7]);  // multiplier bonus\n  }\n\n  function crabPartDataToArray(CrabPartData _crabPartData) internal pure returns (uint256[] memory _resultData) {\n    _resultData = new uint256[](8);\n    _resultData[0] = _crabPartData.hp;\n    _resultData[1] = _crabPartData.dps;\n    _resultData[2] = _crabPartData.blockRate;\n    _resultData[3] = _crabPartData.resistanceBonus;\n    _resultData[4] = _crabPartData.hpBonus;\n    _resultData[5] = _crabPartData.dpsBonus;\n    _resultData[6] = _crabPartData.blockBonus;\n    _resultData[7] = _crabPartData.mutiplierBonus;\n  }\n}\n\ncontract GeneSurgeon {\n  //0 - filler, 1 - body, 2 - leg, 3 - left claw, 4 - right claw\n  uint256[] internal crabPartMultiplier = [0, 10**9, 10**6, 10**3, 1];\n\n  function extractElementsFromGene(uint256 _gene) internal view returns (uint256[] memory _elements) {\n    _elements = new uint256[](4);\n    _elements[0] = _gene / crabPartMultiplier[1] / 100 % 10;\n    _elements[1] = _gene / crabPartMultiplier[2] / 100 % 10;\n    _elements[2] = _gene / crabPartMultiplier[3] / 100 % 10;\n    _elements[3] = _gene / crabPartMultiplier[4] / 100 % 10;\n  }\n\n  function extractPartsFromGene(uint256 _gene) internal view returns (uint256[] memory _parts) {\n    _parts = new uint256[](4);\n    _parts[0] = _gene / crabPartMultiplier[1] % 100;\n    _parts[1] = _gene / crabPartMultiplier[2] % 100;\n    _parts[2] = _gene / crabPartMultiplier[3] % 100;\n    _parts[3] = _gene / crabPartMultiplier[4] % 100;\n  }\n}\n\ninterface GenesisCrabInterface {\n  function generateCrabGene(bool isPresale, bool hasLegendaryPart) external returns (uint256 _gene, uint256 _skin, uint256 _heartValue, uint256 _growthValue);\n  function mutateCrabPart(uint256 _part, uint256 _existingPartGene, uint256 _legendaryPercentage) external returns (uint256);\n  function generateCrabHeart() external view returns (uint256, uint256);\n}\n\ncontract LevelCalculator {\n  event LevelUp(address indexed tokenOwner, uint256 indexed tokenId, uint256 currentLevel, uint256 currentExp);\n  event ExpGained(address indexed tokenOwner, uint256 indexed tokenId, uint256 currentLevel, uint256 currentExp);\n\n  function expRequiredToReachLevel(uint256 _level) internal pure returns (uint256 _exp) {\n    require(_level > 1);\n\n    uint256 _expRequirement = 10;\n    for(uint256 i = 2 ; i < _level ; i++) {\n      _expRequirement += 12;\n    }\n    _exp = _expRequirement;\n  }\n}\n\ncontract Randomable {\n  // Generates a random number base on last block hash\n  function _generateRandom(bytes32 seed) view internal returns (bytes32) {\n    return keccak256(abi.encodePacked(blockhash(block.number-1), seed));\n  }\n\n  function _generateRandomNumber(bytes32 seed, uint256 max) view internal returns (uint256) {\n    return uint256(_generateRandom(seed)) % max;\n  }\n}\n\ncontract CryptantCrabStoreInterface {\n  function createAddress(bytes32 key, address value) external returns (bool);\n  function createAddresses(bytes32[] keys, address[] values) external returns (bool);\n  function updateAddress(bytes32 key, address value) external returns (bool);\n  function updateAddresses(bytes32[] keys, address[] values) external returns (bool);\n  function removeAddress(bytes32 key) external returns (bool);\n  function removeAddresses(bytes32[] keys) external returns (bool);\n  function readAddress(bytes32 key) external view returns (address);\n  function readAddresses(bytes32[] keys) external view returns (address[]);\n  // Bool related functions\n  function createBool(bytes32 key, bool value) external returns (bool);\n  function createBools(bytes32[] keys, bool[] values) external returns (bool);\n  function updateBool(bytes32 key, bool value) external returns (bool);\n  function updateBools(bytes32[] keys, bool[] values) external returns (bool);\n  function removeBool(bytes32 key) external returns (bool);\n  function removeBools(bytes32[] keys) external returns (bool);\n  function readBool(bytes32 key) external view returns (bool);\n  function readBools(bytes32[] keys) external view returns (bool[]);\n  // Bytes32 related functions\n  function createBytes32(bytes32 key, bytes32 value) external returns (bool);\n  function createBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\n  function updateBytes32(bytes32 key, bytes32 value) external returns (bool);\n  function updateBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\n  function removeBytes32(bytes32 key) external returns (bool);\n  function removeBytes32s(bytes32[] keys) external returns (bool);\n  function readBytes32(bytes32 key) external view returns (bytes32);\n  function readBytes32s(bytes32[] keys) external view returns (bytes32[]);\n  // uint256 related functions\n  function createUint256(bytes32 key, uint256 value) external returns (bool);\n  function createUint256s(bytes32[] keys, uint256[] values) external returns (bool);\n  function updateUint256(bytes32 key, uint256 value) external returns (bool);\n  function updateUint256s(bytes32[] keys, uint256[] values) external returns (bool);\n  function removeUint256(bytes32 key) external returns (bool);\n  function removeUint256s(bytes32[] keys) external returns (bool);\n  function readUint256(bytes32 key) external view returns (uint256);\n  function readUint256s(bytes32[] keys) external view returns (uint256[]);\n  // int256 related functions\n  function createInt256(bytes32 key, int256 value) external returns (bool);\n  function createInt256s(bytes32[] keys, int256[] values) external returns (bool);\n  function updateInt256(bytes32 key, int256 value) external returns (bool);\n  function updateInt256s(bytes32[] keys, int256[] values) external returns (bool);\n  function removeInt256(bytes32 key) external returns (bool);\n  function removeInt256s(bytes32[] keys) external returns (bool);\n  function readInt256(bytes32 key) external view returns (int256);\n  function readInt256s(bytes32[] keys) external view returns (int256[]);\n  // internal functions\n  function parseKey(bytes32 key) internal pure returns (bytes32);\n  function parseKeys(bytes32[] _keys) internal pure returns (bytes32[]);\n}\n\ncontract StoreRBAC {\n  // stores: storeName -> key -> addr -> isAllowed\n  mapping(uint256 => mapping (uint256 => mapping(address => bool))) private stores;\n\n  // store names\n  uint256 public constant STORE_RBAC = 1;\n  uint256 public constant STORE_FUNCTIONS = 2;\n  uint256 public constant STORE_KEYS = 3;\n  // rbac roles\n  uint256 public constant RBAC_ROLE_ADMIN = 1; // \"admin\"\n\n  // events\n  event RoleAdded(uint256 storeName, address addr, uint256 role);\n  event RoleRemoved(uint256 storeName, address addr, uint256 role);\n\n  constructor() public {\n    addRole(STORE_RBAC, msg.sender, RBAC_ROLE_ADMIN);\n  }\n\n  function hasRole(uint256 storeName, address addr, uint256 role) public view returns (bool) {\n    return stores[storeName][role][addr];\n  }\n\n  function checkRole(uint256 storeName, address addr, uint256 role) public view {\n    require(hasRole(storeName, addr, role));\n  }\n\n  function addRole(uint256 storeName, address addr, uint256 role) internal {\n    stores[storeName][role][addr] = true;\n\n    emit RoleAdded(storeName, addr, role);\n  }\n\n  function removeRole(uint256 storeName, address addr, uint256 role) internal {\n    stores[storeName][role][addr] = false;\n\n    emit RoleRemoved(storeName, addr, role);\n  }\n\n  function adminAddRole(uint256 storeName, address addr, uint256 role) onlyAdmin public {\n    addRole(storeName, addr, role);\n  }\n\n  function adminRemoveRole(uint256 storeName, address addr, uint256 role) onlyAdmin public {\n    removeRole(storeName, addr, role);\n  }\n\n  modifier onlyRole(uint256 storeName, uint256 role) {\n    checkRole(storeName, msg.sender, role);\n    _;\n  }\n\n  modifier onlyAdmin() {\n    checkRole(STORE_RBAC, msg.sender, RBAC_ROLE_ADMIN);\n    _;\n  }\n}\n\ncontract FunctionProtection is StoreRBAC { \n  // standard roles\n  uint256 constant public FN_ROLE_CREATE = 2; // create\n  uint256 constant public FN_ROLE_UPDATE = 3; // update\n  uint256 constant public FN_ROLE_REMOVE = 4; // remove\n\n  function canCreate() internal view returns (bool) {\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_CREATE);\n  }\n  \n  function canUpdate() internal view returns (bool) {\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_UPDATE);\n  }\n  \n  function canRemove() internal view returns (bool) {\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_REMOVE);\n  }\n\n  // external functions\n  function applyAllPermission(address _address) external onlyAdmin {\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_CREATE);\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_UPDATE);\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_REMOVE);\n  }\n}\n\ncontract CryptantCrabMarketStore is FunctionProtection {\n  // Structure of each traded record\n  struct TradeRecord {\n    uint256 tokenId;\n    uint256 auctionId;\n    uint256 price;\n    uint48 time;\n    address owner;\n    address seller;\n  }\n\n  // Structure of each trading item\n  struct AuctionItem {\n    uint256 tokenId;\n    uint256 basePrice;\n    address seller;\n    uint48 startTime;\n    uint48 endTime;\n    uint8 state;              // 0 - on going, 1 - cancelled, 2 - claimed\n    uint256[] bidIndexes;     // storing bidId\n  }\n\n  struct Bid {\n    uint256 auctionId;\n    uint256 price;\n    uint48 time;\n    address bidder;\n  }\n\n  // Structure to store withdrawal information\n  struct WithdrawalRecord {\n    uint256 auctionId;\n    uint256 value;\n    uint48 time;\n    uint48 callTime;\n    bool hasWithdrawn;\n  }\n\n  // stores awaiting withdrawal information\n  mapping(address => WithdrawalRecord[]) public withdrawalList;\n\n  // stores last withdrawal index\n  mapping(address => uint256) public lastWithdrawnIndex;\n\n  // All traded records will be stored here\n  TradeRecord[] public tradeRecords;\n\n  // All auctioned items will be stored here\n  AuctionItem[] public auctionItems;\n\n  Bid[] public bidHistory;\n\n  event TradeRecordAdded(address indexed seller, address indexed buyer, uint256 tradeId, uint256 price, uint256 tokenId, uint256 indexed auctionId);\n\n  event AuctionItemAdded(address indexed seller, uint256 auctionId, uint256 basePrice, uint256 duration, uint256 tokenId);\n\n  event AuctionBid(address indexed bidder, address indexed previousBidder, uint256 auctionId, uint256 bidPrice, uint256 bidIndex, uint256 tokenId, uint256 endTime);\n\n  event PendingWithdrawalCleared(address indexed withdrawer, uint256 withdrawnAmount);\n\n  constructor() public \n  {\n    // auctionItems index 0 should be dummy, \n    // because TradeRecord might not have auctionId\n    auctionItems.push(AuctionItem(0, 0, address(0), 0, 0, 0, new uint256[](1)));\n\n    // tradeRecords index 0 will be dummy\n    // just to follow the standards skipping the index 0\n    tradeRecords.push(TradeRecord(0, 0, 0, 0, address(0), address(0)));\n\n    // bidHistory index 0 will be dummy\n    // just to follow the standards skipping the index 0\n    bidHistory.push(Bid(0, 0, uint48(0), address(0)));\n  }\n\n  // external functions\n  // getters\n  function getWithdrawalList(address withdrawer) external view returns (\n    uint256[] memory _auctionIds,\n    uint256[] memory _values,\n    uint256[] memory _times,\n    uint256[] memory _callTimes,\n    bool[] memory _hasWithdrawn\n  ) {\n    WithdrawalRecord[] storage withdrawalRecords = withdrawalList[withdrawer];\n    _auctionIds = new uint256[](withdrawalRecords.length);\n    _values = new uint256[](withdrawalRecords.length);\n    _times = new uint256[](withdrawalRecords.length);\n    _callTimes = new uint256[](withdrawalRecords.length);\n    _hasWithdrawn = new bool[](withdrawalRecords.length);\n\n    for(uint256 i = 0 ; i < withdrawalRecords.length ; i++) {\n      WithdrawalRecord storage withdrawalRecord = withdrawalRecords[i];\n      _auctionIds[i] = withdrawalRecord.auctionId;\n      _values[i] = withdrawalRecord.value; \n      _times[i] = withdrawalRecord.time;\n      _callTimes[i] = withdrawalRecord.callTime;\n      _hasWithdrawn[i] = withdrawalRecord.hasWithdrawn;\n    }\n  }\n\n  function getTradeRecord(uint256 _tradeId) external view returns (\n    uint256 _tokenId,\n    uint256 _auctionId,\n    uint256 _price,\n    uint256 _time,\n    address _owner,\n    address _seller\n  ) {\n    TradeRecord storage _tradeRecord = tradeRecords[_tradeId];\n    _tokenId = _tradeRecord.tokenId;\n    _auctionId = _tradeRecord.auctionId;\n    _price = _tradeRecord.price;\n    _time = _tradeRecord.time;\n    _owner = _tradeRecord.owner;\n    _seller = _tradeRecord.seller;\n  }\n\n  function totalTradeRecords() external view returns (uint256) {\n    return tradeRecords.length - 1; // need to exclude the dummy\n  }\n\n  function getPricesOfLatestTradeRecords(uint256 amount) external view returns (uint256[] memory _prices) {\n    _prices = new uint256[](amount);\n    uint256 startIndex = tradeRecords.length - amount;\n\n    for(uint256 i = 0 ; i < amount ; i++) {\n      _prices[i] = tradeRecords[startIndex + i].price;\n    }\n  }\n\n  function getAuctionItem(uint256 _auctionId) external view returns (\n    uint256 _tokenId,\n    uint256 _basePrice,\n    address _seller,\n    uint256 _startTime,\n    uint256 _endTime,\n    uint256 _state,\n    uint256[] _bidIndexes\n  ) {\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\n    _tokenId = _auctionItem.tokenId;\n    _basePrice = _auctionItem.basePrice;\n    _seller = _auctionItem.seller;\n    _startTime = _auctionItem.startTime;\n    _endTime = _auctionItem.endTime;\n    _state = _auctionItem.state;\n    _bidIndexes = _auctionItem.bidIndexes;\n  }\n\n  function getAuctionItems(uint256[] _auctionIds) external view returns (\n    uint256[] _tokenId,\n    uint256[] _basePrice,\n    address[] _seller,\n    uint256[] _startTime,\n    uint256[] _endTime,\n    uint256[] _state,\n    uint256[] _lastBidId\n  ) {\n    _tokenId = new uint256[](_auctionIds.length);\n    _basePrice = new uint256[](_auctionIds.length);\n    _startTime = new uint256[](_auctionIds.length);\n    _endTime = new uint256[](_auctionIds.length);\n    _state = new uint256[](_auctionIds.length);\n    _lastBidId = new uint256[](_auctionIds.length);\n    _seller = new address[](_auctionIds.length);\n\n    for(uint256 i = 0 ; i < _auctionIds.length ; i++) {\n      AuctionItem storage _auctionItem = auctionItems[_auctionIds[i]];\n      _tokenId[i] = (_auctionItem.tokenId);\n      _basePrice[i] = (_auctionItem.basePrice);\n      _seller[i] = (_auctionItem.seller);\n      _startTime[i] = (_auctionItem.startTime);\n      _endTime[i] = (_auctionItem.endTime);\n      _state[i] = (_auctionItem.state);\n\n      for(uint256 j = _auctionItem.bidIndexes.length - 1 ; j > 0 ; j--) {\n        if(_auctionItem.bidIndexes[j] > 0) {\n          _lastBidId[i] = _auctionItem.bidIndexes[j];\n          break;\n        }\n      }\n    }\n  }\n\n  function totalAuctionItems() external view returns (uint256) {\n    return auctionItems.length - 1; // need to exclude the dummy\n  }\n\n  function getBid(uint256 _bidId) external view returns (\n    uint256 _auctionId,\n    uint256 _price,\n    uint256 _time,\n    address _bidder\n  ) {\n    Bid storage _bid = bidHistory[_bidId];\n    _auctionId = _bid.auctionId;\n    _price = _bid.price;\n    _time = _bid.time;\n    _bidder = _bid.bidder;\n  }\n\n  function getBids(uint256[] _bidIds) external view returns (\n    uint256[] _auctionId,\n    uint256[] _price,\n    uint256[] _time,\n    address[] _bidder\n  ) {\n    _auctionId = new uint256[](_bidIds.length);\n    _price = new uint256[](_bidIds.length);\n    _time = new uint256[](_bidIds.length);\n    _bidder = new address[](_bidIds.length);\n\n    for(uint256 i = 0 ; i < _bidIds.length ; i++) {\n      Bid storage _bid = bidHistory[_bidIds[i]];\n      _auctionId[i] = _bid.auctionId;\n      _price[i] = _bid.price;\n      _time[i] = _bid.time;\n      _bidder[i] = _bid.bidder;\n    }\n  }\n\n  // setters \n  function addTradeRecord\n  (\n    uint256 _tokenId,\n    uint256 _auctionId,\n    uint256 _price,\n    uint256 _time,\n    address _buyer,\n    address _seller\n  ) \n  external \n  returns (uint256 _tradeId)\n  {\n    require(canUpdate());\n\n    _tradeId = tradeRecords.length;\n    tradeRecords.push(TradeRecord(_tokenId, _auctionId, _price, uint48(_time), _buyer, _seller));\n\n    if(_auctionId > 0) {\n      auctionItems[_auctionId].state = uint8(2);\n    }\n\n    emit TradeRecordAdded(_seller, _buyer, _tradeId, _price, _tokenId, _auctionId);\n  }\n\n  function addAuctionItem\n  (\n    uint256 _tokenId,\n    uint256 _basePrice,\n    address _seller,\n    uint256 _endTime\n  ) \n  external\n  returns (uint256 _auctionId)\n  {\n    require(canUpdate());\n\n    _auctionId = auctionItems.length;\n    auctionItems.push(AuctionItem(\n      _tokenId,\n      _basePrice, \n      _seller, \n      uint48(now), \n      uint48(_endTime),\n      0,\n      new uint256[](21)));\n\n    emit AuctionItemAdded(_seller, _auctionId, _basePrice, _endTime - now, _tokenId);\n  }\n\n  function updateAuctionTime(uint256 _auctionId, uint256 _time, uint256 _state) external {\n    require(canUpdate());\n\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\n    _auctionItem.endTime = uint48(_time);\n    _auctionItem.state = uint8(_state);\n  }\n\n  function addBidder(uint256 _auctionId, address _bidder, uint256 _price, uint256 _bidIndex) external {\n    require(canUpdate());\n\n    uint256 _bidId = bidHistory.length;\n    bidHistory.push(Bid(_auctionId, _price, uint48(now), _bidder));\n\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\n\n    // find previous bidder\n    // Max bid index is 20, so maximum loop is 20 times\n    address _previousBidder = address(0);\n    for(uint256 i = _auctionItem.bidIndexes.length - 1 ; i > 0 ; i--) {\n      if(_auctionItem.bidIndexes[i] > 0) {\n        Bid memory _previousBid = bidHistory[_auctionItem.bidIndexes[i]];\n        _previousBidder = _previousBid.bidder;\n        break;\n      }\n    }\n\n    _auctionItem.bidIndexes[_bidIndex] = _bidId;\n\n    emit AuctionBid(_bidder, _previousBidder, _auctionId, _price, _bidIndex, _auctionItem.tokenId, _auctionItem.endTime);\n  }\n\n  function addWithdrawal\n  (\n    address _withdrawer,\n    uint256 _auctionId,\n    uint256 _value,\n    uint256 _callTime\n  )\n  external \n  {\n    require(canUpdate());\n\n    WithdrawalRecord memory _withdrawal = WithdrawalRecord(_auctionId, _value, uint48(now), uint48(_callTime), false); \n    withdrawalList[_withdrawer].push(_withdrawal);\n  }\n\n  function clearPendingWithdrawal(address _withdrawer) external returns (uint256 _withdrawnAmount) {\n    require(canUpdate());\n\n    WithdrawalRecord[] storage _withdrawalList = withdrawalList[_withdrawer];\n    uint256 _lastWithdrawnIndex = lastWithdrawnIndex[_withdrawer];\n\n    for(uint256 i = _lastWithdrawnIndex ; i < _withdrawalList.length ; i++) {\n      WithdrawalRecord storage _withdrawalRecord = _withdrawalList[i];\n      _withdrawalRecord.hasWithdrawn = true;\n      _withdrawnAmount += _withdrawalRecord.value;\n    }\n\n    // update the last withdrawn index so next time will start from this index\n    lastWithdrawnIndex[_withdrawer] = _withdrawalList.length - 1;\n\n    emit PendingWithdrawalCleared(_withdrawer, _withdrawnAmount);\n  }\n}\n\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract CryptantCrabBase is Ownable {\n  GenesisCrabInterface public genesisCrab;\n  CryptantCrabNFT public cryptantCrabToken;\n  CryptantCrabStoreInterface public cryptantCrabStorage;\n\n  constructor(address _genesisCrabAddress, address _cryptantCrabTokenAddress, address _cryptantCrabStorageAddress) public {\n    // constructor\n    \n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n  }\n\n  function setAddresses(\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  external onlyOwner {\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n  }\n\n  function _setAddresses(\n    address _genesisCrabAddress,\n    address _cryptantCrabTokenAddress,\n    address _cryptantCrabStorageAddress\n  )\n  internal \n  {\n    if(_genesisCrabAddress != address(0)) {\n      GenesisCrabInterface genesisCrabContract = GenesisCrabInterface(_genesisCrabAddress);\n      genesisCrab = genesisCrabContract;\n    }\n    \n    if(_cryptantCrabTokenAddress != address(0)) {\n      CryptantCrabNFT cryptantCrabTokenContract = CryptantCrabNFT(_cryptantCrabTokenAddress);\n      cryptantCrabToken = cryptantCrabTokenContract;\n    }\n    \n    if(_cryptantCrabStorageAddress != address(0)) {\n      CryptantCrabStoreInterface cryptantCrabStorageContract = CryptantCrabStoreInterface(_cryptantCrabStorageAddress);\n      cryptantCrabStorage = cryptantCrabStorageContract;\n    }\n  }\n}\n\ncontract CryptantCrabInformant is CryptantCrabBase{\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabBase\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n  }\n\n  function _getCrabData(uint256 _tokenId) internal view returns \n  (\n    uint256 _gene, \n    uint256 _level, \n    uint256 _exp, \n    uint256 _mutationCount,\n    uint256 _trophyCount,\n    uint256 _heartValue,\n    uint256 _growthValue\n  ) {\n    require(cryptantCrabStorage != address(0));\n\n    bytes32[] memory keys = new bytes32[](7);\n    uint256[] memory values;\n\n    keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\n    keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\n    keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\n    keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\n    keys[4] = keccak256(abi.encodePacked(_tokenId, \"trophyCount\"));\n    keys[5] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\n    keys[6] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\n\n    values = cryptantCrabStorage.readUint256s(keys);\n\n    // process heart value\n    uint256 _processedHeartValue;\n    for(uint256 i = 1 ; i <= 1000 ; i *= 10) {\n      if(uint256(values[5]) / i % 10 > 0) {\n        _processedHeartValue += i;\n      }\n    }\n\n    _gene = values[0];\n    _level = values[1];\n    _exp = values[2];\n    _mutationCount = values[3];\n    _trophyCount = values[4];\n    _heartValue = _processedHeartValue;\n    _growthValue = values[6];\n  }\n\n  function _geneOfCrab(uint256 _tokenId) internal view returns (uint256 _gene) {\n    require(cryptantCrabStorage != address(0));\n\n    _gene = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"gene\")));\n  }\n}\n\ncontract CrabManager is CryptantCrabInformant, CrabData {\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabInformant\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n  }\n\n  function getCrabsOfOwner(address _owner) external view returns (uint256[]) {\n    uint256 _balance = cryptantCrabToken.balanceOf(_owner);\n    uint256[] memory _tokenIds = new uint256[](_balance);\n\n    for(uint256 i = 0 ; i < _balance ; i++) {\n      _tokenIds[i] = cryptantCrabToken.tokenOfOwnerByIndex(_owner, i);\n    }\n\n    return _tokenIds;\n  }\n\n  function getCrab(uint256 _tokenId) external view returns (\n    uint256 _gene,\n    uint256 _level,\n    uint256 _exp,\n    uint256 _mutationCount,\n    uint256 _trophyCount,\n    uint256 _heartValue,\n    uint256 _growthValue,\n    uint256 _fossilType\n  ) {\n    require(cryptantCrabToken.exists(_tokenId));\n\n    (_gene, _level, _exp, _mutationCount, _trophyCount, _heartValue, _growthValue) = _getCrabData(_tokenId);\n    _fossilType = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"fossilType\")));\n  }\n\n  function getCrabStats(uint256 _tokenId) external view returns (\n    uint256 _hp,\n    uint256 _dps,\n    uint256 _block,\n    uint256[] _partBonuses,\n    uint256 _fossilAttribute\n  ) {\n    require(cryptantCrabToken.exists(_tokenId));\n\n    uint256 _gene = _geneOfCrab(_tokenId);\n    (_hp, _dps, _block) = _getCrabTotalStats(_gene);\n    _partBonuses = _getCrabPartBonuses(_tokenId);\n    _fossilAttribute = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"fossilAttribute\")));\n  }\n\n  function _getCrabTotalStats(uint256 _gene) internal view returns (\n    uint256 _hp, \n    uint256 _dps,\n    uint256 _blockRate\n  ) {\n    CrabPartData[] memory crabPartData = _getCrabPartData(_gene);\n\n    for(uint256 i = 0 ; i < crabPartData.length ; i++) {\n      _hp += crabPartData[i].hp;\n      _dps += crabPartData[i].dps;\n      _blockRate += crabPartData[i].blockRate;\n    }\n  }\n\n  function _getCrabPartBonuses(uint256 _tokenId) internal view returns (uint256[] _partBonuses) {\n    bytes32[] memory _keys = new bytes32[](4);\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, uint256(1), \"partBonus\"));\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, uint256(2), \"partBonus\"));\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, uint256(3), \"partBonus\"));\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, uint256(4), \"partBonus\"));\n    _partBonuses = cryptantCrabStorage.readUint256s(_keys);\n  }\n\n  function _getCrabPartData(uint256 _gene) internal view returns (CrabPartData[] memory _crabPartData) {\n    require(cryptantCrabToken != address(0));\n    uint256[] memory _bodyData;\n    uint256[] memory _legData;\n    uint256[] memory _leftClawData;\n    uint256[] memory _rightClawData;\n    \n    (_bodyData, _legData, _leftClawData, _rightClawData) = cryptantCrabToken.crabPartDataFromGene(_gene);\n\n    _crabPartData = new CrabPartData[](4);\n    _crabPartData[0] = arrayToCrabPartData(_bodyData);\n    _crabPartData[1] = arrayToCrabPartData(_legData);\n    _crabPartData[2] = arrayToCrabPartData(_leftClawData);\n    _crabPartData[3] = arrayToCrabPartData(_rightClawData);\n  }\n}\n\ncontract CryptantCrabPurchasableLaunch is CryptantCrabInformant {\n  using SafeMath for uint256;\n\n  Transmuter public transmuter;\n\n  event CrabHatched(address indexed owner, uint256 tokenId, uint256 gene, uint256 specialSkin, uint256 crabPrice, uint256 growthValue);\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n  event Refund(address indexed refundReceiver, uint256 reqAmt, uint256 paid, uint256 refundAmt);\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress,\n    address _transmuterAddress\n  ) \n  public \n  CryptantCrabInformant\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n    if(_transmuterAddress != address(0)) {\n      _setTransmuterAddress(_transmuterAddress);\n    }\n  }\n\n  function setAddresses(\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress,\n    address _transmuterAddress\n  ) \n  external onlyOwner {\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n\n    if(_transmuterAddress != address(0)) {\n      _setTransmuterAddress(_transmuterAddress);\n    }\n  }\n\n  function _setTransmuterAddress(address _transmuterAddress) internal {\n    Transmuter _transmuterContract = Transmuter(_transmuterAddress);\n    transmuter = _transmuterContract;\n  }\n\n  function getCryptantFragments(address _sender) public view returns (uint256) {\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\n  }\n\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, bool _hasLegendary) external onlyOwner {\n    _createCrab(_customTokenId, _crabPrice, _customGene, _customSkin, _hasLegendary);\n  }\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\n  }\n\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\n  }\n\n  function _createCrab(uint256 _tokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, bool _hasLegendary) internal {\n    uint256[] memory _values = new uint256[](8);\n    bytes32[] memory _keys = new bytes32[](8);\n\n    uint256 _gene;\n    uint256 _specialSkin;\n    uint256 _heartValue;\n    uint256 _growthValue;\n    if(_customGene == 0) {\n      (_gene, _specialSkin, _heartValue, _growthValue) = genesisCrab.generateCrabGene(false, _hasLegendary);\n    } else {\n      _gene = _customGene;\n    }\n\n    if(_customSkin != 0) {\n      _specialSkin = _customSkin;\n    }\n\n    (_heartValue, _growthValue) = genesisCrab.generateCrabHeart();\n    \n    cryptantCrabToken.mintToken(msg.sender, _tokenId, _specialSkin);\n\n    // Gene pair\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\n    _values[0] = _gene;\n\n    // Level pair\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\n    _values[1] = 1;\n\n    // Heart Value pair\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\n    _values[2] = _heartValue;\n\n    // Growth Value pair\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\n    _values[3] = _growthValue;\n\n    // Handling Legendary Bonus\n    uint256[] memory _partLegendaryBonuses = transmuter.generateBonusForGene(_gene);\n    // body\n    _keys[4] = keccak256(abi.encodePacked(_tokenId, uint256(1), \"partBonus\"));\n    _values[4] = _partLegendaryBonuses[0];\n\n    // legs\n    _keys[5] = keccak256(abi.encodePacked(_tokenId, uint256(2), \"partBonus\"));\n    _values[5] = _partLegendaryBonuses[1];\n\n    // left claw\n    _keys[6] = keccak256(abi.encodePacked(_tokenId, uint256(3), \"partBonus\"));\n    _values[6] = _partLegendaryBonuses[2];\n\n    // right claw\n    _keys[7] = keccak256(abi.encodePacked(_tokenId, uint256(4), \"partBonus\"));\n    _values[7] = _partLegendaryBonuses[3];\n\n    require(cryptantCrabStorage.createUint256s(_keys, _values));\n\n    emit CrabHatched(msg.sender, _tokenId, _gene, _specialSkin, _crabPrice, _growthValue);\n  }\n\n  function _refundExceededValue(uint256 _senderValue, uint256 _requiredValue) internal {\n    uint256 _exceededValue = _senderValue.sub(_requiredValue);\n\n    if(_exceededValue > 0) {\n      msg.sender.transfer(_exceededValue);\n\n      emit Refund(msg.sender, _requiredValue, _senderValue, _exceededValue);\n    } \n  }\n}\n\ncontract CryptantInformant is CryptantCrabInformant {\n  using SafeMath for uint256;\n\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantCrabInformant\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n  }\n\n  function getCryptantFragments(address _sender) public view returns (uint256) {\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\n  }\n\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\n  }\n\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\n  }\n}\n\ncontract Transmuter is CryptantInformant, GeneSurgeon, Randomable, LevelCalculator {\n  event Xenografted(address indexed tokenOwner, uint256 recipientTokenId, uint256 donorTokenId, uint256 oldPartGene, uint256 newPartGene, uint256 oldPartBonus, uint256 newPartBonus, uint256 xenograftPart);\n  event Mutated(address indexed tokenOwner, uint256 tokenId, uint256 partIndex, uint256 oldGene, uint256 newGene, uint256 oldPartBonus, uint256 newPartBonus, uint256 mutationCount);\n\n  /**\n   * @dev Pre-generated keys to save gas\n   * keys are generated with:\n   * NORMAL_FOSSIL_RELIC_PERCENTAGE     = bytes4(keccak256(\"normalFossilRelicPercentage\"))    = 0xcaf6fae2\n   * PIONEER_FOSSIL_RELIC_PERCENTAGE    = bytes4(keccak256(\"pioneerFossilRelicPercentage\"))   = 0x04988c65\n   * LEGENDARY_FOSSIL_RELIC_PERCENTAGE  = bytes4(keccak256(\"legendaryFossilRelicPercentage\")) = 0x277e613a\n   * FOSSIL_ATTRIBUTE_COUNT             = bytes4(keccak256(\"fossilAttributesCount\"))          = 0x06c475be\n   * LEGENDARY_BONUS_COUNT              = bytes4(keccak256(\"legendaryBonusCount\"))            = 0x45025094\n   * LAST_PIONEER_TOKEN_ID              = bytes4(keccak256(\"lastPioneerTokenId\"))             = 0xe562bae2\n   */\n  bytes4 internal constant NORMAL_FOSSIL_RELIC_PERCENTAGE = 0xcaf6fae2;\n  bytes4 internal constant PIONEER_FOSSIL_RELIC_PERCENTAGE = 0x04988c65;\n  bytes4 internal constant LEGENDARY_FOSSIL_RELIC_PERCENTAGE = 0x277e613a;\n  bytes4 internal constant FOSSIL_ATTRIBUTE_COUNT = 0x06c475be;\n  bytes4 internal constant LEGENDARY_BONUS_COUNT = 0x45025094;\n  bytes4 internal constant LAST_PIONEER_TOKEN_ID = 0xe562bae2;\n\n  mapping(bytes4 => uint256) internal internalUintVariable;\n\n  // elements => legendary set index of that element\n  mapping(uint256 => uint256[]) internal legendaryPartIndex;\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress\n  ) \n  public \n  CryptantInformant\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress\n  ) {\n    // constructor\n\n    // default values for relic percentages\n    // normal crab relic is set to 5%\n    _setUint(NORMAL_FOSSIL_RELIC_PERCENTAGE, 5000);\n\n    // pioneer crab relic is set to 50%\n    _setUint(PIONEER_FOSSIL_RELIC_PERCENTAGE, 50000);\n\n    // legendary crab part relic is set to increase by 50%\n    _setUint(LEGENDARY_FOSSIL_RELIC_PERCENTAGE, 50000);\n\n    // The max number of attributes types\n    // Every fossil will have 1 attribute\n    _setUint(FOSSIL_ATTRIBUTE_COUNT, 6);\n\n    // The max number of bonus types for legendary\n    // Every legendary will have 1 bonus\n    _setUint(LEGENDARY_BONUS_COUNT, 5);\n\n    // The last pioneer token ID to be referred as Pioneer\n    _setUint(LAST_PIONEER_TOKEN_ID, 1121);\n  }\n\n  function setPartIndex(uint256 _element, uint256[] _partIndexes) external onlyOwner {\n    legendaryPartIndex[_element] = _partIndexes;\n  }\n\n  function getPartIndexes(uint256 _element) external view onlyOwner returns (uint256[] memory _partIndexes){\n    _partIndexes = legendaryPartIndex[_element];\n  }\n\n  function getUint(bytes4 key) external view returns (uint256 value) {\n    value = _getUint(key);\n  }\n\n  function setUint(bytes4 key, uint256 value) external onlyOwner {\n    _setUint(key, value);\n  }\n\n  function _getUint(bytes4 key) internal view returns (uint256 value) {\n    value = internalUintVariable[key];\n  }\n\n  function _setUint(bytes4 key, uint256 value) internal {\n    internalUintVariable[key] = value;\n  }\n\n  function xenograft(uint256 _recipientTokenId, uint256 _donorTokenId, uint256 _xenograftPart) external {\n    // get crab gene of both token\n    // make sure both token is not fossil\n    // replace the recipient part with donor part\n    // mark donor as fosil\n    // fosil will generate 1 attr\n    // 3% of fosil will have relic\n    // deduct 10 cryptant\n    require(_xenograftPart != 1);  // part cannot be body (part index = 1)\n    require(cryptantCrabToken.ownerOf(_recipientTokenId) == msg.sender);  // check ownership of both token\n    require(cryptantCrabToken.ownerOf(_donorTokenId) == msg.sender);\n\n    // due to stack too deep, need to use an array\n    // to represent all the variables\n    uint256[] memory _intValues = new uint256[](11);\n    _intValues[0] = getCryptantFragments(msg.sender);\n    // _intValues[0] = ownedCryptant\n    // _intValues[1] = donorPartBonus\n    // _intValues[2] = recipientGene\n    // _intValues[3] = donorGene\n    // _intValues[4] = recipientPart\n    // _intValues[5] = donorPart\n    // _intValues[6] = relicPercentage\n    // _intValues[7] = fossilType\n    // _intValues[8] = recipientExistingPartBonus\n    // _intValues[9] = recipientLevel\n    // _intValues[10] = recipientExp\n\n    // perform transplant requires 5 cryptant\n    require(_intValues[0] >= 5000);\n\n    // make sure both tokens are not fossil\n    uint256[] memory _values;\n    bytes32[] memory _keys = new bytes32[](6);\n\n    _keys[0] = keccak256(abi.encodePacked(_recipientTokenId, \"fossilType\"));\n    _keys[1] = keccak256(abi.encodePacked(_donorTokenId, \"fossilType\"));\n    _keys[2] = keccak256(abi.encodePacked(_donorTokenId, _xenograftPart, \"partBonus\"));\n    _keys[3] = keccak256(abi.encodePacked(_recipientTokenId, _xenograftPart, \"partBonus\"));\n    _keys[4] = keccak256(abi.encodePacked(_recipientTokenId, \"level\"));\n    _keys[5] = keccak256(abi.encodePacked(_recipientTokenId, \"exp\"));\n    _values = cryptantCrabStorage.readUint256s(_keys);\n\n    require(_values[0] == 0);\n    require(_values[1] == 0);\n\n    _intValues[1] = _values[2];\n    _intValues[8] = _values[3];\n\n    // _values[5] = recipient Exp\n    // _values[4] = recipient Level\n    _intValues[9] = _values[4];\n    _intValues[10] = _values[5];\n\n    // Increase Exp\n    _intValues[10] += 8;\n\n    // check if crab level up\n    uint256 _expRequired = expRequiredToReachLevel(_intValues[9] + 1);\n    if(_intValues[10] >=_expRequired) {\n      // increase level\n      _intValues[9] += 1;\n\n      // carry forward extra exp\n      _intValues[10] -= _expRequired;\n\n      emit LevelUp(msg.sender, _recipientTokenId, _intValues[9], _intValues[10]);\n    } else {\n      emit ExpGained(msg.sender, _recipientTokenId, _intValues[9], _intValues[10]);\n    }\n\n    // start performing Xenograft\n    _intValues[2] = _geneOfCrab(_recipientTokenId);\n    _intValues[3] = _geneOfCrab(_donorTokenId);\n\n    // recipientPart\n    _intValues[4] = _intValues[2] / crabPartMultiplier[_xenograftPart] % 1000;\n    _intValues[5] = _intValues[3] / crabPartMultiplier[_xenograftPart] % 1000;\n    \n    int256 _partDiff = int256(_intValues[4]) - int256(_intValues[5]);\n    _intValues[2] = uint256(int256(_intValues[2]) - (_partDiff * int256(crabPartMultiplier[_xenograftPart])));\n    \n    _values = new uint256[](6);\n    _keys = new bytes32[](6);\n\n    // Gene pair\n    _keys[0] = keccak256(abi.encodePacked(_recipientTokenId, \"gene\"));\n    _values[0] = _intValues[2];\n\n    // Fossil Attribute\n    _keys[1] = keccak256(abi.encodePacked(_donorTokenId, \"fossilAttribute\"));\n    _values[1] = _generateRandomNumber(bytes32(_intValues[2] + _intValues[3] + _xenograftPart), _getUint(FOSSIL_ATTRIBUTE_COUNT)) + 1;\n\n    \n    // intVar1 will now use to store relic percentage variable\n    if(isLegendaryPart(_intValues[3], 1)) {\n      // if body part is legendary 100% become relic\n      _intValues[7] = 2;\n    } else {\n      // Relic percentage will differ depending on the crab type / rarity\n      _intValues[6] = _getUint(NORMAL_FOSSIL_RELIC_PERCENTAGE);\n\n      if(_donorTokenId <= _getUint(LAST_PIONEER_TOKEN_ID)) {\n        _intValues[6] = _getUint(PIONEER_FOSSIL_RELIC_PERCENTAGE);\n      }\n\n      if(isLegendaryPart(_intValues[3], 2) ||\n        isLegendaryPart(_intValues[3], 3) || isLegendaryPart(_intValues[3], 4)) {\n        _intValues[6] += _getUint(LEGENDARY_FOSSIL_RELIC_PERCENTAGE);\n      }\n\n      // Fossil Type\n      // 1 = Normal Fossil\n      // 2 = Relic Fossil\n      _intValues[7] = 1;\n      if(_generateRandomNumber(bytes32(_intValues[3] + _xenograftPart), 100000) < _intValues[6]) {\n        _intValues[7] = 2;\n      }\n    }\n\n    _keys[2] = keccak256(abi.encodePacked(_donorTokenId, \"fossilType\"));\n    _values[2] = _intValues[7];\n\n    // Part Attribute\n    _keys[3] = keccak256(abi.encodePacked(_recipientTokenId, _xenograftPart, \"partBonus\"));\n    _values[3] = _intValues[1];\n\n    // Recipient Level\n    _keys[4] = keccak256(abi.encodePacked(_recipientTokenId, \"level\"));\n    _values[4] = _intValues[9];\n\n    // Recipient Exp\n    _keys[5] = keccak256(abi.encodePacked(_recipientTokenId, \"exp\"));\n    _values[5] = _intValues[10];\n\n    require(cryptantCrabStorage.updateUint256s(_keys, _values));\n\n    _removeCryptantFragments(msg.sender, 5000);\n\n    emit Xenografted(msg.sender, _recipientTokenId, _donorTokenId, _intValues[4], _intValues[5], _intValues[8], _intValues[1], _xenograftPart);\n  }\n\n  function mutate(uint256 _tokenId, uint256 _partIndex) external {\n    // token must be owned by sender\n    require(cryptantCrabToken.ownerOf(_tokenId) == msg.sender);\n    // body part cannot mutate\n    require(_partIndex > 1 && _partIndex < 5);\n\n    // here not checking if sender has enough cryptant\n    // is because _removeCryptantFragments uses safeMath\n    // to do subtract, so it will revert if it's not enough\n    _removeCryptantFragments(msg.sender, 1000);\n\n    bytes32[] memory _keys = new bytes32[](5);\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\n    _keys[4] = keccak256(abi.encodePacked(_tokenId, _partIndex, \"partBonus\"));\n\n    uint256[] memory _values = new uint256[](5);\n    (_values[0], _values[1], _values[2], _values[3], , , ) = _getCrabData(_tokenId);\n\n    uint256[] memory _partsGene = new uint256[](5);\n    uint256 i;\n    for(i = 1 ; i <= 4 ; i++) {\n      _partsGene[i] = _values[0] / crabPartMultiplier[i] % 1000;\n    }\n\n    // mutate starts from 3%, max is 20% which is 170 mutations\n    if(_values[3] > 170) {\n      _values[3] = 170;\n    }\n\n    uint256 newPartGene = genesisCrab.mutateCrabPart(_partIndex, _partsGene[_partIndex], (30 + _values[3]) * 100);\n\n    //generate the new gene\n    uint256 _oldPartBonus = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, _partIndex, \"partBonus\")));\n    uint256 _partGene;  // this variable will be reused by oldGene\n    uint256 _newGene;\n    for(i = 1 ; i <= 4 ; i++) {\n      _partGene = _partsGene[i];\n\n      if(i == _partIndex) {\n        _partGene = newPartGene;\n      }\n\n      _newGene += _partGene * crabPartMultiplier[i];\n    }\n\n    if(isLegendaryPart(_newGene, _partIndex)) {\n      _values[4] = _generateRandomNumber(bytes32(_newGene + _partIndex + _tokenId), _getUint(LEGENDARY_BONUS_COUNT)) + 1;\n    }\n\n    // Reuse partGene as old gene\n    _partGene = _values[0];\n\n    // New Gene\n    _values[0] = _newGene;\n\n    // Increase Exp\n    _values[2] += 8;\n\n    // check if crab level up\n    uint256 _expRequired = expRequiredToReachLevel(_values[1] + 1);\n    if(_values[2] >=_expRequired) {\n      // increase level\n      _values[1] += 1;\n\n      // carry forward extra exp\n      _values[2] -= _expRequired;\n\n      emit LevelUp(msg.sender, _tokenId, _values[1], _values[2]);\n    } else {\n      emit ExpGained(msg.sender, _tokenId, _values[1], _values[2]);\n    }\n\n    // Increase Mutation Count\n    _values[3] += 1;\n\n    require(cryptantCrabStorage.updateUint256s(_keys, _values));\n\n    emit Mutated(msg.sender, _tokenId, _partIndex, _partGene, _newGene, _oldPartBonus, _values[4], _values[3]);\n  }\n\n  function generateBonusForGene(uint256 _gene) external view returns (uint256[] _bonuses) {\n    _bonuses = new uint256[](4);\n    uint256[] memory _elements = extractElementsFromGene(_gene);\n    uint256[] memory _parts = extractPartsFromGene(_gene);    \n    uint256[] memory _legendaryParts;\n\n    for(uint256 i = 0 ; i < 4 ; i++) {\n      _legendaryParts = legendaryPartIndex[_elements[i]];\n\n      for(uint256 j = 0 ; j < _legendaryParts.length ; j++) {\n        if(_legendaryParts[j] == _parts[i]) {\n          // generate the bonus number and add it into the _bonuses array\n          _bonuses[i] = _generateRandomNumber(bytes32(_gene + i), _getUint(LEGENDARY_BONUS_COUNT)) + 1;\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @dev checks if the specified part of the given gene is a legendary part or not\n   * returns true if its a legendary part, false otherwise.\n   * @param _gene full body gene to be checked on\n   * @param _part partIndex ranging from 1 = body, 2 = legs, 3 = left claw, 4 = right claw\n   */\n  function isLegendaryPart(uint256 _gene, uint256 _part) internal view returns (bool) {\n    uint256[] memory _legendaryParts = legendaryPartIndex[extractElementsFromGene(_gene)[_part - 1]];\n    for(uint256 i = 0 ; i < _legendaryParts.length ; i++) {\n      if(_legendaryParts[i] == extractPartsFromGene(_gene)[_part - 1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\ncontract Withdrawable is Ownable {\n  address public withdrawer;\n\n  /**\n   * @dev Throws if called by any account other than the withdrawer.\n   */\n  modifier onlyWithdrawer() {\n    require(msg.sender == withdrawer);\n    _;\n  }\n\n  function setWithdrawer(address _newWithdrawer) external onlyOwner {\n    withdrawer = _newWithdrawer;\n  }\n\n  /**\n   * @dev withdraw the specified amount of ether from contract.\n   * @param _amount the amount of ether to withdraw. Units in wei.\n   */\n  function withdraw(uint256 _amount) external onlyWithdrawer returns(bool) {\n    require(_amount <= address(this).balance);\n    withdrawer.transfer(_amount);\n    return true;\n  }\n}\n\ncontract CryptantCrabMarket is CryptantCrabPurchasableLaunch, GeneSurgeon, Randomable, Withdrawable {\n  event Purchased(address indexed owner, uint256 amount, uint256 cryptant, uint256 refund);\n  event ReferralPurchase(address indexed referral, uint256 rewardAmount, address buyer);\n  event CrabOnSaleStarted(address indexed seller, uint256 tokenId, uint256 sellingPrice, uint256 marketId, uint256 gene);\n  event CrabOnSaleCancelled(address indexed seller, uint256 tokenId, uint256 marketId);\n  event Traded(address indexed seller, address indexed buyer, uint256 tokenId, uint256 tradedPrice, uint256 marketId);   // Trade Type 0 = Purchase\n\n  struct MarketItem {\n    uint256 tokenId;\n    uint256 sellingPrice;\n    address seller;\n    uint8 state;              // 1 - on going, 2 - cancelled, 3 - completed\n  }\n\n  PrizePool public prizePool;\n\n  /**\n   * @dev Pre-generated keys to save gas\n   * keys are generated with:\n   * MARKET_PRICE_UPDATE_PERIOD = bytes4(keccak256(\"marketPriceUpdatePeriod\"))  = 0xf1305a10\n   * CURRENT_TOKEN_ID           = bytes4(keccak256(\"currentTokenId\"))           = 0x21339464\n   * REFERRAL_CUT               = bytes4(keccak256(\"referralCut\"))              = 0x40b0b13e\n   * PURCHASE_PRIZE_POOL_CUT    = bytes4(keccak256(\"purchasePrizePoolCut\"))     = 0x7625c58a\n   * EXCHANGE_PRIZE_POOL_CUT    = bytes4(keccak256(\"exchangePrizePoolCut\"))     = 0xb9e1adb0\n   * EXCHANGE_DEVELOPER_CUT     = bytes4(keccak256(\"exchangeDeveloperCut\"))     = 0xfe9ad0eb\n   * LAST_TRANSACTION_PERIOD    = bytes4(keccak256(\"lastTransactionPeriod\"))    = 0x1a01d5bb\n   * LAST_TRANSACTION_PRICE     = bytes4(keccak256(\"lastTransactionPrice\"))     = 0xf14adb6a\n   */\n  bytes4 internal constant MARKET_PRICE_UPDATE_PERIOD = 0xf1305a10;\n  bytes4 internal constant CURRENT_TOKEN_ID = 0x21339464;\n  bytes4 internal constant REFERRAL_CUT = 0x40b0b13e;\n  bytes4 internal constant PURCHASE_PRIZE_POOL_CUT = 0x7625c58a;\n  bytes4 internal constant EXCHANGE_PRIZE_POOL_CUT = 0xb9e1adb0;\n  bytes4 internal constant EXCHANGE_DEVELOPER_CUT = 0xfe9ad0eb;\n  bytes4 internal constant LAST_TRANSACTION_PERIOD = 0x1a01d5bb;\n  bytes4 internal constant LAST_TRANSACTION_PRICE = 0xf14adb6a;\n\n  /**\n   * @dev The first 25 trading crab price will be fixed to 0.3 ether.\n   * This only applies to crab bought from developer.\n   * Crab on auction will depends on the price set by owner.\n   */\n  uint256 constant public initialCrabTradingPrice = 300 finney;\n  \n  // The initial cryptant price will be fixed to 0.03 ether.\n  // It will changed to dynamic price after 25 crabs traded.\n  // 1000 Cryptant Fragment = 1 Cryptant.\n  uint256 constant public initialCryptantFragmentTradingPrice = 30 szabo;\n\n  mapping(bytes4 => uint256) internal internalUintVariable;\n\n  // All traded price will be stored here\n  uint256[] public tradedPrices;\n\n  // All auctioned items will be stored here\n  MarketItem[] public marketItems;\n\n  // PrizePool key, default value is 0xadd5d43f\n  // 0xadd5d43f = bytes4(keccak256(bytes(\"firstPrizePool\")));\n  bytes4 public currentPrizePool = 0xadd5d43f;\n\n  constructor\n  (\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress,\n    address _transmuterAddress,\n    address _prizePoolAddress\n  ) \n  public \n  CryptantCrabPurchasableLaunch\n  (\n    _genesisCrabAddress, \n    _cryptantCrabTokenAddress, \n    _cryptantCrabStorageAddress,\n    _transmuterAddress\n  ) {\n    // constructor\n    if(_prizePoolAddress != address(0)) {\n      _setPrizePoolAddress(_prizePoolAddress);\n    }\n    \n    // set the initial token id\n    _setUint(CURRENT_TOKEN_ID, 1121);\n\n    // The number of seconds that the market will stay at fixed price. \n    // Default set to 4 hours\n    _setUint(MARKET_PRICE_UPDATE_PERIOD, 14400);\n\n    // The percentage of referral cut\n    // Default set to 10%\n    _setUint(REFERRAL_CUT, 10000);\n\n    // The percentage of price pool cut when purchase a new crab\n    // Default set to 20%\n    _setUint(PURCHASE_PRIZE_POOL_CUT, 20000);\n\n    // The percentage of prize pool cut when market exchange traded\n    // Default set to 2%\n    _setUint(EXCHANGE_PRIZE_POOL_CUT, 2000);\n\n    // The percentage of developer cut\n    // Default set to 2.8%\n    _setUint(EXCHANGE_DEVELOPER_CUT, 2800);\n\n    // to prevent marketId = 0\n    // put a dummy value for it\n    marketItems.push(MarketItem(0, 0, address(0), 0));\n  }\n\n  function _setPrizePoolAddress(address _prizePoolAddress) internal {\n    PrizePool _prizePoolContract = PrizePool(_prizePoolAddress);\n    prizePool = _prizePoolContract;\n  }\n\n  function setAddresses(\n    address _genesisCrabAddress, \n    address _cryptantCrabTokenAddress, \n    address _cryptantCrabStorageAddress,\n    address _transmuterAddress,\n    address _prizePoolAddress\n  ) \n  external onlyOwner {\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\n\n    if(_transmuterAddress != address(0)) {\n      _setTransmuterAddress(_transmuterAddress);\n    }\n\n    if(_prizePoolAddress != address(0)) {\n      _setPrizePoolAddress(_prizePoolAddress);\n    }\n  }\n\n  function setCurrentPrizePool(bytes4 _newPrizePool) external onlyOwner {\n    currentPrizePool = _newPrizePool;\n  }\n\n  function getUint(bytes4 key) external view returns (uint256 value) {\n    value = _getUint(key);\n  }\n\n  function setUint(bytes4 key, uint256 value) external onlyOwner {\n    _setUint(key, value);\n  }\n\n  function _getUint(bytes4 key) internal view returns (uint256 value) {\n    value = internalUintVariable[key];\n  }\n\n  function _setUint(bytes4 key, uint256 value) internal {\n    internalUintVariable[key] = value;\n  }\n\n  function purchase(uint256 _crabAmount, uint256 _cryptantFragmentAmount, address _referral) external payable {\n    require(_crabAmount >= 0 && _crabAmount <= 10 );\n    require(_cryptantFragmentAmount >= 0 && _cryptantFragmentAmount <= 10000);\n    require(!(_crabAmount == 0 && _cryptantFragmentAmount == 0));\n    require(_cryptantFragmentAmount % 1000 == 0);\n    require(msg.sender != _referral);\n\n    // check if ether payment is enough\n    uint256 _singleCrabPrice = getCurrentCrabPrice();\n    uint256 _totalCrabPrice = _singleCrabPrice * _crabAmount;\n    uint256 _totalCryptantPrice = getCurrentCryptantFragmentPrice() * _cryptantFragmentAmount;\n    uint256 _cryptantFragmentsGained = _cryptantFragmentAmount;\n\n    // free 2 cryptant when purchasing 10\n    if(_cryptantFragmentsGained == 10000) {\n      _cryptantFragmentsGained += 2000;\n    }\n\n    uint256 _totalPrice = _totalCrabPrice + _totalCryptantPrice;\n    uint256 _value = msg.value;\n\n    require(_value >= _totalPrice);\n\n    // Purchase 10 crabs will have 1 crab with legendary part\n    // Default value for _crabWithLegendaryPart is just a unreacable number\n    uint256 _currentTokenId = _getUint(CURRENT_TOKEN_ID);\n    uint256 _crabWithLegendaryPart = 100;\n    if(_crabAmount == 10) {\n      // decide which crab will have the legendary part\n      _crabWithLegendaryPart = _generateRandomNumber(bytes32(_currentTokenId), 10);\n    }\n\n    for(uint256 i = 0 ; i < _crabAmount ; i++) {\n      // 5000 ~ 5500 is gift token\n      // so if hit 5000 will skip to 5500 onwards\n      if(_currentTokenId == 5000) {\n        _currentTokenId = 5500;\n      }\n\n      _currentTokenId++;\n      _createCrab(_currentTokenId, _singleCrabPrice, 0, 0, _crabWithLegendaryPart == i);\n      tradedPrices.push(_singleCrabPrice);\n    }\n\n    if(_cryptantFragmentsGained > 0) {\n      _addCryptantFragments(msg.sender, (_cryptantFragmentsGained));\n    }\n\n    _setUint(CURRENT_TOKEN_ID, _currentTokenId);\n    \n    // Refund exceeded value\n    _refundExceededValue(_value, _totalPrice);\n\n    // If there's referral, will transfer the referral reward to the referral\n    if(_referral != address(0)) {\n      uint256 _referralReward = _totalPrice * _getUint(REFERRAL_CUT) / 100000;\n      _referral.transfer(_referralReward);\n      emit ReferralPurchase(_referral, _referralReward, msg.sender);\n    }\n\n    // Send prize pool cut to prize pool\n    uint256 _prizePoolAmount = _totalPrice * _getUint(PURCHASE_PRIZE_POOL_CUT) / 100000;\n    prizePool.increasePrizePool.value(_prizePoolAmount)(currentPrizePool);\n\n    _setUint(LAST_TRANSACTION_PERIOD, now / _getUint(MARKET_PRICE_UPDATE_PERIOD));\n    _setUint(LAST_TRANSACTION_PRICE, _singleCrabPrice);\n\n    emit Purchased(msg.sender, _crabAmount, _cryptantFragmentsGained, _value - _totalPrice);\n  }\n\n  function getCurrentPeriod() external view returns (uint256 _now, uint256 _currentPeriod) {\n    _now = now;\n    _currentPeriod = now / _getUint(MARKET_PRICE_UPDATE_PERIOD);\n  }\n\n  function getCurrentCrabPrice() public view returns (uint256) {\n    if(totalCrabTraded() > 25) {\n      uint256 _lastTransactionPeriod = _getUint(LAST_TRANSACTION_PERIOD);\n      uint256 _lastTransactionPrice = _getUint(LAST_TRANSACTION_PRICE);\n\n      if(_lastTransactionPeriod == now / _getUint(MARKET_PRICE_UPDATE_PERIOD) && _lastTransactionPrice != 0) {\n        return _lastTransactionPrice;\n      } else {\n        uint256 totalPrice;\n        for(uint256 i = 1 ; i <= 15 ; i++) {\n          totalPrice += tradedPrices[tradedPrices.length - i];\n        }\n\n        // the actual calculation here is:\n        // average price = totalPrice / 15\n        return totalPrice / 15;\n      }\n    } else {\n      return initialCrabTradingPrice;\n    }\n  }\n\n  function getCurrentCryptantFragmentPrice() public view returns (uint256 _price) {\n    if(totalCrabTraded() > 25) {\n      // real calculation is 1 Cryptant = 10% of currentCrabPrice\n      // should be written as getCurrentCrabPrice() * 10 / 100 / 1000\n      return getCurrentCrabPrice() * 10 / 100000;\n    } else {\n      return initialCryptantFragmentTradingPrice;\n    }\n  }\n\n  // After pre-sale crab tracking (excluding fossil transactions)\n  function totalCrabTraded() public view returns (uint256) {\n    return tradedPrices.length;\n  }\n\n  function sellCrab(uint256 _tokenId, uint256 _sellingPrice) external {\n    require(cryptantCrabToken.ownerOf(_tokenId) == msg.sender);\n    require(_sellingPrice >= 50 finney && _sellingPrice <= 100 ether);\n\n    marketItems.push(MarketItem(_tokenId, _sellingPrice, msg.sender, 1));\n\n    // escrow\n    cryptantCrabToken.transferFrom(msg.sender, address(this), _tokenId);\n\n    uint256 _gene = _geneOfCrab(_tokenId);\n\n    emit CrabOnSaleStarted(msg.sender, _tokenId, _sellingPrice, marketItems.length - 1, _gene);\n  }\n\n  function cancelOnSaleCrab(uint256 _marketId) external {\n    MarketItem storage marketItem = marketItems[_marketId];\n\n    // Only able to cancel on sale Item\n    require(marketItem.state == 1);\n\n    // Set Market Item state to 2(Cancelled)\n    marketItem.state = 2;\n\n    // Only owner can cancel on sale item\n    require(marketItem.seller == msg.sender);\n\n    // Release escrow to the owner\n    cryptantCrabToken.transferFrom(address(this), msg.sender, marketItem.tokenId);\n\n    emit CrabOnSaleCancelled(msg.sender, marketItem.tokenId, _marketId);\n  }\n\n  function buyCrab(uint256 _marketId) external payable {\n    MarketItem storage marketItem = marketItems[_marketId];\n    require(marketItem.state == 1);   // make sure the sale is on going\n    require(marketItem.sellingPrice == msg.value);\n    require(marketItem.seller != msg.sender);\n\n    cryptantCrabToken.safeTransferFrom(address(this), msg.sender, marketItem.tokenId);\n\n    uint256 _developerCut = msg.value * _getUint(EXCHANGE_DEVELOPER_CUT) / 100000;\n    uint256 _prizePoolCut = msg.value * _getUint(EXCHANGE_PRIZE_POOL_CUT) / 100000;\n    uint256 _sellerAmount = msg.value - _developerCut - _prizePoolCut;\n    marketItem.seller.transfer(_sellerAmount);\n\n    // Send prize pool cut to prize pool\n    prizePool.increasePrizePool.value(_prizePoolCut)(currentPrizePool);\n\n    uint256 _fossilType = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(marketItem.tokenId, \"fossilType\")));\n    if(_fossilType > 0) {\n      tradedPrices.push(marketItem.sellingPrice);\n    }\n\n    marketItem.state = 3;\n\n    _setUint(LAST_TRANSACTION_PERIOD, now / _getUint(MARKET_PRICE_UPDATE_PERIOD));\n    _setUint(LAST_TRANSACTION_PRICE, getCurrentCrabPrice());\n\n    emit Traded(marketItem.seller, msg.sender, marketItem.tokenId, marketItem.sellingPrice, _marketId);\n  }\n\n  function() public payable {\n    revert();\n  }\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\ncontract PrizePool is Ownable, Whitelist, HasNoEther {\n  event PrizePoolIncreased(uint256 amountIncreased, bytes4 prizePool, uint256 currentAmount);\n  event WinnerAdded(address winner, bytes4 prizeTitle, uint256 claimableAmount);\n  event PrizedClaimed(address winner, bytes4 prizeTitle, uint256 claimedAmount);\n\n  // prizePool key => prizePool accumulated amount\n  // this is just to track how much a prizePool has\n  mapping(bytes4 => uint256) prizePools;\n\n  // winner's address => prize title => amount\n  // prize title itself need to be able to determine\n  // the prize pool it is from\n  mapping(address => mapping(bytes4 => uint256)) winners;\n\n  constructor() public {\n\n  }\n\n  function increasePrizePool(bytes4 _prizePool) external payable onlyIfWhitelisted(msg.sender) {\n    prizePools[_prizePool] += msg.value;\n\n    emit PrizePoolIncreased(msg.value, _prizePool, prizePools[_prizePool]);\n  }\n\n  function addWinner(address _winner, bytes4 _prizeTitle, uint256 _claimableAmount) external onlyIfWhitelisted(msg.sender) {\n    winners[_winner][_prizeTitle] = _claimableAmount;\n\n    emit WinnerAdded(_winner, _prizeTitle, _claimableAmount);\n  }\n\n  function claimPrize(bytes4 _prizeTitle) external {\n    uint256 _claimableAmount = winners[msg.sender][_prizeTitle];\n\n    require(_claimableAmount > 0);\n\n    msg.sender.transfer(_claimableAmount);\n\n    winners[msg.sender][_prizeTitle] = 0;\n\n    emit PrizedClaimed(msg.sender, _prizeTitle, _claimableAmount);\n  }\n\n  function claimableAmount(address _winner, bytes4 _prizeTitle) external view returns (uint256 _claimableAmount) {\n    _claimableAmount = winners[_winner][_prizeTitle];\n  }\n\n  function prizePoolTotal(bytes4 _prizePool) external view returns (uint256 _prizePoolTotal) {\n    _prizePoolTotal = prizePools[_prizePool];\n  }\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract CryptantCrabNFT is ERC721Token, Whitelist, CrabData, GeneSurgeon {\n  event CrabPartAdded(uint256 hp, uint256 dps, uint256 blockAmount);\n  event GiftTransfered(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n  event DefaultMetadataURIChanged(string newUri);\n\n  /**\n   * @dev Pre-generated keys to save gas\n   * keys are generated with:\n   * CRAB_BODY       = bytes4(keccak256(\"crab_body\"))       = 0xc398430e\n   * CRAB_LEG        = bytes4(keccak256(\"crab_leg\"))        = 0x889063b1\n   * CRAB_LEFT_CLAW  = bytes4(keccak256(\"crab_left_claw\"))  = 0xdb6290a2\n   * CRAB_RIGHT_CLAW = bytes4(keccak256(\"crab_right_claw\")) = 0x13453f89\n   */\n  bytes4 internal constant CRAB_BODY = 0xc398430e;\n  bytes4 internal constant CRAB_LEG = 0x889063b1;\n  bytes4 internal constant CRAB_LEFT_CLAW = 0xdb6290a2;\n  bytes4 internal constant CRAB_RIGHT_CLAW = 0x13453f89;\n\n  /**\n   * @dev Stores all the crab data\n   */\n  mapping(bytes4 => mapping(uint256 => CrabPartData[])) internal crabPartData;\n\n  /**\n   * @dev Mapping from tokenId to its corresponding special skin\n   * tokenId with default skin will not be stored. \n   */\n  mapping(uint256 => uint256) internal crabSpecialSkins;\n\n  /**\n   * @dev default MetadataURI\n   */\n  string public defaultMetadataURI = \"https://www.cryptantcrab.io/md/\";\n\n  constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\n    // constructor\n    initiateCrabPartData();\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist.\n   * Will return the token's metadata URL if it has one, \n   * otherwise will just return base on the default metadata URI\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n\n    string memory _uri = tokenURIs[_tokenId];\n\n    if(bytes(_uri).length == 0) {\n      _uri = getMetadataURL(bytes(defaultMetadataURI), _tokenId);\n    }\n\n    return _uri;\n  }\n\n  /**\n   * @dev Returns the data of a specific parts\n   * @param _partIndex the part to retrieve. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\n   * @param _element the element of part to retrieve. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\n   * @param _setIndex the set index of for the specified part. This will starts from 1.\n   */\n  function dataOfPart(uint256 _partIndex, uint256 _element, uint256 _setIndex) public view returns (uint256[] memory _resultData) {\n    bytes4 _key;\n    if(_partIndex == 1) {\n      _key = CRAB_BODY;\n    } else if(_partIndex == 2) {\n      _key = CRAB_LEG;\n    } else if(_partIndex == 3) {\n      _key = CRAB_LEFT_CLAW;\n    } else if(_partIndex == 4) {\n      _key = CRAB_RIGHT_CLAW;\n    } else {\n      revert();\n    }\n\n    CrabPartData storage _crabPartData = crabPartData[_key][_element][_setIndex];\n\n    _resultData = crabPartDataToArray(_crabPartData);\n  }\n\n  /**\n   * @dev Gift(Transfer) a token to another address. Caller must be token owner\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function giftToken(address _from, address _to, uint256 _tokenId) external {\n    safeTransferFrom(_from, _to, _tokenId);\n\n    emit GiftTransfered(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev External function to mint a new token, for whitelisted address only.\n   * Reverts if the given token ID already exists\n   * @param _tokenOwner address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   * @param _skinId the skin ID to be applied for all the token minted\n   */\n  function mintToken(address _tokenOwner, uint256 _tokenId, uint256 _skinId) external onlyIfWhitelisted(msg.sender) {\n    super._mint(_tokenOwner, _tokenId);\n\n    if(_skinId > 0) {\n      crabSpecialSkins[_tokenId] = _skinId;\n    }\n  }\n\n  /**\n   * @dev Returns crab data base on the gene provided\n   * @param _gene the gene info where crab data will be retrieved base on it\n   * @return 4 uint arrays:\n   * 1st Array = Body's Data\n   * 2nd Array = Leg's Data\n   * 3rd Array = Left Claw's Data\n   * 4th Array = Right Claw's Data\n   */\n  function crabPartDataFromGene(uint256 _gene) external view returns (\n    uint256[] _bodyData,\n    uint256[] _legData,\n    uint256[] _leftClawData,\n    uint256[] _rightClawData\n  ) {\n    uint256[] memory _parts = extractPartsFromGene(_gene);\n    uint256[] memory _elements = extractElementsFromGene(_gene);\n\n    _bodyData = dataOfPart(1, _elements[0], _parts[0]);\n    _legData = dataOfPart(2, _elements[1], _parts[1]);\n    _leftClawData = dataOfPart(3, _elements[2], _parts[2]);\n    _rightClawData = dataOfPart(4, _elements[3], _parts[3]);\n  }\n\n  /**\n   * @dev For developer to add new parts, notice that this is the only method to add crab data\n   * so that developer can add extra content. there's no other method for developer to modify\n   * the data. This is to assure token owner actually owns their data.\n   * @param _partIndex the part to add. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\n   * @param _element the element of part to add. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\n   * @param _partDataArray data of the parts.\n   */\n  function setPartData(uint256 _partIndex, uint256 _element, uint256[] _partDataArray) external onlyOwner {\n    CrabPartData memory _partData = arrayToCrabPartData(_partDataArray);\n\n    bytes4 _key;\n    if(_partIndex == 1) {\n      _key = CRAB_BODY;\n    } else if(_partIndex == 2) {\n      _key = CRAB_LEG;\n    } else if(_partIndex == 3) {\n      _key = CRAB_LEFT_CLAW;\n    } else if(_partIndex == 4) {\n      _key = CRAB_RIGHT_CLAW;\n    }\n\n    // if index 1 is empty will fill at index 1\n    if(crabPartData[_key][_element][1].hp == 0 && crabPartData[_key][_element][1].dps == 0) {\n      crabPartData[_key][_element][1] = _partData;\n    } else {\n      crabPartData[_key][_element].push(_partData);\n    }\n\n    emit CrabPartAdded(_partDataArray[0], _partDataArray[1], _partDataArray[2]);\n  }\n\n  /**\n   * @dev Updates the default metadata URI\n   * @param _defaultUri the new metadata URI\n   */\n  function setDefaultMetadataURI(string _defaultUri) external onlyOwner {\n    defaultMetadataURI = _defaultUri;\n\n    emit DefaultMetadataURIChanged(_defaultUri);\n  }\n\n  /**\n   * @dev Updates the metadata URI for existing token\n   * @param _tokenId the tokenID that metadata URI to be changed\n   * @param _uri the new metadata URI for the specified token\n   */\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyIfWhitelisted(msg.sender) {\n    _setTokenURI(_tokenId, _uri);\n  }\n\n  /**\n   * @dev Returns the special skin of the provided tokenId\n   * @param _tokenId cryptant crab's tokenId\n   * @return Special skin belongs to the _tokenId provided. \n   * 0 will be returned if no special skin found.\n   */\n  function specialSkinOfTokenId(uint256 _tokenId) external view returns (uint256) {\n    return crabSpecialSkins[_tokenId];\n  }\n\n  /**\n   * @dev This functions will adjust the length of crabPartData\n   * so that when adding data the index can start with 1.\n   * Reason of doing this is because gene cannot have parts with index 0.\n   */\n  function initiateCrabPartData() internal {\n    require(crabPartData[CRAB_BODY][1].length == 0);\n\n    for(uint256 i = 1 ; i <= 5 ; i++) {\n      crabPartData[CRAB_BODY][i].length = 2;\n      crabPartData[CRAB_LEG][i].length = 2;\n      crabPartData[CRAB_LEFT_CLAW][i].length = 2;\n      crabPartData[CRAB_RIGHT_CLAW][i].length = 2;\n    }\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token, \n   *  or has been whitelisted by contract owner\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address owner = ownerOf(_tokenId);\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender) || whitelist(_spender);\n  }\n\n  /**\n   * @dev Will merge the uri and tokenId together. \n   * @param _uri URI to be merge. This will be the first part of the result URL.\n   * @param _tokenId tokenID to be merge. This will be the last part of the result URL.\n   * @return the merged urL\n   */\n  function getMetadataURL(bytes _uri, uint256 _tokenId) internal pure returns (string) {\n    uint256 _tmpTokenId = _tokenId;\n    uint256 _tokenLength;\n\n    // Getting the length(number of digits) of token ID\n    do {\n      _tokenLength++;\n      _tmpTokenId /= 10;\n    } while (_tmpTokenId > 0);\n\n    // creating a byte array with the length of URL + token digits\n    bytes memory _result = new bytes(_uri.length + _tokenLength);\n\n    // cloning the uri bytes into the result bytes\n    for(uint256 i = 0 ; i < _uri.length ; i ++) {\n      _result[i] = _uri[i];\n    }\n\n    // appending the tokenId to the end of the result bytes\n    uint256 lastIndex = _result.length - 1;\n    for(_tmpTokenId = _tokenId ; _tmpTokenId > 0 ; _tmpTokenId /= 10) {\n      _result[lastIndex--] = byte(48 + _tmpTokenId % 10);\n    }\n\n    return string(_result);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"_now\",\"type\":\"uint256\"},{\"name\":\"_currentPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCrabTraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCryptantFragmentPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketItems\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"},{\"name\":\"_prizePoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrizePool\",\"type\":\"bytes4\"}],\"name\":\"setCurrentPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"buyCrab\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customTokenId\",\"type\":\"uint256\"},{\"name\":\"_crabPrice\",\"type\":\"uint256\"},{\"name\":\"_customGene\",\"type\":\"uint256\"},{\"name\":\"_customSkin\",\"type\":\"uint256\"},{\"name\":\"_hasLegendary\",\"type\":\"bool\"}],\"name\":\"createCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisCrab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCrabTradingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes4\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradedPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_sellingPrice\",\"type\":\"uint256\"}],\"name\":\"sellCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes4\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"cancelOnSaleCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCrabPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCryptantFragments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCryptantFragmentTradingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crabAmount\",\"type\":\"uint256\"},{\"name\":\"_cryptantFragmentAmount\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"},{\"name\":\"_prizePoolAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cryptant\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ReferralPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"CrabOnSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"CrabOnSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tradedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"Traded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gene\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"specialSkin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crabPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"growthValue\",\"type\":\"uint256\"}],\"name\":\"CrabHatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reqAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundAmt\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "61012060405260006080908152633b9aca0060a052620f424060c0526103e860e05260016101005262000036906005908162000464565b50600b805463ffffffff191663add5d43f1790553480156200005757600080fd5b5060405160a08062002ebf8339810160409081528151602083015191830151606084015160809094015160008054600160a060020a031916331790559193909184848484838383828282620000b783838364010000000062000353810204565b50505050600160a060020a038316159150620000e3905057620000e381640100000000620003eb810204565b50505050600160a060020a038116156200010b576200010b816401000000006200040d810204565b620001427f21339464000000000000000000000000000000000000000000000000000000006104616401000000006200042f810204565b620001797ff1305a10000000000000000000000000000000000000000000000000000000006138406401000000006200042f810204565b620001b07f40b0b13e000000000000000000000000000000000000000000000000000000006127106401000000006200042f810204565b620001e77f7625c58a00000000000000000000000000000000000000000000000000000000614e206401000000006200042f810204565b6200021e7fb9e1adb0000000000000000000000000000000000000000000000000000000006107d06401000000006200042f810204565b620002557ffe9ad0eb00000000000000000000000000000000000000000000000000000000610af06401000000006200042f810204565b50506040805160808101825260008082526020820181815292820181815260608301828152600a8054600181018255935292517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860039093029283015592517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a982015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa90920180549151600160a060020a0319909216600160a060020a039093169290921760a060020a60ff0219167401000000000000000000000000000000000000000060ff9092169190910217905550620004dc915050565b60008080600160a060020a03861615620003865760018054600160a060020a031916600160a060020a0388161790558592505b600160a060020a03851615620003b55760028054600160a060020a031916600160a060020a0387161790558491505b600160a060020a03841615620003e3575060038054600160a060020a031916600160a060020a038516179055825b505050505050565b60048054600160a060020a031916600160a060020a0392909216919091179055565b60078054600160a060020a031916600160a060020a0392909216919091179055565b7fffffffff00000000000000000000000000000000000000000000000000000000909116600090815260086020526040902055565b828054828255906000526020600020908101928215620004aa579160200282015b82811115620004aa578251829063ffffffff1690559160200191906001019062000485565b50620004b8929150620004bc565b5090565b620004d991905b80821115620004b85760008155600101620004c3565b90565b6129d380620004ec6000396000f30060806040526004361061017c5763ffffffff60e060020a600035041663086146d281146101815780630d174c24146101af5780631797ec8a146101d25780632e1a7d4d146101f95780632fbcf56814610225578063363bf9641461023a5780634a945f8d1461026757806351f28e141461029a5780635dd68acd146102e357806364cab0e31461031c578063675f8aea1461033e57806368882b3014610370578063715018a61461037b578063719ce73e146103905780637239d2b9146103c1578063765388ae146103d65780637d9527d6146103fc57806389d6e86f146104115780638da5cb5b14610426578063928e6b161461043b5780639684ebba1461045d5780639bd702e414610475578063a08fcabb14610490578063c6a0b13f146104b5578063c781f97b146104cd578063cc89d596146104e2578063cdc1842414610503578063dede553f14610518578063e30fc0191461052d578063e43e9de014610542578063ea3bd5df14610557578063f2fde38b14610571575b600080fd5b34801561018d57600080fd5b50610196610592565b6040805192835260208301919091528051918290030190f35b3480156101bb57600080fd5b506101d0600160a060020a03600435166105cf565b005b3480156101de57600080fd5b506101e7610608565b60408051918252519081900360200190f35b34801561020557600080fd5b5061021160043561060f565b604080519115158252519081900360200190f35b34801561023157600080fd5b506101e761067a565b34801561024657600080fd5b506101d0600160a060020a03600435811690602435811690604435166106b9565b34801561027357600080fd5b506101d0600160a060020a03600435811690602435811690604435811690606435166106e0565b3480156102a657600080fd5b506102b2600435610720565b604080519485526020850193909352600160a060020a039091168383015260ff166060830152519081900360800190f35b3480156102ef57600080fd5b506101d0600160a060020a0360043581169060243581169060443581169060643581169060843516610777565b34801561032857600080fd5b506101d0600160e060020a0319600435166107d0565b34801561034a57600080fd5b50610353610802565b60408051600160e060020a03199092168252519081900360200190f35b6101d060043561080e565b34801561038757600080fd5b506101d0610cc5565b34801561039c57600080fd5b506103a5610d24565b60408051600160a060020a039092168252519081900360200190f35b3480156103cd57600080fd5b506103a5610d33565b3480156103e257600080fd5b506101d06004356024356044356064356084351515610d42565b34801561040857600080fd5b506103a5610d66565b34801561041d57600080fd5b506101e7610d75565b34801561043257600080fd5b506103a5610d81565b34801561044757600080fd5b506101e7600160e060020a031960043516610d90565b34801561046957600080fd5b506101e7600435610da1565b34801561048157600080fd5b506101d0600435602435610dc0565b34801561049c57600080fd5b506101d0600160e060020a031960043516602435611079565b3480156104c157600080fd5b506101d060043561109e565b3480156104d957600080fd5b506101e76111fe565b3480156104ee57600080fd5b506101e7600160a060020a036004351661130d565b34801561050f57600080fd5b506103a561145e565b34801561052457600080fd5b506103a561146d565b34801561053957600080fd5b506101e761147c565b34801561054e57600080fd5b506103a5611486565b6101d0600435602435600160a060020a0360443516611495565b34801561057d57600080fd5b506101d0600160a060020a0360043516611896565b4260006105be7ff1305a10000000000000000000000000000000000000000000000000000000006118b9565b428115156105c857fe5b0490509091565b600054600160a060020a031633146105e657600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b6009545b90565b600654600090600160a060020a0316331461062957600080fd5b303182111561063757600080fd5b600654604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610671573d6000803e3d6000fd5b50600192915050565b60006019610686610608565b11156106ac57620186a06106986111fe565b600a028115156106a457fe5b04905061060c565b50651b48eb57e00061060c565b600054600160a060020a031633146106d057600080fd5b6106db8383836118d5565b505050565b600054600160a060020a031633146106f757600080fd5b6107028484846118d5565b600160a060020a0381161561071a5761071a8161196a565b50505050565b600a80548290811061072e57fe5b6000918252602090912060039091020180546001820154600290920154909250600160a060020a0381169074010000000000000000000000000000000000000000900460ff1684565b600054600160a060020a0316331461078e57600080fd5b6107998585856118d5565b600160a060020a038216156107b1576107b18261196a565b600160a060020a038116156107c9576107c98161198c565b5050505050565b600054600160a060020a031633146107e757600080fd5b600b805463ffffffff191660e060020a909204919091179055565b600b5460e060020a0281565b6000806000806000600a8681548110151561082557fe5b906000526020600020906003020194508460020160149054906101000a900460ff1660ff16600114151561085857600080fd5b6001850154341461086857600080fd5b6002850154600160a060020a031633141561088257600080fd5b6002548554604080517f42842e0e000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481019290925251600160a060020a03909216916342842e0e9160648082019260009290919082900301818387803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b50505050620186a061092563fe9ad0eb60e060020a026118b9565b340281151561093057fe5b049350620186a06109607fb9e1adb0000000000000000000000000000000000000000000000000000000006118b9565b340281151561096b57fe5b6002870154604051929091049450348690038590039350600160a060020a03169083156108fc029084906000818181858888f193505050501580156109b4573d6000803e3d6000fd5b50600754600b54604080517f035186d600000000000000000000000000000000000000000000000000000000815260e060020a909202600160e060020a031916600483015251600160a060020a039092169163035186d6918691602480830192600092919082900301818588803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50506003548854604080516020808201939093527f666f7373696c5479706500000000000000000000000000000000000000000000818301528151602a818303018152604a909101918290528051600160a060020a0390941696506389853691955093509182918401908083835b60208310610acf5780518252601f199092019160209182019101610ab0565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050506040513d6020811015610b5a57600080fd5b505190506000811115610b9f576001808601546009805492830181556000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101555b60028501805474ff0000000000000000000000000000000000000000191674030000000000000000000000000000000000000000179055610c337f1a01d5bb00000000000000000000000000000000000000000000000000000000610c237ff1305a10000000000000000000000000000000000000000000000000000000006118b9565b42811515610c2d57fe5b046119ae565b610c647ff14adb6a00000000000000000000000000000000000000000000000000000000610c5f6111fe565b6119ae565b600285015485546001870154604080519283526020830191909152818101899052513392600160a060020a0316917f825f67dcf8bc9df74117166defc432f4cdf0a331eff757dd049327c83c2e02e1919081900360600190a3505050505050565b600054600160a060020a03163314610cdc57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600754600160a060020a031681565b600454600160a060020a031681565b600054600160a060020a03163314610d5957600080fd5b6107c985858585856119cb565b600154600160a060020a031681565b670429d069189e000081565b600054600160a060020a031681565b6000610d9b826118b9565b92915050565b6009805482908110610daf57fe5b600091825260209091200154905081565b600254604080517f6352211e0000000000000000000000000000000000000000000000000000000081526004810185905290516000923392600160a060020a0390911691636352211e9160248082019260209290919082900301818887803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505050506040513d6020811015610e5557600080fd5b5051600160a060020a031614610e6a57600080fd5b66b1a2bc2ec500008210158015610e8a575068056bc75e2d631000008211155b1515610e9557600080fd5b604080516080810182528481526020810184815233828401818152600160608501818152600a80549283018155600090815295517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860039093029283015593517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a982015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa90910180549351600160a060020a0319909416600160a060020a039283161774ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000060ff909516949094029390931790925560025484517f23b872dd000000000000000000000000000000000000000000000000000000008152600481019290925230602483015260448201889052935193909116926323b872dd9260648084019391929182900301818387803b15801561100157600080fd5b505af1158015611015573d6000803e3d6000fd5b5050505061102283612589565b600a54604080518681526020810186905260001990920182820152606082018390525191925033917fe85f50d04aad3a08dbccb8010694abf96aea1d1b4bad25ee468c18fc0b8a67ce9181900360800190a2505050565b600054600160a060020a0316331461109057600080fd5b61109a82826119ae565b5050565b6000600a828154811015156110af57fe5b906000526020600020906003020190508060020160149054906101000a900460ff1660ff1660011415156110e257600080fd5b6002810180547402000000000000000000000000000000000000000074ff0000000000000000000000000000000000000000199091161790819055600160a060020a0316331461113157600080fd5b6002548154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481019290925251600160a060020a03909216916323b872dd9160648082019260009290919082900301818387803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b50508254604080519182526020820186905280513394507f60fc417a183f79070cd39314730ea379a973582cd704728681c917fb347895799350918290030190a25050565b60008060008060006019611210610608565b11156112fa5761123f7f1a01d5bb000000000000000000000000000000000000000000000000000000006118b9565b935061126a7ff14adb6a000000000000000000000000000000000000000000000000000000006118b9565b92506112957ff1305a10000000000000000000000000000000000000000000000000000000006118b9565b4281151561129f57fe5b04841480156112ad57508215155b156112ba57829450611306565b5060015b600f81116112ef57600980548281039081106112d657fe5b60009182526020909120015491909101906001016112be565b600f82049450611306565b670429d069189e000094505b5050505090565b6000600360009054906101000a9004600160a060020a0316600160a060020a03166389853691836040516020018082600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401807f6372797074616e740000000000000000000000000000000000000000000000008152506008019150506040516020818303038152906040526040518082805190602001908083835b602083106113cb5780518252601f1990920191602091820191016113ac565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b505050506040513d602081101561145657600080fd5b505192915050565b600654600160a060020a031681565b600354600160a060020a031681565b651b48eb57e00081565b600254600160a060020a031681565b6000806000806000806000806000806000808e101580156114b75750600a8e11155b15156114c257600080fd5b60008d101580156114d557506127108d11155b15156114e057600080fd5b8d1580156114ec57508c155b156114f657600080fd5b6103e88d061561150557600080fd5b33600160a060020a038d16141561151b57600080fd5b6115236111fe565b9a508d8b0299508c61153361067a565b0298508c975087612710141561154b576107d0880197505b89890196503495508686101561156057600080fd5b6115897f21339464000000000000000000000000000000000000000000000000000000006118b9565b9450606493508d600a14156115a6576115a385600a612627565b93505b600092505b8d831015611619578461138814156115c35761157c94505b6001909401936115d9858c6000808888146119cb565b60098054600181810183556000929092527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018c905592909201916115ab565b600088111561162e5761162c3389612644565b505b6116587f2133946400000000000000000000000000000000000000000000000000000000866119ae565b61166286886127d9565b600160a060020a038c161561172957620186a061169e7f40b0b13e000000000000000000000000000000000000000000000000000000006118b9565b88028115156116a957fe5b0491508b600160a060020a03166108fc839081150290604051600060405180830381858888f193505050501580156116e5573d6000803e3d6000fd5b50604080518381523360208201528151600160a060020a038f16927f6344e900bd7e00e72714516a5ca3986dd2d886d3bc769e48272b66dcbfe72610928290030190a25b620186a06117567f7625c58a000000000000000000000000000000000000000000000000000000006118b9565b880281151561176157fe5b600754600b54604080517f035186d600000000000000000000000000000000000000000000000000000000815260e060020a909202600160e060020a031916600483015251939092049350600160a060020a03169163035186d6918491602480830192600092919082900301818588803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b5050505050611818631a01d5bb60e060020a02610c2363f1305a1060e060020a026118b9565b6118427ff14adb6a000000000000000000000000000000000000000000000000000000008c6119ae565b604080518f8152602081018a905288880381830152905133917f2bdd59583c8e5cc64165e86af2482dbe93e85c98b355b788aa592465b3f6920e919081900360600190a25050505050505050505050505050565b600054600160a060020a031633146118ad57600080fd5b6118b68161286c565b50565b600160e060020a03191660009081526008602052604090205490565b60008080600160a060020a038616156119075760018054600160a060020a031916600160a060020a0388161790558592505b600160a060020a038516156119355760028054600160a060020a031916600160a060020a0387161790558491505b600160a060020a03841615611962575060038054600160a060020a031916600160a060020a038516179055825b505050505050565b60048054600160a060020a031916600160a060020a0392909216919091179055565b60078054600160a060020a031916600160a060020a0392909216919091179055565b600160e060020a0319909116600090815260086020526040902055565b60608060008060008060606008604051908082528060200260200182016040528015611a01578160200160208202803883390190505b5060408051600880825261012082019092529198506020820161010080388339019050509550891515611aec57600154604080517f9d0c0c350000000000000000000000000000000000000000000000000000000081526000600482018190528b151560248301529151600160a060020a0390931692639d0c0c3592604480840193608093929083900390910190829087803b158015611aa057600080fd5b505af1158015611ab4573d6000803e3d6000fd5b505050506040513d6080811015611aca57600080fd5b5080516020820151604083015160609093015191975095509093509150611af0565b8994505b8815611afa578893505b600154604080517f6f9fbd7c0000000000000000000000000000000000000000000000000000000081528151600160a060020a0390931692636f9fbd7c926004808401939192918290030181600087803b158015611b5757600080fd5b505af1158015611b6b573d6000803e3d6000fd5b505050506040513d6040811015611b8157600080fd5b8101908080519060200190929190805190602001909291905050508093508194505050600260009054906101000a9004600160a060020a0316600160a060020a03166323a36d2b338e876040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018381526020018281526020019350505050600060405180830381600087803b158015611c2457600080fd5b505af1158015611c38573d6000803e3d6000fd5b505050508b60405160200180828152602001807f67656e65000000000000000000000000000000000000000000000000000000008152506004019150506040516020818303038152906040526040518082805190602001908083835b60208310611cb35780518252601f199092019160209182019101611c94565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866000815181101515611cef57fe5b602090810290910101528651859088906000908110611d0a57fe5b6020908102909101810191909152604080518083018f90527f6c6576656c0000000000000000000000000000000000000000000000000000008183015281516025818303018152604590910191829052805190928291908401908083835b60208310611d875780518252601f199092019160209182019101611d68565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866001815181101515611dc357fe5b602090810290910101528651600190889082908110611dde57fe5b6020908102909101810191909152604080518083018f90527f686561727456616c756500000000000000000000000000000000000000000000818301528151602a818303018152604a90910191829052805190928291908401908083835b60208310611e5b5780518252601f199092019160209182019101611e3c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866002815181101515611e9757fe5b602090810290910101528651839088906002908110611eb257fe5b6020908102909101810191909152604080518083018f90527f67726f77746856616c7565000000000000000000000000000000000000000000818301528151602b818303018152604b90910191829052805190928291908401908083835b60208310611f2f5780518252601f199092019160209182019101611f10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866003815181101515611f6b57fe5b602090810290910101528651829088906003908110611f8657fe5b6020908102909101015260048054604080517fcfc2aad200000000000000000000000000000000000000000000000000000000815292830188905251600160a060020a039091169163cfc2aad291602480830192600092919082900301818387803b158015611ff457600080fd5b505af1158015612008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561203157600080fd5b81019080805164010000000081111561204957600080fd5b8201602081018481111561205c57600080fd5b815185602082028301116401000000008211171561207957600080fd5b505092919050505090508b60016040516020018083815260200182815260200180600080516020612988833981519152815250600901925050506040516020818303038152906040526040518082805190602001908083835b602083106120f15780518252601f1990920191602091820191016120d2565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902086600481518110151561212d57fe5b6020908102909101015280518190600090811061214657fe5b9060200190602002015187600481518110151561215f57fe5b6020908102909101810191909152604080518083018f9052600281830152600080516020612988833981519152606082015281516049818303018152606990910191829052805190928291908401908083835b602083106121d15780518252601f1990920191602091820191016121b2565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902086600581518110151561220d57fe5b6020908102909101015280518190600190811061222657fe5b9060200190602002015187600581518110151561223f57fe5b6020908102909101810191909152604080518083018f9052600381830152600080516020612988833981519152606082015281516049818303018152606990910191829052805190928291908401908083835b602083106122b15780518252601f199092019160209182019101612292565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208660068151811015156122ed57fe5b6020908102909101015280518190600290811061230657fe5b9060200190602002015187600681518110151561231f57fe5b6020908102909101810191909152604080518083018f9052600481830152600080516020612988833981519152606082015281516049818303018152606990910191829052805190928291908401908083835b602083106123915780518252601f199092019160209182019101612372565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208660078151811015156123cd57fe5b602090810290910101528051819060039081106123e657fe5b906020019060200201518760078151811015156123ff57fe5b6020908102909101810191909152600354604080517fedf87aff00000000000000000000000000000000000000000000000000000000815260048101918252895160448201528951600160a060020a039093169363edf87aff938b938d9390928392602483019260640191878101910280838360005b8381101561248d578181015183820152602001612475565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156124cc5781810151838201526020016124b4565b50505050905001945050505050602060405180830381600087803b1580156124f357600080fd5b505af1158015612507573d6000803e3d6000fd5b505050506040513d602081101561251d57600080fd5b5051151561252a57600080fd5b604080518d815260208101879052808201869052606081018d905260808101849052905133917f119326b1fd8ed92ff4f7d9da36e3caa7d39681c38d437053fe7e3965cf74aaf8919081900360a00190a2505050505050505050505050565b600354600090600160a060020a031615156125a357600080fd5b6003546040805160208082018690527f67656e650000000000000000000000000000000000000000000000000000000082840152825160248184030181526044909201928390528151600160a060020a039094169363898536919391829190840190808383602083106113cb5780518252601f1990920191602091820191016113ac565b600081612633846128dc565b81151561263c57fe5b069392505050565b600061265f826126538561130d565b9063ffffffff61296816565b60035460408051600160a060020a038781166c01000000000000000000000000026020808401919091527f6372797074616e7400000000000000000000000000000000000000000000000060348401528351808403601c018152603c90930193849052825195965093169363adb44a32939192918291908401908083835b602083106126fc5780518252601f1990920191602091820191016126dd565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a028352600483015260248201899052925160448083019650939450929083900301905081600087803b15801561276457600080fd5b505af1158015612778573d6000803e3d6000fd5b505050506040513d602081101561278e57600080fd5b505060408051838152602081018390528151600160a060020a038616927fed28291c8ece55af2a3498316da394241d9026fd7256843843d9f4fa0a56f1e0928290030190a292915050565b60006127eb838363ffffffff61297516565b905060008111156106db57604051339082156108fc029083906000818181858888f19350505050158015612823573d6000803e3d6000fd5b506040805183815260208101859052808201839052905133917fb7048c2ad36aadee977bb16b4543a18866044d27a2ca753e1c7dbcfa7d7a6962919081900360600190a2505050565b600160a060020a038116151561288157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b604080516000194301406020808301919091528183018490528251808303840181526060909201928390528151600093918291908401908083835b602083106129365780518252601f199092019160209182019101612917565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b81810182811015610d9b57fe5b60008282111561298157fe5b50900390560070617274426f6e75730000000000000000000000000000000000000000000000a165627a7a72305820244b2abe0685bb21da4e2a3b5e7ea932b932639265adafc4d71843bfbd72a67d00290000000000000000000000002248bfa3babbf53fdc058167584a642d13eebfed000000000000000000000000ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b000000000000000000000000c58e24f5b05365aa21ded72111af939446d13b2e00000000000000000000000094bb8ffbd1631041ceadc27bf0da9b4b0353f141000000000000000000000000bf9ce4aae144b6793472161e2f74b2ddc8e5ddd3",
  "constructorArguments": "0000000000000000000000002248bfa3babbf53fdc058167584a642d13eebfed000000000000000000000000ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b000000000000000000000000c58e24f5b05365aa21ded72111af939446d13b2e00000000000000000000000094bb8ffbd1631041ceadc27bf0da9b4b0353f141000000000000000000000000bf9ce4aae144b6793472161e2f74b2ddc8e5ddd3"
}