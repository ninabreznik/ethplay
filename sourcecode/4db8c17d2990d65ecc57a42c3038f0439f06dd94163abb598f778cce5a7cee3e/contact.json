{
  "address": "0x5534abcc97d3b5c279b3dceb53b59d0a93ef0a77",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SODA",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\npragma solidity 0.5.8;\n// import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\n// import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/ownership/Ownable.sol\";\n// import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n// import \"https://github.com/oraclize/ethereum-api/oraclizeAPI.sol\";\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n/*\nORACLIZE_API\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\npragma solidity >= 0.5.0 < 0.6.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the oraclizeAPI!\n\n// Dummy contract only used to emit to end-user they are using wrong solc\ncontract solcChecker {\n/* INCOMPATIBLE SOLC: import the following instead: \"github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\" */ function f(bytes calldata x) external;\n}\n\ncontract OraclizeI {\n\n    address public cbAddress;\n\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function getPrice(string memory _datasource) public returns (uint _dsprice);\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\n    function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);\n    function queryN(uint _timestamp, string memory _datasource, bytes memory _argN) public payable returns (bytes32 _id);\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _address);\n}\n/*\nBegin solidity-cborutils\nhttps://github.com/smartcontractkit/solidity-cborutils\nMIT License\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nlibrary Buffer {\n\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory _buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        _buf.capacity = capacity; // Allocate space for the buffer data\n        assembly {\n            let ptr := mload(0x40)\n            mstore(_buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory _buf, uint _capacity) private pure {\n        bytes memory oldbuf = _buf.buf;\n        init(_buf, _capacity);\n        append(_buf, oldbuf);\n    }\n\n    function max(uint _a, uint _b) private pure returns (uint _max) {\n        if (_a > _b) {\n            return _a;\n        }\n        return _b;\n    }\n    /**\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n      *      would exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\n        if (_data.length + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\n        }\n        uint dest;\n        uint src;\n        uint len = _data.length;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\n            src := add(_data, 32)\n        }\n        for(; len >= 32; len -= 32) { // Copy word-length chunks while possible\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n        return _buf;\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, uint8 _data) internal pure {\n        if (_buf.buf.length + 1 > _buf.capacity) {\n            resize(_buf, _buf.capacity * 2);\n        }\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\n            mstore8(dest, _data)\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\n        }\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\n        if (_len + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _len) * 2);\n        }\n        uint mask = 256 ** _len - 1;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\n        }\n        return _buf;\n    }\n}\n\nlibrary CBOR {\n\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\n        if (_value <= 23) {\n            _buf.append(uint8((_major << 5) | _value));\n        } else if (_value <= 0xFF) {\n            _buf.append(uint8((_major << 5) | 24));\n            _buf.appendInt(_value, 1);\n        } else if (_value <= 0xFFFF) {\n            _buf.append(uint8((_major << 5) | 25));\n            _buf.appendInt(_value, 2);\n        } else if (_value <= 0xFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 26));\n            _buf.appendInt(_value, 4);\n        } else if (_value <= 0xFFFFFFFFFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 27));\n            _buf.appendInt(_value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\n        _buf.append(uint8((_major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\n    }\n\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\n        if (_value >= 0) {\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\n        } else {\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\n        _buf.append(_value);\n    }\n\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\n        _buf.append(bytes(_value));\n    }\n\n    function startArray(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n/*\nEnd solidity-cborutils\n*/\ncontract usingOraclize {\n\n    using CBOR for Buffer.buffer;\n\n    OraclizeI oraclize;\n    OraclizeAddrResolverI OAR;\n\n    uint constant day = 60 * 60 * 24;\n    uint constant week = 60 * 60 * 24 * 7;\n    uint constant month = 60 * 60 * 24 * 30;\n\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_TLSNotary = 0x10;\n\n    string oraclize_network_name;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_consensys = 161;\n\n    mapping(bytes32 => bytes32) oraclize_randomDS_args;\n    mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    modifier oraclizeAPI {\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\n            oraclize_setNetwork(networkID_auto);\n        }\n        if (address(oraclize) != OAR.getAddress()) {\n            oraclize = OraclizeI(OAR.getAddress());\n        }\n        _;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\n        // RandomDS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (uint8(_proof[2]) == uint8(1)));\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\n      _networkID; // silence the warning and remain backwards compatible\n      return oraclize_setNetwork();\n    }\n\n    function oraclize_setNetworkName(string memory _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string memory _networkName) {\n        return oraclize_network_name;\n    }\n\n    function oraclize_setNetwork() internal returns (bool _networkSet) {\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { //goerli testnet\n            OAR = OraclizeAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\n            oraclize_setNetworkName(\"eth_goerli\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 _myid, string memory _result) public {\n        __callback(_myid, _result, new bytes(0));\n    }\n\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {\n        _myid; _result; _proof; // Silence compiler warnings\n      return;\n    }\n\n    function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {\n        return oraclize.getPrice(_datasource);\n    }\n\n    function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {\n        return oraclize.getPrice(_datasource, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query.value(price)(0, _datasource, _arg);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query.value(price)(_timestamp, _datasource, _arg);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource,_gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n           return 0; // Unexpectedly high price\n        }\n        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN.value(price)(0, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN.value(price)(0, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        uint price = oraclize.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs);\n    }\n\n    function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return oraclize_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function oraclize_setProof(byte _proofP) oraclizeAPI internal {\n        return oraclize.setProofType(_proofP);\n    }\n\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {\n        return oraclize.cbAddress();\n    }\n\n    function getCodeSize(address _addr) view internal returns (uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(_gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\n            iaddr *= 256;\n            b1 = uint160(uint8(tmp[i]));\n            b2 = uint160(uint8(tmp[i + 1]));\n            if ((b1 >= 97) && (b1 <= 102)) {\n                b1 -= 87;\n            } else if ((b1 >= 65) && (b1 <= 70)) {\n                b1 -= 55;\n            } else if ((b1 >= 48) && (b1 <= 57)) {\n                b1 -= 48;\n            }\n            if ((b2 >= 97) && (b2 <= 102)) {\n                b2 -= 87;\n            } else if ((b2 >= 65) && (b2 <= 70)) {\n                b2 -= 55;\n            } else if ((b2 >= 48) && (b2 <= 57)) {\n                b2 -= 48;\n            }\n            iaddr += (b1 * 16 + b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) {\n            minLength = b.length;\n        }\n        for (uint i = 0; i < minLength; i ++) {\n            if (a[i] < b[i]) {\n                return -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n        if (a.length < b.length) {\n            return -1;\n        } else if (a.length > b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if (h.length < 1 || n.length < 1 || (n.length > h.length)) {\n            return -1;\n        } else if (h.length > (2 ** 128 - 1)) {\n            return -1;\n        } else {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i++) {\n                if (h[i] == n[0]) {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) {\n                        subindex++;\n                    }\n                    if (subindex == n.length) {\n                        return int(i);\n                    }\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, 'More than one decimal encountered in string!');\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeString(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeBytes(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\n        require((_nbytes > 0) && (_nbytes <= 32));\n        _delay *= 10; // Convert from seconds to ledger timer ticks\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(uint8(_nbytes));\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            /*\n             The following variables can be relaxed.\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\n             for an idea on how to override and replace commit hash variables.\n            */\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n        bytes memory delay_bytes8_left = new bytes(8);\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n        }\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\n        oraclize_randomDS_args[_queryId] = _commitment;\n    }\n\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\n        bool sigok;\n        address signer;\n        bytes32 sigr;\n        bytes32 sigs;\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\n            return true;\n        } else {\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\n        bool sigok;\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\n        tosign2[0] = byte(uint8(1)); //role\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        if (!sigok) {\n            return false;\n        }\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        bytes memory tosign3 = new bytes(1 + 65);\n        tosign3[0] = 0xFE;\n        copyBytes(_proof, 3, 65, tosign3, 1);\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        return sigok;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\n        // Random DS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (uint8(_proof[2]) != uint8(1))) {\n            return 1;\n        }\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (!proofVerified) {\n            return 2;\n        }\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\n        bool match_ = true;\n        require(_prefix.length == _nRandomBytes);\n        for (uint256 i = 0; i< _nRandomBytes; i++) {\n            if (_content[i] != _prefix[i]) {\n                match_ = false;\n            }\n        }\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\n            return false;\n        }\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if '_result' is the _prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\n            return false;\n        }\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[_queryId];\n        } else return false;\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\n            return false;\n        }\n        // Verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (!oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\n        }\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\n        uint minLength = _length + _toOffset;\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint j = 32 + _toOffset;\n        while (i < (32 + _fromOffset + _length)) {\n            assembly {\n                let tmp := mload(add(_from, i))\n                mstore(add(_to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return _to;\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n     Duplicate Solidity's ecrecover, but catching the CALL return value\n    */\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\n        /*\n         We do our own memory management here. Solidity uses memory offset\n         0x40 to store the current end of memory. We write past it (as\n         writes are memory extensions), but don't update the offset so\n         Solidity will reuse it. The memory used here is only needed for\n         this context.\n         FIXME: inline assembly can't access return values\n        */\n        bool ret;\n        address addr;\n        assembly {\n            let size := mload(0x40)\n            mstore(size, _hash)\n            mstore(add(size, 32), _v)\n            mstore(add(size, 64), _r)\n            mstore(add(size, 96), _s)\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\n            addr := mload(size)\n        }\n        return (ret, addr);\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (_sig.length != 65) {\n            return (false, address(0));\n        }\n        /*\n         The signature format is a compact form of:\n           {bytes32 r}{bytes32 s}{uint8 v}\n         Compact means, uint8 is not padded to 32 bytes.\n        */\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            /*\n             Here we are loading the last 32 bytes. We exploit the fact that\n             'mload' will pad with zeroes if we overread.\n             There is no 'mload8' to do this, but that would be nicer.\n            */\n            v := byte(0, mload(add(_sig, 96)))\n            /*\n              Alternative solution:\n              'byte' is not working due to the Solidity parser, so lets\n              use the second best option, 'and'\n              v := and(mload(add(_sig, 65)), 255)\n            */\n        }\n        /*\n         albeit non-transactional signatures are not specified by the YP, one would expect it\n         to match the YP range of [27, 28]\n         geth uses [0, 1] and some clients have followed. This might change, see:\n         https://github.com/ethereum/go-ethereum/issues/2053\n        */\n        if (v < 27) {\n            v += 27;\n        }\n        if (v != 27 && v != 28) {\n            return (false, address(0));\n        }\n        return safer_ecrecover(_hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n}\n/*\nEND ORACLIZE_API\n*/\n\ncontract Pool is Ownable{\n    function () external payable {}\n    function send(address payable to, uint value) public onlyOwner  {\n        to.transfer(value);\n    }  \n    function balance() public view returns(uint) {\n        return address(this).balance;\n    }\n}\n\n\ncontract SODA is usingOraclize, Ownable {\n    uint constant ORACLIZE_GASLIMIT = 300000;\n    using SafeMath for uint;\n    IERC20 WBTC;\n    Pool public pool;\n    event Log(string message);\n    mapping (address => Deposit) deposits;\n    \n    modifier oraclized() {\n        uint price = oraclize_getPrice(\"URL\", ORACLIZE_GASLIMIT);\n        require(price <= msg.value, \"need more eth\");\n        msg.sender.transfer( msg.value - price);\n        _;\n    }\n    \n    mapping (bytes32 => Transaction) queries;\n    constructor(address WBTCaddr) public payable {\n        WBTC = IERC20(WBTCaddr);\n        pool = new Pool();\n        address(pool).transfer(msg.value);\n    }\n    function deposit(uint256 value) public payable oraclized returns(bytes32 id) {\n        require(WBTC.allowance(msg.sender, address(this)) >= value, \"need approving\");\n        require(WBTC.balanceOf(msg.sender) >= value, \"need more WBTC\");\n        require(deposits[msg.sender].state != DepositState.Active, \"already Active\");\n        id = oraclize_query(\"URL\", \"json(https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT).price\", ORACLIZE_GASLIMIT);\n        queries[id] = Transaction(TransactionType.Deposit, msg.sender, value);\n    }\n    \n    function getWbtcBalance() view public returns (uint256) {\n        return WBTC.balanceOf(address(this));\n    }\n    function parseUsdPrice(string memory s) pure public returns (uint result) {\n        bytes memory b = bytes(s);\n        uint i;\n        result = 0;\n        uint dotted = 2;\n        uint stop = b.length;\n        for (i = 0; i < stop; i++) {\n            if(b[i] == \".\") {\n                if(b.length - i > 3){\n                    stop = i + 3;\n                    dotted = 0;\n                } else\n                    dotted -= b.length - i-1;\n            }\n            else {\n                uint c = uint(uint8(b[i]));\n                if (c >= 48 && c <= 57) {\n                    result = result * 10 + (c - 48);\n                }\n            }\n        }\n        result *= 10 **dotted;\n    }\n    function __callback(bytes32 myid, string memory result) public {\n        if (msg.sender != oraclize_cbAddress()) revert();\n        uint price = parseUsdPrice(result);\n        Transaction storage txn = queries[myid];\n       \n        if(txn._type == TransactionType.Deposit){\n            WBTC.transferFrom(txn.sender, address(this), txn.value);\n            uint soda_dep = txn.value.mul(price).mul(10**10).mul(10).div(14);\n            \n            // comission = 1%\n            uint comission =txn.value.div(100);\n            WBTC.transfer(owner(), comission);\n            deposits[txn.sender] = Deposit(DepositState.Active, txn.value.sub(comission), price, soda_dep, soda_dep, now);\n        } else if(txn._type == TransactionType.SodaSpend){\n            Deposit storage d = deposits[txn.sender];\n            d.balance = d.balance.sub(txn.value);\n            pool.send(txn.sender,txn.value.div(price));\n        } else if(txn._type == TransactionType.SodaReparing){\n            Deposit storage _deposit = deposits[txn.sender];\n            uint valSoda = txn.value.mul(price);\n            if(valSoda >= _deposit.debt){\n                uint change = valSoda.sub(_deposit.debt).div(price);\n                address(pool).transfer(txn.value.sub(change));\n                txn.sender.transfer(change);\n                WBTC.transfer(txn.sender, _deposit.WBTCamount);\n                delete deposits[txn.sender];\n            } else {\n                address(pool).transfer(txn.value);\n                _deposit.debt = _deposit.debt.sub(valSoda);\n            }\n        } else if(txn._type == TransactionType.LiquidqtionRequest){\n            if(deposits[txn.sender].usdStartPrice.mul(11) > price.mul(14))\n                _liquidate(txn.sender);\n        }\n        delete queries[myid];\n    }\n    \n    function balanceOf(address addr) view public returns(uint){\n        return deposits[addr].balance;\n    }\n    function myBalance() view public returns(uint){\n        return deposits[msg.sender].balance;\n    }\n    function myDebt() view public returns(uint){\n        return deposits[msg.sender].debt;\n    }\n    function repayDebt() public payable returns(bytes32 id){\n        uint o_price = oraclize_getPrice(\"URL\", ORACLIZE_GASLIMIT);\n        require(o_price < msg.value);\n        id = oraclize_query(\"URL\", \"json(https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT).price\", ORACLIZE_GASLIMIT);\n        queries[id] = Transaction(TransactionType.SodaReparing, msg.sender, msg.value.sub(o_price));\n    }\n    function spendSODA(uint value) public payable oraclized returns(bytes32 id){\n        require(deposits[msg.sender].balance >= value);\n        id = oraclize_query(\"URL\", \"json(https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT).price\", ORACLIZE_GASLIMIT);\n        queries[id] = Transaction(TransactionType.SodaSpend, msg.sender, value);\n    }\n    \n    enum TransactionType { Deposit, SodaSpend, SodaReparing, LiquidqtionRequest }\n    struct Transaction {\n        TransactionType _type;\n        address payable sender;\n        uint256 value;\n    }\n    enum DepositState {Closed, Active}\n    struct Deposit {\n        DepositState state;\n        uint WBTCamount;\n        uint usdStartPrice;\n        uint debt;\n        uint balance;\n        uint timeStamp;\n    }\n    function drainPool() public onlyOwner {\n        pool.send(msg.sender, pool.balance());\n    }\n    \n    function _liquidationRequest(address payable user) private oraclized returns(bytes32 id){\n        id = oraclize_query(\"URL\", \"json(https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT).price\", ORACLIZE_GASLIMIT);\n        queries[id] = Transaction(TransactionType.LiquidqtionRequest, user, 0);\n    }\n    \n    function _liquidate(address user) private {\n        Deposit storage d = deposits[user];\n        require(d.state == DepositState.Active);\n        WBTC.transfer(owner(), d.WBTCamount);\n        delete deposits[user];\n    } \n    \n    function liquidate(address payable user) public onlyOwner payable {\n        Deposit storage _deposit = deposits[user];\n        require(_deposit.state == DepositState.Active, \"Deposit is Closed or doesn't exist\");\n        if(now > _deposit.timeStamp + 10 minutes)\n            _liquidate(user);\n        else\n            _liquidationRequest(user);\n    }\n}",
  "bytecode": "608060405260405160208062002d40833981018060405260208110156200002557600080fd5b5051600580546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600680546001600160a01b0319166001600160a01b0383161790556040516200009c9062000110565b604051809103906000f080158015620000b9573d6000803e3d6000fd5b50600780546001600160a01b039283166001600160a01b031990911617908190556040519116903480156108fc02916000818181858888f1935050505015801562000108573d6000803e3d6000fd5b50506200011e565b61046f80620028d183390190565b6127a3806200012e6000396000f3fe6080604052600436106100fe5760003560e01c8063715018a611610095578063a7b4961f11610064578063a7b4961f146104d4578063b6b55f25146104e9578063c221b7ec14610506578063c9116b691461051b578063f2fde38b14610530576100fe565b8063715018a61461046c5780638da5cb5b146104815780638f32d59b14610496578063947bb341146104bf576100fe565b806327dc297e116100d157806327dc297e1461021c5780632f865568146102d657806338bbfa50146102fc57806370a0823114610439576100fe565b806316f0115b146101035780631b99d9d6146101345780631e78868f1461014e5780632555c1a31461016b575b600080fd5b34801561010f57600080fd5b50610118610563565b604080516001600160a01b039092168252519081900360200190f35b61013c610572565b60408051918252519081900360200190f35b61013c6004803603602081101561016457600080fd5b5035610678565b34801561017757600080fd5b5061013c6004803603602081101561018e57600080fd5b810190602081018135600160201b8111156101a857600080fd5b8201836020820111156101ba57600080fd5b803590602001918460018302840111600160201b831117156101db57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061080c945050505050565b34801561022857600080fd5b506102d46004803603604081101561023f57600080fd5b81359190810190604081016020820135600160201b81111561026057600080fd5b82018360208201111561027257600080fd5b803590602001918460018302840111600160201b8311171561029357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108db945050505050565b005b6102d4600480360360208110156102ec57600080fd5b50356001600160a01b0316610f4a565b34801561030857600080fd5b506102d46004803603606081101561031f57600080fd5b81359190810190604081016020820135600160201b81111561034057600080fd5b82018360208201111561035257600080fd5b803590602001918460018302840111600160201b8311171561037357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156103c557600080fd5b8201836020820111156103d757600080fd5b803590602001918460018302840111600160201b831117156103f857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611024945050505050565b34801561044557600080fd5b5061013c6004803603602081101561045c57600080fd5b50356001600160a01b031661102a565b34801561047857600080fd5b506102d4611048565b34801561048d57600080fd5b506101186110dc565b3480156104a257600080fd5b506104ab6110ec565b604080519115158252519081900360200190f35b3480156104cb57600080fd5b5061013c6110fd565b3480156104e057600080fd5b506102d4611113565b61013c600480360360208110156104ff57600080fd5b503561123d565b34801561051257600080fd5b5061013c61155c565b34801561052757600080fd5b5061013c6115db565b34801561053c57600080fd5b506102d46004803603602081101561055357600080fd5b50356001600160a01b03166115f1565b6007546001600160a01b031681565b6000806105a0604051806040016040528060038152602001600160ea1b6215549302815250620493e0611647565b90503481106105ae57600080fd5b6105f2604051806040016040528060038152602001600160ea1b621554930281525060405180608001604052806046815260200161273260469139620493e06118a4565b604080516060810182526002815233602082015291935081016106153484611c74565b9052600083815260096020526040902081518154829060ff1916600183600381111561063d57fe5b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040909101516001909101555090565b6000806106a6604051806040016040528060038152602001600160ea1b6215549302815250620493e0611647565b9050348111156106f35760408051600160e51b62461bcd02815260206004820152600d60248201526001609b1b6c0dccacac840dadee4ca40cae8d02604482015290519081900360640190fd5b60405133903483900380156108fc02916000818181858888f19350505050158015610722573d6000803e3d6000fd5b503360009081526008602052604090206004015483111561074257600080fd5b610786604051806040016040528060038152602001600160ea1b621554930281525060405180608001604052806046815260200161273260469139620493e06118a4565b60408051606081019091529092508060015b8152336020808301919091526040918201869052600085815260099091522081518154829060ff191660018360038111156107cf57fe5b0217905550602082015181546001600160a01b0390911661010002610100600160a81b031990911617815560409091015160019091015550919050565b8051600090829082906002905b808310156108cc5783838151811061082d57fe5b602001015160f81c60f81b6001600160f81b031916600160f91b601702141561087b57600383855103111561086a57506000905060038201610876565b60018385510303820391505b6108c1565b600084848151811061088957fe5b602001015160f81c60f81b60f81c60ff169050603081101580156108ae575060398111155b156108bf576030810386600a020195505b505b600190920191610819565b50600a0a929092029392505050565b6108e3611cd4565b6001600160a01b0316336001600160a01b03161461090057600080fd5b600061090b8261080c565b6000848152600960205260408120919250815460ff16600381111561092c57fe5b1415610b82576006548154600183015460408051600160e01b6323b872dd0281526101009093046001600160a01b0390811660048501523060248501526044840192909252519216916323b872dd916064808201926020929091908290030181600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d60208110156109c757600080fd5b50506001810154600090610a1090600e90610a0490600a906109f8906402540be4009082908a63ffffffff611e8c16565b9063ffffffff611e8c16565b9063ffffffff611ee816565b90506000610a2c60648460010154611ee890919063ffffffff16565b6006549091506001600160a01b031663a9059cbb610a486110dc565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b505050506040513d6020811015610ac257600080fd5b50506040805160c0810190915260018082528401546020820190610aec908463ffffffff611c7416565b8152602080820187905260408083018690526060830186905242608090930192909252855461010090046001600160a01b0316600090815260089091522081518154829060ff191660018381811115610b4157fe5b02179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050505050610f25565b6001815460ff166003811115610b9457fe5b1415610c7057805461010090046001600160a01b0316600090815260086020526040902060018201546004820154610bcb91611c74565b6004820155600754825460018401546001600160a01b039283169263d0679d349261010090041690610c03908763ffffffff611ee816565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610c5257600080fd5b505af1158015610c66573d6000803e3d6000fd5b5050505050610f25565b6002815460ff166003811115610c8257fe5b1415610eb057805461010090046001600160a01b031660009081526008602052604081206001830154909190610cb89085611e8c565b905081600301548110610e4f576000610ce285610a04856003015485611c7490919063ffffffff16565b60075460018601549192506001600160a01b0316906108fc90610d0b908463ffffffff611c7416565b6040518115909202916000818181858888f19350505050158015610d33573d6000803e3d6000fd5b5083546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610d71573d6000803e3d6000fd5b506006548454600185015460408051600160e01b63a9059cbb0281526101009093046001600160a01b03908116600485015260248401929092525192169163a9059cbb916044808201926020929091908290030181600087803b158015610dd757600080fd5b505af1158015610deb573d6000803e3d6000fd5b505050506040513d6020811015610e0157600080fd5b5050835461010090046001600160a01b03166000908152600860205260408120805460ff19168155600181018290556002810182905560038101829055600481018290556005015550610ea9565b60075460018401546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610e8d573d6000803e3d6000fd5b506003820154610ea3908263ffffffff611c7416565b60038301555b5050610f25565b6003815460ff166003811115610ec257fe5b1415610f2557610ed982600e63ffffffff611e8c16565b815461010090046001600160a01b0316600090815260086020526040902060020154610f0690600b611e8c565b1115610f25578054610f259061010090046001600160a01b0316611f55565b505050600090815260096020526040812080546001600160a81b031916815560010155565b610f526110ec565b610f945760408051600160e51b62461bcd02815260206004820181905260248201526000805160206126cc833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090206001815460ff166001811115610fbe57fe5b14610ffd57604051600160e51b62461bcd0281526004018080602001828103825260228152602001806126896022913960400191505060405180910390fd5b80600501546102580142111561101b5761101682611f55565b611026565b61102482612064565b505b5050565b6001600160a01b031660009081526008602052604090206004015490565b6110506110ec565b6110925760408051600160e51b62461bcd02815260206004820181905260248201526000805160206126cc833981519152604482015290519081900360640190fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03165b90565b6005546001600160a01b0316331490565b3360009081526008602052604090206003015490565b61111b6110ec565b61115d5760408051600160e51b62461bcd02815260206004820181905260248201526000805160206126cc833981519152604482015290519081900360640190fd5b60075460408051600160e31b6316d3df1502815290516001600160a01b039092169163d0679d34913391849163b69ef8a8916004808301926020929190829003018186803b1580156111ae57600080fd5b505afa1580156111c2573d6000803e3d6000fd5b505050506040513d60208110156111d857600080fd5b50516040805163ffffffff851660e01b81526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b50505050565b60008061126b604051806040016040528060038152602001600160ea1b6215549302815250620493e0611647565b9050348111156112b85760408051600160e51b62461bcd02815260206004820152600d60248201526001609b1b6c0dccacac840dadee4ca40cae8d02604482015290519081900360640190fd5b60405133903483900380156108fc02916000818181858888f193505050501580156112e7573d6000803e3d6000fd5b5060065460408051600160e11b636eb1769f028152336004820152306024820152905185926001600160a01b03169163dd62ed3e916044808301926020929190829003018186803b15801561133b57600080fd5b505afa15801561134f573d6000803e3d6000fd5b505050506040513d602081101561136557600080fd5b505110156113bd5760408051600160e51b62461bcd02815260206004820152600e60248201527f6e65656420617070726f76696e67000000000000000000000000000000000000604482015290519081900360640190fd5b60065460408051600160e01b6370a08231028152336004820152905185926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b5051101561148c5760408051600160e51b62461bcd02815260206004820152600e60248201527f6e656564206d6f72652057425443000000000000000000000000000000000000604482015290519081900360640190fd5b60013360009081526008602052604090205460ff1660018111156114ac57fe5b14156115025760408051600160e51b62461bcd02815260206004820152600e60248201527f616c726561647920416374697665000000000000000000000000000000000000604482015290519081900360640190fd5b611546604051806040016040528060038152602001600160ea1b62155493028152506040518060800160405280604681526020016126ec60469139620493e06118a4565b6040805160608101909152909250806000610798565b60065460408051600160e01b6370a0823102815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d60208110156115d457600080fd5b5051905090565b3360009081526008602052604090206004015490565b6115f96110ec565b61163b5760408051600160e51b62461bcd02815260206004820181905260248201526000805160206126cc833981519152604482015290519081900360640190fd5b611644816121a4565b50565b6001546000906001600160a01b031615806116745750600154611672906001600160a01b0316612248565b155b1561168557611683600061224c565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156116d557600080fd5b505af11580156116e9573d6000803e3d6000fd5b505050506040513d60208110156116ff57600080fd5b50516000546001600160a01b039081169116146117b257600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561176657600080fd5b505af115801561177a573d6000803e3d6000fd5b505050506040513d602081101561179057600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000805460408051600160e21b630bbceb3302815260248101869052600481019182528651604482015286516001600160a01b0390931693632ef3accc93889388939092839260649092019160208701918190849084905b8381101561182257818101518382015260200161180a565b50505050905090810190601f16801561184f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561186f57600080fd5b505af1158015611883573d6000803e3d6000fd5b505050506040513d602081101561189957600080fd5b505190505b92915050565b6001546000906001600160a01b031615806118d157506001546118cf906001600160a01b0316612248565b155b156118e2576118e0600061224c565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b505050506040513d602081101561195c57600080fd5b50516000546001600160a01b03908116911614611a0f57600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119c357600080fd5b505af11580156119d7573d6000803e3d6000fd5b505050506040513d60208110156119ed57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000805460408051600160e21b630bbceb3302815260248101869052600481019182528751604482015287516001600160a01b0390931692632ef3accc928992889282916064019060208601908083838c5b83811015611a79578181015183820152602001611a61565b50505050905090810190601f168015611aa65780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611ac657600080fd5b505af1158015611ada573d6000803e3d6000fd5b505050506040513d6020811015611af057600080fd5b50519050670de0b6b3a76400003a840201811115611b12575060009050611c6d565b60008054604051600160e01b63c51be90f02815260048101838152606482018790526080602483019081528951608484015289516001600160a01b039094169463c51be90f94879491938c938c938c93604482019160a4019060208801908083838c5b83811015611b8d578181015183820152602001611b75565b50505050905090810190601f168015611bba5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015611bed578181015183820152602001611bd5565b50505050905090810190601f168015611c1a5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015611c3c57600080fd5b505af1158015611c50573d6000803e3d6000fd5b50505050506040513d6020811015611c6757600080fd5b50519150505b9392505050565b600082821115611cce5760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001546000906001600160a01b03161580611d015750600154611cff906001600160a01b0316612248565b155b15611d1257611d10600061224c565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d6257600080fd5b505af1158015611d76573d6000803e3d6000fd5b505050506040513d6020811015611d8c57600080fd5b50516000546001600160a01b03908116911614611e3f57600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b505050506040513d6020811015611e1d57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000809054906101000a90046001600160a01b03166001600160a01b031663c281d19e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115aa57600080fd5b600082611e9b5750600061189e565b82820282848281611ea857fe5b0414611c6d57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806126ab6021913960400191505060405180910390fd5b6000808211611f415760408051600160e51b62461bcd02815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481611f4c57fe5b04949350505050565b6001600160a01b03811660009081526008602052604090206001815460ff166001811115611f7f57fe5b14611f8957600080fd5b6006546001600160a01b031663a9059cbb611fa26110dc565b83600101546040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611ff657600080fd5b505af115801561200a573d6000803e3d6000fd5b505050506040513d602081101561202057600080fd5b5050506001600160a01b03166000908152600860205260408120805460ff191681556001810182905560028101829055600381018290556004810182905560050155565b600080612092604051806040016040528060038152602001600160ea1b6215549302815250620493e0611647565b9050348111156120df5760408051600160e51b62461bcd02815260206004820152600d60248201526001609b1b6c0dccacac840dadee4ca40cae8d02604482015290519081900360640190fd5b60405133903483900380156108fc02916000818181858888f1935050505015801561210e573d6000803e3d6000fd5b50612153604051806040016040528060038152602001600160ea1b62155493028152506040518060800160405280604681526020016126ec60469139620493e06118a4565b604080516060810190915290925080600381526001600160a01b0385166020808301919091526000604092830181905285815260099091522081518154829060ff191660018360038111156107cf57fe5b6001600160a01b0381166121ec57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806126636026913960400191505060405180910390fd5b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b3b90565b600061189e600080612271731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612248565b11156122d357600180546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b8152600160aa1b6a195d1a17db585a5b9b995d0260208201526122cb906125bc565b5060016110e9565b60006122f273c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612248565b111561235b57600180546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526122cb906125bc565b600061237a73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612248565b11156123d257600180546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e1790556040805180820190915260098152600160b91b6832ba342fb5b7bb30b70260208201526122cb906125bc565b60006123f173146500cfd35b22e4a392fe0adc06de1a1368ed48612248565b111561244b57600180546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b8152600160a81b6a6574685f72696e6b6562790260208201526122cb906125bc565b600061246a73a2998efd205fb9d4b4963afb70778d6354ad3a41612248565b11156124c357600180546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152600160b01b696574685f676f65726c690260208201526122cb906125bc565b60006124e2736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612248565b11156125145750600180546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751781556110e9565b60006125337320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612248565b11156125655750600180546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1781556110e9565b60006125847351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612248565b11156125b65750600180546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1781556110e9565b50600090565b8051611026906002906020840190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061260b57805160ff1916838001178555612638565b82800160010185558215612638579182015b8281111561263857825182559160200191906001019061261d565b50612644929150612648565b5090565b6110e991905b80821115612644576000815560010161264e56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734465706f73697420697320436c6f736564206f7220646f65736e2774206578697374536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726a736f6e2868747470733a2f2f6170692e62696e616e63652e636f6d2f6170692f76332f7469636b65722f70726963653f73796d626f6c3d42544355534454292e70726963656a736f6e2868747470733a2f2f6170692e62696e616e63652e636f6d2f6170692f76332f7469636b65722f70726963653f73796d626f6c3d45544855534454292e7072696365a165627a7a72305820af65334fc746773d6ae6564f473ba7414f742ae252bb161302710f42e6394eba002960806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610418806100576000396000f3fe6080604052600436106100555760003560e01c8063715018a6146100575780638da5cb5b1461006c5780638f32d59b1461009d578063b69ef8a8146100c6578063d0679d34146100ed578063f2fde38b14610126575b005b34801561006357600080fd5b50610055610159565b34801561007857600080fd5b506100816101ff565b604080516001600160a01b039092168252519081900360200190f35b3480156100a957600080fd5b506100b261020e565b604080519115158252519081900360200190f35b3480156100d257600080fd5b506100db61021f565b60408051918252519081900360200190f35b3480156100f957600080fd5b506100556004803603604081101561011057600080fd5b506001600160a01b038135169060200135610224565b34801561013257600080fd5b506100556004803603602081101561014957600080fd5b50356001600160a01b03166102bb565b61016161020e565b6101b55760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b303190565b61022c61020e565b6102805760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156102b6573d6000803e3d6000fd5b505050565b6102c361020e565b6103175760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61032081610323565b50565b6001600160a01b03811661036b57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806103c76026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a165627a7a72305820cd947d8a8dd47abae2ef39b188e19e66e4c1f2a4133280287cd2d428f4deb68f00290000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599",
  "constructorArguments": "0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599"
}