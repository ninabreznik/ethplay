{
  "address": "0x1218113304d8ffb12f4641ba7475975972381f8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HodlSale",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-27\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/HodlSale.sol\n\ncontract HodlSale is Claimable {\n    using SafeMath for uint256;\n\n    struct Sale {\n        uint startTime;\n        uint endTime;\n        uint minPurchase;\n        uint weiRaised;\n    }\n\n    struct Fees {\n        uint fund;\n        uint reward;\n        uint divisor;\n    }\n\n    struct Wallets {\n        address fund;\n        address fees;\n    }\n\n    uint public era;\n    Fees public fees;\n    Wallets public wallets;\n    mapping(uint => Sale) public sales;\n    mapping(address => uint) public balances;\n\n    event NewSale(uint era, uint startTime, uint endTime, uint minPurchase);\n    event NewFees(uint fund, uint reward, uint divisor);\n    event NewWallets(address fund, address fees);\n    event Purchase(uint indexed era, address indexed wallet, uint amount);\n    event Reward(address indexed affiliate, uint amount);\n    event Withdraw(address indexed wallet, uint amount);\n\n    function () public payable {\n        if (msg.value > 0) {\n            buy();\n        } else {\n            claim();\n        }\n    }\n\n    function buy() public payable {\n        buyWithReward(wallets.fees);\n    }\n\n    function buyWithReward(address affiliate) whenFunding public payable {\n        Sale storage sale = sales[era];\n        require(msg.value >= sale.minPurchase);\n\n        require(affiliate != msg.sender);\n        require(affiliate != address(this));\n\n        uint fee = msg.value.mul(fees.fund).div(fees.divisor);\n        uint reward = msg.value.mul(fees.reward).div(fees.divisor);\n        uint amount = msg.value.sub(fee).sub(reward);\n\n        balances[wallets.fees] = balances[wallets.fees].add(fee);\n        balances[affiliate] = balances[affiliate].add(reward);\n        balances[wallets.fund] = balances[wallets.fund].add(amount);\n\n        sale.weiRaised = sale.weiRaised.add(amount);\n\n        Purchase(era, msg.sender, amount);\n        Reward(affiliate, reward);\n    }\n\n    function claim() public {\n        if (msg.sender == wallets.fees || msg.sender == wallets.fund) require(!funding());\n        uint payment = balances[msg.sender];\n        require(payment > 0);\n        balances[msg.sender] = 0;\n        msg.sender.transfer(payment);\n        Withdraw(msg.sender, payment);\n    }\n\n    function funding() public view returns (bool) {\n        Sale storage sale = sales[era];\n        return now >= sale.startTime && now <= sale.endTime;\n    }\n\n    modifier whenFunding() {\n        require(funding());\n        _;\n    }\n\n    modifier whenNotFunding() {\n        require(!funding());\n        _;\n    }\n\n    function updateWallets(address _fund, address _fees) whenNotFunding onlyOwner public {\n        wallets = Wallets(_fund, _fees);\n        NewWallets(_fund, _fees);\n    }\n\n    function updateFees(uint _fund, uint _reward, uint _divisor) whenNotFunding onlyOwner public {\n        require(_divisor > _fund && _divisor > _reward);\n        fees = Fees(_fund, _reward, _divisor);\n        NewFees(_fund, _reward, _divisor);\n    }\n\n    function updateSale(uint _startTime, uint _endTime, uint _minPurchase) whenNotFunding onlyOwner public {\n        require(_startTime >= now && _endTime >= _startTime);\n        era = era.add(1);\n        sales[era] = Sale(_startTime, _endTime, _minPurchase, 0);\n        NewSale(era, _startTime, _endTime, _minPurchase);\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a0319909116179055610b47806100306000396000f3006060604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663143e55e08114610105578063224290851461012a57806327e235e3146101465780634e71d92d146101655780634e71e0c8146101705780636d1e1f8d146101835780638da5cb5b1461019f5780639af1d35a146101ce578063a6f2ae3a14610205578063b5f522f71461020d578063cb4c86b71461024e578063d2f4a50a14610275578063e30c3978146102ac578063e3e4001b146102bf578063e8ba854f146102d3578063f2fde38b146102f8575b60003411156100fb576100f6610317565b610103565b61010361032e565b005b341561011057600080fd5b61011861041d565b60405190815260200160405180910390f35b341561013557600080fd5b610103600435602435604435610423565b341561015157600080fd5b610118600160a060020a03600435166104ed565b34156100fb57600080fd5b341561017b57600080fd5b6101036104ff565b341561018e57600080fd5b61010360043560243560443561058d565b34156101aa57600080fd5b6101b2610699565b604051600160a060020a03909116815260200160405180910390f35b34156101d957600080fd5b6101e16106a8565b60405180848152602001838152602001828152602001935050505060405180910390f35b610103610317565b341561021857600080fd5b6102236004356106b4565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b341561025957600080fd5b6102616106db565b604051901515815260200160405180910390f35b341561028057600080fd5b610288610707565b604051600160a060020a039283168152911660208201526040908101905180910390f35b34156102b757600080fd5b6101b261071d565b610103600160a060020a036004351661072c565b34156102de57600080fd5b610103600160a060020a036004358116906024351661096c565b341561030357600080fd5b610103600160a060020a0360043516610a63565b60075461032c90600160a060020a031661072c565b565b60075460009033600160a060020a039081169116148061035c575060065433600160a060020a039081169116145b15610373576103696106db565b1561037357600080fd5b50600160a060020a03331660009081526009602052604081205490811161039957600080fd5b600160a060020a0333166000818152600960205260408082209190915582156108fc0290839051600060405180830381858888f1935050505015156103dd57600080fd5b33600160a060020a03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405190815260200160405180910390a250565b60025481565b61042b6106db565b1561043557600080fd5b60005433600160a060020a0390811691161461045057600080fd5b828111801561045e57508181115b151561046957600080fd5b60606040519081016040908152848252602082018490528101829052600381518155602082015181600101556040820151600290910155507fd92126fce513864d43a6814bcf059051f3b048a8a916d47328f66e3fc5d3b46283838360405180848152602001838152602001828152602001935050505060405180910390a1505050565b60096020526000908152604090205481565b60015433600160a060020a0390811691161461051a57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6105956106db565b1561059f57600080fd5b60005433600160a060020a039081169116146105ba57600080fd5b4283101580156105ca5750828210155b15156105d557600080fd5b6002546105e990600163ffffffff610aad16565b6002556080604051908101604090815284825260208083018590528183018490526000606084018190526002548152600890915220815181556020820151816001015560408201518160020155606082015181600301559050507fdcde835e0d0d8154385bd7166f84e53acfe8c72b267899b096ab283f07560fcc6002548484846040518085815260200184815260200183815260200182815260200194505050505060405180910390a1505050565b600054600160a060020a031681565b60035460045460055483565b60086020526000908152604090208054600182015460028301546003909301549192909184565b600254600090815260086020526040812080544210801590610701575080600101544211155b91505090565b600654600754600160a060020a03918216911682565b600154600160a060020a031681565b60008060008061073a6106db565b151561074557600080fd5b6002805460009081526008602052604090209081015490945034101561076a57600080fd5b33600160a060020a031685600160a060020a03161415151561078b57600080fd5b30600160a060020a031685600160a060020a0316141515156107ac57600080fd5b6005546003546107d491906107c890349063ffffffff610ac716565b9063ffffffff610af216565b6005546004549194506107f2916107c890349063ffffffff610ac716565b915061081482610808348663ffffffff610b0916565b9063ffffffff610b0916565b600754600160a060020a0316600090815260096020526040902054909150610842908463ffffffff610aad16565b600754600160a060020a03908116600090815260096020526040808220939093559087168152205461087a908363ffffffff610aad16565b600160a060020a0380871660009081526009602052604080822093909355600654909116815220546108b2908263ffffffff610aad16565b600654600160a060020a031660009081526009602052604090205560038401546108e2908263ffffffff610aad16565b6003850155600254600160a060020a033316907f9b9322562a425e363b0c2f80fc966e9c4f48ac3b5c2d1527d75829c8f505ec968360405190815260200160405180910390a384600160a060020a03167f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc98360405190815260200160405180910390a25050505050565b6109746106db565b1561097e57600080fd5b60005433600160a060020a0390811691161461099957600080fd5b60408051908101604052600160a060020a0380841682528216602082015260068151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151600191909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055507f9fe5e8687e6ef4fcdb52357066a709d870b711261f1ec1d95f6f32a44158ecc88282604051600160a060020a039283168152911660208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610a7e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610abc57fe5b8091505b5092915050565b600080831515610ada5760009150610ac0565b50828202828482811515610aea57fe5b0414610abc57fe5b6000808284811515610b0057fe5b04949350505050565b600082821115610b1557fe5b509003905600a165627a7a7230582031c1074c97b280a445ceea7ca5db17544c656524cee783de5aec632cf2fba9ac0029"
}