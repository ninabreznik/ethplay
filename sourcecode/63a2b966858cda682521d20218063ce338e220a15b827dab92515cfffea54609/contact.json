{
  "address": "0x9bd453c1a6c9211403f39b1b31c4d2f67697b663",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HOPEtoken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-30\n*/\n\n// Each person can be able to send <= 0.1 ETH and receive HT (Just received Only once).\n// 1ETH = 500000 HT\n\n// ABOUT HOPEToken\n// Being a coin will be widely used in the ecommerce industry.\n// Applied to blockchain technology will help it have fewer weaknesses and more strengths.\n\npragma solidity ^0.4.19;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract HOPEtoken {\n    // Public variables of the token\n    string public name = \"HOPEToken\";\n    string public symbol = \"HT\";\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public HTSupply = 198000000;\n    uint256 public buyPrice = 198000000;\n    address public creator;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function HOPEtoken() public {\n        totalSupply = HTSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    // Give all total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n      \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                   \n        uint amountRaised;                                     \n        amountRaised += msg.value;                            \n        require(balanceOf[creator] >= amount);               \n        require(msg.value <= 10**17);                        \n        balanceOf[msg.sender] += amount;                  \n        balanceOf[creator] -= amount;                        \n        Transfer(creator, msg.sender, amount);              \n        creator.transfer(amountRaised);\n    }\n\n }",
  "bytecode": "60606040526040805190810160405280600981526020017f484f5045546f6b656e00000000000000000000000000000000000000000000008152506000908051906020019061004f92919061017f565b506040805190810160405280600281526020017f48540000000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061017f565b506012600260006101000a81548160ff021916908360ff160217905550630bcd3d80600455630bcd3d8060055534156100d357600080fd5b600260009054906101000a900460ff1660ff16600a0a60045402600381905550600354600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610224565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c057805160ff19168380011785556101ee565b828001600101855582156101ee579182015b828111156101ed5782518255916020019190600101906101d2565b5b5090506101fb91906101ff565b5090565b61022191905b8082111561021d576000816000905550600101610205565b5090565b90565b6109ff806102336000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146102e357806306fdde031461033857806318160ddd146103c6578063313ce567146103ef578063372fc8d31461041e57806370a08231146104475780638620410b1461049457806395d89b41146104bd578063a9059cbb1461054b578063dd62ed3e1461058d575b6000806005543402915034810190508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561012357600080fd5b67016345785d8a0000341115151561013a57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156102df57600080fd5b5050005b34156102ee57600080fd5b6102f66105f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034357600080fd5b61034b61061f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038b578082015181840152602081019050610370565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103d157600080fd5b6103d96106bd565b6040518082815260200191505060405180910390f35b34156103fa57600080fd5b6104026106c3565b604051808260ff1660ff16815260200191505060405180910390f35b341561042957600080fd5b6104316106d6565b6040518082815260200191505060405180910390f35b341561045257600080fd5b61047e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106dc565b6040518082815260200191505060405180910390f35b341561049f57600080fd5b6104a76106f4565b6040518082815260200191505060405180910390f35b34156104c857600080fd5b6104d06106fa565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105105780820151818401526020810190506104f5565b50505050905090810190601f16801561053d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055657600080fd5b61058b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610798565b005b341561059857600080fd5b6105e3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107a7565b6040518082815260200191505060405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b55780601f1061068a576101008083540402835291602001916106b5565b820191906000526020600020905b81548152906001019060200180831161069857829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60045481565b60076020528060005260406000206000915090505481565b60055481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b505050505081565b6107a33383836107cc565b5050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156107f257600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084057600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156108cf57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a723058208758efe9b9473dce4d401fe16fc0b2cafdae288419600485a8c831b9418603df0029"
}