{
  "address": "0x68cdbc25bf061d91537b21926260b213fde14285",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ecoprotech",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n        return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    * @notice Renouncing to ownership will leave the contract without an owner.\n    * It will not be possible to call the functions with the `onlyOwner`\n    * modifier anymore.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    uint public totalSupply;\n\n    // ERC223 and ERC20 functions and events\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n    // ERC20 functions and events\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n\n/**\n * @title Ecoprotech\n * @dev Ecoprotech is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract Ecoprotech is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string public constant name = \"EXEES_TBD\";\n    string public constant symbol = \"EXE_TBD\";\n    uint8 public constant decimals = 8;\n    uint256 public constant totalSupply = 2000000000000 * 10 ** 8;\n    bool public locked = true;\n    address public marketor;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n    mapping(address => bool) public lockAccount;\n\n    event ToggleLocked(bool _locked);\n    event LockedAccount(address indexed _to);\n\n    /**\n     * @dev Constructor is called only once and can not be called again\n     */\n    constructor(address _owner, address _marketor1, address _marketor2) public {\n\n        marketor = _marketor1;                                     \n        address tokenSale = 0xbc9019f01acf8e508157ced0744168bf63e2ca50;              \n        address organization = 0x6400e8f9f71d3b4d886098b19520f40502c5bbb6;           \n        address advisor = 0x62148bd0cf4d44fa045130aa39c2fcd6e7b70a20;                \n        address developer = 0xed45f100028964156800e2a24116196cd767d78b;              \n        address team = 0x2ca0da7ae78179600d476f0de59b8d22fd865bdf;                   \n        address seedInvestors = 0x13596d3bf16852b07696e535cad877d0665a6756;          \n\n        initialize(tokenSale, 45);\n        initialize(_marketor1, 15);\n        initialize(_marketor2, 10);\n        initialize(organization, 8);\n        initialize(advisor, 7);\n        initialize(developer, 6);\n        initialize(team, 6);\n        initialize(seedInvestors, 3);\n\n        owner = _owner;\n   }\n\n    /**\n     * @dev allocate token to _address based on _ratio\n     * @param _address Address to initialize\n     * @param _ratio Ratio that is used to set the amount of token to _address\n     */\n    function initialize(address _address, uint256 _ratio) private {\n        uint256 tmpBalance = totalSupply.mul(_ratio).div(100);\n        balanceOf[_address] = tmpBalance;\n        emit Transfer(0x0, _address, tmpBalance);\n    }\n\n    // Check whether msg.sender can transfer token or not\n    modifier validTransfer() {\n        if (locked && lockAccount[msg.sender])\n            revert();\n        _;\n    }\n\n    /**\n     * @dev Toggle locked flag\n     */\n    function toggleLocked() public onlyOwner {\n        locked = !locked;\n        emit ToggleLocked(locked);\n    }\n\n    /**\n     * @dev set lock flag to address on the specific condition\n     * @param _from Address who transfer tokens\n     * @param _to Address who receive tokens\n     */\n    function setLockToAccount(address _from, address _to) private {\n        if (_from == marketor) {\n            lockAccount[_to] = true;\n            emit LockedAccount(_to);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer based on ERC223\n     */\n    function transfer(address _to, uint _value, bytes _data) public validTransfer returns (bool success) {\n        require(_value > 0 && _to != address(0));\n\n        setLockToAccount(msg.sender, _to);\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public validTransfer returns (bool success) {\n        require(_value > 0 && _to != address(0));\n\n        setLockToAccount(msg.sender, _to);\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public validTransfer returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balanceOf[_from] >= _value\n                && allowance[_from][msg.sender] >= _value);\n\n        setLockToAccount(msg.sender, _to);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916740100000000000000000000000000000000000000001790553480156200003857600080fd5b50604051606080620011568339810160409081528151602083015191909201516001805433600160a060020a03199182161790915560028054909116600160a060020a03841617905573bc9019f01acf8e508157ced0744168bf63e2ca50736400e8f9f71d3b4d886098b19520f40502c5bbb67362148bd0cf4d44fa045130aa39c2fcd6e7b70a2073ed45f100028964156800e2a24116196cd767d78b732ca0da7ae78179600d476f0de59b8d22fd865bdf7313596d3bf16852b07696e535cad877d0665a67566200011586602d640100000000620001df810204565b6200012b88600f640100000000620001df810204565b6200014187600a640100000000620001df810204565b62000157856008640100000000620001df810204565b6200016d846007640100000000620001df810204565b62000183836006640100000000620001df810204565b62000199826006640100000000620001df810204565b620001af816003640100000000620001df810204565b505060018054600160a060020a031916600160a060020a03989098169790971790965550620002c4945050505050565b60006200021f60646200020a680ad78ebc5ac62000008564010000000062000e186200027b82021704565b9064010000000062000e41620002ae82021704565b600160a060020a038416600081815260036020908152604080832085905580518581529051949550929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b60008215156200028e57506000620002a8565b508181028183828115156200029f57fe5b0414620002a857fe5b92915050565b60008183811515620002bc57fe5b049392505050565b610e8280620002d46000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301b1179281146100f557806306fdde031461010c578063095ea7b31461019657806318160ddd146101ce57806323b872dd146101f5578063313ce5671461021f57806347a64f441461024a57806370a082311461026b578063715018a61461028c57806384afb526146102a15780638da5cb5b146102d257806395d89b41146102e7578063a9059cbb146102fc578063be45fd6214610320578063cf30901214610389578063dd62ed3e1461039e578063f2fde38b146103c5575b600080fd5b34801561010157600080fd5b5061010a6103e6565b005b34801561011857600080fd5b5061012161046d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015b578181015183820152602001610143565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a257600080fd5b506101ba600160a060020a03600435166024356104a4565b604080519115158252519081900360200190f35b3480156101da57600080fd5b506101e361050b565b60408051918252519081900360200190f35b34801561020157600080fd5b506101ba600160a060020a0360043581169060243516604435610518565b34801561022b57600080fd5b506102346106db565b6040805160ff9092168252519081900360200190f35b34801561025657600080fd5b506101ba600160a060020a03600435166106e0565b34801561027757600080fd5b506101e3600160a060020a03600435166106f5565b34801561029857600080fd5b5061010a610707565b3480156102ad57600080fd5b506102b6610775565b60408051600160a060020a039092168252519081900360200190f35b3480156102de57600080fd5b506102b6610784565b3480156102f357600080fd5b50610121610793565b34801561030857600080fd5b506101ba600160a060020a03600435166024356107ca565b34801561032c57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ba948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108619650505050505050565b34801561039557600080fd5b506101ba6108ee565b3480156103aa57600080fd5b506101e3600160a060020a03600435811690602435166108fe565b3480156103d157600080fd5b5061010a600160a060020a0360043516610929565b600154600160a060020a031633146103fd57600080fd5b6001805460ff60a060020a808304821615810274ff00000000000000000000000000000000000000001990931692909217928390556040805192909304161515815290517f786a45976a3570b3a1f95d5d478aa243619f88740d1c83be307926c3085a9f909181900360200190a1565b60408051808201909152600981527f45584545535f5442440000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b680ad78ebc5ac620000081565b60015460009060a060020a900460ff16801561054357503360009081526005602052604090205460ff165b1561054d57600080fd5b600160a060020a038316158015906105655750600082115b80156105895750600160a060020a0384166000908152600360205260409020548211155b80156105b85750600160a060020a03841660009081526004602090815260408083203384529091529020548211155b15156105c357600080fd5b6105cd338461094c565b600160a060020a0384166000908152600360205260409020546105f6908363ffffffff6109b016565b600160a060020a03808616600090815260036020526040808220939093559085168152205461062b908363ffffffff6109c216565b600160a060020a03808516600090815260036020908152604080832094909455918716815260048252828120338252909152205461066f908363ffffffff6109b016565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b600881565b60056020526000908152604090205460ff1681565b60036020526000908152604090205481565b600154600160a060020a0316331461071e57600080fd5b600154604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26001805473ffffffffffffffffffffffffffffffffffffffff19169055565b600254600160a060020a031681565b600154600160a060020a031681565b60408051808201909152600781527f4558455f54424400000000000000000000000000000000000000000000000000602082015281565b60015460009060609060a060020a900460ff1680156107f857503360009081526005602052604090205460ff165b1561080257600080fd5b60008311801561081a5750600160a060020a03841615155b151561082557600080fd5b61082f338561094c565b610838846109cf565b1561084f576108488484836109d7565b915061085a565b610848848483610c2d565b5092915050565b60015460009060a060020a900460ff16801561088c57503360009081526005602052604090205460ff165b1561089657600080fd5b6000831180156108ae5750600160a060020a03841615155b15156108b957600080fd5b6108c3338561094c565b6108cc846109cf565b156108e3576108dc8484846109d7565b90506106d4565b6108dc848484610c2d565b60015460a060020a900460ff1681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600154600160a060020a0316331461094057600080fd5b61094981610d9a565b50565b600254600160a060020a03838116911614156109ac57600160a060020a038116600081815260056020526040808220805460ff19166001179055517f54a7afa83f64ebc23584f7fa3e238c2391531ae2a876345e0770c79d330403449190a25b5050565b6000828211156109bc57fe5b50900390565b8181018281101561050557fe5b6000903b1190565b3360009081526003602052604081205481908411156109f557600080fd5b33600090815260036020526040902054610a15908563ffffffff6109b016565b3360009081526003602052604080822092909255600160a060020a03871681522054610a47908563ffffffff6109c216565b600160a060020a03861660008181526003602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015610ae5578181015183820152602001610acd565b50505050905090810190601f168015610b125780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b3357600080fd5b505af1158015610b47573d6000803e3d6000fd5b50505050826040518082805190602001908083835b60208310610b7b5780518252601f199092019160209182019101610b5c565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518581529051600160a060020a0387169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b33600090815260036020526040812054831115610c4957600080fd5b33600090815260036020526040902054610c69908463ffffffff6109b016565b3360009081526003602052604080822092909255600160a060020a03861681522054610c9b908463ffffffff6109c216565b600160a060020a0385166000908152600360209081526040918290209290925551835184928291908401908083835b60208310610ce95780518252601f199092019160209182019101610cca565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529351939550600160a060020a038a16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518481529051600160a060020a0386169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019392505050565b600160a060020a0381161515610daf57600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515610e2957506000610505565b50818102818382811515610e3957fe5b041461050557fe5b60008183811515610e4e57fe5b0493925050505600a165627a7a72305820ed1faf16068195d319867bf545a83e12482e1b666ea4a16925d0b53098c96ecd0029000000000000000000000000e246a6c217174b4cd4c0988bf1bc1d7d824c46a10000000000000000000000004bed1dfa79183b0ea6b90abfdcbaf11a915c9abb0000000000000000000000001069a6ba89f2eb70573658645a63afe95b47dff7",
  "constructorArguments": "000000000000000000000000e246a6c217174b4cd4c0988bf1bc1d7d824c46a10000000000000000000000004bed1dfa79183b0ea6b90abfdcbaf11a915c9abb0000000000000000000000001069a6ba89f2eb70573658645a63afe95b47dff7"
}