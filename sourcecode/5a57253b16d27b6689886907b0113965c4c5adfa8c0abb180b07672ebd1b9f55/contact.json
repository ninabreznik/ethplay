{
  "address": "0xe367fe584adad878b9174ea4ddd8571878016811",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MobiusRandom",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "600",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-04\n*/\n\npragma solidity^0.4.24;\n\n/**\n                    RUSSIAN ROULETTE\n                   https://m2d.win/rr \n    \n    .................................. LAUGHING MAN sssyyhddmN..........................................\n    ..........................Nmdyyso+/:--.``` :`  `-`:--:/+ossyhdmN....................................\n    ......................Ndhyso/:.`   --.     o.  /+`o::` `` `-:+osyh..................................\n    ..................MNdyso/-` /-`/:+./:/..`  +.  //.o +.+::+ -`  `-/sshdN.............................\n    ................Ndyso:` ` --:+`o//.-:-```  ...  ``` - /::::/ +..-` ./osh............................\n    ..............Nhso/. .-.:/`o--:``   `..-:::oss+::--.``    .:/::/`+-`/../sydN........................\n    ............mhso-``-:+./:-:.   .-/+osssssssssssssssssso+:-`  -//o::+:/` .:oyhN......................\n    ..........Nhso:`  .+-./ `  .:+sssssso+//:-------:://+ossssso/---.`-`/:-o/ `:syd.....................\n    ........Mdyo- +/../`-`  ./osssso/-.`                 ``.:+ossss+:`  `-+`  ` `/sy....................\n    ......MNys/` -:-/:    -+ssss+-`                           `.:+ssss/.  `  -+-. .osh..................\n    ......mys-  :-/+-`  :osss+-`                                  .:osss+.  `//o:- `/syN................\n    ....Mdso. --:-/-  -osss+.                                       `-osss+`  :--://`-sy................\n    ....dso-. ++:+  `/sss+.                                           `:osss:  `:.-+  -sy...............\n    ..Mdso``+///.` .osss:                                               `/sss+`  :/-.. -syN.............\n    ..mss` `+::/  .ssso.                                                  :sss+` `+:/+  -syN............\n    ..ys-   ```  .ssso`                                                    -sss+` `:::+:`/sh............\n    Mds+ `:/..  `osso`                                                      -sss+  -:`.` `ssN...........\n    Mys. `/+::  +sss/........................................................+sss:.....-::+sy..NN.......\n    ds+  :-/-  .ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssyyhdN...\n    hs: `/+::   :/+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ossssyhNM\n    ss. `:::`                    ````                        ```                               ``-+sssyN\n    ss` /:-+` `o++:           .:+oooo+/.                 `-/ooooo+-`                               -sssy\n    ss  `:/:  `sss/          :ooo++/++os/`              .oso++/++oso.                               osss\n    ss``/:--  `sss/         ./.`      `.::              /-.`     ``-/`                             -sssy\n    ss.:::-:.  ssso         `            `                                                    ``.-+sssyN\n    hs:`:/:/.  /sss.   .++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++oossssyhNM\n    ds+ ``     .sss/   -ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssyyyyhmN...\n    Nss.:::::.  +sss.   +sss/........................................osss:...+sss:......../shmNNN.......\n    Mds+..-:::` `osso`  `+sss:                                     `+sss:   -sss+  .:-.` `ssN...........\n    ..ys- .+.::  .ssso`  `/sss+.                                  -osss:   -sss+` `:++-` /sh............\n    ..mss` .-.    .ssso.   :osss/`                              .+ssso.   :sss+` `.:+:` -syN............\n    ..Mdso`  `--:` .osss:   `/ssss/.`                        `-+ssso:`  `/sss+` `++.-. -syN.............\n    ....dso` -//+-` `/sss+.   ./ossso/-``                `.:+sssso:`  `:osss:  .::+/. -sy...............\n    ....Mdso. `-//-`  -osss+.   `-+ssssso+/:-.`````..-:/+osssso/.   `-osss+.` -///-  -sy................\n    ......mys- `/://.`  :osss+-`   `-/+osssssssssssssssssso+:.    .:osss+.  .:`..-``/syN................\n    ......MNys/` ..+-/:   -+ssss+-`    `.-://++oooo++/:-.`    `.:+ssss/.  .`      .osh..................\n    ........Mdyo- `::/.  `  ./osssso/-.`                 ``.:+ossss+:` `  .//`  `/sy....................\n    ..........Nhso-     :+:.`  .:+sssssso+//:--------://+ossssso/:.  `::/: --/.:syd.....................\n    ............mhso-` ./+--+-:    .-/+osssssssssssssssssso+/-.  .+` `//-/ `::oyhN......................\n    ..............Nhso/`   +/:--+.-`    `..-:::////::--.``    .`:/-o`  ./`./sydN........................\n    ................Ndys+:` ``--+++-  .:  `.``      `` -.`/:/`.o./::.  ./osh............................\n    ..................MNdyso/-` ` :`  +-  :+.o`s ::-/++`s`+/o.-:`  `-/sshdN.............................\n    ......................Ndhyso/:.` .+   +/:/ +:/-./:-`+: `` `.:+osyh..................................\n    ..........................Nmdyyso+/:--/.``      ``..-:/+ossyhdmN....................................\n    ..............................MN..dhhyyssssssssssssyyhddmN..........................................\n */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract DSA {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetOrcl (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSA  public  a;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setOrcl(DSA a_)\n        public\n        auth\n    {\n        a = a_;\n        emit LogSetOrcl(a);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (a == DSA(0)) {\n            return false;\n        } else {\n            return a.canCall(src, this, sig);\n        }\n    }\n}\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n    function getPrice(string _datasource) public returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _addr);\n}\n\n/*\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n// solium-disable security/no-inline-assembly\nlibrary Buffer {\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if(a > b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n     *      would exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n        if(data.length + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, data.length) * 2);\n        }\n\n        uint dest;\n        uint src;\n        uint len = data.length;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n            dest := add(add(bufptr, buflen), 32)\n            // Update buffer length\n            mstore(bufptr, add(buflen, mload(data)))\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, uint8 data) internal pure {\n        if(buf.buf.length + 1 > buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length)\n            let dest := add(add(bufptr, buflen), 32)\n            mstore8(dest, data)\n            // Update buffer length\n            mstore(bufptr, add(buflen, 1))\n        }\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        if(len + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n            let dest := add(add(bufptr, buflen), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length\n            mstore(bufptr, add(buflen, len))\n        }\n        return buf;\n    }\n}\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n        if(value <= 23) {\n            buf.append(uint8((major << 5) | value));\n        } else if(value <= 0xFF) {\n            buf.append(uint8((major << 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value <= 0xFFFF) {\n            buf.append(uint8((major << 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value <= 0xFFFFFFFF) {\n            buf.append(uint8((major << 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n            buf.append(uint8((major << 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\n        buf.append(uint8((major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\n        if(value >= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n\n/*\nEnd solidity-cborutils\n */\n\ncontract usingOraclize is DSAuth {\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            oraclize_setNetwork(networkID_auto);\n\n        if(address(oraclize) != OAR.getAddress())\n            oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        return oraclize_setNetwork();\n        // solium-disable security/no-unreachable-code\n        networkID;\n    }\n\n    function oraclize_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        \n        return false;\n    }\n\n    function oraclize_cbAddress() internal oraclizeAPI returns (address){\n        return oraclize.cbAddress();\n    }\n\n    function __callback(bytes32 myid, string result) public {\n        __callback(myid, result, new bytes(0));\n    }\n    \n    function __callback(bytes32 myid, string result, bytes proof) public;\n\n    function oraclize_getPrice(string datasource) internal oraclizeAPI returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) internal oraclizeAPI returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) internal oraclizeAPI returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) internal oraclizeAPI returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_setProof(byte proofP) internal oraclizeAPI {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) internal oraclizeAPI {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() internal oraclizeAPI returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) internal view returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    using CBOR for Buffer.buffer;\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeBytes(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string) {\n        return oraclize_network_name;\n    }\n\n    // solium-disable security/no-assign-params\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32) {\n        require((_nbytes > 0) && (_nbytes <= 32), \"Requested bytes out of range!\");\n        // Convert from seconds to ledger timer ticks\n        _delay *= 10;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            \n            mstore(unonce, 0x20)\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(caller, callvalue)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n        }\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    // New function with 0 delay\n    function oraclize_newRandomDSQuery(uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        require((_nbytes > 0) && (_nbytes <= 32), \"Requested bytes out of range!\");\n        // Convert from seconds to ledger timer ticks\n        \n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            // Slightly different commitment\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(caller, callvalue)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        \n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n\n        bytes32 sigr;\n        bytes32 sigs;\n\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(keccak256(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(keccak256(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = byte(1); //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n        if (sigok == false) return false;\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        // solium-disable max-len\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n        return sigok;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n\n        _;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n        bool match_ = true;\n\n        require(prefix.length == n_random_bytes);\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n            if (content[i] != prefix[i]) match_ = false;\n        }\n\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(context_name, queryId)))))) return false;\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n        uint minLength = length + toOffset;\n\n        // Buffer too small\n        require(to.length >= minLength); // Should be a better way?\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n\n}\n// </ORACLIZE_API>\n\ncontract UsingOraclizeRandom is usingOraclize {\n    uint public oraclizeCallbackGas = 200000;\n    uint public oraclizeGasPrice = 20000000000; //20 gwei\n\n    constructor() public {\n        a = DSA(0xdbf98a75f521Cb1BD421c03F2b6A6a617f4240F1);\n    }\n\n    // function _requestRandom(uint delay) internal returns(bytes32 qID);\n\n    // function _onRandom(uint _rand, bytes32 _queryId) internal;\n\n    // function _onRandomFailed(bytes32 _queryId) internal;\n\n    function setOraclizeGasLimit(uint _newLimit) public auth {\n        oraclizeCallbackGas = _newLimit;\n    }\n\n    function setOraclizeGasPrice(uint _newGasPrice) public auth {\n        oraclizeGasPrice = _newGasPrice;\n        oraclize_setCustomGasPrice(_newGasPrice);\n    }\n\n}\n\ninterface MobiusToken {\n    function disburseDividends() external payable;\n    function approve(address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ncontract MobiusRandom is UsingOraclizeRandom, DSMath {\n    \n    // Constants\n    uint24 constant public SECONDAY_MODULO = 1000000;// 1 million\n    uint16 constant public MAX_UNDER2 = 150;\n    uint constant public BET_EXPIRY = 6 hours;\n    uint constant public HOUSE_EDGE_DIVISOR = 70; //1.43% in Mobius mode\n    uint constant public HOUSE_EDGE_DIVISOR_CLASSIC = 125;//0.8% in classic mode\n    uint constant public SECONDARY_JACKPOT_DIVISOR = 400;//0.25% in Mobius mode, only if you are eligible for the jackpot\n    uint constant public UNLUCK_RATE = 1 * WAD / 6 hours;   // 1 level decline per 6 hours\n    MobiusToken constant public TOKEN = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC);\n    \n    // Accounting\n    uint public pendingBets;\n    uint public secondaryPot;\n\n    // Other parameters - note that these can be changed\n    uint public minHouse = 0.4 finney;\n    uint public minHouseClassic = 1.5 finney;\n    uint public minSecondaryAmount = 100 finney;\n    uint public maxProfit = 2 ether;\n    uint public luckPrice = 10 * WAD;   // 10 tokens per level\n\n    // Stats:\n    uint public dividendsPaid;\n\n    struct Bet {\n        uint props;\n        address player;\n    }\n\n    mapping(bytes32 => Bet) public bets;\n    mapping(address => uint) public luck;\n\n    event BetPlaced(bytes32 queryId, address indexed player, uint props);\n    event BetFinalized(bytes32 queryId, address indexed player, uint props, uint amountToSend);\n    event SecondaryJackpotWon(bytes32 queryId, address indexed player, uint amount);\n    event FailedPayment(bytes32 queryId, uint amount);\n    event RefundAttempt(bytes32 queryId);\n    event RandomFailed(bytes32 queryId);\n\n    constructor() public {\n        \n    }\n\n    function () public payable {\n        // used to top up bankroll\n    }\n\n    function placeBet(uint16 modulo, uint16 rollUnder, bool classic) external payable {\n        bytes32 queryId = oraclize_newRandomDSQuery(32, oraclizeCallbackGas);\n        address player = msg.sender;\n        uint128 amount = uint128(msg.value);\n        uint props;\n        // Props is a single storage variable that stores multiple properties of the bet to save gas:\n        // | amount (128 bits) | timestamp (64 bits) | modulo (16 bits) | roll under (16 bits)| roll under 2 (16 bits) | classic (16bits) |\n        require(_getBetAmount(queryId) == 0, \"Invalid query ID!\");\n        \n        // Set storage\n        Bet storage newBet = bets[queryId];\n        newBet.player = player;\n        props = amount;\n        props = props << 64;\n        // solium-disable security/no-block-members\n        props |= uint64(now);        \n        props = props << 16;\n        props |= modulo;\n        props = props << 16;\n        props |= rollUnder;\n        props = props << 16; \n\n        uint win;\n        uint jackpotFee;\n        (win,jackpotFee) = _winAmount(amount, modulo, rollUnder, classic);\n        require(win <= amount + maxProfit, \"Potential profit exceeds maximum!\");\n\n        if(!classic) {\n            if(amount >= minSecondaryAmount) {\n                uint lucky = getLuck(player);\n                props |= uint16(min(MAX_UNDER2, 1 + (lucky * 25) / WAD));\n                secondaryPot += jackpotFee;\n            }\n            // if you play in Mobius mode, any bet you place tops up your luck, \n            // even if you aren't eligible for the jackpot\n            _addLuck(player, amount);\n        }\n        props = props << 16;\n        props |= uint16(classic ? 1 : 0);\n        newBet.props = props;\n\n        pendingBets += win;\n\n        require(secondaryPot + pendingBets <= address(this).balance, \"Can't cover bet!\");\n        emit BetPlaced(queryId, player, props);\n    }\n\n    function topUpLuck(uint level) external {\n        address player = msg.sender;\n        require(level <= 4 * WAD, \"Can't top up more than 4 levels!\");\n        require(TOKEN.transferFrom(player, address(this), wmul(level, luckPrice)), \"Token transfer failed!\");\n        _addLuck(player, level);\n    }\n\n    function refundExpiredBet(bytes32 queryId) external {\n\n        require(_getBetTimestamp(queryId) + BET_EXPIRY < now, \"Bet not expired!\");\n        require(_getBetAmount(queryId) > 0, \"Bet invalid!\");\n\n        _processRefund(queryId);\n    }\n\n    /// Dev only functions\n\n    function initOraclize() external auth {\n        oraclizeCallbackGas = 200000;\n        if(oraclize_setNetwork()){\n            oraclize_setProof(proofType_Ledger);\n        }\n    }\n\n    function setMinHouse(uint newValue) external auth {\n        minHouse = newValue;\n    }\n    \n    function setMinHouseClassic(uint newValue) external auth {\n        minHouseClassic = newValue;\n    }\n\n    function setMinSecondaryAmount(uint newValue) external auth {\n        minSecondaryAmount = newValue;\n    }\n\n    function setLuckPrice(uint newValue) external auth {\n        luckPrice = newValue;\n    }\n\n    function setMaxProfit(uint newValue) external auth {\n        maxProfit = newValue;\n    }\n\n    function destroy() external auth {\n        // Only check if there are less than 0.1 ETH pending bets, to allow for some rounding errors and\n        // discrepancies from changing min house profit.\n        require (pendingBets < 100 finney, \"There are pending bets!\");\n        selfdestruct(msg.sender);\n    }\n\n    function feedSecondaryPot(uint amount) external auth {\n        require (amount <= address(this).balance, \"Nonsense amount!\");\n        require (secondaryPot + pendingBets + amount <= address(this).balance, \"Can't use what you don't own!\");\n        secondaryPot += amount;\n    }\n\n    function withdraw(uint amount) external auth {\n        require (amount <= address(this).balance, \"Nonsense amount!\"); // do this check to make sure we don't overflow\n        require (secondaryPot + pendingBets + amount <= address(this).balance, \"Can't withdraw what you don't own!\");\n        msg.sender.transfer(amount);\n    }\n\n    function withdrawTokens(address to, uint amount) external auth {\n        require(TOKEN.transfer(to, amount), \"Token transfer failed!\");\n    }\n\n    function disburseDividends(uint amount) external auth {\n        require (amount <= address(this).balance, \"Nonsense amount!\"); // do this check to make sure we don't overflow\n        require (secondaryPot + pendingBets + amount <= address(this).balance, \"Can't send what you don't own!\");\n        TOKEN.disburseDividends.value(amount)();\n        dividendsPaid += amount;\n    }\n\n    /// Oraclize callback function\n    function __callback(bytes32 _queryId, string _result, bytes _proof) public {\n        \n        require(msg.sender == oraclize_cbAddress(), \"You can't do that!\");\n        \n        if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {\n            _onRandomFailed(_queryId);\n        } else {\n            uint randomNumber = uint(keccak256(abi.encode(_result)));\n            _onRandom(randomNumber, _queryId);\n        }\n    }\n\n    function getLuck(address player) public view returns(uint) {\n        uint lastTime;\n        uint lastLvl;\n        (lastLvl, lastTime) = getLuckProps(player);\n        uint elapsed = (now - lastTime) * UNLUCK_RATE;\n        if(lastLvl > elapsed) {\n            return lastLvl - elapsed;\n        } else {\n            return 0;\n        }\n    }\n\n    function getContractProps() public view \n    returns(\n        uint secondaryPot_,\n        uint minHouseEdge,\n        uint minHouseEdgeClassic,\n        uint maxProfit_,\n        uint luckPrice_\n    ) {\n        secondaryPot_ = secondaryPot;\n        minHouseEdge = _minHouseEdge();\n        minHouseEdgeClassic = _minHouseEdgeClassic();\n        maxProfit_ = maxProfit;\n        luckPrice_ = luckPrice;\n    }\n\n    function getBetProps(bytes32 queryId) public view \n    returns(\n        uint128 amount,\n        uint64 time,\n        uint16 modulo,\n        uint16 rollUnder,\n        uint16 rollUnder2,\n        bool classicMode\n    ) {\n        uint props = bets[queryId].props;\n        return decodeProps(props);\n    }\n\n    function decodeProps(uint props) public pure \n    returns(\n        uint128 amount,\n        uint64 time,\n        uint16 modulo,\n        uint16 rollUnder,\n        uint16 rollUnder2,\n        bool classicMode\n    ) {\n        classicMode = uint16(props) == 1 ? true : false;\n        rollUnder2 = uint16(props >> 16);\n        rollUnder = uint16(props >> 32);\n        modulo = uint16(props >> 48);\n        time = uint64(props >> 64);\n        amount = uint128(props >> 128);\n    }\n\n    function getLuckProps(address player) public view returns(uint128 lastLevel, uint64 lastToppedUp) {\n        uint props = luck[player];\n        // Luck is another single storage variable that stores two effective values\n        // | Level (128 bits) | last topped up timestamp (64 bits) |\n        lastToppedUp = uint64(props);\n        lastLevel = uint128(props >> 64);\n    }\n\n    /// Internal Functions\n\n    function _addLuck(address player, uint amount) internal {\n        // Luck can be level 5 at most\n        uint props = min(getLuck(player) + amount, 5 * WAD);\n        props = props << 64;\n        props |= uint64(now);\n        luck[player] = props;\n    }\n\n    function _onRandom(uint _rand, bytes32 queryId) internal {\n        Bet storage bet = bets[queryId];\n        address player = bet.player;\n        uint props = bet.props;\n        uint128 amount;\n        uint64 time;\n        uint16 modulo;\n        uint16 rollUnder;\n        uint16 rollUnder2;\n        bool classicMode;\n\n        (amount, time, modulo, rollUnder, rollUnder2, classicMode) = decodeProps(props);\n\n        require(time + BET_EXPIRY >= now, \"Bet already expired\");\n        require(amount > 0, \"Invalid query ID!\");\n        \n        uint win; // Potential win\n        uint won; // Actually won\n        (win,) = _winAmount(amount, modulo, rollUnder, classicMode);\n\n        if(uint16(_rand) % modulo < rollUnder) {\n            won += win;\n        }\n\n        if(!classicMode) {\n            if(amount >= minSecondaryAmount) {           \n                if(uint16(_rand >> 16) % SECONDAY_MODULO < rollUnder2) {\n                    won += secondaryPot / 2;\n                    secondaryPot /= 2;\n                    emit SecondaryJackpotWon(queryId, player, secondaryPot);\n                }\n            }\n        }\n\n        _finalizeBet(queryId, player, props, won);\n\n        // Since we can change the min house profit while there are pending bets,\n        // there's a small chance of an underflow, so check if that's the case here\n        if(pendingBets >= win) {\n            pendingBets -= win;\n        } else {\n            pendingBets = 0;\n        }\n    }\n\n    function _finalizeBet(bytes32 queryId, address player, uint props, uint amountToSend) internal {\n        uint _props = props << 128;\n        bets[queryId].props = _props >> 128;\n        if(amountToSend > 0) {\n            // solium-disable security/no-send\n            if(!player.send(amountToSend)) {\n                emit FailedPayment(queryId, amountToSend);\n            }            \n        }\n        emit BetFinalized(queryId, player, props, amountToSend);\n    }\n\n    function _processRefund(bytes32 queryId) internal {    \n        emit RefundAttempt(queryId); \n        uint props = bets[queryId].props;\n        uint128 amount;\n        uint16 modulo;\n        uint16 rollUnder;\n        bool classicMode;\n\n        (amount, , modulo, rollUnder, , classicMode) = decodeProps(props);\n\n        uint win;\n        (win,) = _winAmount(amount, modulo, rollUnder, classicMode);\n\n        _finalizeBet(queryId, bets[queryId].player, props, amount);// refund full bet amount\n        \n        // And here\n        if(pendingBets >= win) {\n            pendingBets -= win;\n        } else {\n            pendingBets = 0;\n        }\n    }\n\n    function _onRandomFailed(bytes32 queryId) internal {\n        emit RandomFailed(queryId);\n        _processRefund(queryId);\n    }\n\n    function _winAmount(uint128 betSize, uint16 modulo, uint16 rollUnder, bool classic) \n    internal \n    view \n    returns(uint reward, uint secondaryJackpotFee){\n        require(rollUnder > 0 && rollUnder <= modulo, \"Nonsense bet!\");\n       \n        uint houseEdge;\n        if(!classic) {\n            houseEdge = max(betSize / HOUSE_EDGE_DIVISOR, _minHouseEdge());\n            if(betSize >= minSecondaryAmount){\n                secondaryJackpotFee = betSize / SECONDARY_JACKPOT_DIVISOR;\n            }            \n        } else {\n            houseEdge = max(betSize / HOUSE_EDGE_DIVISOR_CLASSIC, _minHouseEdgeClassic());\n        }\n\n        reward = (betSize - houseEdge - secondaryJackpotFee) * modulo / rollUnder;\n        require(betSize >= houseEdge + secondaryJackpotFee, \"Bet doesn't cover minimum fee!\");\n    }\n\n    function _minHouseEdge() internal view returns(uint) {\n        return oraclizeGasPrice * oraclizeCallbackGas + minHouse;\n    }\n\n    function _minHouseEdgeClassic() internal view returns(uint) {\n        return oraclizeGasPrice * oraclizeCallbackGas + minHouseClassic;\n    }\n\n    function _getBetAmount(bytes32 queryId) internal view returns(uint128 amount) {\n        uint props = bets[queryId].props;\n        amount = uint128(props >> 128);\n    }\n\n    function _getBetTimestamp(bytes32 queryId) internal view returns(uint64 timestamp) {\n        uint props = bets[queryId].props;\n        timestamp = uint64(props >> 64);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"refundExpiredBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSecondaryAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UNDER2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHouseClassic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initOraclize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLUCK_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disburseDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinHouseClassic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinSecondaryAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BET_EXPIRY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclizeCallbackGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDARY_JACKPOT_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractProps\",\"outputs\":[{\"name\":\"secondaryPot_\",\"type\":\"uint256\"},{\"name\":\"minHouseEdge\",\"type\":\"uint256\"},{\"name\":\"minHouseEdgeClassic\",\"type\":\"uint256\"},{\"name\":\"maxProfit_\",\"type\":\"uint256\"},{\"name\":\"luckPrice_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"getBetProps\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint128\"},{\"name\":\"time\",\"type\":\"uint64\"},{\"name\":\"modulo\",\"type\":\"uint16\"},{\"name\":\"rollUnder\",\"type\":\"uint16\"},{\"name\":\"rollUnder2\",\"type\":\"uint16\"},{\"name\":\"classicMode\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGasPrice\",\"type\":\"uint256\"}],\"name\":\"setOraclizeGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOraclizeGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"luck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLuckPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getLuckProps\",\"outputs\":[{\"name\":\"lastLevel\",\"type\":\"uint128\"},{\"name\":\"lastToppedUp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feedSecondaryPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDAY_MODULO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_\",\"type\":\"address\"}],\"name\":\"setOrcl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_DIVISOR_CLASSIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"props\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"modulo\",\"type\":\"uint16\"},{\"name\":\"rollUnder\",\"type\":\"uint16\"},{\"name\":\"classic\",\"type\":\"bool\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getLuck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclizeGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"props\",\"type\":\"uint256\"}],\"name\":\"decodeProps\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint128\"},{\"name\":\"time\",\"type\":\"uint64\"},{\"name\":\"modulo\",\"type\":\"uint16\"},{\"name\":\"rollUnder\",\"type\":\"uint16\"},{\"name\":\"rollUnder2\",\"type\":\"uint16\"},{\"name\":\"classicMode\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"topUpLuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountToSend\",\"type\":\"uint256\"}],\"name\":\"BetFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SecondaryJackpotWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"RefundAttempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"RandomFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetOrcl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
  "bytecode": "608060405262030d406007556404a817c80060085566016bcc41e90000600b556605543df729c000600c5567016345785d8a0000600d55671bc16d674ec80000600e55678ac7230489e80000600f5534801561005a57600080fd5b5060018054600160a060020a031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a260008054600160a060020a03191673dbf98a75f521cb1bd421c03f2b6a6a617f4240f1179055614a36806100ce6000396000f3006080604052600436106102215763ffffffff60e060020a60003504166302581cde8114610223578063025998101461023b57806306b091f9146102625780630d605c58146102865780630dbe671f146102b257806313af4035146102e35780631465a913146103045780631619fc14146103195780631aeab3141461032e57806327dc297e146103435780632e1a7d4d1461039e5780633037e694146103b657806338bbfa50146103ce5780633b3571f1146104695780633bf88187146104815780633fb7adb114610496578063424e418f146104ab5780634749d25b146104c35780634f0eaf96146104d8578063581a81c1146104ed5780636285261614610505578063637f08631461051a578063649d56db1461052f5780636c4d7c591461057657806371c82c14146105ec57806382bfefc81461060457806383197ef0146106195780638da5cb5b1461062e5780638ddf792b14610643578063904c45b51461065b5780639caaa1541461067c578063a68e27b714610694578063a702be14146106ea578063aaa31ff914610702578063b539cd551461072f578063c40be49514610744578063c8d47bea14610765578063c902c3ae1461077a578063c9a1d88b146107b3578063cbd3b403146107cd578063ccf7ecd1146107ee578063ce50740114610803578063cebb498914610818578063d17e48891461082d578063e9b32a3f14610845578063f02286c11461085a578063fbd668a914610872575b005b34801561022f57600080fd5b5061022160043561088a565b34801561024757600080fd5b50610250610973565b60405190815260200160405180910390f35b34801561026e57600080fd5b50610221600160a060020a0360043516602435610979565b34801561029257600080fd5b5061029b610a8e565b60405161ffff909116815260200160405180910390f35b3480156102be57600080fd5b506102c7610a93565b604051600160a060020a03909116815260200160405180910390f35b3480156102ef57600080fd5b50610221600160a060020a0360043516610aa2565b34801561031057600080fd5b50610250610b27565b34801561032557600080fd5b50610221610b2d565b34801561033a57600080fd5b50610250610b93565b34801561034f57600080fd5b506102216004803590369060446024803590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949750610b9d9650505050505050565b3480156103aa57600080fd5b50610221600435610bd7565b3480156103c257600080fd5b50610221600435610d0b565b3480156103da57600080fd5b506102216004803590369060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509497969560208082019650903587018082019550359350839250601f830181900481020190506040519081016040528181529291906020840183838082843750949750610e599650505050505050565b34801561047557600080fd5b50610221600435610fd1565b34801561048d57600080fd5b50610250610ffd565b3480156104a257600080fd5b50610250611003565b3480156104b757600080fd5b50610221600435611009565b3480156104cf57600080fd5b50610250611035565b3480156104e457600080fd5b5061025061103b565b3480156104f957600080fd5b50610221600435611041565b34801561051157600080fd5b5061025061106d565b34801561052657600080fd5b50610250611073565b34801561053b57600080fd5b50610544611079565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561058257600080fd5b5061058e6004356110a6565b6040516fffffffffffffffffffffffffffffffff909616865267ffffffffffffffff909416602086015261ffff9283166040808701919091529183166060860152909116608084015290151560a083015260c0909101905180910390f35b3480156105f857600080fd5b506102216004356110db565b34801561061057600080fd5b506102c7611110565b34801561062557600080fd5b50610221611128565b34801561063a57600080fd5b506102c76111b2565b34801561064f57600080fd5b506102216004356111c1565b34801561066757600080fd5b50610250600160a060020a03600435166111ed565b34801561068857600080fd5b50610221600435611201565b3480156106a057600080fd5b506106b5600160a060020a036004351661122d565b6040516fffffffffffffffffffffffffffffffff909216825267ffffffffffffffff1660208201526040908101905180910390f35b3480156106f657600080fd5b5061022160043561125e565b34801561070e57600080fd5b50610717611349565b60405162ffffff909116815260200160405180910390f35b34801561073b57600080fd5b50610250611350565b34801561075057600080fd5b50610221600160a060020a0360043516611356565b34801561077157600080fd5b506102506113db565b34801561078657600080fd5b506107926004356113e0565b604051918252600160a060020a031660208201526040908101905180910390f35b61022161ffff600435811690602435166044351515611405565b3480156107d957600080fd5b50610250600160a060020a0360043516611708565b3480156107fa57600080fd5b50610250611763565b34801561080f57600080fd5b50610250611769565b34801561082457600080fd5b5061025061176f565b34801561083957600080fd5b5061058e600435611775565b34801561085157600080fd5b506102506117dc565b34801561086657600080fd5b506102216004356117e1565b34801561087e57600080fd5b50610221600435611956565b4261546061089783611982565b67ffffffffffffffff1601106108f65760405160e560020a62461bcd02815260206004820152601060248201527f426574206e6f7420657870697265642100000000000000000000000000000000604482015260640160405180910390fd5b6000610901826119a5565b6fffffffffffffffffffffffffffffffff16116109675760405160e560020a62461bcd02815260206004820152600c60248201527f42657420696e76616c6964210000000000000000000000000000000000000000604482015260640160405180910390fd5b610970816119d0565b50565b600d5481565b610995336000356000805160206149eb83398151915216611aa5565b15156109a057600080fd5b7354cdc9d889c28f55f59f6b136822868c7d4726fc63a9059cbb838360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b505050506040513d6020811015610a2a57600080fd5b81019080805115159250610a8a9150505760405160e560020a62461bcd02815260206004820152601660248201527f546f6b656e207472616e73666572206661696c65642100000000000000000000604482015260640160405180910390fd5b5050565b609681565b600054600160a060020a031681565b610abe336000356000805160206149eb83398151915216611aa5565b1515610ac957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600c5481565b610b49336000356000805160206149eb83398151915216611aa5565b1515610b5457600080fd5b62030d40600755610b63611bac565b15610b9157610b917f3000000000000000000000000000000000000000000000000000000000000000611ce4565b565b652a1b324b8f6881565b610a8a82826000604051818152601f19601f8301168101602001604052908015610bd1578160200160208202803883390190505b50610e59565b610bf3336000356000805160206149eb83398151915216611aa5565b1515610bfe57600080fd5b3031811115610c565760405160e560020a62461bcd02815260206004820152601060248201527f4e6f6e73656e736520616d6f756e742100000000000000000000000000000000604482015260640160405180910390fd5b600954600a543031910182011115610cdd5760405160e560020a62461bcd02815260206004820152602260248201527f43616e2774207769746864726177207768617420796f7520646f6e2774206f7760448201527f6e21000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b3381156108fc0282604051600060405180830381858888f19350505050158015610a8a573d6000803e3d6000fd5b610d27336000356000805160206149eb83398151915216611aa5565b1515610d3257600080fd5b3031811115610d8a5760405160e560020a62461bcd02815260206004820152601060248201527f4e6f6e73656e736520616d6f756e742100000000000000000000000000000000604482015260640160405180910390fd5b600954600a543031910182011115610deb5760405160e560020a62461bcd02815260206004820152601e60248201527f43616e27742073656e64207768617420796f7520646f6e2774206f776e210000604482015260640160405180910390fd5b7354cdc9d889c28f55f59f6b136822868c7d4726fc6336ef1abb826040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b505060108054909401909355505050565b6000610e63611ecf565b600160a060020a03163314610ec15760405160e560020a62461bcd02815260206004820152601260248201527f596f752063616e277420646f2074686174210000000000000000000000000000604482015260640160405180910390fd5b610ecc8484846120b0565b60ff1615610ee257610edd8461220a565b610fcb565b826040516020018080602001828103825283818151815260200191508051906020019080838360005b83811015610f23578082015183820152602001610f0b565b50505050905090810190601f168015610f505780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b60208310610f935780518252601f199092019160209182019101610f74565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390209050610fcb8185612246565b50505050565b610fed336000356000805160206149eb83398151915216611aa5565b1515610ff857600080fd5b600c55565b60095481565b600b5481565b611025336000356000805160206149eb83398151915216611aa5565b151561103057600080fd5b600d55565b61546081565b60075481565b61105d336000356000805160206149eb83398151915216611aa5565b151561106857600080fd5b600b55565b600a5481565b61019081565b600a546000808080611089612488565b9350611093612496565b9250600e549150600f5490509091929394565b60008181526011602052808080808080604081205490506110c681611775565b949d939c50919a509850965090945092505050565b6110f7336000356000805160206149eb83398151915216611aa5565b151561110257600080fd5b6008819055610970816124a4565b7354cdc9d889c28f55f59f6b136822868c7d4726fc81565b611144336000356000805160206149eb83398151915216611aa5565b151561114f57600080fd5b60095467016345785d8a0000116111af5760405160e560020a62461bcd02815260206004820152601760248201527f5468657265206172652070656e64696e67206265747321000000000000000000604482015260640160405180910390fd5b33ff5b600154600160a060020a031681565b6111dd336000356000805160206149eb83398151915216611aa5565b15156111e857600080fd5b600755565b601260205280600052604060002054905081565b61121d336000356000805160206149eb83398151915216611aa5565b151561122857600080fd5b600f55565b600160a060020a03811660009081526012602052808060408120546801000000000000000081049590945092505050565b61127a336000356000805160206149eb83398151915216611aa5565b151561128557600080fd5b30318111156112dd5760405160e560020a62461bcd02815260206004820152601060248201527f4e6f6e73656e736520616d6f756e742100000000000000000000000000000000604482015260640160405180910390fd5b600954600a54303191018201111561133e5760405160e560020a62461bcd02815260206004820152601d60248201527f43616e277420757365207768617420796f7520646f6e2774206f776e21000000604482015260640160405180910390fd5b600a80549091019055565b620f424081565b600e5481565b611372336000356000805160206149eb83398151915216611aa5565b151561137d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167fde4a4cac02a4272e395e5e986abcceef575d423f707ee934c87377ac02a5ab5f60405160405180910390a250565b607d81565b60116020528060005260406000208054600190910154909150600160a060020a031682565b60008060008060008060008061141e6020600754612653565b975033965034955061142f886119a5565b6fffffffffffffffffffffffffffffffff16156114955760405160e560020a62461bcd02815260206004820152601160248201527f496e76616c696420717565727920494421000000000000000000000000000000604482015260640160405180910390fd5b600088815260116020526040902060018101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a161790556fffffffffffffffffffffffffffffffff871668010000000000000000024267ffffffffffffffff16176201000090810261ffff8e8116919091178202908d1617029550935061151f868c8c8c612ab5565b600e5491945092506fffffffffffffffffffffffffffffffff8716018311156115b75760405160e560020a62461bcd02815260206004820152602160248201527f506f74656e7469616c2070726f6669742065786365656473206d6178696d756d60448201527f2100000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b88151561162d57600d546fffffffffffffffffffffffffffffffff871610611611576115e287611708565b90506115ff6096670de0b6b3a76400006019840204600101612c5b565b600a80548401905561ffff1694909417935b61162d87876fffffffffffffffffffffffffffffffff16612c74565b620100009094029388611641576000611644565b60015b60ff169490941780845560098054840190819055600a549195913031910111156116b75760405160e560020a62461bcd02815260206004820152601060248201527f43616e277420636f766572206265742100000000000000000000000000000000604482015260640160405180910390fd5b86600160a060020a03167fcd5f79909b53eb4c55b0a2d7004914519bad1e3ade1b3dae6005d528d83da31e898760405191825260208201526040908101905180910390a25050505050505050505050565b6000806000806117178561122d565b67ffffffffffffffff1693506fffffffffffffffffffffffffffffffff1691505042829003652a1b324b8f68028082111561175657808203935061175b565b600093505b505050919050565b600f5481565b60085481565b60105481565b6000806000806000808661ffff16600114611791576000611794565b60015b70010000000000000000000000000000000088049868010000000000000000890498660100000000000081049850640100000000810497506201000090049550909350915050565b604681565b33673782dace9d9000008211156118415760405160e560020a62461bcd02815260206004820181905260248201527f43616e277420746f70207570206d6f7265207468616e2034206c6576656c7321604482015260640160405180910390fd5b7354cdc9d889c28f55f59f6b136822868c7d4726fc600160a060020a03166323b872dd823061187286600f54612cce565b60405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1580156118c257600080fd5b505af11580156118d6573d6000803e3d6000fd5b505050506040513d60208110156118ec57600080fd5b8101908080511515925061194c9150505760405160e560020a62461bcd02815260206004820152601660248201527f546f6b656e207472616e73666572206661696c65642100000000000000000000604482015260640160405180910390fd5b610a8a8183612c74565b611972336000356000805160206149eb83398151915216611aa5565b151561197d57600080fd5b600e55565b600081815260116020528060408120546801000000000000000090049392505050565b6000818152601160205280604081205470010000000000000000000000000000000090049392505050565b6000806000806000807fd751d2d0836943bc30f69508f79a173db06789115a73c97217814011fa7a367d8760405190815260200160405180910390a16000878152601160205260409020549550611a2686611775565b9499509197509550919350611a419150869050858585612ab5565b5060008881526011602052909150611a7f9088906040902060010154600160a060020a0316886fffffffffffffffffffffffffffffffff8916612d05565b6009548111611a9657600980548290039055611a9c565b60006009555b50505050505050565b6000600160a060020a038316301415611ac057506001611ba6565b600154600160a060020a0384811691161415611ade57506001611ba6565b600054600160a060020a03161515611af857506000611ba6565b600054600160a060020a031663b700961384308560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526000805160206149eb8339815191529091166044820152606401602060405180830381600087803b158015611b6b57600080fd5b505af1158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b8101908080519350611ba692505050565b92915050565b600080611bcc731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612df6565b1115611c49576002805473ffffffffffffffffffffffffffffffffffffffff1916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed179055611c4160408051908101604052600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152612dfa565b506001611ce1565b6000611c6873c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612df6565b1115611cdd576002805473ffffffffffffffffffffffffffffffffffffffff191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf1179055611c4160408051908101604052600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152612dfa565b5060005b90565b600254600160a060020a03161580611d0e5750600254611d0c90600160a060020a0316612df6565b155b15611d1f57611d1d6000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d5f57600080fd5b505af1158015611d73573d6000803e3d6000fd5b505050506040513d6020811015611d8957600080fd5b810190808051600354600160a060020a039081169116149250611e4a91505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611de957600080fd5b505af1158015611dfd573d6000803e3d6000fd5b505050506040513d6020811015611e1357600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600354600160a060020a031663688dcfd78260405160e060020a63ffffffff84160281527fff000000000000000000000000000000000000000000000000000000000000009091166004820152602401600060405180830381600087803b158015611eb457600080fd5b505af1158015611ec8573d6000803e3d6000fd5b5050505050565b600254600090600160a060020a03161580611efc5750600254611efa90600160a060020a0316612df6565b155b15611f0d57611f0b6000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b505050506040513d6020811015611f7757600080fd5b810190808051600354600160a060020a03908116911614925061203891505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611fd757600080fd5b505af1158015611feb573d6000803e3d6000fd5b505050506040513d602081101561200157600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600354600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561207857600080fd5b505af115801561208c573d6000803e3d6000fd5b505050506040513d60208110156120a257600080fd5b810190808051935050505090565b600080826000815181106120c057fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4c0000000000000000000000000000000000000000000000000000000000000014158061218257508260018151811061212a57fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f500000000000000000000000000000000000000000000000000000000000000014155b806121ca57508260028151811061219557fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000060f860020a9182900482021614155b156121d85760019150612202565b6121eb8386866121e6612e17565b612eb9565b90508015156121fd5760029150612202565b600091505b509392505050565b7fdcd1691b6def00e13ef6aae5ed77b6226a4d50116e9512c4f97fa3e004b8f4e98160405190815260200160405180910390a1610970816119d0565b60008181526011602052808080808080808080806040812060018101548154919c50600160a060020a03169a50985061227e89611775565b949c50929a509098509650945092504267ffffffffffffffff88166154600110156122f25760405160e560020a62461bcd02815260206004820152601360248201527f42657420616c7265616479206578706972656400000000000000000000000000604482015260640160405180910390fd5b60006fffffffffffffffffffffffffffffffff89161161235b5760405160e560020a62461bcd02815260206004820152601160248201527f496e76616c696420717565727920494421000000000000000000000000000000604482015260640160405180910390fd5b61236788878786612ab5565b50809250508461ffff168661ffff168e61ffff1681151561238457fe5b0661ffff1610156123925781015b82151561245057600d546fffffffffffffffffffffffffffffffff891610612450578361ffff16620f424062ffffff1660108f9060020a900461ffff168115156123d857fe5b0662ffffff16101561245057600a5460029004810190506002600a600082825481151561240157fe5b049250508190555089600160a060020a03167f54f8bf2307bf86ae4f7a8fdd246a938ed0f1e9d0911acae574da6a30d6d58c088d600a5460405191825260208201526040908101905180910390a25b61245c8c8b8b84612d05565b600954821161247357600980548390039055612479565b60006009555b50505050505050505050505050565b600b54600754600854020190565b600c54600754600854020190565b600254600160a060020a031615806124ce57506002546124cc90600160a060020a0316612df6565b155b156124df576124dd6000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561251f57600080fd5b505af1158015612533573d6000803e3d6000fd5b505050506040513d602081101561254957600080fd5b810190808051600354600160a060020a03908116911614925061260a91505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156125a957600080fd5b505af11580156125bd573d6000803e3d6000fd5b505050506040513d60208110156125d357600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600354600160a060020a031663ca6ad1e48260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b158015611eb457600080fd5b6000606080606060006060612666614913565b6000606060008b11801561267b575060208b11155b15156126d05760405160e560020a62461bcd02815260206004820152601d60248201527f526571756573746564206279746573206f7574206f662072616e676521000000604482015260640160405180910390fd5b6001604051818152601f19601f83011681016020016040529080156126ff578160200160208202803883390190505b5097508a60f860020a028860008151811061271657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506020604051818152601f19601f8301168101602001604052908015612775578160200160208202803883390190505b5096506020604051818152601f19601f83011681016020016040529080156127a7578160200160208202803883390190505b5095506127b26135e1565b9450602087523433186001430340186020880152602086528460208701526020604051818152601f19601f83011681016020016040529080156127ff578160200160208202803883390190505b50935060806040519081016040528088815260200189815260200187815260200185815250925061286460408051908101604052600681527f72616e646f6d00000000000000000000000000000000000000000000000000006020820152848c61378a565b91506008604051818152601f19601f8301168101602001604052908015612895578160200160208202803883390190505b509050612aa382826020860151600287516040518082805190602001908083835b602083106128d55780518252601f1990920191602091820191016128b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015612919573d6000803e3d6000fd5b5050506040513d602081101561292e57600080fd5b8101908080519250505060408801516040516020018085805190602001908083835b6020831061296f5780518252601f199092019160209182019101612950565b6001836020036101000a038019825116818451161790925250505091909101905084805190602001908083835b602083106129bb5780518252601f19909201916020918201910161299c565b6001836020036101000a038019825116818451161790925250505091909101848152602001905082805190602001908083835b60208310612a0d5780518252601f1990920191602091820191016129ee565b6001836020036101000a03801982511681845116179092525050509190910195506040945050505050516020818303038152906040526040518082805190602001908083835b60208310612a725780518252601f199092019160209182019101612a53565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390206139b4565b8198505b505050505050505092915050565b6000806000808561ffff16118015612ad557508561ffff168561ffff1611155b1515612b2a5760405160e560020a62461bcd02815260206004820152600d60248201527f4e6f6e73656e7365206265742100000000000000000000000000000000000000604482015260640160405180910390fd5b831515612b9457612b5760466fffffffffffffffffffffffffffffffff891604612b52612488565b6139c9565b600d549091506fffffffffffffffffffffffffffffffff881610612b8f576101906fffffffffffffffffffffffffffffffff88160491505b612bb8565b612bb5607d6fffffffffffffffffffffffffffffffff891604612b52612496565b90505b8461ffff168661ffff1683838a6fffffffffffffffffffffffffffffffff16030302811515612be357fe5b0492508082016fffffffffffffffffffffffffffffffff88161015612c515760405160e560020a62461bcd02815260206004820152601e60248201527f42657420646f65736e277420636f766572206d696e696d756d20666565210000604482015260640160405180910390fd5b5094509492505050565b600081831115612c6b5781612c6d565b825b9392505050565b6000612c9282612c8385611708565b01674563918244f40000612c5b565b600160a060020a0384166000908152601260205268010000000000000000919091024267ffffffffffffffff1617915081906040902055505050565b6000670de0b6b3a7640000612cf4612ce685856139d9565b6706f05b59d3b20000613a01565b811515612cfd57fe5b049392505050565b60008481526011602052700100000000000000000000000000000000808402919082049060409020556000821115612d9e57600160a060020a03841682156108fc0283604051600060405180830381858888f193505050501515612d9e577f9f1050b978ede742c81db9fdbffe7a7815117d561524433659a86c22d1475f72858360405191825260208201526040908101905180910390a15b83600160a060020a03167f650945fa496ccc8f68a78e521a1db366687c7431f2d9561b322b6133d7b5365386858560405192835260208301919091526040808301919091526060909101905180910390a25050505050565b3b90565b6004818051610a8a92916020019061493a565b6000611ba6611bac565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612eaf5780601f10612e8457610100808354040283529160200191612eaf565b820191906000526020600020905b815481529060010190602001808311612e9257829003601f168201915b5050505050905090565b60008060608060608060008060608c604581518110612ed457fe5b016020015160f860020a9081900481020460660197506020604051818152601f19601f8301168101602001604052908015612f19578160200160208202803883390190505b509650612f2b8d8960208a6000613a11565b5060028a8d6040516020018083805190602001908083835b60208310612f625780518252601f199092019160209182019101612f43565b6001836020036101000a038019825116818451161790925250505091909101928352505060200190506040516020818303038152906040526040518082805190602001908083835b60208310612fc95780518252601f199092019160209182019101612faa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af115801561300d573d6000803e3d6000fd5b5050506040513d602081101561302257600080fd5b81019080805192506040915050516020810191909152604090810190516020818303038152906040526040518082805190602001908083835b6020831061307a5780518252601f19909201916020918201910161305b565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020876040518082805190602001908083835b602083106130d65780518252601f1990920191602091820191016130b7565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390201461311057600098506135d1565b8c604a89018151811061311f57fe5b016020015160f860020a900460f860020a0260f860020a9004600201604051818152601f19601f8301168101602001604052908015613168578160200160208202803883390190505b50955061317d8d896049018851896000613a11565b5061324e6002876040518082805190602001908083835b602083106131b35780518252601f199092019160209182019101613194565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af11580156131f7573d6000803e3d6000fd5b5050506040513d602081101561320c57600080fd5b81019080805190602001909291905050508c8f8b6020016008018151811061323057fe5b016020015160f860020a900460f860020a0260f860020a9004613a60565b151561325d57600098506135d1565b6029604051818152601f19601f830116810160200160405290801561328c578160200160208202803883390190505b5094506132a18d896020016029886000613a11565b5060408051818152601f19601f83011681016020016040529080156132d0578160200160208202803883390190505b5093508551886020016029010160410192506132f48d604085036040876000613a11565b506002846040518082805190602001908083835b602083106133275780518252601f199092019160209182019101613308565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af115801561336b573d6000803e3d6000fd5b5050506040513d602081101561338057600080fd5b810190808051945087925084915060409050516020018083805190602001908083835b602083106133c25780518252601f1990920191602091820191016133a3565b6001836020036101000a038019825116818451161790925250505091909101928352505060200190506040516020818303038152906040526040518082805190602001908083835b602083106134295780518252601f19909201916020918201910161340a565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060008d81526005602052604090205414156134815760008c81526005602052604090206000905561348a565b600098506135d1565b6049604051818152601f19601f83011681016020016040529080156134b9578160200160208202803883390190505b5090506134cb8d896049846000613a11565b5061356d6002826040518082805190602001908083835b602083106135015780518252601f1990920191602091820191016134e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015613545573d6000803e3d6000fd5b5050506040513d602081101561355a57600080fd5b8101908080519250899150879050613b16565b151561357c57600098506135d1565b60008281526006602052604090205460ff1615156135bc5761359e8d84613d3b565b6000838152600660205260409020805460ff19169115159190911790555b60008281526006602052604090205460ff1698505b5050505050505050949350505050565b600254600090600160a060020a0316158061360e575060025461360c90600160a060020a0316612df6565b155b1561361f5761361d6000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561365f57600080fd5b505af1158015613673573d6000803e3d6000fd5b505050506040513d602081101561368957600080fd5b810190808051600354600160a060020a03908116911614925061374a91505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505050506040513d602081101561371357600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600354600160a060020a031663abaa5f3e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561207857600080fd5b600254600090606090600160a060020a031615806137ba57506002546137b890600160a060020a0316612df6565b155b156137cb576137c96000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561380b57600080fd5b505af115801561381f573d6000803e3d6000fd5b505050506040513d602081101561383557600080fd5b810190808051600354600160a060020a0390811691161492506138f691505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561389557600080fd5b505af11580156138a9573d6000803e3d6000fd5b505050506040513d60208110156138bf57600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600460405190808252806020026020018201604052801561392b57816020015b60608152602001906001900390816139165790505b50905083518160008151811061393d57fe5b6020908102909101015283600160200201518160018151811061395c57fe5b602090810291909101015260408401518160028151811061397957fe5b602090810291909101015260608401518160038151811061399657fe5b602090810290910101526139ab858285614193565b95945050505050565b60008281526005602052819060409020555050565b600081831015612c6b5781612c6d565b60008115806139f65750508082028282828115156139f357fe5b04145b1515611ba657600080fd5b80820182811015611ba657600080fd5b60608382016000808286511015613a2757600080fd5b505060208087019084015b868860200101821015613a5357818901518682015260209182019101613a32565b5093979650505050505050565b600060018183855114613a7257600080fd5b5060005b83811015613b0957848181518110613a8a57fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168682602081101515613acc57fe5b1a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515613b0157600091505b600101613a76565b8192505b50509392505050565b60008060008060006060600060606020604051818152601f19601f8301168101602001604052908015613b53578160200160208202803883390190505b50925060208a600381518110613b6557fe5b016020015160f860020a900460f860020a0260f860020a9004036004019150613b938a836020866000613a11565b92506020604051818152601f19601f8301168101602001604052908015613bc4578160200160208202803883390190505b509050602282019150613c088a60208c6001860381518110613be257fe5b016020015160f860020a900460f860020a0260f860020a90040384016020846000613a11565b90506020830151945060208101519350613c258b601b878761457a565b9097509550600160a060020a038616896040518082805190602001908083835b60208310613c645780518252601f199092019160209182019101613c45565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600160a060020a03161415613ca85760019750613d2d565b613cb58b601c878761457a565b9097509550600160a060020a038616896040518082805190602001908083835b60208310613cf45780518252601f199092019160209182019101613cd5565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600160a060020a03161497505b505050505050509392505050565b60008060608060608060608060608a8a60010181518110613d5857fe5b016020015160f860020a900460f860020a0260f860020a9004600201604051818152601f19601f8301168101602001604052908015613da1578160200160208202803883390190505b509650613db38b8b89518a6000613a11565b5060408051818152601f19601f8301168101602001604052908015613de2578160200160208202803883390190505b509550613df58b60046040896000613a11565b506062604051818152601f19601f8301168101602001604052908015613e25578160200160208202803883390190505b50945060f860020a85600081518110613e3a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e7c8b60418c036041886001613a11565b506040805190810160405280602081526020017ffd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c8152509350613ec58460006020886042613a11565b50613f676002866040518082805190602001908083835b60208310613efb5780518252601f199092019160209182019101613edc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015613f3f573d6000803e3d6000fd5b5050506040513d6020811015613f5457600080fd5b81019080805192508a9150899050613b16565b9750871515613f795760009850612aa7565b606060405190810160405280604081526020017f7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e881526020017f537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e481525092506042604051818152601f19601f8301168101602001604052908015614007578160200160208202803883390190505b5091507ffe000000000000000000000000000000000000000000000000000000000000008260008151811061403857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506140788b60036041856001613a11565b508a60458151811061408657fe5b016020015160f860020a900460f860020a0260f860020a9004600201604051818152601f19601f83011681016020016040529080156140cf578160200160208202803883390190505b5090506140e28b60448351846000613a11565b506141846002836040518082805190602001908083835b602083106141185780518252601f1990920191602091820191016140f9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af115801561415c573d6000803e3d6000fd5b5050506040513d602081101561417157600080fd5b8101908080519250849150869050613b16565b9b9a5050505050505050505050565b6002546000908190606090600160a060020a031615806141c557506002546141c390600160a060020a0316612df6565b155b156141d6576141d46000612e0d565b505b600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561421657600080fd5b505af115801561422a573d6000803e3d6000fd5b505050506040513d602081101561424057600080fd5b810190808051600354600160a060020a03908116911614925061430191505057600254600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156142a057600080fd5b505af11580156142b4573d6000803e3d6000fd5b505050506040513d60208110156142ca57600080fd5b8101908080516003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050505b600354600160a060020a0316632ef3accc87866040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614369578082015183820152602001614351565b50505050905090810190601f1680156143965780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156143b657600080fd5b505af11580156143ca573d6000803e3d6000fd5b505050506040513d60208110156143e057600080fd5b8101908080519450505050670de0b6b3a76400003a8502018211156144085760009250613b0d565b614411856145ba565b600354909150600160a060020a031663c55c1cb68360008985896040518663ffffffff1660e060020a028152600401808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561448a578082015183820152602001614472565b50505050905090810190601f1680156144b75780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156144ed5780820151838201526020016144d5565b50505050905090810190601f16801561451a5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b15801561453c57600080fd5b505af1158015614550573d6000803e3d6000fd5b50505050506040513d602081101561456757600080fd5b8101908080519998505050505050505050565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1925080519299929850919650505050505050565b60606145c46149b8565b60006145ce614631565b6145da8261040061463d565b6145e38261466b565b5060005b835181101561461e576146168482815181106145ff57fe5b90602001906020020151839063ffffffff61467616565b6001016145e7565b61462782614698565b8151949350505050565b60405180590338823950565b8060208106156146505760208106602003015b60208301819052604051928390526000835290910160405250565b61097081600461469f565b61468382600283516146b8565b614693828263ffffffff6147b616565b505050565b6109708160075b610a8a82601f602060ff8516021763ffffffff61485316565b601781116146d9576146d48360ff848116602002168317614853565b614693565b60ff8111614712576146fa836018602060ff8616021763ffffffff61485316565b61470c8382600163ffffffff61488c16565b50614693565b61ffff811161474657614734836019602060ff8616021763ffffffff61485316565b61470c8382600263ffffffff61488c16565b63ffffffff811161477c5761476a83601a602060ff8616021763ffffffff61485316565b61470c8382600463ffffffff61488c16565b67ffffffffffffffff8111614693576147a483601b602060ff8616021763ffffffff61485316565b610fcb8382600863ffffffff61488c16565b6147be6149b8565b600080600080866020015187515187510111156147f0576147f0876147e8896020015189516148e2565b6002026148f9565b8551915086518051602081830101955087510190526020860192505b6020821061482f578251845260208401935060208301925060208203915061480c565b6001826020036101000a039050801983511681855116179093525093949350505050565b81602001518251516001011115614875576148758283602001516002026148f9565b815180516020818301018381535060010190525050565b6148946149b8565b60008460200151855151840111156148b8576148b8856147e88760200151866148e2565b6001836101000a039050845180518481830101868419825116179052909301909252509192915050565b6000818311156148f3575081611ba6565b50919050565b606082519050614909838361463d565b610fcb83826147b6565b60806040519081016040526004815b60608152602001906001900390816149225790505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061497b57805160ff19168380011785556149a8565b828001600101855582156149a8579182015b828111156149a857825182559160200191906001019061498d565b506149b49291506149d0565b5090565b60408051908101604052606081526000602082015290565b611ce191905b808211156149b457600081556001016149d65600ffffffff00000000000000000000000000000000000000000000000000000000a165627a7a72305820242fd51f6ff3d33ce6be5e1ee0a3b55feafda68c94fa06089a1c6614a209daf60029"
}