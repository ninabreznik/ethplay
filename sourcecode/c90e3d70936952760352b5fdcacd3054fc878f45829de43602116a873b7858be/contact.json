{
  "address": "0x3b820a1e03025d0fe6bc211b2550626b68a3b27c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FibonumCyclingToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n\n    function sellTokens(address payable from, uint256 value) internal;\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n        if (to == address(this) && msg.sender == from) {\n            sellTokens(msg.sender, value);\n        } else {\n            addInvestor(to);\n        }\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n        addInvestor(account);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n\n    function addInvestor(address investor) internal;\n}\n\ncontract DividendsERC20 is ERC20 {\n\n    event Dividends(address indexed investor, uint256 value);\n\n    mapping(address => bool)  public inList;\n    address[]  internal investorList;\n    uint8 internal nextReferId = 0;\n\n    function addInvestor(address investor) internal {\n        if (!inList[investor]) {\n            investorList.push(investor);\n            inList[investor] = true;\n        }\n    }\n\n    function getList() public view returns (address[] memory){\n        return investorList;\n    }\n\n    function distribute(address buyer, uint256 tokens) internal returns (uint256) {\n\n        uint256 _total = totalSupply() - balanceOf(buyer);\n        uint256 distributed = 0;\n        for (uint i = 0; i < investorList.length; i++) {\n            address investor = investorList[i];\n            uint256 _balance = balanceOf(investor);\n            if (_balance > 0 && investor != buyer) {\n                uint256 _dividend = _balance * tokens / _total;\n                _mint(investor, _dividend);\n                emit Dividends(investor, _dividend);\n                distributed += _dividend;\n            }\n        }\n        return distributed;\n    }\n\n\n}\n\ncontract ReferalsERC20 is DividendsERC20 {\n\n    event ReferalBonus(address indexed from, address indexed to, uint256 value);\n\n    mapping(address => int256) internal SBalance;\n    mapping(address => address) public refers;\n\n    function getNextRefer() private returns (address) {\n        if (investorList.length > nextReferId) {\n            address result = investorList[nextReferId];\n            if (nextReferId < 9 && nextReferId < investorList.length - 1) {\n                nextReferId = nextReferId + 1;\n            } else {\n                nextReferId = 0;\n            }\n            return result;\n        }\n        else {\n            return address(0x0);\n        }\n    }\n\n    function checkRefer(address referal, address refer) internal returns (address){\n\n        if (investorList.length < 1 || referal == investorList[0]) return address(0x0);\n\n        if (refers[referal] == address(0x0)) {\n\n            if (refer == address(0x0)) {\n                refers[referal] = getNextRefer();\n            } else {\n\n                refers[referal] = refer;\n\n\n\n            }\n        }\n\n        return refers[referal];\n    }\n\n    function changeSBalance(address investor, int256 amount) internal returns (int256){\n        SBalance[investor] = SBalance[investor] + amount;\n        return SBalance[investor];\n    }\n\n    function calcToRefer(address investor, uint256 amount, uint256 tokens)\n    internal returns (uint256){\n        int256 thisSBalance = changeSBalance(investor, int256(amount));\n        uint256 result = 0;\n\n        if (thisSBalance >= int256(amount)) {\n            result = tokens / 20;\n            changeSBalance(investor, int256( amount) * (-1) );\n        } else if (thisSBalance > 0) {\n            result = (uint256(thisSBalance) * tokens / amount) / 20;\n            changeSBalance(investor, thisSBalance * (-1));\n        }\n        return result;\n    }\n\n}\n\n\ncontract FibonumCyclingToken is ReferalsERC20 {\n\n\n    string public name = \"Fibonum Cycling Token\";\n    string public symbol = \"FCT\";\n    uint8 public decimals = 18;\n\n    event Buy(address indexed investor, uint256 indexed tokens, uint256 ethers);\n    event Sell(address indexed investor, uint256 indexed tokens, uint256 ethers);\n\n\n    int256 private x = 0; \n    int256 private c = 0;\n    int256 private  n = 1000000000000000000;\n\n    int256 constant xe = 1590797660368290000;\n    int256 constant ce = 1428285685708570000;\n    int256 constant xa = 775397496610753000;\n    int256 constant ca = - 714142842854285000;\n\n\n\n\n    uint64[] ethToTokenA = [uint64(1417139259168220000), 1395328479040590000, 1374818151911760000, 1355496481642670000,\n    1337264861422160000, 1320035947620740000, 1303732066667570000, 1288283889008670000, 1273629318822690000,\n    1259712559222210000, 1246483321098410000, 1233896150251810000, 1221909852479560000, 1210487000216940000,\n    1199593507419850000, 1189198261821420000, 1179272805644490000, 1169791057414210000, 1160729068774030000,\n    1152064811228980000, 1143777988571040000, 1135849871421960000, 1128263150888080000, 1121001808783790000,\n    1114051002263240000, 1107396961019390000, 1101026895475830000, 1094928914620790000, 1089091952321460000,\n    1083505701115530000, 1078160552612450000, 1073047543751270000, 1068158308260090000, 1063485032746130000,\n    1059020416916920000, 1054757637495480000, 1050690315445410000, 1046812486168130000, 1043118572374580000,\n    1039603359368500000, 1036261972508700000, 1033089856644290000, 1030082757340130000, 1027236703730050000,\n    1024547992853300000, 1022013175345570000, 1019629042369960000, 1017392613685540000, 1015301126762090000,\n    1013352026859850000, 1011542958001130000, 1009871754769190000, 1008336434876480000, 1006935192450680000,\n    1005666391992810000, 1004528562966940000, 1003520394985710000, 1002640733560210000, 1001888576386930000,\n    1001263070147930000, 1000763507804280000, 1000389326365660000, 1000140105122260000, 1000015564328210000];\n\n    uint64[] ethToTokenB = [uint64(775429218219143000), 775671327829898000, 776127901211966000, 776773645353675000,\n    777586422946545000, 778546770812539000, 779637503568884000, 780843385369321000, 782150856410282000,\n    783547803792281000, 785023368533855000, 786567782228188000, 788172228141079000, 789828722568099000,\n    791530013068024000, 793269490820609000, 795041114858058000, 796839346320061000, 798659091204212000,\n    800495650343652000, 802344675554931000, 804202131071437000, 806064259518883000, 807927551805687000,\n    809788720397125000, 811644675521967000, 813492503926740000, 815329449848342000, 817152897922371000,\n    818960357783777000, 820749450149599000, 822517894201629000, 824263496110689000, 825984138564496000,\n    827677771178473000, 829342401683636000, 830976087798466000, 832576929702567000, 834143063039316000,\n    835672652382843000, 837163885111639000, 838614965637138000, 840024109940838000, 841389540378025000,\n    842709480710032000, 843982151330350000, 845205764652730000, 846378520631928000, 847498602389816000,\n    848564171921350000, 849573365856374000, 850524291254470000, 851415021411011000, 852243591653376000,\n    853007995106812000, 853706178409820000, 854336037359125000, 854895412464314000, 855382084392069000,\n    855793769279634000, 856128113896648000, 856382690633867000, 856554992296479000, 856642426678713000,\n    856642310895322000, 856551865444122000, 856368207972221000, 856088346716798000, 855709173589260000,\n    855227456869334000, 854639833473084000, 853942800755975000, 853132707808898000, 852205746201468000,\n    851157940122901000, 849985135866291000, 848682990597101000, 847246960341106000, 845672287120746000,\n    843953985161896000, 842086826085187000, 840065322987306000, 837883713307804000, 835535940365946000,\n    833015633439678000, 830316086244836000, 827430233656903000, 824350626499847000, 821069404206372000,\n    817578265131108000, 813868434272292000, 809930628128026000, 805755016379575000, 801331180055767000,\n    796648065788695000, 791693935720538000, 786456312563492000, 780921919248189000, 775076612519082000,\n    768905309746284000, 762391908120150000, 755519195274780000, 748268750246655000, 740620833510800000,\n    732554264644806000, 724046285945012000, 715072410052456000, 705606249330304000, 695619324359237000,\n    685080848469791000, 673957484695128000, 662213070884326000, 649808307940139000, 636700405205061000,\n    622842675875531000, 608184073925882000, 592668662306040000, 576235000056606000, 558815433353122000,\n    540335272206310000, 520711830420428000, 499853301200371000, 477657434169810000, 454009971072929000,\n    428782786477567000, 401831665549952000, 372993632284706000, 342083716845033000];\n\n    uint64[] tokenToEthA = [uint64(704424178155537000), 713190762066846000, 721847189493791000, 730392123400529000,\n    738824243972042000, 747142248817992000, 755344853173881000, 763430790099493000, 771398810674579000,\n    779247684191759000, 786976198346613000, 794583159424929000, 802067392487080000, 809427741549495000,\n    816663069763215000, 823772259589481000, 830754212972345000, 837607851508273000, 844332116612708000,\n    850925969683577000, 857388392261710000, 863718386188143000, 869914973758293000, 875977197872967000,\n    881904122186196000, 887694831249856000, 893348430655064000, 898864047170326000, 904240828876413000,\n    909477945297944000, 914574587531659000, 919529968371354000, 924343322429479000, 929013906255348000,\n    933540998449971000, 937923899777483000, 942161933273140000, 946254444347881000, 950200800889437000,\n    954000393359958000, 957652634890164000, 961156961369993000, 964512831535722000, 967719727053578000,\n    970777152599792000, 973684635937107000, 976441727987718000, 979048002902630000, 981503058127442000,\n    983806514464515000, 985958016131545000, 987957230816517000, 989803849729030000, 991497587647993000,\n    993038182965679000, 994425397728130000, 995659017671913000, 996738852257213000, 997664734697262000,\n    998436521984103000, 999054094910676000, 999517358089229000, 999826239966055000, 999980692832543000];\n\n    uint64[] tokenToEthB = [uint64(714156574852348000), 714265413504371000, 714480464730154000, 714798940623867000,\n    715218004285508000, 715734770689657000, 716346307566699000, 717049636296306000, 717841732812979000,\n    718719528523439000, 719679911235652000, 720719726099286000, 721835776557362000, 723024825308907000,\n    724283595282368000, 725608770619570000, 726996997669992000, 728444885995139000, 729949009382765000,\n    731505906870731000, 733112083780254000, 734764012758310000, 736458134828956000, 738190860453334000,\n    739958570598101000, 741757617812056000, 743584327310708000, 745434998068541000, 747305903918727000,\n    749193294660028000, 751093397170644000, 753002416528754000, 754916537139472000, 756831923867992000,\n    758744723178644000, 760651064279594000, 762547060272951000, 764428809309991000, 766292395751258000,\n    768133891331251000, 769949356327459000, 771734840733451000, 773486385435772000, 775200023394360000,\n    776871780826229000, 778497678392132000, 780073732385946000, 781595955926494000, 783060360151543000,\n    784462955413693000, 785799752477890000, 787066763720288000, 788260004328181000, 789375493500727000,\n    790409255650206000, 791357321603504000, 792215729803583000, 792980527510629000, 793647772002626000,\n    794213531775060000, 794673887739485000, 795024934420690000, 795262781152149000, 795383553269528000,\n    795383393301940000, 795258462160674000, 795004940325147000, 794619029025774000, 794096951423502000,\n    793434953785727000, 792629306658317000, 791676306033484000, 790572274513209000, 789313562467972000,\n    787896549190501000, 786317644044284000, 784573287606558000, 782659952805530000, 780574146051537000,\n    778312408361911000, 775871316479255000, 773247483982883000, 770437562393166000, 767438242268508000,\n    764246254294709000, 760858370366446000, 757271404660626000, 753482214701341000, 749487702416195000,\n    745284815183731000, 740870546871712000, 736241938866023000, 731396081089926000, 726330113013445000,\n    721041224652618000, 715526657558394000, 709783705794922000, 703809716907010000, 697602092876500000,\n    691158291067352000, 684475825159183000, 677552266069049000, 670385242861237000, 662972443644848000,\n    655311616458951000, 647400570145076000, 639237175206862000, 630819364656603000, 622145134848520000,\n    613212546298535000, 604019724490329000, 594564860667512000, 584846212611674000, 574862105406138000,\n    564610932185217000, 554091154868778000, 543301304881934000, 532239983859669000, 520905864336217000,\n    509297690419021000, 497414278447080000, 485254517633538000, 472817370692305000, 460101874448585000,\n    447107140433120000, 433832355459993000, 420276782187844000, 406439759664335000];\n\n\n    function xf(int256 tokens) private pure returns (int256){\n        return (tokens / 24500) % xe;\n    }\n\n    function tokenToEth(int256 tokens) private view returns (int256) {\n\n        uint64 inCircle = uint64(tokens);\n\n        uint i = uint(inCircle / 12428106721627265);\n        uint256 ai;\n        if (i < 64) {\n            ai = tokenToEthA[i];\n        } else {\n            ai = tokenToEthA[127 - i];\n        }\n\n        uint256 bi = tokenToEthB[i];\n        int256 ax = int256(ai * inCircle) / (1 ether);\n\n        int256 result = int256(bi) - ax;\n        return result;\n\n    }\n\n\n    function Dx(int256 ethPrev, uint256 ethIncome, int256 nPrev) private view returns (uint256){\n        int256 ethNew = ethPrev + int256(ethIncome);\n\n        int256 first = xe * (intNcn(ethNew, nPrev) - intNcn(ethPrev, nPrev));\n        int256 second = ethToToken(cf(ethNew, nPrev));\n        int256 third = ethToToken(cf(ethPrev, nPrev));\n        int256 result = (first + second - third) * 24500 * 98 / 100;\n\n        return uint256(result);\n    }\n\n\n    function calcN(int256 totalTokens, int256 totalEther) private view returns (int256){\n        int256 x24500 = totalTokens / 24500;\n\n        int256 first = (x24500 / xe) * ce;\n        int256 second = tokenToEth(x24500 % xe);\n        int256 third = first - second - ca;\n        return totalEther * (1 ether) / (350 * third);\n    }\n\n    function intNcn(int256 eth, int256 nPrev) private pure returns (int256) {\n        return (1 ether) * (eth / 350) / (nPrev * ce);\n    }\n\n\n    function cf(int256 eth, int256 nPrev) private pure returns (int256){\n        int256 mod350 = ((1 ether) * eth / 350) % (nPrev * ce);\n        return mod350 / nPrev;\n    }\n\n    function ethToToken(int256 eth) private view returns (int256){\n\n        uint256 inCircle = uint256(eth) % 1428285685708570000;\n\n        uint i = uint(inCircle / 11158481919598203);\n\n        int256 ai;\n        if (i < 64) {\n            ai = int256(ethToTokenA[i]);\n        } else {\n            ai = int256(ethToTokenA[127 - i]);\n        }\n\n        int256 bi = int256(ethToTokenB[i]);\n\n        return (ai * int256(inCircle)) / (1 ether) + bi;\n    }\n\n\n    function Dc(int256 tokensPrev, uint256 tokensIncome, int256 nPrev) private view\n    returns (int256){\n        int256 tokensNew = tokensPrev - int256(tokensIncome);\n        int256 first = (tokensNew / 24500) / xe;\n        int256 second = (tokensPrev / 24500) / xe;\n        int256 third = tokenToEth(xf(tokensNew));\n        int256 fourth = tokenToEth(xf(tokensPrev));\n\n        int256 result = nPrev * 350 * ((first - second) * ce - third + fourth) * 98 / (- 100 ether);\n\n        return result;\n\n    }\n\n\n    function recalcValues() private {\n        x = int256(totalSupply());\n        c = int256(address(this).balance);\n        if (x == 0) {\n            n = 1000000000000000000;\n        } else {\n            n = calcN(x, c);\n        }\n\n    }\n\n    function() external payable {\n        require((msg.value == 0) || (msg.value >= 0.01 ether));\n        if(msg.value == 0){\n            sellAllTokens();\n        }else{\n            buy(msg.sender, msg.value, address(0x0));\n        }\n    }\n\n    function buyTokens(address refer) public payable {\n        require(msg.value > 0.01 ether);\n        buy(msg.sender, msg.value, refer);\n    }\n\n\n    function buy(address investor, uint256 amount, address _refer) private {\n\n        uint256 tokens = Dx(c, amount, n);\n        uint256 toDistribute = tokens / 50;\n        address refer = checkRefer(investor, _refer);\n        uint256 toRefer = calcToRefer(investor, amount, tokens);\n        uint256 distributed = distribute(investor, toDistribute);\n        if (toRefer > 0 && refer != address(0x0)) {\n            _mint(refer, toRefer);\n            emit ReferalBonus(investor, refer, toRefer);\n        }\n        uint256 total = tokens - distributed - toRefer;\n        _mint(msg.sender, total);\n        emit Buy(msg.sender, total, amount);\n        recalcValues();\n    }\n\n    function sellAllTokens() public {\n        transfer(address(this), balanceOf(msg.sender));\n    }\n\n    function sellTokens(address payable from, uint256 value) internal {\n        uint256 ethers = address(this).balance;\n        if (int256(value) < x) {\n            ethers = uint256(Dc(x, value, n));\n        }\n        _burn(address(this), value);\n        from.transfer(ethers);\n        emit Sell(from, value, ethers);\n        changeSBalance(from, int256(ethers) * (- 1));\n        recalcValues();\n    }\n\n    function calcEther(uint256 value) public view returns (uint256) {\n        uint256 ethers = address(this).balance;\n        if (int256(value) < x) {\n            ethers = uint256(Dc(x, value, n));\n        }\n        return ethers;\n    }\n\n    function calcTokens(uint256 amount) public view returns (uint256 tokens,\n        uint256 toDistribute, uint256 toRefer, uint256 total) {\n        uint256 _tokens = Dx(c, amount, n);\n        uint256 _toDistribute = _tokens / 50;\n        uint256 _toRefer;\n        int256 thisSBalance = SBalance[msg.sender] + int256(amount);\n\n        if (thisSBalance <= 0) {\n            _toRefer = 0;\n        } else if (thisSBalance >= int256(amount)) {\n            _toRefer = _tokens / 20;\n        } else {\n            _toRefer = (uint256(thisSBalance) * _tokens / amount) / 20;\n        }\n\n        return (_tokens, _toDistribute, _toRefer, _tokens - _toDistribute - _toRefer);\n    }\n\n}",
  "bytecode": "6005805460ff1916905560c0604052601560808190527f4669626f6e756d204379636c696e6720546f6b656e000000000000000000000060a09081526200004a916008919062001791565b506040805180820190915260038082527f46435400000000000000000000000000000000000000000000000000000000006020909201918252620000919160099162001791565b50600a805460ff191660121790556000600b819055600c55670de0b6b3a7640000600d5560408051610800810182526713aab0a5dbfb6360815267135d33dbe23350b0602082015267131455d33775a080818301526712cfb0de4a9a67b0606082015267128eeb4e6bae08806080820152671251b5b354ae2ba060a0820152671217c9683c01a35060c08201526711e0e75f1638753060e08201526711acd71e13f2fcd061010082015267117b65e5fb89bdd061012082015267114c65f9f485181061014082015267111fae02dd7b2cd06101608201526710f51889709819406101808201526710cc83836528ade06101a08201526710a5cff074a005106101c0820152671080e184bb60b1e06101e082015267105d9e5e61b7d51061020082015267103beec4d69a41d061022082015267101bbcf030befab0610240820152670ffcf4d78787e320610260820152670fdf840546b00900610280820152670fc35970a8476f406102a0820152670fa8655ba1d8d2806102c0820152670f8e9934ad20cfb06102e0820152670f75e77beb917d40610300820152670f5e43ab36e86830610320820152670f47a220c0fcecf0610340820152670f31f80bf246b4f0610360820152670f1d3b5c41db7720610380820152670f0962b1cb1a0b106103a0820152670ef6654f6d4dced06103c0820152670ee43b0e48665e706103e0820152670ed2dc526fb99090610400820152670ec24200b0c71a50610420820152670eb26575503816c0610440820152670ea3407ba30c5ec0610460820152670e94cd466d1118d0610480820152670e870668f07eb1d06104a0820152670e79e6d09cffdb206104c0820152670e6d69bf4e7653206104e0820152670e618ac60da06d60610500820152670e5645c0465795d0610520820152670e4b96cf68836ad0610540820152670e417a56ea12a3d0610560820152670e37ecf8a15c4320610580820152670e2eeb91703de0d06105a0820152670e267336392218406105c0820152670e1e813117d534a06105e0820152670e1712fed8b54e10610600820152670e10264ca9674910610620820152670e09b8f5feb48a10610640820152670e03c902abb7cc70610660820152670dfe54a526e57a00610680820152670df95a38f9dcc4c06106a0820152670df4d8415947ba106106c0820152670df0cd67e260c9606106e0820152670ded387b7bfba1b0610700820152670dea186f59318250610720820152670de76c5a1c109550610740820152670de5337516e26790610760820152670de36d1baad914c0610780820152670de218cac31e13606107a0820152670de136206b6f24206107c0820152670de0c4db81a50e506107e08201526200048391600e919062001816565b506040805161100081018252670ac2e0c3fc692f588152670ac3bcf685c1b3106020820152670ac55c36cc023a3091810191909152670ac7a783d230e8f86060820152670aca8abb59e53d68608080830191909152670acdf429c34f107860a0830152670ad1d42dc5cbb12060c0830152670ad61cec0226de2860e0830152670adac20f551a3810610100830152670adfb8937d938da8610120830152670ae4f6982dd74b18610140830152670aea733b037a5b60610160830152670af02677302d59d8610180830152670af60909da1274b86101a0830152670afc145a69fad8c06101c0830152670b024266238473e86101e0830152670b088dae80f1f110610200830152670b0ef129e4763248610220830152670b15683643dd0520610240830152670b1bee8d82fa8aa0610260830152670b22803b3de0b138610280830152670b291993ce2008c86102a0830152670b2fb72c5ec2e4b86102c0830152670b3655d3e9a104d86102e0830152670b3cf28cfe638588610300830152670b438a883852f398610320830152670b4a1b1f4bff1420610340830152670b50a1d0992005f0610360830152670b571c3b2fd80db8610380830152670b5d881b3ad42ee86103a0830152670b63e346c1c397186103c0830152670b6a2baab94a59486103e0830152670b705f4856ffcae8610400830152670b767c32a13e6a80610420830152670b7c808c33947628610440830152670b826a853185bf20610460830152670b883859621245d0610480830152670b8de84e6f1b5c586104a0830152670b9378b2445090206104c0830152670b98e7d989c9b0786104e0830152670b9e341e36dd7bd8610500830152670ba35bde3a20c650610520830152670ba85d7a33c98e70610540830152670bad37543ff61c28610560830152670bb1e7cece934a80610580830152670bb66d4b86d0c3b06105a0830152670bbac62a343d06906105c0830152670bbef0c7bbc964c06105e0830152670bc2eb7d1715c2c0610600830152670bc6b49e547edd70610620830152670bca4a799a808cf0610640830152670bcdab562d104570610660830152670bd0d57373a289b8610680830152670bd3c707fe9a40006106a0830152670bd67e408ae8e0606106c0830152670bd8f93f02ac6f606106e0830152670bdb3619799b0208610700830152670bdd32d9240be690610720830152670bdeed79476c2788610740830152670be063e622e7ba50610760830152670be193fbcf08ed40610780830152670be27b8513065ef86107a0830152670be3183a2e6b49186107c0830152670be367bf95b69aa86107e0830152670be367a4a07c4390610800830152670be31562277ebd90610820830152670be26e59111f4048610840830152670be16fd0ca67fc30610860830152670be016f5aad4b6e0610880830152670bde60d740db7bf06108a0830152670bdc4a66850fea606108c0830152670bd9d073f18fe3586108e0830152670bd6efad7b376bd0610900830152670bd3a49c69e29c60610920830152670bcfeba30cc75a08610940830152670bcbc0fa47ac2338610960830152670bc720aef574d5c8610980830152670bc2069f1c293d506109a0830152670bbc6e76ee3966106109c0830152670bb653ad9459a0406109e0830152670bafb181bad7fdb8610a00830152670ba882f5dcc83c10610a20830152670ba0c2cc46cc0160610a40830152670b986b82ca958c90610a60830152670b8f774e1b84de30610a80830152670b85e014cbea82a0610aa0830152670b7b9f69e189c558610ac0830152670b70ae86f6e4e358610ae0830152670b650645dda994a0610b00830152670b589f19b53846a0610b20830152670b4b710766b40ca0610b40830152670b3d739d7647ad90610b60830152670b2e9deb174b2ad8610b80830152670b1ee6766eab27d8610ba0830152670b0e4331ec5651d8610bc0830152670afca970a1741f90610be0830152670aea0dd975b5e4a0610c00830152670ad664591a1ac648610c20830152670ac1a01292e9b810610c40830152670aabb34e2d56c5e0610c60830152670a948f66af223ff0610c80830152670a7c24b487579d60610ca0830152670a626276befa3418610cc0830152670a4736b95eaa3a80610ce0830152670a2a8e38f2d9e570610d00830152670a0c5442cab17f20610d208301526709ec72917ddbee40610d408301526709cad12532a0e400610d608301526709a7561707545d88610d80830152670981e566e7771118610da083015267095a60c2f4f807c0610dc0830152670930a74787ae4a70610de0830152670904953696de9ff8610e008301526708d603a528984d88610e208301526708a4c81d1e83c8f8610e40830152670870b4316466f090610e6083015267083995021e41e8c0610e808301526707ff32adf5856d30610ea08301526707c14fad0804d0d0610ec083015267077fa81137789a70610ee0830152670739f0a6a28d94e0610f008301526706efd5edd9dabd38610f208301526706a0fae7d8041c50610f4083015267064cf7a9ca498ce8610f608301526705f357ac29cc2c18610f8083015267059397c5549bc400610fa083015267052d23bb7bd004d0610fc08301526704bf5353f9fe5628610fe083015262000c1891600f9162001816565b5060408051610800810182526709c69e0ece28426881526709e5c3382e15a1306020820152670a048431bfe4391881830152670a22dfc4360824686060820152670a40d4bc45666d106080820152670a5e61eab17ba14060a0820152670a7b8624585948a860c0820152670a9840423e79e08860e0820152670ab48f219a6ac638610100820152670ad071a3e04baa98610120820152670aebe6aecd232108610140820152670b06ed2c7207cce8610160820152670b21840b3f1dc040610180820152670b3baa3e0e6782d86101a0820152670b555ebc2e6a9e986101c0820152670b6ea0816ca6e2286101e0820152670b876e8e1fe036a8610200820152670b9fc7e7323a8f68610220820152670bb7ab962b2776a0610240820152670bcf18a93924f8a8610260820152670be60e333b4d70b0610280820152670bfc8b4bcab7c9986102a0820152670c128f0f43a804086102c0820152670c28189ece8f6d586102e0820152670c3d272068dc6420610300820152670c51b9beed991600610320820152670c65cfaa1dd907c0610340820152670c796816a8f50df0610360820152670c8c823e34955848610380820152670c9f1d5f64893dc06103a0820152670cb138bde26c86f86103c0820152670cc2d3a26519c9906103e0820152670cd3ed5ab7e9d858610400820152670ce48539c1bf8120610420820152670cf49a978bdfbf38610440820152670d042cd1489600f8610460820152670d133b4959a40b20610480820152670d21c567567d76286104a0820152670d2fca98124e7b486104c0820152670d3d4a4da1cd9ff06104e0820152670d4a43ff60d85720610500820152670d56b729f7da2f28610520820152670d62a34f60fe2e10610540820152670d6e07f6ed2a9f10610560820152670d78e4ad48c69980610580820152670d83390480496c386105a0820152670d8d0494049397706105c0820152670d9646f8af111e706105e0820152670d9effd4c5a55050610600820152670da72ecffe5f63b8610620820152670daed39782f837a8610640820152670db5edddf418db88610660820152670dbc7d5b6c69b770610680820152670dc281cd836a54a86106a0820152670dc7faf7501193986106c0820152670dcce8a16b3633d06106e0820152670dd14a99f1bfae28610700820152670dd520b4869f2a48610720820152670dd86aca54908bb0610740820152670ddb28ba0fa39258610760820152670ddd5a67f68cdc20610780820152670ddeffbdd3bed2c86107a0820152670de018aafe4a8a586107c0820152670de0a5245a8861186107e082015262000fe7916010919062001816565b5060408051611000810182526709e9319efe15786081526709e9949bf746893860208201526709ea58327b326410918101919091526709eb79d96db60c7860608201526709ecf6fc4a66c9a06080808301919091526709eeccfb585a48a860a08301526709f0f92bdead01f860c08301526709f378d859c3ad5060e08301526709f64940b144bb386101008301526709f9679a6ec69b986101208301526709fcd110f52f89a0610140830152670a0082c5b8c3c7f0610160830152670a0479d077deab50610180830152670a08b33f745385f86101a0830152670a0d2c17ad72c6006101c0830152670a11e1551aaff7506101e0830152670a16cfeae6e53640610200830152670a1bf4c3ac30afb8610220830152670a214cc1b06871c8610240830152670a26d4bf222140f8610260830152670a2c898e5644b930610280830152670a3267fa06331c706102a0830152670a386cc58e6d39606102c0830152670a3e94ad2dc2cbf06102e0830152670a44dc6645017008610300830152670a4b409f9720a7c0610320830152670a51be0189e70d20610340830152670a58512e6704f648610360830152670a5ef6c29da0bf58610380830152670a65ab550450c6606103a0830152670a6c6b771b7f64206103c0830152670a7333b5503505506103e0830152670a7a00973f442680610400830152670a80ce9ff8d3bfc0610420830152670a879a4e4443e220610440830152670a8e601ce4687410610460830152670a951c82dc166ed8610480830152670a9bcbf3b2ff30586104a0830152670aa26adfbad637906104c0830152670aa8f5b454bcdb386104e0830152670aaf68dc36f058b8610500830152670ab5c0bfb2b5c2f8610520830152670abbf9c4fa800460610540830152670ac21050684b9ac0610560830152670ac800c4c42c2908610580830152670acdc7838b0781a06105a0830152670ad360ed357a39906105c0830152670ad8c9617ee16b306105e0830152670addfd3fac85acd8610600830152670ae2f8e6d4e2e248610620830152670ae7b8b62708d5d0610640830152670aec390d32106700610660830152670af0764c2ca10d08610680830152670af46cd43c826ed86106a0830152670af81907be3621306106c0830152670afb774a8c94d7806106e0830152670afe8402486b5e18610700830152670b013b96a012aa88610720830152670b039a7196ff29d0610740830152670b059cffcd42c820610760830152670b073fb0c6fd9b48610780830152670b087ef733b934506107a0830152670b09574935a9be086107c0830152670b09c520a8d175c06107e0830152670b09c4fb6a01c720610800830152670b09535b9db5dcd0610820830152670b086cc7f6c2d178610840830152670b070dcbfcd8d9b0610860830152670b0532f852d186b0610880830152670b02d8e2fcc6d8186108a0830152670afffc27a5eee2c86108c0830152670afc9967e63820e06108e0830152670af8ad4b87a1e6a8610900830152670af43480cb4d33a0610920830152670aef2bbcae418288610940830152670ae98fbb2de1b060610960830152670ae35d3f8c0c9d30610980830152670adc911492e5c9906109a0830152670ad5280cd84178686109c0830152670acd1f0300b0c2d86109e0830152670ac472da022921d8610a00830152670abb207d6643a8b8610a20830152670ab124e18c1000b0610a40830152670aa67d03e976ef60610a60830152670a9b25eb4c28b308610a80830152670a8f1ca81a1319b0610aa0830152670a825e54915b9250610ac0830152670a74e81507d91948610ae0830152670a66b7182a0a7db8610b00830152670a57c8973984d938610b20830152670a4819d64ad67900610b40830152670a37a82482daaa58610b60830152670a2670dc537a5370610b80830152670a147163b7d5f188610ba0830152670a01a72c6fd4f910610bc08301526709ee0fb43b173490610be08301526709d9a88513444610610c008301526709c46f3565b5e7d0610c208301526709ae61684c790c20610c408301526709977ccdc6a2b3c0610c6083015267097fbf22eff49a98610c80830152670967263237ce7ea8610ca083015267094dafd397687308610cc083015267093359ecc752e780610ce0830152670918227174390958610d008301526708fc076372e1f320610d208301526708df06d2f36ddcb0610d408301526708c11edeb3cb5f78610d608301526708a24db431622f40610d80830152670882918fd9efdc58610da0830152670861e8bd3b934ba8610dc08301526708405197340444c0610de083015267081dca881ef38f90610e008301526707fa520a0390e690610e208301526707d5e6a6c133b7e8610e408301526707b086f83b23b410610e6083015267078a31a8837e6eb0610e80830152670762e57205371808610ea083015267073aa11fad2d93a8610ec0830152670711638d125a44c8610ee08301526706e72ba69d0ba240610f008301526706bbf869ad3357d0610f2083015267068fc8e4bfbfc068610f408301526706629c3792ffd128610f6083015267063471934a0e8b00610f80830152670605483a8f438da8610fa08301526705d51f81b5a691a0610fc08301526705a3f6ced9634898610fe08301526200177c9160119162001816565b503480156200178a57600080fd5b5062001918565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620017d457805160ff191683800117855562001804565b8280016001018555821562001804579182015b8281111562001804578251825591602001919060010190620017e7565b5062001812929150620018d1565b5090565b82805482825590600052602060002090600301600490048101928215620018c35791602002820160005b838211156200188c57835183826101000a8154816001600160401b0302191690836001600160401b03160217905550926020019260080160208160070104928301926001030262001840565b8015620018c15782816101000a8154906001600160401b0302191690556008016020816007010492830192600103026200188c565b505b5062001812929150620018f1565b620018ee91905b80821115620018125760008155600101620018d8565b90565b620018ee91905b80821115620018125780546001600160401b0319168155600101620018f8565b61166780620019286000396000f3fe6080604052600436106101095760003560e01c8063942b765a11610095578063a9059cbb11610064578063a9059cbb1461047d578063d562a121146104b6578063dd62ed3e14610506578063e867a13614610541578063ec8ac4d81461055657610109565b8063942b765a146103a057806395d89b41146104055780639b48006a1461041a578063a457c2d71461044457610109565b806325b198eb116100dc57806325b198eb14610287578063313ce567146102ba57806339509351146102e557806370a082311461031e5780638292afd91461035157610109565b806306fdde0314610146578063095ea7b3146101d057806318160ddd1461021d57806323b872dd14610244575b34158061011d5750662386f26fc100003410155b61012657600080fd5b346101385761013361057c565b610144565b61014433346000610591565b005b34801561015257600080fd5b5061015b6106a0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019557818101518382015260200161017d565b50505050905090810190601f1680156101c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dc57600080fd5b50610209600480360360408110156101f357600080fd5b506001600160a01b03813516906020013561072e565b604080519115158252519081900360200190f35b34801561022957600080fd5b506102326107ab565b60408051918252519081900360200190f35b34801561025057600080fd5b506102096004803603606081101561026757600080fd5b506001600160a01b038135811691602081013590911690604001356107b2565b34801561029357600080fd5b50610209600480360360208110156102aa57600080fd5b50356001600160a01b031661087b565b3480156102c657600080fd5b506102cf610890565b6040805160ff9092168252519081900360200190f35b3480156102f157600080fd5b506102096004803603604081101561030857600080fd5b506001600160a01b038135169060200135610899565b34801561032a57600080fd5b506102326004803603602081101561034157600080fd5b50356001600160a01b0316610947565b34801561035d57600080fd5b506103846004803603602081101561037457600080fd5b50356001600160a01b0316610962565b604080516001600160a01b039092168252519081900360200190f35b3480156103ac57600080fd5b506103b561097d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103f15781810151838201526020016103d9565b505050509050019250505060405180910390f35b34801561041157600080fd5b5061015b6109df565b34801561042657600080fd5b506102326004803603602081101561043d57600080fd5b5035610a3a565b34801561045057600080fd5b506102096004803603604081101561046757600080fd5b506001600160a01b038135169060200135610a60565b34801561048957600080fd5b50610209600480360360408110156104a057600080fd5b506001600160a01b038135169060200135610aa9565b3480156104c257600080fd5b506104e0600480360360208110156104d957600080fd5b5035610abf565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561051257600080fd5b506102326004803603604081101561052957600080fd5b506001600160a01b0381358116916020013516610b41565b34801561054d57600080fd5b5061014461057c565b6101446004803603602081101561056c57600080fd5b50356001600160a01b0316610b6c565b61058e3061058933610947565b610aa9565b50565b60006105a2600c5484600d54610b8a565b90506032810460006105b48685610bf0565b905060006105c3878786610ced565b905060006105d18885610d59565b90506000821180156105eb57506001600160a01b03831615155b15610646576105fa8383610e47565b826001600160a01b0316886001600160a01b03167fd3a04ede06a5f514e14440898887c9dbab9494a5dc596e7b6a2f09c573d4ce74846040518082815260200191505060405180910390a35b8085038290036106563382610e47565b604080518981529051829133917f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed9181900360200190a3610695610ef8565b505050505050505050565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b505050505081565b60006001600160a01b03831661074357600080fd5b3360008181526001602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6002545b90565b6001600160a01b03831660009081526001602090815260408083203384529091528120546107e6908363ffffffff610f3316565b6001600160a01b0385166000908152600160209081526040808320338452909152902055610815848484610f48565b6001600160a01b0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60036020526000908152604090205460ff1681565b600a5460ff1681565b60006001600160a01b0383166108ae57600080fd5b3360009081526001602090815260408083206001600160a01b03871684529091529020546108e2908363ffffffff61105016565b3360008181526001602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b031660009081526020819052604090205490565b6007602052600090815260409020546001600160a01b031681565b606060048054806020026020016040519081016040528092919081815260200182805480156109d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109b7575b5050505050905090565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b600b546000903031908312156107a557610a59600b5484600d54611062565b9392505050565b60006001600160a01b038316610a7557600080fd5b3360009081526001602090815260408083206001600160a01b03871684529091529020546108e2908363ffffffff610f3316565b6000610ab6338484610f48565b50600192915050565b6000806000806000610ad6600c5487600d54610b8a565b3360009081526006602052604081205491925060328304918801818113610b005760009150610b2b565b888112610b1257601484049150610b2b565b60148985830281610b1f57fe5b0481610b2757fe5b0491505b5091955093509150508183038190039193509193565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b662386f26fc100003411610b7f57600080fd5b61058e333483610591565b600083830181610b9a86856110d6565b610ba483866110d6565b03671613a60b2fc640d00290506000610bc5610bc08487611101565b61113a565b90506000610bd6610bc08988611101565b606492909301929092036224a2e802059695505050505050565b60045460009060011180610c2857506004600081548110610c0d57fe5b6000918252602090912001546001600160a01b038481169116145b15610c35575060006107a5565b6001600160a01b0383811660009081526007602052604090205416610ccd576001600160a01b038216610c9e57610c6a611224565b6001600160a01b03848116600090815260076020526040902080546001600160a01b03191692909116919091179055610ccd565b6001600160a01b03838116600090815260076020526040902080546001600160a01b0319169184169190911790555b50506001600160a01b039081166000908152600760205260409020541690565b600080610cfa85856112c4565b90506000848212610d1f57601484049050610d198686600019026112c4565b50610d50565b6000821315610d505760148585840281610d3557fe5b0481610d3d57fe5b049050610d4e8683600019026112c4565b505b95945050505050565b600080610d6584610947565b610d6d6107ab565b0390506000805b600454811015610e3e57600060048281548110610d8d57fe5b60009182526020822001546001600160a01b03169150610dac82610947565b9050600081118015610dd05750876001600160a01b0316826001600160a01b031614155b15610e345760008588830281610de257fe5b049050610def8382610e47565b6040805182815290516001600160a01b038516917fd14ac56e8962bd2fdb77158ea567632ec3909fa94f0d0a128ecbec7fdcc881ea919081900360200190a293909301925b5050600101610d74565b50949350505050565b6001600160a01b038216610e5a57600080fd5b600254610e6d908263ffffffff61105016565b6002556001600160a01b038216600090815260208190526040902054610e99908263ffffffff61105016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610ef4826112ea565b5050565b610f006107ab565b600b8190553031600c55610f1f57670de0b6b3a7640000600d55610f31565b610f2d600b54600c54611371565b600d555b565b600082821115610f4257600080fd5b50900390565b6001600160a01b038216610f5b57600080fd5b6001600160a01b038316600090815260208190526040902054610f84908263ffffffff610f3316565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610fb9908263ffffffff61105016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a36001600160a01b0382163014801561102e5750336001600160a01b038416145b156110425761103d33826113ce565b61104b565b61104b826112ea565b505050565b600082820183811015610a5957600080fd5b6000828403671613a60b2fc640d0615fb480830582900591908705058361109061108b85611485565b611498565b905060006110a061108b8a611485565b9050600068056bc75e2d630fffff196185fc8587036713d24a43866f3d900285900384018a0202059a9950505050505050505050565b60006713d24a43866f3d90820261015e8405670de0b6b3a764000002816110f957fe5b059392505050565b6000806713d24a43866f3d90830261015e670de0b6b3a76400008602058161112557fe5b07905082818161113157fe5b05949350505050565b60006713d24a43866f3d9082066627a494870cde7b810482604082101561119757600e828154811061116857fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1690506111d2565b600e82607f03815481106111a757fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1690505b6000600f83815481106111e157fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16905080670de0b6b3a764000085840205019695505050505050565b60055460045460009160ff1610156112bc576005546004805460009260ff1690811061124c57fe5b6000918252602090912001546005546001600160a01b039091169150600960ff90911610801561128a575060045460055460001990910160ff909116105b156112aa576005805460ff8082166001011660ff199091161790556112b5565b6005805460ff191690555b90506107af565b5060006107af565b6001600160a01b0382166000908152600660205260409020805482019081905592915050565b6001600160a01b03811660009081526003602052604090205460ff1661058e576004805460018181019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0384166001600160a01b031990911681179091556000908152600360205260409020805460ff1916909117905550565b6000615fb48305671613a60b2fc640d08082056713d24a43866f3d900290839061139c908407611498565b90506709e92521c3379ec88183030161015e8102670de0b6b3a76400008702816113c257fe5b05979650505050505050565b600b543031908212156113ed576113ea600b5483600d54611062565b90505b6113f73083611594565b6040516001600160a01b0384169082156108fc029083906000818181858888f1935050505015801561142d573d6000803e3d6000fd5b5060408051828152905183916001600160a01b038616917fed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a9181900360200190a361147c8382600019026112c4565b5061104b610ef8565b671613a60b2fc640d0615fb49091050790565b60008181662c274c165f8c8167ffffffffffffffff83160467ffffffffffffffff1690506000604082101561150357601082815481106114d457fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16905061153e565b601082607f038154811061151357fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1690505b60006011838154811061154d57fe5b60009182526020822060048204015460039091166008026101000a900467ffffffffffffffff9081169250670de0b6b3a76400009086168402059091039695505050505050565b6001600160a01b0382166115a757600080fd5b6002546115ba908263ffffffff610f3316565b6002556001600160a01b0382166000908152602081905260409020546115e6908263ffffffff610f3316565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505056fea165627a7a72305820b883303d994d559c215389b8b0ab1e76ddc38818f70be6377a5ae2e2cc0e0cf20029"
}