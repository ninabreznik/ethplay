{
  "address": "0x4426d15ad435c156edc1183938ff47b37d3931fb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SimpleExchange",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity 0.4.25;\n\n/// @title provides subject to role checking logic\ncontract IAccessPolicy {\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    /// @notice We don't make this function constant to allow for state-updating access controls such as rate limiting.\n    /// @dev checks if subject belongs to requested role for particular object\n    /// @param subject address to be checked against role, typically msg.sender\n    /// @param role identifier of required role\n    /// @param object contract instance context for role checking, typically contract requesting the check\n    /// @param verb additional data, in current AccessControll implementation msg.sig\n    /// @return if subject belongs to a role\n    function allowed(\n        address subject,\n        bytes32 role,\n        address object,\n        bytes4 verb\n    )\n        public\n        returns (bool);\n}\n\n/// @title enables access control in implementing contract\n/// @dev see AccessControlled for implementation\ncontract IAccessControlled {\n\n    ////////////////////////\n    // Events\n    ////////////////////////\n\n    /// @dev must log on access policy change\n    event LogAccessPolicyChanged(\n        address controller,\n        IAccessPolicy oldPolicy,\n        IAccessPolicy newPolicy\n    );\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    /// @dev allows to change access control mechanism for this contract\n    ///     this method must be itself access controlled, see AccessControlled implementation and notice below\n    /// @notice it is a huge issue for Solidity that modifiers are not part of function signature\n    ///     then interfaces could be used for example to control access semantics\n    /// @param newPolicy new access policy to controll this contract\n    /// @param newAccessController address of ROLE_ACCESS_CONTROLLER of new policy that can set access to this contract\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n        public;\n\n    function accessPolicy()\n        public\n        constant\n        returns (IAccessPolicy);\n\n}\n\ncontract StandardRoles {\n\n    ////////////////////////\n    // Constants\n    ////////////////////////\n\n    // @notice Soldity somehow doesn't evaluate this compile time\n    // @dev role which has rights to change permissions and set new policy in contract, keccak256(\"AccessController\")\n    bytes32 internal constant ROLE_ACCESS_CONTROLLER = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n}\n\n/// @title Granular code execution permissions\n/// @notice Intended to replace existing Ownable pattern with more granular permissions set to execute smart contract functions\n///     for each function where 'only' modifier is applied, IAccessPolicy implementation is called to evaluate if msg.sender belongs to required role for contract being called.\n///     Access evaluation specific belong to IAccessPolicy implementation, see RoleBasedAccessPolicy for details.\n/// @dev Should be inherited by a contract requiring such permissions controll. IAccessPolicy must be provided in constructor. Access policy may be replaced to a different one\n///     by msg.sender with ROLE_ACCESS_CONTROLLER role\ncontract AccessControlled is IAccessControlled, StandardRoles {\n\n    ////////////////////////\n    // Mutable state\n    ////////////////////////\n\n    IAccessPolicy private _accessPolicy;\n\n    ////////////////////////\n    // Modifiers\n    ////////////////////////\n\n    /// @dev limits function execution only to senders assigned to required 'role'\n    modifier only(bytes32 role) {\n        require(_accessPolicy.allowed(msg.sender, role, this, msg.sig));\n        _;\n    }\n\n    ////////////////////////\n    // Constructor\n    ////////////////////////\n\n    constructor(IAccessPolicy policy) internal {\n        require(address(policy) != 0x0);\n        _accessPolicy = policy;\n    }\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    //\n    // Implements IAccessControlled\n    //\n\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n        public\n        only(ROLE_ACCESS_CONTROLLER)\n    {\n        // ROLE_ACCESS_CONTROLLER must be present\n        // under the new policy. This provides some\n        // protection against locking yourself out.\n        require(newPolicy.allowed(newAccessController, ROLE_ACCESS_CONTROLLER, this, msg.sig));\n\n        // We can now safely set the new policy without foot shooting.\n        IAccessPolicy oldPolicy = _accessPolicy;\n        _accessPolicy = newPolicy;\n\n        // Log event\n        emit LogAccessPolicyChanged(msg.sender, oldPolicy, newPolicy);\n    }\n\n    function accessPolicy()\n        public\n        constant\n        returns (IAccessPolicy)\n    {\n        return _accessPolicy;\n    }\n}\n\ncontract Math {\n\n    ////////////////////////\n    // Internal functions\n    ////////////////////////\n\n    // absolute difference: |v1 - v2|\n    function absDiff(uint256 v1, uint256 v2)\n        internal\n        pure\n        returns(uint256)\n    {\n        return v1 > v2 ? v1 - v2 : v2 - v1;\n    }\n\n    // divide v by d, round up if remainder is 0.5 or more\n    function divRound(uint256 v, uint256 d)\n        internal\n        pure\n        returns(uint256)\n    {\n        return add(v, d/2) / d;\n    }\n\n    // computes decimal decimalFraction 'frac' of 'amount' with maximum precision (multiplication first)\n    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\n    // mind loss of precision as decimal fractions do not have finite binary expansion\n    // do not use instead of division\n    function decimalFraction(uint256 amount, uint256 frac)\n        internal\n        pure\n        returns(uint256)\n    {\n        // it's like 1 ether is 100% proportion\n        return proportion(amount, frac, 10**18);\n    }\n\n    // computes part/total of amount with maximum precision (multiplication first)\n    // part and total must have the same units\n    function proportion(uint256 amount, uint256 part, uint256 total)\n        internal\n        pure\n        returns(uint256)\n    {\n        return divRound(mul(amount, part), total);\n    }\n\n    //\n    // Open Zeppelin Math library below\n    //\n\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a > b ? a : b;\n    }\n}\n\n/// @title standard access roles of the Platform\n/// @dev constants are kept in CODE not in STORAGE so they are comparatively cheap\ncontract AccessRoles {\n\n    ////////////////////////\n    // Constants\n    ////////////////////////\n\n    // NOTE: All roles are set to the keccak256 hash of the\n    // CamelCased role name, i.e.\n    // ROLE_LOCKED_ACCOUNT_ADMIN = keccak256(\"LockedAccountAdmin\")\n\n    // May issue (generate) Neumarks\n    bytes32 internal constant ROLE_NEUMARK_ISSUER = 0x921c3afa1f1fff707a785f953a1e197bd28c9c50e300424e015953cbf120c06c;\n\n    // May burn Neumarks it owns\n    bytes32 internal constant ROLE_NEUMARK_BURNER = 0x19ce331285f41739cd3362a3ec176edffe014311c0f8075834fdd19d6718e69f;\n\n    // May create new snapshots on Neumark\n    bytes32 internal constant ROLE_SNAPSHOT_CREATOR = 0x08c1785afc57f933523bc52583a72ce9e19b2241354e04dd86f41f887e3d8174;\n\n    // May enable/disable transfers on Neumark\n    bytes32 internal constant ROLE_TRANSFER_ADMIN = 0xb6527e944caca3d151b1f94e49ac5e223142694860743e66164720e034ec9b19;\n\n    // may reclaim tokens/ether from contracts supporting IReclaimable interface\n    bytes32 internal constant ROLE_RECLAIMER = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n\n    // represents legally platform operator in case of forks and contracts with legal agreement attached. keccak256(\"PlatformOperatorRepresentative\")\n    bytes32 internal constant ROLE_PLATFORM_OPERATOR_REPRESENTATIVE = 0xb2b321377653f655206f71514ff9f150d0822d062a5abcf220d549e1da7999f0;\n\n    // allows to deposit EUR-T and allow addresses to send and receive EUR-T. keccak256(\"EurtDepositManager\")\n    bytes32 internal constant ROLE_EURT_DEPOSIT_MANAGER = 0x7c8ecdcba80ce87848d16ad77ef57cc196c208fc95c5638e4a48c681a34d4fe7;\n\n    // allows to register identities and change associated claims keccak256(\"IdentityManager\")\n    bytes32 internal constant ROLE_IDENTITY_MANAGER = 0x32964e6bc50f2aaab2094a1d311be8bda920fc4fb32b2fb054917bdb153a9e9e;\n\n    // allows to replace controller on euro token and to destroy tokens without withdraw kecckak256(\"EurtLegalManager\")\n    bytes32 internal constant ROLE_EURT_LEGAL_MANAGER = 0x4eb6b5806954a48eb5659c9e3982d5e75bfb2913f55199877d877f157bcc5a9b;\n\n    // allows to change known interfaces in universe kecckak256(\"UniverseManager\")\n    bytes32 internal constant ROLE_UNIVERSE_MANAGER = 0xe8d8f8f9ea4b19a5a4368dbdace17ad71a69aadeb6250e54c7b4c7b446301738;\n\n    // allows to exchange gas for EUR-T keccak(\"GasExchange\")\n    bytes32 internal constant ROLE_GAS_EXCHANGE = 0x9fe43636e0675246c99e96d7abf9f858f518b9442c35166d87f0934abef8a969;\n\n    // allows to set token exchange rates keccak(\"TokenRateOracle\")\n    bytes32 internal constant ROLE_TOKEN_RATE_ORACLE = 0xa80c3a0c8a5324136e4c806a778583a2a980f378bdd382921b8d28dcfe965585;\n}\n\ncontract IBasicToken {\n\n    ////////////////////////\n    // Events\n    ////////////////////////\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 amount\n    );\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply()\n        public\n        constant\n        returns (uint256);\n\n    /// @param owner The address that's balance is being requested\n    /// @return The balance of `owner` at the current block\n    function balanceOf(address owner)\n        public\n        constant\n        returns (uint256 balance);\n\n    /// @notice Send `amount` tokens to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address to, uint256 amount)\n        public\n        returns (bool success);\n\n}\n\n/// @title allows deriving contract to recover any token or ether that it has balance of\n/// @notice note that this opens your contracts to claims from various people saying they lost tokens and they want them back\n///     be ready to handle such claims\n/// @dev use with care!\n///     1. ROLE_RECLAIMER is allowed to claim tokens, it's not returning tokens to original owner\n///     2. in derived contract that holds any token by design you must override `reclaim` and block such possibility.\n///         see ICBMLockedAccount as an example\ncontract Reclaimable is AccessControlled, AccessRoles {\n\n    ////////////////////////\n    // Constants\n    ////////////////////////\n\n    IBasicToken constant internal RECLAIM_ETHER = IBasicToken(0x0);\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    function reclaim(IBasicToken token)\n        public\n        only(ROLE_RECLAIMER)\n    {\n        address reclaimer = msg.sender;\n        if(token == RECLAIM_ETHER) {\n            reclaimer.transfer(address(this).balance);\n        } else {\n            uint256 balance = token.balanceOf(this);\n            require(token.transfer(reclaimer, balance));\n        }\n    }\n}\n\n/// @title uniquely identifies deployable (non-abstract) platform contract\n/// @notice cheap way of assigning implementations to knownInterfaces which represent system services\n///         unfortunatelly ERC165 does not include full public interface (ABI) and does not provide way to list implemented interfaces\n///         EIP820 still in the making\n/// @dev ids are generated as follows keccak256(\"neufund-platform:<contract name>\")\n///      ids roughly correspond to ABIs\ncontract IContractId {\n    /// @param id defined as above\n    /// @param version implementation version\n    function contractId() public pure returns (bytes32 id, uint256 version);\n}\n\ncontract IERC20Allowance {\n\n    ////////////////////////\n    // Events\n    ////////////////////////\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param owner The address of the account that owns the token\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of owner that spender is allowed\n    ///  to spend\n    function allowance(address owner, address spender)\n        public\n        constant\n        returns (uint256 remaining);\n\n    /// @notice `msg.sender` approves `spender` to spend `amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address spender, uint256 amount)\n        public\n        returns (bool success);\n\n    /// @notice Send `amount` tokens to `to` from `from` on the condition it\n    ///  is approved by `from`\n    /// @param from The address holding the tokens being transferred\n    /// @param to The address of the recipient\n    /// @param amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        returns (bool success);\n\n}\n\ncontract IERC20Token is IBasicToken, IERC20Allowance {\n\n}\n\ncontract ITokenMetadata {\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    function symbol()\n        public\n        constant\n        returns (string);\n\n    function name()\n        public\n        constant\n        returns (string);\n\n    function decimals()\n        public\n        constant\n        returns (uint8);\n}\n\ncontract IERC223Token is IERC20Token, ITokenMetadata {\n\n    /// @dev Departure: We do not log data, it has no advantage over a standard\n    ///     log event. By sticking to the standard log event we\n    ///     stay compatible with constracts that expect and ERC20 token.\n\n    // event Transfer(\n    //    address indexed from,\n    //    address indexed to,\n    //    uint256 amount,\n    //    bytes data);\n\n\n    /// @dev Departure: We do not use the callback on regular transfer calls to\n    ///     stay compatible with constracts that expect and ERC20 token.\n\n    // function transfer(address to, uint256 amount)\n    //     public\n    //     returns (bool);\n\n    ////////////////////////\n    // Public functions\n    ////////////////////////\n\n    function transfer(address to, uint256 amount, bytes data)\n        public\n        returns (bool);\n}\n\ncontract IGasExchange {\n\n    ////////////////////////\n    // Events\n    ////////////////////////\n\n    /// @notice logged on eur-t to gas (ether) exchange\n    /// gasRecipient obtained amountWei gas, there is additional fee of exchangeFeeEurUlps\n    event LogGasExchange(\n        address indexed gasRecipient,\n        uint256 amountEurUlps,\n        uint256 exchangeFeeFrac,\n        uint256 amountWei,\n        uint256 rate\n    );\n\n    event LogSetExchangeRate(\n        address indexed numeratorToken,\n        address indexed denominatorToken,\n        uint256 rate\n    );\n\n    event LogReceivedEther(\n        address sender,\n        uint256 amount,\n        uint256 balance\n    );\n\n    ////////////////////////\n    // Public methods\n    ////////////////////////\n\n    /// @notice will exchange amountEurUlps of gasRecipient balance into ether\n    /// @dev EuroTokenController has permanent allowance for gasExchange contract to make such exchange possible when gasRecipient has no Ether\n    ///     (chicken and egg problem is solved). The rate from token rate oracle will be used\n    ///     exchangeFeeFraction will be deduced before the exchange happens\n    /// @dev you should probably apply access modifier in the implementation\n    function gasExchange(address gasRecipient, uint256 amountEurUlps, uint256 exchangeFeeFraction)\n        public;\n\n    /// @notice see above. allows for batching gas exchanges\n    function gasExchangeMultiple(address[] gasRecipients, uint256[] amountsEurUlps, uint256 exchangeFeeFraction)\n        public;\n\n    /// sets current euro to ether exchange rate, also sets inverse\n    /// ROLE_TOKEN_RATE_ORACLE is allowed to provide rates. we do not implement decentralized oracle here\n    /// there is no so actual working decentralized oracle ecosystem\n    /// the closes is MakerDao Medianizer at https://etherscan.io/address/0x729D19f657BD0614b4985Cf1D82531c67569197B#code but it's still centralized and only USD/ETH\n    /// Oraclize is centralized and you still need to pay fees.\n    /// Gnosis does not seem to be working\n    /// it seems that for Neufund investor it's best to trust Platform Operator to provide correct information, Platform is aligned via NEU and has no incentive to lie\n    /// SimpleExchange is replaceable via Universe. when proper oracle is available we'll move to it\n    /// @param numeratorToken token to be converted from\n    /// @param denominatorToken token to be converted to\n    /// @param rateFraction a decimal fraction (see Math.decimalFraction) of numeratorToken to denominatorToken\n    /// example: to set rate of eur to eth you provide (euroToken, etherToken, 0.0016129032258064516129032*10**18)\n    /// example: to set rate of eth to eur you provide (etherToken, euroToken, 620*10**18)\n    /// @dev you should probably apply access modifier in the implementation\n    function setExchangeRate(IERC223Token numeratorToken, IERC223Token denominatorToken, uint256 rateFraction)\n        public;\n\n    /// @notice see above. allows for batching gas exchanges\n    /// @dev you should probably apply access modifier in the implementation\n    function setExchangeRates(IERC223Token[] numeratorTokens, IERC223Token[] denominatorTokens, uint256[] rateFractions)\n        public;\n}\n\ncontract ITokenExchangeRateOracle {\n    /// @notice provides actual price of 'numeratorToken' in 'denominatorToken'\n    ///     returns timestamp at which price was obtained in oracle\n    function getExchangeRate(address numeratorToken, address denominatorToken)\n        public\n        constant\n        returns (uint256 rateFraction, uint256 timestamp);\n\n    /// @notice allows to retreive multiple exchange rates in once call\n    function getExchangeRates(address[] numeratorTokens, address[] denominatorTokens)\n        public\n        constant\n        returns (uint256[] rateFractions, uint256[] timestamps);\n}\n\n/// @title simple exchange providing EUR to ETH exchange rate and gas exchange\n/// see below discussion on oracle type used\ncontract SimpleExchange is\n    ITokenExchangeRateOracle,\n    IGasExchange,\n    IContractId,\n    Reclaimable,\n    Math\n{\n    ////////////////////////\n    // Data types\n    ////////////////////////\n\n    struct TokenRate {\n        // rate of numerator token to denominator token\n        uint128 rateFraction;\n        // timestamp of where rate was updated\n        uint128 timestamp;\n    }\n\n    ////////////////////////\n    // Immutable state\n    ////////////////////////\n\n    // ether token to store and transfer ether\n    IERC223Token private ETHER_TOKEN;\n    // euro token to store and transfer euro\n    IERC223Token private EURO_TOKEN;\n\n    ////////////////////////\n    // Mutable state\n    ////////////////////////\n\n    // rate from numerator to denominator\n    mapping (address => mapping (address => TokenRate)) private _rates;\n\n    ////////////////////////\n    // Constructor\n    ////////////////////////\n\n    constructor(\n        IAccessPolicy accessPolicy,\n        IERC223Token euroToken,\n        IERC223Token etherToken\n    )\n        AccessControlled(accessPolicy)\n        Reclaimable()\n        public\n    {\n        EURO_TOKEN = euroToken;\n        ETHER_TOKEN = etherToken;\n    }\n\n    ////////////////////////\n    // Public methods\n    ////////////////////////\n\n    //\n    // Implements IGasExchange\n    //\n\n    function gasExchange(address gasRecipient, uint256 amountEurUlps, uint256 exchangeFeeFraction)\n        public\n        only(ROLE_GAS_EXCHANGE)\n    {\n        // fee must be less than 100%\n        assert(exchangeFeeFraction < 10**18);\n        (uint256 rate, uint256 rateTimestamp) = getExchangeRatePrivate(EURO_TOKEN, ETHER_TOKEN);\n        // require if rate older than 1 hours\n        require(block.timestamp - rateTimestamp < 1 hours, \"NF_SEX_OLD_RATE\");\n        gasExchangePrivate(gasRecipient, amountEurUlps, exchangeFeeFraction, rate);\n    }\n\n    function gasExchangeMultiple(\n        address[] gasRecipients,\n        uint256[] amountsEurUlps,\n        uint256 exchangeFeeFraction\n    )\n        public\n        only(ROLE_GAS_EXCHANGE)\n    {\n        // fee must be less than 100%\n        assert(exchangeFeeFraction < 10**18);\n        require(gasRecipients.length == amountsEurUlps.length);\n        (uint256 rate, uint256 rateTimestamp) = getExchangeRatePrivate(EURO_TOKEN, ETHER_TOKEN);\n        // require if rate older than 1 hours\n        require(block.timestamp - rateTimestamp < 1 hours, \"NF_SEX_OLD_RATE\");\n        uint256 idx;\n        while(idx < gasRecipients.length) {\n            gasExchangePrivate(gasRecipients[idx], amountsEurUlps[idx], exchangeFeeFraction, rate);\n            idx += 1;\n        }\n    }\n\n    /// @notice please read method description in the interface\n    /// @dev we always set a rate and an inverse rate! so you call once with eur/eth and you also get eth/eur\n    function setExchangeRate(IERC223Token numeratorToken, IERC223Token denominatorToken, uint256 rateFraction)\n        public\n        only(ROLE_TOKEN_RATE_ORACLE)\n    {\n        setExchangeRatePrivate(numeratorToken, denominatorToken, rateFraction);\n    }\n\n    function setExchangeRates(IERC223Token[] numeratorTokens, IERC223Token[] denominatorTokens, uint256[] rateFractions)\n        public\n        only(ROLE_TOKEN_RATE_ORACLE)\n    {\n        require(numeratorTokens.length == denominatorTokens.length);\n        require(numeratorTokens.length == rateFractions.length);\n        for(uint256 idx = 0; idx < numeratorTokens.length; idx++) {\n            setExchangeRatePrivate(numeratorTokens[idx], denominatorTokens[idx], rateFractions[idx]);\n        }\n    }\n\n    //\n    // Implements ITokenExchangeRateOracle\n    //\n\n    function getExchangeRate(address numeratorToken, address denominatorToken)\n        public\n        constant\n        returns (uint256 rateFraction, uint256 timestamp)\n    {\n        return getExchangeRatePrivate(numeratorToken, denominatorToken);\n    }\n\n    function getExchangeRates(address[] numeratorTokens, address[] denominatorTokens)\n        public\n        constant\n        returns (uint256[] rateFractions, uint256[] timestamps)\n    {\n        require(numeratorTokens.length == denominatorTokens.length);\n        uint256 idx;\n        rateFractions = new uint256[](numeratorTokens.length);\n        timestamps = new uint256[](denominatorTokens.length);\n        while(idx < numeratorTokens.length) {\n            (uint256 rate, uint256 timestamp) = getExchangeRatePrivate(numeratorTokens[idx], denominatorTokens[idx]);\n            rateFractions[idx] = rate;\n            timestamps[idx] = timestamp;\n            idx += 1;\n        }\n    }\n\n    //\n    // Implements IContractId\n    //\n\n    function contractId() public pure returns (bytes32 id, uint256 version) {\n        return (0x434a1a753d1d39381c462f37c155e520ae6f86ad79289abca9cde354a0cebd68, 0);\n    }\n\n    //\n    // Override default function\n    //\n\n    function () external payable {\n        emit LogReceivedEther(msg.sender, msg.value, address(this).balance);\n    }\n\n    ////////////////////////\n    // Private methods\n    ////////////////////////\n\n    function gasExchangePrivate(\n        address gasRecipient,\n        uint256 amountEurUlps,\n        uint256 exchangeFeeFraction,\n        uint256 rate\n    )\n        private\n    {\n        // exchange declared amount - the exchange fee, no overflow, fee < 0\n        uint256 amountEthWei = decimalFraction(amountEurUlps - decimalFraction(amountEurUlps, exchangeFeeFraction), rate);\n        // take all euro tokens\n        assert(EURO_TOKEN.transferFrom(gasRecipient, this, amountEurUlps));\n        // transfer ether to gasRecipient\n        gasRecipient.transfer(amountEthWei);\n\n        emit LogGasExchange(gasRecipient, amountEurUlps, exchangeFeeFraction, amountEthWei, rate);\n    }\n\n    function getExchangeRatePrivate(address numeratorToken, address denominatorToken)\n        private\n        constant\n        returns (uint256 rateFraction, uint256 timestamp)\n    {\n        TokenRate storage requested_rate = _rates[numeratorToken][denominatorToken];\n        TokenRate storage inversed_requested_rate = _rates[denominatorToken][numeratorToken];\n        if (requested_rate.timestamp > 0) {\n            return (requested_rate.rateFraction, requested_rate.timestamp);\n        }\n        else if (inversed_requested_rate.timestamp > 0) {\n            uint256 invRateFraction = proportion(10**18, 10**18, inversed_requested_rate.rateFraction);\n            return (invRateFraction, inversed_requested_rate.timestamp);\n        }\n        // will return (0, 0) == (rateFraction, timestamp)\n    }\n\n    function setExchangeRatePrivate(\n        IERC223Token numeratorToken,\n        IERC223Token denominatorToken,\n        uint256 rateFraction\n    )\n        private\n    {\n        require(numeratorToken != denominatorToken, \"NF_SEX_SAME_N_D\");\n        assert(rateFraction > 0);\n        assert(rateFraction < 2**128);\n        uint256 invRateFraction = proportion(10**18, 10**18, rateFraction);\n\n        // Inversion of rate biger than 10**36 is not possible and it will always be 0.\n        // require(invRateFraction < 2**128, \"NF_SEX_OVR_INV\");\n        require(denominatorToken.decimals() == numeratorToken.decimals(), \"NF_SEX_DECIMALS\");\n        // TODO: protect against outliers\n\n        if (_rates[denominatorToken][numeratorToken].timestamp > 0) {\n            _rates[denominatorToken][numeratorToken] = TokenRate({\n                rateFraction: uint128(invRateFraction),\n                timestamp: uint128(block.timestamp)\n            });\n        }\n        else {\n            _rates[numeratorToken][denominatorToken] = TokenRate({\n                rateFraction: uint128(rateFraction),\n                timestamp: uint128(block.timestamp)\n            });\n        }\n\n        emit LogSetExchangeRate(numeratorToken, denominatorToken, rateFraction);\n        emit LogSetExchangeRate(denominatorToken, numeratorToken, invRateFraction);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"gasRecipient\",\"type\":\"address\"},{\"name\":\"amountEurUlps\",\"type\":\"uint256\"},{\"name\":\"exchangeFeeFraction\",\"type\":\"uint256\"}],\"name\":\"gasExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPolicy\",\"type\":\"address\"},{\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"setAccessPolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gasRecipients\",\"type\":\"address[]\"},{\"name\":\"amountsEurUlps\",\"type\":\"uint256[]\"},{\"name\":\"exchangeFeeFraction\",\"type\":\"uint256\"}],\"name\":\"gasExchangeMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numeratorToken\",\"type\":\"address\"},{\"name\":\"denominatorToken\",\"type\":\"address\"},{\"name\":\"rateFraction\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numeratorTokens\",\"type\":\"address[]\"},{\"name\":\"denominatorTokens\",\"type\":\"address[]\"}],\"name\":\"getExchangeRates\",\"outputs\":[{\"name\":\"rateFractions\",\"type\":\"uint256[]\"},{\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numeratorToken\",\"type\":\"address\"},{\"name\":\"denominatorToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"rateFraction\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numeratorTokens\",\"type\":\"address[]\"},{\"name\":\"denominatorTokens\",\"type\":\"address[]\"},{\"name\":\"rateFractions\",\"type\":\"uint256[]\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"accessPolicy\",\"type\":\"address\"},{\"name\":\"euroToken\",\"type\":\"address\"},{\"name\":\"etherToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldPolicy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPolicy\",\"type\":\"address\"}],\"name\":\"LogAccessPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gasRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountEurUlps\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeFeeFrac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogGasExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"numeratorToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"denominatorToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogSetExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogReceivedEther\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ae38c27e646959735ec70d77ed4ecc03a3eff49000000000000000000000000061646f3bede9e1a24d387feb661888b4cc1587d80000000000000000000000000b7dc5a43ce121b4eaaa41b0f4f43bba47bb8951"
}