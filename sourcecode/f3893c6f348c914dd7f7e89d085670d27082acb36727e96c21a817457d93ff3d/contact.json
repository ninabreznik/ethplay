{
  "address": "0x1e891c587b345ab02a31b57c1f926fb08913d10d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GU: Shiny Legendary Pack Four",
  "contractName": "ShinyLegendaryPackFour",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity 0.4.24;\n\ncontract Ownable {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\ncontract Vault is Ownable { \n\n    function () public payable {\n\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(address(this).balance >= amount);\n        owner.transfer(amount);\n    }\n\n    function withdrawAll() public onlyOwner {\n        withdraw(address(this).balance);\n    }\n}\n\ncontract ERC20 {\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    function allowance(address owner, address spender) public view returns (uint256);\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n    \n    function transfer(address to, uint256 value) public returns (bool);\n    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract TournamentPass is ERC20, Ownable {\n\n    using SafeMath for uint256;\n\n    Vault vault;\n\n    constructor(Vault _vault) public {\n        vault = _vault;\n    }\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    address[] public minters;\n    uint256 supply;\n    uint mintLimit = 20000;\n    \n    function name() public view returns (string){\n        return \"GU Tournament Passes\";\n    }\n\n    function symbol() public view returns (string) {\n        return \"PASS\";\n    }\n\n    function addMinter(address minter) public onlyOwner {\n        minters.push(minter);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return supply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function isMinter(address test) internal view returns (bool) {\n        for (uint i = 0; i < minters.length; i++) {\n            if (minters[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function mint(address to, uint amount) public returns (bool) {\n        require(isMinter(msg.sender));\n        if (amount.add(supply) > mintLimit) {\n            return false;\n        } \n        supply = supply.add(amount);\n        balances[to] = balances[to].add(amount);\n        emit Transfer(address(0), to, amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][spender];\n        if (subtractedValue > oldValue) {\n            allowed[msg.sender][spender] = 0;\n        } else {\n            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    uint public price = 250 finney;\n\n    function purchase(uint amount) public payable {\n        \n        require(msg.value >= price.mul(amount));\n        require(supply.add(amount) <= mintLimit);\n\n        supply = supply.add(amount);\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        emit Transfer(address(0), msg.sender, amount);\n\n        address(vault).transfer(msg.value);\n    }\n\n}\n\ncontract CappedVault is Vault { \n\n    uint public limit;\n    uint withdrawn = 0;\n\n    constructor() public {\n        limit = 33333 ether;\n    }\n\n    function () public payable {\n        require(total() + msg.value <= limit);\n    }\n\n    function total() public view returns(uint) {\n        return getBalance() + withdrawn;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(address(this).balance >= amount);\n        owner.transfer(amount);\n        withdrawn += amount;\n    }\n\n}\n\n\ncontract PreviousInterface {\n\n    function ownerOf(uint id) public view returns (address);\n\n    function getCard(uint id) public view returns (uint16, uint16);\n\n    function totalSupply() public view returns (uint);\n\n    function burnCount() public view returns (uint);\n\n}\n\ncontract Pausable is Ownable {\n    \n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract Governable {\n\n    event Pause();\n    event Unpause();\n\n    address public governor;\n    bool public paused = false;\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    function setGovernor(address _gov) public onlyGovernor {\n        governor = _gov;\n    }\n\n    modifier onlyGovernor {\n        require(msg.sender == governor);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyGovernor whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyGovernor whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n}\n\ncontract CardBase is Governable {\n\n\n    struct Card {\n        uint16 proto;\n        uint16 purity;\n    }\n\n    function getCard(uint id) public view returns (uint16 proto, uint16 purity) {\n        Card memory card = cards[id];\n        return (card.proto, card.purity);\n    }\n\n    function getShine(uint16 purity) public pure returns (uint8) {\n        return uint8(purity / 1000);\n    }\n\n    Card[] public cards;\n    \n}\n\ncontract CardProto is CardBase {\n\n    event NewProtoCard(\n        uint16 id, uint8 season, uint8 god, \n        Rarity rarity, uint8 mana, uint8 attack, \n        uint8 health, uint8 cardType, uint8 tribe, bool packable\n    );\n\n    struct Limit {\n        uint64 limit;\n        bool exists;\n    }\n\n    // limits for mythic cards\n    mapping(uint16 => Limit) public limits;\n\n    // can only set limits once\n    function setLimit(uint16 id, uint64 limit) public onlyGovernor {\n        Limit memory l = limits[id];\n        require(!l.exists);\n        limits[id] = Limit({\n            limit: limit,\n            exists: true\n        });\n    }\n\n    function getLimit(uint16 id) public view returns (uint64 limit, bool set) {\n        Limit memory l = limits[id];\n        return (l.limit, l.exists);\n    }\n\n    // could make these arrays to save gas\n    // not really necessary - will be update a very limited no of times\n    mapping(uint8 => bool) public seasonTradable;\n    mapping(uint8 => bool) public seasonTradabilityLocked;\n    uint8 public currentSeason;\n\n    function makeTradable(uint8 season) public onlyGovernor {\n        seasonTradable[season] = true;\n    }\n\n    function makeUntradable(uint8 season) public onlyGovernor {\n        require(!seasonTradabilityLocked[season]);\n        seasonTradable[season] = false;\n    }\n\n    function makePermanantlyTradable(uint8 season) public onlyGovernor {\n        require(seasonTradable[season]);\n        seasonTradabilityLocked[season] = true;\n    }\n\n    function isTradable(uint16 proto) public view returns (bool) {\n        return seasonTradable[protos[proto].season];\n    }\n\n    function nextSeason() public onlyGovernor {\n        //Seasons shouldn't go to 0 if there is more than the uint8 should hold, the governor should know this ¯\\_(ツ)_/¯ -M\n        require(currentSeason <= 255); \n\n        currentSeason++;\n        mythic.length = 0;\n        legendary.length = 0;\n        epic.length = 0;\n        rare.length = 0;\n        common.length = 0;\n    }\n\n    enum Rarity {\n        Common,\n        Rare,\n        Epic,\n        Legendary, \n        Mythic\n    }\n\n    uint8 constant SPELL = 1;\n    uint8 constant MINION = 2;\n    uint8 constant WEAPON = 3;\n    uint8 constant HERO = 4;\n\n    struct ProtoCard {\n        bool exists;\n        uint8 god;\n        uint8 season;\n        uint8 cardType;\n        Rarity rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    // there is a particular design decision driving this:\n    // need to be able to iterate over mythics only for card generation\n    // don't store 5 different arrays: have to use 2 ids\n    // better to bear this cost (2 bytes per proto card)\n    // rather than 1 byte per instance\n\n    uint16 public protoCount;\n    \n    mapping(uint16 => ProtoCard) protos;\n\n    uint16[] public mythic;\n    uint16[] public legendary;\n    uint16[] public epic;\n    uint16[] public rare;\n    uint16[] public common;\n\n    function addProtos(\n        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, \n        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable\n    ) public onlyGovernor returns(uint16) {\n\n        for (uint i = 0; i < externalIDs.length; i++) {\n\n            ProtoCard memory card = ProtoCard({\n                exists: true,\n                god: gods[i],\n                season: currentSeason,\n                cardType: cardTypes[i],\n                rarity: rarities[i],\n                mana: manas[i],\n                attack: attacks[i],\n                health: healths[i],\n                tribe: tribes[i]\n            });\n\n            _addProto(externalIDs[i], card, packable[i]);\n        }\n        \n    }\n\n    function addProto(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: cardType,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addWeapon(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 durability, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: WEAPON,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: durability,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addSpell(uint16 externalID, uint8 god, Rarity rarity, uint8 mana, bool packable) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: SPELL,\n            rarity: rarity,\n            mana: mana,\n            attack: 0,\n            health: 0,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addMinion(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: MINION,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function _addProto(uint16 externalID, ProtoCard memory card, bool packable) internal {\n\n        require(!protos[externalID].exists);\n\n        card.exists = true;\n\n        protos[externalID] = card;\n\n        protoCount++;\n\n        emit NewProtoCard(\n            externalID, currentSeason, card.god, \n            card.rarity, card.mana, card.attack, \n            card.health, card.cardType, card.tribe, packable\n        );\n\n        if (packable) {\n            Rarity rarity = card.rarity;\n            if (rarity == Rarity.Common) {\n                common.push(externalID);\n            } else if (rarity == Rarity.Rare) {\n                rare.push(externalID);\n            } else if (rarity == Rarity.Epic) {\n                epic.push(externalID);\n            } else if (rarity == Rarity.Legendary) {\n                legendary.push(externalID);\n            } else if (rarity == Rarity.Mythic) {\n                mythic.push(externalID);\n            } else {\n                require(false);\n            }\n        }\n    }\n\n    function getProto(uint16 id) public view returns(\n        bool exists, uint8 god, uint8 season, uint8 cardType, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) {\n        ProtoCard memory proto = protos[id];\n        return (\n            proto.exists,\n            proto.god,\n            proto.season,\n            proto.cardType,\n            proto.rarity,\n            proto.mana,\n            proto.attack,\n            proto.health,\n            proto.tribe\n        );\n    }\n\n    function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16) {\n        // modulo bias is fine - creates rarity tiers etc\n        // will obviously revert is there are no cards of that type: this is expected - should never happen\n        if (rarity == Rarity.Common) {\n            return common[random % common.length];\n        } else if (rarity == Rarity.Rare) {\n            return rare[random % rare.length];\n        } else if (rarity == Rarity.Epic) {\n            return epic[random % epic.length];\n        } else if (rarity == Rarity.Legendary) {\n            return legendary[random % legendary.length];\n        } else if (rarity == Rarity.Mythic) {\n            // make sure a mythic is available\n            uint16 id;\n            uint64 limit;\n            bool set;\n            for (uint i = 0; i < mythic.length; i++) {\n                id = mythic[(random + i) % mythic.length];\n                (limit, set) = getLimit(id);\n                if (set && limit > 0){\n                    return id;\n                }\n            }\n            // if not, they get a legendary :(\n            return legendary[random % legendary.length];\n        }\n        require(false);\n        return 0;\n    }\n\n    // can never adjust tradable cards\n    // each season gets a 'balancing beta'\n    // totally immutable: season, rarity\n    function replaceProto(\n        uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) public onlyGovernor {\n        ProtoCard memory pc = protos[index];\n        require(!seasonTradable[pc.season]);\n        protos[index] = ProtoCard({\n            exists: true,\n            god: god,\n            season: pc.season,\n            cardType: cardType,\n            rarity: pc.rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n    }\n\n}\n\ncontract MigrationInterface {\n\n    function createCard(address user, uint16 proto, uint16 purity) public returns (uint);\n\n    function getRandomCard(CardProto.Rarity rarity, uint16 random) public view returns (uint16);\n\n    function migrate(uint id) public;\n\n}\ncontract CardPackFour {\n\n    MigrationInterface public migration;\n    uint public creationBlock;\n\n    constructor(MigrationInterface _core) public payable {\n        migration = _core;\n        creationBlock = 5939061 + 2000; // set to creation block of first contracts + 8 hours for down time\n    }\n\n    event Referral(address indexed referrer, uint value, address purchaser);\n\n    /**\n    * purchase 'count' of this type of pack\n    */\n    function purchase(uint16 packCount, address referrer) public payable;\n\n    // store purity and shine as one number to save users gas\n    function _getPurity(uint16 randOne, uint16 randTwo) internal pure returns (uint16) {\n        if (randOne >= 998) {\n            return 3000 + randTwo;\n        } else if (randOne >= 988) {\n            return 2000 + randTwo;\n        } else if (randOne >= 938) {\n            return 1000 + randTwo;\n        } else {\n            return randTwo;\n        }\n    }\n\n}\n\ncontract FirstPheonix is Pausable {\n\n    MigrationInterface core;\n\n    constructor(MigrationInterface _core) public {\n        core = _core;\n    }\n\n    address[] public approved;\n\n    uint16 PHEONIX_PROTO = 380;\n\n    mapping(address => bool) public claimed;\n\n    function approvePack(address toApprove) public onlyOwner {\n        approved.push(toApprove);\n    }\n\n    function isApproved(address test) public view returns (bool) {\n        for (uint i = 0; i < approved.length; i++) {\n            if (approved[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // pause once cards become tradable\n    function claimPheonix(address user) public returns (bool){\n\n        require(isApproved(msg.sender));\n\n        if (claimed[user] || paused){\n            return false;\n        }\n\n        claimed[user] = true;\n\n        core.createCard(user, PHEONIX_PROTO, 0);\n\n        return true;\n    }\n\n}\n\ncontract PresalePackFour is CardPackFour, Pausable {\n\n    CappedVault public vault;\n\n    Purchase[] public purchases;\n\n    function getPurchaseCount() public view returns (uint) {\n        return purchases.length;\n    }\n\n    struct Purchase {\n        uint16 current;\n        uint16 count;\n        address user;\n        uint randomness;\n        uint64 commit;\n    }\n\n    event PacksPurchased(uint indexed id, address indexed user, uint16 count);\n    event PackOpened(uint indexed id, uint16 startIndex, address indexed user, uint[] cardIDs);\n    event RandomnessReceived(uint indexed id, address indexed user, uint16 count, uint randomness);\n    event Recommit(uint indexed id);\n\n    constructor(MigrationInterface _core, CappedVault _vault) public payable CardPackFour(_core) {\n        vault = _vault;\n    }\n\n    function basePrice() public returns (uint);\n    function getCardDetails(uint16 packIndex, uint8 cardIndex, uint result) public view returns (uint16 proto, uint16 purity);\n    \n    function packSize() public view returns (uint8) {\n        return 5;\n    }\n\n    uint16 public perClaim = 15;\n\n    function setPacksPerClaim(uint16 _perClaim) public onlyOwner {\n        perClaim = _perClaim;\n    }\n\n    function packsPerClaim() public view returns (uint16) {\n        return perClaim;\n    }\n\n    // start in bytes, length in bytes\n    function extract(uint num, uint length, uint start) internal pure returns (uint) {\n        return (((1 << (length * 8)) - 1) & (num >> ((start * 8) - 1)));\n    }\n\n    function purchaseFor(address user, uint16 packCount, address referrer) whenNotPaused public payable {\n        _purchase(user, packCount, referrer);\n    }\n\n    function purchase(uint16 packCount, address referrer) whenNotPaused public payable {\n        _purchase(msg.sender, packCount, referrer);\n    }\n\n    function _purchase(address user, uint16 packCount, address referrer) internal {\n        require(packCount > 0);\n        require(referrer != user);\n\n        uint price = calculatePrice(basePrice(), packCount);\n\n        require(msg.value >= price);\n\n        Purchase memory p = Purchase({\n            user: user,\n            count: packCount,\n            commit: uint64(block.number),\n            randomness: 0,\n            current: 0\n        });\n\n        uint id = purchases.push(p) - 1;\n\n        emit PacksPurchased(id, user, packCount);\n\n        if (referrer != address(0)) {\n            uint commission = price / 10;\n            referrer.transfer(commission);\n            price -= commission;\n            emit Referral(referrer, commission, user);\n        }\n        \n        address(vault).transfer(price);\n    }\n\n    // can recommit\n    // this gives you more chances\n    // if no-one else sends the callback (should never happen)\n    // still only get a random extra chance\n    function recommit(uint id) public {\n\n        Purchase storage p = purchases[id];\n\n        require(p.randomness == 0);\n\n        require(block.number >= p.commit + 256);\n\n        p.commit = uint64(block.number);\n\n        emit Recommit(id);\n    }\n\n    // can be called by anybody\n    // can miners withhold blocks --> not really\n    // giving up block reward for extra chance --> still really low\n    function callback(uint id) public {\n\n        Purchase storage p = purchases[id];\n\n        require(p.randomness == 0);\n\n        // must be within last 256 blocks, otherwise recommit\n        require(block.number - 256 < p.commit);\n\n        // can't callback on the original block\n        require(uint64(block.number) != p.commit);\n\n        bytes32 bhash = blockhash(p.commit);\n        // will get the same on every block\n        // only use properties which can't be altered by the user\n        uint random = uint(keccak256(abi.encodePacked(bhash, p.user, address(this), p.count)));\n\n        require(uint(bhash) != 0);\n\n        p.randomness = random;\n\n        emit RandomnessReceived(id, p.user, p.count, p.randomness);\n    }\n\n    function claim(uint id) public {\n        \n        Purchase storage p = purchases[id];\n\n        require(canClaim);\n\n        uint16 proto;\n        uint16 purity;\n        uint16 count = p.count;\n        uint result = p.randomness;\n        uint8 size = packSize();\n\n        address user = p.user;\n        uint16 current = p.current;\n\n        require(result != 0); // have to wait for the callback\n        // require(user == msg.sender); // not needed\n        require(count > 0);\n\n        uint[] memory ids = new uint[](size);\n\n        uint16 end = current + packsPerClaim() > count ? count : current + packsPerClaim();\n\n        require(end > current);\n\n        for (uint16 i = current; i < end; i++) {\n            for (uint8 j = 0; j < size; j++) {\n                (proto, purity) = getCardDetails(i, j, result);\n                ids[j] = migration.createCard(user, proto, purity);\n            }\n            emit PackOpened(id, (i * size), user, ids);\n        }\n        p.current += (end - current);\n    }\n\n    function predictPacks(uint id) external view returns (uint16[] protos, uint16[] purities) {\n\n        Purchase memory p = purchases[id];\n\n        uint16 proto;\n        uint16 purity;\n        uint16 count = p.count;\n        uint result = p.randomness;\n        uint8 size = packSize();\n\n        purities = new uint16[](size * count);\n        protos = new uint16[](size * count);\n\n        for (uint16 i = 0; i < count; i++) {\n            for (uint8 j = 0; j < size; j++) {\n                (proto, purity) = getCardDetails(i, j, result);\n                purities[(i * size) + j] = purity;\n                protos[(i * size) + j] = proto;\n            }\n        }\n        return (protos, purities);\n    }\n\n    function calculatePrice(uint base, uint16 packCount) public view returns (uint) {\n        // roughly 6k blocks per day\n        uint difference = block.number - creationBlock;\n        uint numDays = difference / 6000;\n        if (20 > numDays) {\n            return (base - (((20 - numDays) * base) / 100)) * packCount;\n        }\n        return base * packCount;\n    }\n\n    function _getCommonPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 998345) {\n            return CardProto.Rarity.Legendary;\n        } else if (rand >= 986765) {\n            return CardProto.Rarity.Epic;\n        } else if (rand >= 924890) {\n            return CardProto.Rarity.Rare;\n        } else {\n            return CardProto.Rarity.Common;\n        }\n    }\n\n    function _getRarePlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return CardProto.Rarity.Legendary;\n        } else if (rand >= 852940) {\n            return CardProto.Rarity.Epic;\n        } else {\n            return CardProto.Rarity.Rare;\n        } \n    }\n\n    function _getEpicPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return CardProto.Rarity.Legendary;\n        } else {\n            return CardProto.Rarity.Epic;\n        }\n    }\n\n    function _getLegendaryPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else {\n            return CardProto.Rarity.Legendary;\n        } \n    }\n\n    bool public canClaim = true;\n\n    function setCanClaim(bool claim) public onlyOwner {\n        canClaim = claim;\n    }\n\n    function getComponents(\n        uint16 i, uint8 j, uint rand\n    ) internal returns (\n        uint random, uint32 rarityRandom, uint16 purityOne, uint16 purityTwo, uint16 protoRandom\n    ) {\n        random = uint(keccak256(abi.encodePacked(i, rand, j)));\n        rarityRandom = uint32(extract(random, 4, 10) % 1000000);\n        purityOne = uint16(extract(random, 2, 4) % 1000);\n        purityTwo = uint16(extract(random, 2, 6) % 1000);\n        protoRandom = uint16(extract(random, 2, 8) % (2**16-1));\n        return (random, rarityRandom, purityOne, purityTwo, protoRandom);\n    }\n\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n\n}\n\ncontract PackFourMultiplier is PresalePackFour {\n\n    address[] public packs;\n    uint16 public multiplier = 3;\n    FirstPheonix pheonix;\n    PreviousInterface old;\n\n    uint16 public packLimit = 5;\n\n    constructor(PreviousInterface _old, address[] _packs, MigrationInterface _core, CappedVault vault, FirstPheonix _pheonix) \n        public PresalePackFour(_core, vault) \n    {\n        packs = _packs;\n        pheonix = _pheonix;\n        old = _old;\n    }\n\n    function getCardCount() internal view returns (uint) {\n        return old.totalSupply() + old.burnCount();\n    }\n\n    function isPriorPack(address test) public view returns(bool) {\n        for (uint i = 0; i < packs.length; i++) {\n            if (packs[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    event Status(uint before, uint aft);\n\n    function claimMultiple(address pack, uint purchaseID) public returns (uint16, address) {\n\n        require(isPriorPack(pack));\n\n        uint length = getCardCount();\n\n        PresalePackFour(pack).claim(purchaseID);\n\n        uint lengthAfter = getCardCount();\n\n        require(lengthAfter > length);\n\n        uint16 cardDifference = uint16(lengthAfter - length);\n\n        require(cardDifference % 5 == 0);\n\n        uint16 packCount = cardDifference / 5;\n\n        uint16 extra = packCount * multiplier;\n\n        address lastCardOwner = old.ownerOf(lengthAfter - 1);\n\n        Purchase memory p = Purchase({\n            user: lastCardOwner,\n            count: extra,\n            commit: uint64(block.number),\n            randomness: 0,\n            current: 0\n        });\n\n        uint id = purchases.push(p) - 1;\n\n        emit PacksPurchased(id, lastCardOwner, extra);\n\n        // try to give them a first pheonix\n        pheonix.claimPheonix(lastCardOwner);\n\n        emit Status(length, lengthAfter);\n\n\n        if (packCount <= packLimit) {\n            for (uint i = 0; i < cardDifference; i++) {\n                migration.migrate(lengthAfter - 1 - i);\n            }\n        }\n\n        return (extra, lastCardOwner);\n    }\n\n    function setPackLimit(uint16 limit) public onlyOwner {\n        packLimit = limit;\n    }\n\n\n}\n\ncontract ShinyLegendaryPackFour is PackFourMultiplier {\n    \n    function basePrice() public returns (uint) {\n        return 1 ether;\n    }\n\n    TournamentPass public tournament;\n\n    constructor(PreviousInterface _old, address[] _packs, MigrationInterface _core, CappedVault vault, TournamentPass _tournament, FirstPheonix _pheonix) \n        public PackFourMultiplier(_old, _packs, _core, vault, _pheonix) {\n        \n        tournament = _tournament;\n    }\n\n    function purchase(uint16 packCount, address referrer) public payable {\n        super.purchase(packCount, referrer);\n        tournament.mint(msg.sender, packCount);\n    }\n\n    function claimMultiple(address pack, uint purchaseID) public returns (uint16, address) {\n        uint16 extra;\n        address user;\n        (extra, user) = super.claimMultiple(pack, purchaseID);\n        tournament.mint(user, extra);\n    }\n\n    function getCardDetails(uint16 packIndex, uint8 cardIndex, uint result) public view returns (uint16 proto, uint16 purity) {\n        uint random;\n        uint32 rarityRandom;\n        uint16 protoRandom;\n        uint16 purityOne;\n        uint16 purityTwo;\n        CardProto.Rarity rarity;\n\n        (random, rarityRandom, purityOne, purityTwo, protoRandom) = getComponents(packIndex, cardIndex, result);\n\n        if (cardIndex == 4) {\n            rarity = _getLegendaryPlusRarity(rarityRandom);\n            purity = _getShinyPurity(purityOne, purityTwo);\n        } else if (cardIndex == 3) {\n            rarity = _getRarePlusRarity(rarityRandom);\n            purity = _getPurity(purityOne, purityTwo);\n        } else {\n            rarity = _getCommonPlusRarity(rarityRandom);\n            purity = _getPurity(purityOne, purityTwo);\n        }\n    \n        proto = migration.getRandomCard(rarity, protoRandom);\n\n        return (proto, purity);\n    } \n\n    function _getShinyPurity(uint16 randOne, uint16 randTwo) public pure returns (uint16) {\n        if (randOne >= 998) {\n            return 3000 + randTwo;\n        } else if (randOne >= 748) {\n            return 2000 + randTwo;\n        } else {\n            return 1000 + randTwo;\n        }\n    }\n    \n}",
  "bytecode": "60806040526002805460a060020a60ff02191690556005805462ff00001961ffff19918216600f17166201000017909155600780549091166003179055600880547405000000000000000000000000000000000000000060a060020a61ffff02199091161790553480156200007357600080fd5b506040516200225f3803806200225f8339810160409081528151602080840151928401516060850151608086015160a087015160008054600160a060020a03808716600160a060020a031992831617909255625aa74560015560028054821633179055600380549286169290911691909117905595909601805194969095929491939092918791879187918791869162000113916006918701906200016f565b50600780546201000060b060020a03191662010000600160a060020a039384160217905560088054600160a060020a03199081169683169690961790556009805490951696169590951790925550620002039650505050505050565b828054828255906000526020600020908101928215620001c7579160200282015b82811115620001c75782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000190565b50620001d5929150620001d9565b5090565b6200020091905b80821115620001d5578054600160a060020a0319168155600101620001e0565b90565b61204c80620002136000396000f3006080604052600436106101925763ffffffff60e060020a60003504166306a628d4811461019757806313af4035146101c25780631705a3bd146101e557806317634514146102165780631b3ed7221461023d5780631e0197e214610269578063379607f51461027e578063396c8228146102965780633ccfd60b146102b15780633f4ba83a146102c657806345d63b66146102db5780635c975abb146102f35780635f9602e81461031c5780636bc3e4a8146103315780636dc7a6271461037b5780638392fe31146103905780638456cb59146103ec5780638be4339b146104015780638da5cb5b146104165780639a1f6a0f1461042b578063b01d5b6314610447578063b84c139214610469578063bd6cac4f14610481578063becd283f146104a2578063c2f0bb29146104b7578063c503101e146104fd578063c7876ea414610517578063ca2bf0471461052c578063d42a5011146105dd578063e3f7faaf146105f9578063e87aa76914610618578063eb1098b81461063a578063fbfa77cf1461064f578063ff585caf14610664575b600080fd5b3480156101a357600080fd5b506101ac61067c565b6040805160ff9092168252519081900360200190f35b3480156101ce57600080fd5b506101e3600160a060020a0360043516610681565b005b3480156101f157600080fd5b506101fa6106c7565b60408051600160a060020a039092168252519081900360200190f35b34801561022257600080fd5b5061022b6106d6565b60408051918252519081900360200190f35b34801561024957600080fd5b506102526106dc565b6040805161ffff9092168252519081900360200190f35b34801561027557600080fd5b506101fa6106e6565b34801561028a57600080fd5b506101e36004356106f5565b6101e361ffff60043516600160a060020a03602435166109e7565b3480156102bd57600080fd5b506101e3610a91565b3480156102d257600080fd5b506101e3610ae5565b3480156102e757600080fd5b506101e3600435610b5d565b3480156102ff57600080fd5b50610308610c01565b604080519115158252519081900360200190f35b34801561032857600080fd5b50610252610c11565b34801561033d57600080fd5b50610355600160a060020a0360043516602435610c1b565b6040805161ffff9093168352600160a060020a0390911660208301528051918290030190f35b34801561038757600080fd5b50610308610cd9565b34801561039c57600080fd5b506103a8600435610ce8565b6040805161ffff9687168152949095166020850152600160a060020a0390921683850152606083015267ffffffffffffffff16608082015290519081900360a00190f35b3480156103f857600080fd5b506101e3610d44565b34801561040d57600080fd5b50610252610dc1565b34801561042257600080fd5b506101fa610dcb565b34801561043757600080fd5b506101e361ffff60043516610dda565b6101e3600160a060020a0360043581169061ffff602435169060443516610e09565b34801561047557600080fd5b506101fa600435610e30565b34801561048d57600080fd5b50610308600160a060020a0360043516610e58565b3480156104ae57600080fd5b5061022b610eb6565b3480156104c357600080fd5b506104dc61ffff6004351660ff60243516604435610ebc565b6040805161ffff938416815291909216602082015281519081900390910190f35b34801561050957600080fd5b506101e36004351515611004565b34801561052357600080fd5b5061022b611037565b34801561053857600080fd5b50610544600435611043565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610588578181015183820152602001610570565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105c75781810151838201526020016105af565b5050505090500194505050505060405180910390f35b3480156105e957600080fd5b506101e361ffff60043516611208565b34801561060557600080fd5b5061022b60043561ffff60243516611252565b34801561062457600080fd5b5061025261ffff60043581169060243516611293565b34801561064657600080fd5b506102526112d2565b34801561065b57600080fd5b506101fa6112e3565b34801561067057600080fd5b506101e36004356112f2565b600590565b600254600160a060020a0316331461069857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b60015481565b60075461ffff1681565b600954600160a060020a031681565b6000806000806000806000806060600080600060048d81548110151561071757fe5b90600052602060002090600302019b50600560029054906101000a900460ff16151561074257600080fd5b8b5460018d01546201000090910461ffff169950975061076061067c565b8c54909750600160a060020a03640100000000820416965061ffff16945087151561078a57600080fd5b600061ffff8a161161079b57600080fd5b8660ff166040519080825280602002602001820160405280156107c8578160200160208202803883390190505b5093508861ffff166107d8610dc1565b860161ffff16116107f2576107eb610dc1565b85016107f4565b885b925061ffff8086169084161161080957600080fd5b8491505b8261ffff168261ffff1610156109c0575060005b8660ff168160ff1610156109205761083a82828a610ebc565b809b50819c5050506000809054906101000a9004600160a060020a0316600160a060020a031663fb36eba1878d8d6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018361ffff1661ffff1681526020018261ffff1661ffff1681526020019350505050602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b50518451859060ff841690811061090e57fe5b60209081029091010152600101610821565b85600160a060020a03168d7f69ac64af86d3ef40c9def928534f6a6a9e12d85ec3af2948bd66b802afcc10468960ff16850287604051808361ffff1661ffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109a1578181015183820152602001610989565b50505050905001935050505060405180910390a360019091019061080d565b5050895461ffff1981169390910361ffff9182160116919091179097555050505050505050565b6109f182826114c7565b600954604080517f40c10f1900000000000000000000000000000000000000000000000000000000815233600482015261ffff851660248201529051600160a060020a03909216916340c10f19916044808201926020929091908290030181600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b505050506040513d6020811015610a8b57600080fd5b50505050565b600254600160a060020a03163314610aa857600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610ae2573d6000803e3d6000fd5b50565b600254600160a060020a03163314610afc57600080fd5b60025460a060020a900460ff161515610b1457600080fd5b6002805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6000600482815481101515610b6e57fe5b9060005260206000209060030201905080600101546000141515610b9157600080fd5b600281015467ffffffffffffffff9081166101000116431015610bb357600080fd5b60028101805467ffffffffffffffff19164367ffffffffffffffff1617905560405182907f29ef13d2827ff333d3fde4646988c3a7db16de1210f0c0b613fd0ac9773e4e7b90600090a25050565b60025460a060020a900460ff1681565b60055461ffff1681565b600080600080610c2b86866114ed565b600954604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03808516600483015261ffff86166024830152915194965092945016916340c10f19916044808201926020929091908290030181600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d6020811015610ccb57600080fd5b509396929550919350505050565b60055462010000900460ff1681565b6004805482908110610cf657fe5b600091825260209091206003909102018054600182015460029092015461ffff80831694506201000083041692640100000000909204600160a060020a0316919067ffffffffffffffff1685565b600254600160a060020a03163314610d5b57600080fd5b60025460a060020a900460ff1615610d7257600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60055461ffff1690565b600254600160a060020a031681565b600254600160a060020a03163314610df157600080fd5b6005805461ffff191661ffff92909216919091179055565b60025460a060020a900460ff1615610e2057600080fd5b610e2b838383611974565b505050565b6006805482908110610e3e57fe5b600091825260209091200154600160a060020a0316905081565b6000805b600654811015610eab5782600160a060020a0316600682815481101515610e7f57fe5b600091825260209091200154600160a060020a03161415610ea35760019150610eb0565b600101610e5c565b600091505b50919050565b60045490565b600080600080600080600080610ed38b8b8b611c1b565b9399509197509195509093509150600460ff8b161415610f0957610ef685611d82565b9050610f028383611293565b9650610f42565b8960ff1660031415610f2a57610f1e85611da6565b9050610f028383611df9565b610f3385611e4a565b9050610f3f8383611df9565b96505b6000546040517fcaa19168000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063caa19168908390879060049081019081908490811115610f9457fe5b60ff1681526020018261ffff1661ffff16815260200192505050602060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d6020811015610ff257600080fd5b50519750505050505050935093915050565b600254600160a060020a0316331461101b57600080fd5b60058054911515620100000262ff000019909216919091179055565b670de0b6b3a764000090565b60608061104e611ff2565b600080600080600080600060048b81548110151561106857fe5b60009182526020918290206040805160a0810182526003909302909101805461ffff808216855262010000820416948401859052600160a060020a03640100000000909104169183019190915260018101546060830181905260029091015467ffffffffffffffff16608083015290995090955093506110e661067c565b9250848360ff160261ffff1660405190808252806020026020018201604052801561111b578160200160208202803883390190505b509850848360ff160261ffff16604051908082528060200260200182016040528015611151578160200160208202803883390190505b509950600091505b8461ffff168261ffff1610156111fb575060005b8260ff168160ff1610156111f057611186828286610ebc565b8a51919850965086908a9061ffff60ff878116870290861601169081106111a957fe5b61ffff928316602091820290920101528a5188918c9160ff8781168702908616019091169081106111d657fe5b61ffff90921660209283029091019091015260010161116d565b600190910190611159565b5050505050505050915091565b600254600160a060020a0316331461121f57600080fd5b6008805461ffff90921660a060020a0275ffff000000000000000000000000000000000000000019909216919091179055565b6001546000904303611770810460148110156112815761ffff841660646014839003870204860302925061128b565b8361ffff16850292505b505092915050565b60006103e661ffff8416106112ad5750610bb881016112cc565b6102ec61ffff8416106112c557506107d081016112cc565b506103e881015b92915050565b60085460a060020a900461ffff1681565b600354600160a060020a031681565b600080600060048481548110151561130657fe5b906000526020600020906003020192508260010154600014151561132957600080fd5b600283015467ffffffffffffffff1660ff1943011061134757600080fd5b60028301544367ffffffffffffffff9081169116141561136657600080fd5b600283015483546040805167ffffffffffffffff9093164060208085018290526401000000008404600160a060020a03166c0100000000000000000000000090810286850152300260548601526201000090930461ffff167e010000000000000000000000000000000000000000000000000000000000000260688501528151808503604a018152606a90940191829052835190955090918291908401908083835b602083106114275780518252601f199092019160209182019101611408565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050821515905061146257600080fd5b6001830181905582546040805162010000830461ffff168152602081018490528151640100000000909304600160a060020a03169287927fedb5ce4012b6e9c5904afa2ffad9811d5c2e91e6bca8914cf7e3ffc28e630c57928290030190a350505050565b60025460a060020a900460ff16156114de57600080fd5b6114e9338383611974565b5050565b600080600080600080600080611501611ff2565b60008061150d8d610e58565b151561151857600080fd5b611520611eb5565b98508c600160a060020a031663379607f58d6040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b5050505061158b611eb5565b975088881161159957600080fd5b8888039650600561ffff88160661ffff16156115b457600080fd5b600561ffff8816600754600854604080517f6352211e0000000000000000000000000000000000000000000000000000000081526000198e016004820152905194909304995061ffff90911689029750600160a060020a031691636352211e916024808201926020929091908290030181600087803b15801561163657600080fd5b505af115801561164a573d6000803e3d6000fd5b505050506040513d602081101561166057600080fd5b50516040805160a081018252600080825261ffff8981166020848101828152600160a060020a038089168789018181526060890188815267ffffffffffffffff43811660808c01908152600480546001810182559b528b5160038c027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054995196519098166401000000000277ffffffffffffffffffffffffffffffffffffffff0000000019968d16620100000263ffff00001993909d1661ffff19909a1699909917919091169a909a17939093169590951790935591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90950180549590921667ffffffffffffffff19909516949094179055855191825294519599509297509095509285927f861fd6f8fe14603acc05fa404f8cca86371619cac8a65a92edf687f81b9bafbd928290030190a3600754604080517ff88218e0000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151620100009093049091169163f88218e0916024808201926020929091908290030181600087803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b505050506040513d602081101561187257600080fd5b5050604080518a8152602081018a905281517f31a1adb447f9b6b89f24bf104f0b7a06975ad9f35670dbfaf7ce29190ec54762929181900390910190a160085461ffff60a060020a909104811690871611611961575060005b8661ffff168110156119615760008054604080517f454b0608000000000000000000000000000000000000000000000000000000008152848c036000190160048201529051600160a060020a039092169263454b06089260248084019382900301818387803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b5050600190920191506118cb9050565b50929b919a509098505050505050505050565b600061197e611ff2565b60008061ffff8616811061199157600080fd5b600160a060020a0385811690881614156119aa57600080fd5b6119bb6119b5611037565b87611252565b9350348411156119ca57600080fd5b6040805160a081018252600080825261ffff8981166020808501828152600160a060020a03808f168789018181526060890188815267ffffffffffffffff43811660808c01908152600480546001810182559b528b5160038c027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054995196519098166401000000000277ffffffffffffffffffffffffffffffffffffffff0000000019968d16620100000263ffff00001993909d1661ffff19909a1699909917919091169a909a17939093169590951790935591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90950180549590921667ffffffffffffffff19909516949094179055855191825294519397509195509285927f861fd6f8fe14603acc05fa404f8cca86371619cac8a65a92edf687f81b9bafbd9281900390910190a3600160a060020a03851615611bd75750604051600a840490600160a060020a0386169082156108fc029083906000818181858888f19350505050158015611b8b573d6000803e3d6000fd5b5060408051828152600160a060020a03898116602083015282519684900396908816927f13aa7090696e2a1d666cfc6046f2f72f1c4e0290649b47bab28d1b370ad73783928290030190a25b600354604051600160a060020a039091169085156108fc029086906000818181858888f19350505050158015611c11573d6000803e3d6000fd5b5050505050505050565b6000806000806000878688604051602001808461ffff1661ffff167e010000000000000000000000000000000000000000000000000000000000000281526002018381526020018260ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010193505050506040516020818303038152906040526040518082805190602001908083835b60208310611cd35780518252601f199092019160209182019101611cb4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049450620f4240611d17866004600a611fd2565b811515611d2057fe5b0693506103e8611d338660026004611fd2565b811515611d3c57fe5b0692506103e8611d4f8660026006611fd2565b811515611d5857fe5b06915061ffff611d6b8660026008611fd2565b811515611d7457fe5b069050939792965093509350565b60008163ffffffff16620f423f1415611d9d57506004611da1565b5060035b919050565b60008163ffffffff16620f423f1415611dc157506004611da1565b620efa6f63ffffffff831610611dd957506003611da1565b620d03cc63ffffffff831610611df157506002611da1565b506001611da1565b60006103e661ffff841610611e135750610bb881016112cc565b6103dc61ffff841610611e2b57506107d081016112cc565b6103aa61ffff841610611e4357506103e881016112cc565b50806112cc565b60008163ffffffff16620f423f1415611e6557506004611da1565b620f3bc963ffffffff831610611e7d57506003611da1565b620f0e8d63ffffffff831610611e9557506002611da1565b620e1cda63ffffffff831610611ead57506001611da1565b506000611da1565b600854604080517f524773ce0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163524773ce91600480830192602092919082900301818787803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b505050506040513d6020811015611f3e57600080fd5b5051600854604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916318160ddd916004808201926020929091908290030181600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050506040513d6020811015611fca57600080fd5b505101905090565b6008828102600290810a60001990810192840201900a8404169392505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a72305820ad4a6e9ee67e1587480d0fccf7f21ab8b5a5a0cca25cbe6fb8f821aa2e2a60ea0029000000000000000000000000512fbd15bde6570ff09e4438af27ede60402451500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab00000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd68900000000000000000000000022365168c8705e95b2d08876c23a8c13e3ad72e2000000000000000000000000657c8982d63f58ddd6a54c75591a572d4180cec8000000000000000000000000000000000000000000000000000000000000000200000000000000000000000080391307f1b08cc068fa1d1b77513b98c36dfbfa000000000000000000000000000983ba1a675327f0940b56c2d49cd9c042dfbf",
  "constructorArguments": "000000000000000000000000512fbd15bde6570ff09e4438af27ede60402451500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab00000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd68900000000000000000000000022365168c8705e95b2d08876c23a8c13e3ad72e2000000000000000000000000657c8982d63f58ddd6a54c75591a572d4180cec8000000000000000000000000000000000000000000000000000000000000000200000000000000000000000080391307f1b08cc068fa1d1b77513b98c36dfbfa000000000000000000000000000983ba1a675327f0940b56c2d49cd9c042dfbf"
}