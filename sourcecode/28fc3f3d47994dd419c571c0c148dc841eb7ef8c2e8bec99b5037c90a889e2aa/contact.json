{
  "address": "0xee209cb3356811e99a93b4ab145ccf87b96ea1c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSProxy",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-19\n*/\n\n// proxy.sol - execute actions atomically through the proxy's identity\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n// DSProxy\n// Allows code execution using a persistant identity This can be very\n// useful to execute a sequence of atomic actions. Since the owner of\n// the proxy can be changed, this allows for dynamic ownership models\n// i.e. a multisig\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache;  // global cache for contracts\n\n    function DSProxy(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    function() public payable {\n    }\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes _code, bytes _data)\n        public\n        payable\n        returns (address target, bytes32 response)\n    {\n        target = cache.read(_code);\n        if (target == 0x0) {\n            // deploy contract & store its address in cache\n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes _data)\n        public\n        auth\n        note\n        payable\n        returns (bytes32 response)\n    {\n        require(_target != 0x0);\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n            response := mload(0)      // load delegatecall output\n            switch iszero(succeeded)\n            case 1 {\n                // throw if delegatecall failed\n                revert(0, 0)\n            }\n        }\n    }\n\n    //set new cache\n    function setCache(address _cacheAddr)\n        public\n        auth\n        note\n        returns (bool)\n    {\n        require(_cacheAddr != 0x0);        // invalid cache address\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n        return true;\n    }\n}\n\n// DSProxyCache\n// This global cache stores addresses of contracts previously deployed\n// by a proxy. This saves gas from repeat deployment of the same\n// contracts and eliminates blockchain bloat.\n\n// By default, all proxies deployed from the same factory store\n// contracts in the same cache. The cache a proxy instance uses can be\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\n// lookup the address\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n                // throw if contract failed to deploy\n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610aac8339810160405280805160018054600160a060020a03191633600160a060020a031690811790915590925090507fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610087816401000000006105f461009882021704565b151561009257600080fd5b506102b3565b60006100d4337fffffffff000000000000000000000000000000000000000000000000000000008335166401000000006106c661018a82021704565b15156100df57600080fd5b600435602435808233600160a060020a0316600080357fffffffff00000000000000000000000000000000000000000000000000000000169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600160a060020a038416151561016257600080fd5b60028054600160a060020a038616600160a060020a0319909116179055600192505050919050565b600030600160a060020a031683600160a060020a031614156101ae575060016102ad565b600154600160a060020a03848116911614156101cc575060016102ad565b600054600160a060020a031615156101e6575060006102ad565b60008054600160a060020a03169063b700961390859030908690604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a0393841660048201529190921660248201527fffffffff000000000000000000000000000000000000000000000000000000009091166044820152606401602060405180830381600087803b151561029057600080fd5b6102c65a03f115156102a157600080fd5b50505060405180519150505b92915050565b6107ea806102c26000396000f3006060604052600436106100745763ffffffff60e060020a60003504166313af403581146100765780631cff79cd146100955780631f6a1eb9146100fb57806360c7d295146101a55780637a9e5e4b146101d45780638da5cb5b146101f3578063948f507614610206578063bf7e214f14610239575b005b341561008157600080fd5b610074600160a060020a036004351661024c565b6100e960048035600160a060020a03169060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506102cb95505050505050565b60405190815260200160405180910390f35b61018360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061038d95505050505050565b604051600160a060020a03909216825260208201526040908101905180910390f35b34156101b057600080fd5b6101b8610557565b604051600160a060020a03909116815260200160405180910390f35b34156101df57600080fd5b610074600160a060020a0360043516610566565b34156101fe57600080fd5b6101b86105e5565b341561021157600080fd5b610225600160a060020a03600435166105f4565b604051901515815260200160405180910390f35b341561024457600080fd5b6101b86106b7565b61026233600035600160e060020a0319166106c6565b151561026d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60006102e333600035600160e060020a0319166106c6565b15156102ee57600080fd5b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600160a060020a038516151561035957600080fd5b60206000855160208701886113885a03f4600051935080156001811461037e57610383565b600080fd5b5050505092915050565b6002546000908190600160a060020a0316638bf4515c8583604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156103fb5780820151838201526020016103e3565b50505050905090810190601f1680156104285780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561044657600080fd5b6102c65a03f1151561045757600080fd5b5050506040518051925050600160a060020a038216151561054457600254600160a060020a0316637ed0c3b2856000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104dc5780820151838201526020016104c4565b50505050905090810190601f1680156105095780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561052757600080fd5b6102c65a03f1151561053857600080fd5b50505060405180519250505b61054e82846102cb565b90509250929050565b600254600160a060020a031681565b61057c33600035600160e060020a0319166106c6565b151561058757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600154600160a060020a031681565b600061060c33600035600160e060020a0319166106c6565b151561061757600080fd5b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600160a060020a038416151561068257600080fd5b60028054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff19909116179055600192505050919050565b600054600160a060020a031681565b600030600160a060020a031683600160a060020a031614156106ea575060016107b8565b600154600160a060020a0384811691161415610708575060016107b8565b600054600160a060020a03161515610722575060006107b8565b60008054600160a060020a03169063b7009613908590309086906040516020015260405160e060020a63ffffffff8616028152600160a060020a039384166004820152919092166024820152600160e060020a03199091166044820152606401602060405180830381600087803b151561079b57600080fd5b6102c65a03f115156107ac57600080fd5b50505060405180519150505b929150505600a165627a7a72305820901edca420ef717883bde8fe7b7414ee8d5e8f33fa50e674cb3d9262e05ab6c50029000000000000000000000000900ef39a13382fdb9cdca9e840c1faad7d6f6fe2",
  "constructorArguments": "000000000000000000000000900ef39a13382fdb9cdca9e840c1faad7d6f6fe2"
}