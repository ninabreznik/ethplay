{
  "address": "0xfb673f08fc82807b4d0e139e794e3b328d63551f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTycoonIGO",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.20;\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface tokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\ncontract TokenTycoonIGO is AccessService {\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 850 * (10 ** uint256(decimals));\n    string public name = \"Token Tycoon Coin\";\n    string public symbol = \"TTC\";\n    bytes32 private emptyHash;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping(address => uint256)) allowed;\n    mapping (address => string) addressToAccount;\n    mapping (bytes32 => address) accHashToAddress;\n    \n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event BuyIGO(address indexed _from, string _account, uint256 _ethVal, uint256 _tthVal);\n\n    function TokenTycoonIGO() public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        balances[this] = totalSupply;\n        emptyHash = keccak256(\"\");\n    }\n\n    function() external payable {\n\n    }\n\n    function balanceOf(address _owner) external view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n        allowed[_from][msg.sender] -= _value;\n        return _transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool) {\n        return _transfer(msg.sender, _to, _value);     \n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        external\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0));\n        uint256 oldFromVal = balances[_from];\n        require(_value > 0 && oldFromVal >= _value);\n        uint256 oldToVal = balances[_to];\n        uint256 newToVal = oldToVal + _value;\n        require(newToVal > oldToVal);\n        uint256 newFromVal = oldFromVal - _value;\n        balances[_from] = newFromVal;\n        balances[_to] = newToVal;\n\n        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function buy(string _account) external payable whenNotPaused {  \n        uint256 val = msg.value;\n        uint256 tthVal;\n        if (val == 1 ether) {\n            tthVal = 1100000000000000000;\n        } else if (val == 3 ether) {\n            tthVal = 3600000000000000000;\n        } else if (val == 5 ether) {\n            tthVal = 6500000000000000000;\n        } else if (val == 10 ether) {\n            tthVal = 15000000000000000000;\n        } else if (val == 20 ether) {\n            tthVal = 34000000000000000000;\n        } else {\n            require(false);\n        }\n        uint256 b = balances[this];\n        require(b >= tthVal);\n\n        bytes32 hashAccount = keccak256(_account);\n        require(hashAccount != emptyHash);\n\n        address preAddr = accHashToAddress[hashAccount];\n        string storage preAcc = addressToAccount[msg.sender];\n        bytes32 hashPreAcc = keccak256(preAcc);\n\n        if (preAddr == address(0)) {\n            require(hashPreAcc == emptyHash);\n            // first buy\n            accHashToAddress[hashAccount] = msg.sender;\n            addressToAccount[msg.sender] = _account;\n            _transfer(this, msg.sender, tthVal);\n        } else if(preAddr == msg.sender) {\n            require(hashPreAcc == hashAccount);\n            // multi buy\n            _transfer(this, msg.sender, tthVal);\n        } else {\n            require(false);\n        }\n\n        BuyIGO(msg.sender, _account, val, tthVal);\n    }\n\n    function getCanSellBalance() external view returns(uint256) {\n        return balances[this];\n    }\n\n    function getBalanceByAccount(string _account) external view returns(uint256) {\n        bytes32 hashAccount = keccak256(_account);\n        address addr = accHashToAddress[hashAccount];\n        if (addr == address(0)) {\n            return 0;\n        } else {\n            return balances[addr];\n        }\n    }\n\n    function getIGOAccoountByAddr(address _addr) external view returns(string) {\n        return addressToAccount[_addr];\n    }\n}",
  "bytecode": "606060409081526000805460ff191690556002805460a060020a60ff02191674120000000000000000000000000000000000000000179081905560ff7401000000000000000000000000000000000000000090910416600a0a610352026003558051908101604052601181527f546f6b656e205479636f6f6e20436f696e00000000000000000000000000000060208201526004908051620000a692916020019062000172565b5060408051908101604052600381527f545443000000000000000000000000000000000000000000000000000000000060208201526005908051620000f092916020019062000172565b503415620000fd57600080fd5b60008054600160a060020a03338116610100810261010060a860020a03199384168117909316909217835560018054600160a060020a03199081168417909155600280549091169092179091556003543090911682526007602052604091829020555160405190819003902060065562000217565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b557805160ff1916838001178555620001e5565b82800160010185558215620001e5579182015b82811115620001e5578251825591602001919060010190620001c8565b50620001f3929150620001f7565b5090565b6200021491905b80821115620001f35760008155600101620001fe565b90565b61114180620002276000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013f578063095ea7b3146101c957806318160ddd146101ff57806323b872dd1461022457806330efb8d31461024c578063313ce5671461025f57806342946d8814610288578063492cc769146102a7578063667815a2146102ba57806367d0661d146102cd578063704b6c02146102e057806370a08231146102ff57806382cb9df91461031e57806395d89b411461034d5780639b8d306414610360578063a9059cbb1461037f578063b187bd26146103a1578063b81ff45b146103b4578063bf8bdac1146103d2578063bfae2f0e146103f1578063cae9ca5114610404578063cdd977e014610433578063dd62ed3e14610446578063f3fef3a31461046b575b005b341561014a57600080fd5b61015261048d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018e578082015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d457600080fd5b6101eb600160a060020a036004351660243561052b565b604051901515815260200160405180910390f35b341561020a57600080fd5b610212610597565b60405190815260200160405180910390f35b341561022f57600080fd5b6101eb600160a060020a036004358116906024351660443561059d565b341561025757600080fd5b61013d610612565b341561026a57600080fd5b61027261064f565b60405160ff909116815260200160405180910390f35b341561029357600080fd5b610152600160a060020a0360043516610670565b61013d600480356024810191013561073d565b34156102c557600080fd5b610212610a1a565b34156102d857600080fd5b61013d610a37565b34156102eb57600080fd5b61013d600160a060020a0360043516610a76565b341561030a57600080fd5b610212600160a060020a0360043516610b21565b341561032957600080fd5b610331610b3c565b604051600160a060020a03909116815260200160405180910390f35b341561035857600080fd5b610152610b4b565b341561036b57600080fd5b61013d600160a060020a0360043516610bb6565b341561038a57600080fd5b6101eb600160a060020a0360043516602435610c35565b34156103ac57600080fd5b6101eb610c49565b34156103bf57600080fd5b6102126004803560248101910135610c52565b34156103dd57600080fd5b61013d600160a060020a0360043516610cc6565b34156103fc57600080fd5b610331610d45565b341561040f57600080fd5b6101eb60048035600160a060020a0316906024803591604435918201910135610d59565b341561043e57600080fd5b610331610e2a565b341561045157600080fd5b610212600160a060020a0360043581169060243516610e39565b341561047657600080fd5b61013d600160a060020a0360043516602435610e64565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b600160a060020a03338116600081815260086020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600160a060020a038084166000908152600860209081526040808320339094168352929052908120548211156105d257600080fd5b600160a060020a038085166000908152600860209081526040808320339094168352929052208054839003905561060a848484610f62565b949350505050565b60005433600160a060020a03908116610100909204161461063257600080fd5b60005460ff16151561064357600080fd5b6000805460ff19169055565b60025474010000000000000000000000000000000000000000900460ff1681565b61067861106b565b6009600083600160a060020a0316600160a060020a031681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107315780601f1061070657610100808354040283529160200191610731565b820191906000526020600020905b81548152906001019060200180831161071457829003601f168201915b50505050509050919050565b6000805481908190819081908190819060ff161561075a57600080fd5b34965086670de0b6b3a7640000141561077d57670f43fc2c04ee00009550610804565b866729a2241af62c0000141561079d576731f5c4ed276800009550610804565b86674563918244f4000014156107bd57675a34a38fc00a00009550610804565b86678ac7230489e8000014156107dd5767d02ab486cedc00009550610804565b866801158e460913d0000014156107ff576801d7d843dc3b4800009550610804565b600080fd5b600160a060020a03301660009081526007602052604090205494508585101561082c57600080fd5b88886040518083838082843782019150509250505060405190819003902060065490945084141561085c57600080fd5b6000848152600a6020908152604080832054600160a060020a033381168552600990935292819020919092169450925082905180828054600181600116156101000203166002900480156108e75780601f106108c55761010080835404028352918201916108e7565b820191906000526020600020905b8154815290600101906020018083116108d3575b50509150506040519081900390209050600160a060020a038316151561097557600654811461091557600080fd5b6000848152600a60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316908117909155835260099091529020610963908a8a61107d565b5061096f303388610f62565b506109a6565b33600160a060020a031683600160a060020a031614156107ff5780841461099b57600080fd5b61096f303388610f62565b33600160a060020a03167ff5efcb6f56cbbb28d56b8004ce92d0425172162f2818a1674454765c9f7197538a8a8a8a604051602081018390526040810182905260608082528101849052806080810186868082843782019150509550505050505060405180910390a2505050505050505050565b600160a060020a0330166000908152600760205260409020545b90565b60005433600160a060020a039081166101009092041614610a5757600080fd5b60005460ff1615610a6757600080fd5b6000805460ff19166001179055565b60005433600160a060020a039081166101009092041614610a9657600080fd5b600160a060020a0381161515610aab57600080fd5b600054600160a060020a03808316916101009004167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a360008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a031660009081526007602052604090205490565b600254600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b60025433600160a060020a0390811691161480610be6575060005433600160a060020a0390811661010090920416145b1515610bf157600080fd5b600160a060020a0381161515610c0657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610c42338484610f62565b9392505050565b60005460ff1681565b60008060008484604051808383808284378201915050925050506040519081900390206000818152600a6020526040902054909250600160a060020a03169050801515610ca25760009250610cbe565b600160a060020a03811660009081526007602052604090205492505b505092915050565b60015433600160a060020a0390811691161480610cf6575060005433600160a060020a0390811661010090920416145b1515610d0157600080fd5b600160a060020a0381161515610d1657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000546101009004600160a060020a031681565b600084610d66818661052b565b15610e215780600160a060020a0316638f4ffcb133873088886040517c010000000000000000000000000000000000000000000000000000000063ffffffff8816028152600160a060020a038087166004830190815260248301879052908516604483015260806064830190815260848301849052909160a40184848082843782019150509650505050505050600060405180830381600087803b1515610e0c57600080fd5b5af11515610e1957600080fd5b505050600191505b50949350505050565b600154600160a060020a031681565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b600254600090819033600160a060020a0390811691161480610e99575060005433600160a060020a0390811661010090920416145b1515610ea457600080fd5b60008311610eb157600080fd5b600160a060020a03841615610ec65783610ed3565b600254600160a060020a03165b915050600160a060020a0330163180831015610f1f57600160a060020a03821683156108fc0284604051600060405180830381858888f193505050501515610f1a57600080fd5b610f5c565b81600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515610f5c57600080fd5b50505050565b600080808080600160a060020a0387161515610f7d57600080fd5b600160a060020a038816600090815260076020526040812054945086118015610fa65750858410155b1515610fb157600080fd5b600160a060020a03871660009081526007602052604090205492508583019150828211610fdd57600080fd5b50600160a060020a0380881660009081526007602052604080822088870390819055928916825290208290558284018282011461101657fe5b86600160a060020a031688600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8860405190815260200160405180910390a3506001979650505050505050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110be5782800160ff198235161785556110eb565b828001600101855582156110eb579182015b828111156110eb5782358255916020019190600101906110d0565b506110f79291506110fb565b5090565b610a3491905b808211156110f757600081556001016111015600a165627a7a723058204f97c40fb8d2442c9ccfb40b8d1b0a7a974cc09cdc4be93d00a71f30afc59c220029"
}