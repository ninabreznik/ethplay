{
  "address": "0x61d3d495368b2eaf9789a190c97e959f22961f7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AuctionPotato",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\n// loosely based on Bryn Bellomy code\n// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\n//\n// updated to 0.4.25 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\n// https://chibifighters.io\n//\n\npragma solidity ^0.4.25;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b >= a) {\n            return 0;\n        }\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract AuctionPotato is Ownable {\n    using SafeMath for uint256; \n\n    string name;\n    uint public startTime;\n    uint public endTime;\n    uint auctionDuration;\n\n    // pototo\n    uint public potato;\n    uint oldPotato;\n    uint oldHighestBindingBid;\n    \n    // state\n    bool public canceled;\n    uint public highestBindingBid;\n    address public highestBidder;\n    \n    // used to immidiately block placeBids\n    bool blockerPay;\n    bool blockerWithdraw;\n    \n    mapping(address => uint256) public fundsByBidder;\n    bool ownerHasWithdrawn;\n\n    // couple events\n    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\n    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\n    event LogCanceled();\n    event Withdraw(address owner, uint amount);\n    \n    \n    constructor() public {\n        \n        blockerWithdraw = false;\n        blockerPay = false;\n        \n        // 0.003 ETH\n        highestBindingBid = 3000000000000000;\n        potato = 0;\n        \n        // set to 3 hours\n        auctionDuration = 3 hours;\n\n        // 01/06/2019 @ 6:00pm (UTC) 1546797600 Brenna Sparks 3\n\n        startTime = 1546797600;\n        endTime = startTime + auctionDuration;\n\n        name = \"Brenna Sparks 3\";\n\n    }\n    \n    \n    function setStartTime(uint _time) onlyOwner public \n    {\n        require(now < startTime);\n        startTime = _time;\n        endTime = startTime + auctionDuration;\n    }\n\n\n    // calculates the next bid amount to you can have a oneclick buy button\n    function nextBid() public view returns (uint _nextBid) {\n        return highestBindingBid.add(potato);\n    }\n    \n    \n    // calculates the bid after the current bid so nifty hackers can skip the queue\n    // this is not in our frontend and no one knows if it actually works\n    function nextNextBid() public view returns (uint _nextBid) {\n        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\n    }\n    \n    \n    function queryAuction() public view returns (string, uint, address, uint, uint, uint)\n    {\n        \n        return (name, nextBid(), highestBidder, highestBindingBid, startTime, endTime);\n        \n    }\n\n\n    function placeBid() public\n        payable\n        onlyAfterStart\n        onlyBeforeEnd\n        onlyNotCanceled\n    {   \n        // we are only allowing to increase in bidIncrements to make for true hot potato style\n        require(msg.value == highestBindingBid.add(potato));\n        require(msg.sender != highestBidder);\n        require(now > startTime);\n        require(blockerPay == false);\n        blockerPay = true;\n        \n        // calculate the user's total bid based on the current amount they've sent to the contract\n        // plus whatever has been sent with this transaction\n\n        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\n        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\n\n        highestBidder.transfer(fundsByBidder[highestBidder]);\n        fundsByBidder[highestBidder] = 0;\n        \n        oldHighestBindingBid = highestBindingBid;\n        \n        // set new highest bidder\n        highestBidder = msg.sender;\n        highestBindingBid = highestBindingBid.add(potato);\n\n        oldPotato = potato;\n        potato = highestBindingBid.mul(4).div(9);\n        \n        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\n        \n        blockerPay = false;\n    }\n\n\n    function cancelAuction() public\n        onlyOwner\n        onlyBeforeEnd\n        onlyNotCanceled\n    {\n        canceled = true;\n        emit LogCanceled();\n        \n        emit Withdraw(highestBidder, address(this).balance);\n        highestBidder.transfer(address(this).balance);\n        \n    }\n\n\n    function withdraw() public onlyOwner {\n        require(now > endTime);\n        \n        emit Withdraw(msg.sender, address(this).balance);\n        msg.sender.transfer(address(this).balance);\n    }\n\n\n    function balance() public view returns (uint _balance) {\n        return address(this).balance;\n    }\n\n\n    modifier onlyAfterStart {\n        if (now < startTime) revert();\n        _;\n    }\n\n    modifier onlyBeforeEnd {\n        if (now > endTime) revert();\n        _;\n    }\n\n    modifier onlyNotCanceled {\n        if (canceled) revert();\n        _;\n    }\n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600a805460a060020a61ffff0219169055660aa87bee5380006009556000600555612a30600455635c324220600255635c326c5060035560408051808201909152600f8082527f4272656e6e6120537061726b732033000000000000000000000000000000000060209092019182526100d5916001916100db565b50610176565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011c57805160ff1916838001178555610149565b82800160010185558215610149579182015b8281111561014957825182559160200191906001019061012e565b50610155929150610159565b5090565b61017391905b80821115610155576000815560010161015f565b90565b610aec806101856000396000f3006080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a1dfb5a811461010b57806327151526146101325780633197cbb6146101475780633ccfd60b1461015c5780633e0a322d146101735780633f9942ff1461018b578063715018a6146101b457806378e97925146101c957806386212913146101de5780638da5cb5b146102a05780638f32d59b146102d15780638fa8b790146102e657806391f90157146102fb578063b69ef8a814610310578063ce10cf8014610325578063ecfc7ecc14610346578063f2fde38b1461034e578063f5b56c561461036f578063f8dcc9a914610384575b600080fd5b34801561011757600080fd5b50610120610399565b60408051918252519081900360200190f35b34801561013e57600080fd5b506101206103fd565b34801561015357600080fd5b50610120610416565b34801561016857600080fd5b5061017161041c565b005b34801561017f57600080fd5b506101716004356104a8565b34801561019757600080fd5b506101a06104d7565b604080519115158252519081900360200190f35b3480156101c057600080fd5b506101716104e0565b3480156101d557600080fd5b5061012061054a565b3480156101ea57600080fd5b506101f3610550565b604051808060200187815260200186600160a060020a0316600160a060020a03168152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b83811015610260578181015183820152602001610248565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3480156102ac57600080fd5b506102b561061e565b60408051600160a060020a039092168252519081900360200190f35b3480156102dd57600080fd5b506101a061062d565b3480156102f257600080fd5b5061017161063e565b34801561030757600080fd5b506102b5610727565b34801561031c57600080fd5b50610120610736565b34801561033157600080fd5b50610120600160a060020a036004351661073b565b61017161074d565b34801561035a57600080fd5b50610171600160a060020a03600435166109bf565b34801561037b57600080fd5b506101206109db565b34801561039057600080fd5b506101206109e1565b60006103f86103d760096103cb60046103bf6005546009546109e790919063ffffffff16565b9063ffffffff610a0116565b9063ffffffff610a2c16565b6005546009546103ec9163ffffffff6109e716565b9063ffffffff6109e716565b905090565b60006103f86005546009546109e790919063ffffffff16565b60035481565b61042461062d565b151561042f57600080fd5b600354421161043d57600080fd5b604080513381523031602082015281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a16040513390303180156108fc02916000818181858888f193505050501580156104a5573d6000803e3d6000fd5b50565b6104b061062d565b15156104bb57600080fd5b60025442106104c957600080fd5b600281905560045401600355565b60085460ff1681565b6104e861062d565b15156104f357600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60025481565b6060600080600080600060016105646103fd565b600a546009546002805460035486546040805160206101006001851615026000190190931695909504601f8101839004830286018301909152808552600160a060020a03909616959293919288918301828280156106035780601f106105d857610100808354040283529160200191610603565b820191906000526020600020905b8154815290600101906020018083116105e657829003601f168201915b50505050509550955095509550955095509550909192939495565b600054600160a060020a031690565b600054600160a060020a0316331490565b61064661062d565b151561065157600080fd5b60035442111561066057600080fd5b60085460ff161561067057600080fd5b6008805460ff191660011790556040517f462b6ca7f632601af1295aeb320851f50e8e630a309173f23535845ea4bfb3b990600090a1600a5460408051600160a060020a0390921682523031602083015280517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a1600a54604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156104a5573d6000803e3d6000fd5b600a54600160a060020a031681565b303190565b600b6020526000908152604090205481565b60025442101561075c57600080fd5b60035442111561076b57600080fd5b60085460ff161561077b57600080fd5b6005546009546107909163ffffffff6109e716565b341461079b57600080fd5b600a54600160a060020a03163314156107b357600080fd5b60025442116107c157600080fd5b600a5474010000000000000000000000000000000000000000900460ff16156107e957600080fd5b600a805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600954336000908152600b60205260409020546108409163ffffffff6109e716565b336000908152600b602052604080822092909255600554600a54600160a060020a03168252919020546108789163ffffffff6109e716565b600a8054600160a060020a039081166000908152600b602052604080822094909455915416808252828220549251909280156108fc0292909190818181858888f193505050501580156108cf573d6000803e3d6000fd5b50600a8054600160a060020a03166000908152600b60205260408120556009546007819055815473ffffffffffffffffffffffffffffffffffffffff19163317909155600554610925919063ffffffff6109e716565b6009818155600554600655610945916103cb90600463ffffffff610a0116565b600555600a5460075460095460408051338152600160a060020a039094166020850152838101929092526060830152517f90f94646965a0138324bb7ec4ddd2aa00d863d71e08da3f62473bfd6d1be86479181900360800190a1600a805474ff000000000000000000000000000000000000000019169055565b6109c761062d565b15156109d257600080fd5b6104a581610a43565b60095481565b60055481565b6000828201838110156109f657fe5b8091505b5092915050565b600080831515610a1457600091506109fa565b50828202828482811515610a2457fe5b04146109f657fe5b6000808284811515610a3a57fe5b04949350505050565b600160a060020a0381161515610a5857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820974940465a39bb75a9c8c80b9a85b872372ed7bfa9e49a786ba84d6be8508fdb0029"
}