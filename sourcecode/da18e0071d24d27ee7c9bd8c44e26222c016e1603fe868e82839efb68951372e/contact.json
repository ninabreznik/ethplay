{
  "address": "0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BitDraw Token",
  "contractName": "SmartzToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.18;\n\ninterface IApprovalRecipient {\n    /**\n     * @notice Signals that token holder approved spending of tokens and some action should be taken.\n     *\n     * @param _sender token holder which approved spending of his tokens\n     * @param _value amount of tokens approved to be spent\n     * @param _extraData any extra data token holder provided to the call\n     *\n     * @dev warning: implementors should validate sender of this message (it should be the token) and make no further\n     *      assumptions unless validated them via ERC20 methods.\n     */\n    function receiveApproval(address _sender, uint256 _value, bytes _extraData) public;\n}\n\ninterface IKYCProvider {\n    function isKYCPassed(address _address) public view returns (bool);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ArgumentsChecker {\n\n    /// @dev check which prevents short address attack\n    modifier payloadSizeIs(uint size) {\n       require(msg.data.length == size + 4 /* function selector */);\n       _;\n    }\n\n    /// @dev check that address is valid\n    modifier validAddress(address addr) {\n        require(addr != address(0));\n        _;\n    }\n}\n\ncontract multiowned {\n\n\t// TYPES\n\n    // struct for the status of a pending operation.\n    struct MultiOwnedOperationPendingState {\n        // count of confirmations needed\n        uint yetNeeded;\n\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\n        uint ownersDone;\n\n        // position of this operation key in m_multiOwnedPendingIndex\n        uint index;\n    }\n\n\t// EVENTS\n\n    event Confirmation(address owner, bytes32 operation);\n    event Revoke(address owner, bytes32 operation);\n    event FinalConfirmation(address owner, bytes32 operation);\n\n    // some others are in the case of an owner changing.\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerAdded(address newOwner);\n    event OwnerRemoved(address oldOwner);\n\n    // the last one is emitted if the required signatures change\n    event RequirementChanged(uint newRequirement);\n\n\t// MODIFIERS\n\n    // simple single-sig function modifier.\n    modifier onlyowner {\n        require(isOwner(msg.sender));\n        _;\n    }\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\n    // that later attempts can be realised as the same underlying operation and\n    // thus count as confirmations.\n    modifier onlymanyowners(bytes32 _operation) {\n        if (confirmAndCheck(_operation)) {\n            _;\n        }\n        // Even if required number of confirmations has't been collected yet,\n        // we can't throw here - because changes to the state have to be preserved.\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\n    }\n\n    modifier validNumOwners(uint _numOwners) {\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\n        _;\n    }\n\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\n        require(_required > 0 && _required <= _numOwners);\n        _;\n    }\n\n    modifier ownerExists(address _address) {\n        require(isOwner(_address));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address _address) {\n        require(!isOwner(_address));\n        _;\n    }\n\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\n        require(isOperationActive(_operation));\n        _;\n    }\n\n\t// METHODS\n\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\n    function multiowned(address[] _owners, uint _required)\n        public\n        validNumOwners(_owners.length)\n        multiOwnedValidRequirement(_required, _owners.length)\n    {\n        assert(c_maxOwners <= 255);\n\n        m_numOwners = _owners.length;\n        m_multiOwnedRequired = _required;\n\n        for (uint i = 0; i < _owners.length; ++i)\n        {\n            address owner = _owners[i];\n            // invalid and duplicate addresses are not allowed\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\n\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\n            m_owners[currentOwnerIndex] = owner;\n            m_ownerIndex[owner] = currentOwnerIndex;\n        }\n\n        assertOwnersAreConsistent();\n    }\n\n    /// @notice replaces an owner `_from` with another `_to`.\n    /// @param _from address of owner to replace\n    /// @param _to address of new owner\n    // All pending operations will be canceled!\n    function changeOwner(address _from, address _to)\n        external\n        ownerExists(_from)\n        ownerDoesNotExist(_to)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\n        m_owners[ownerIndex] = _to;\n        m_ownerIndex[_from] = 0;\n        m_ownerIndex[_to] = ownerIndex;\n\n        assertOwnersAreConsistent();\n        OwnerChanged(_from, _to);\n    }\n\n    /// @notice adds an owner\n    /// @param _owner address of new owner\n    // All pending operations will be canceled!\n    function addOwner(address _owner)\n        external\n        ownerDoesNotExist(_owner)\n        validNumOwners(m_numOwners + 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        m_numOwners++;\n        m_owners[m_numOwners] = _owner;\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\n\n        assertOwnersAreConsistent();\n        OwnerAdded(_owner);\n    }\n\n    /// @notice removes an owner\n    /// @param _owner address of owner to remove\n    // All pending operations will be canceled!\n    function removeOwner(address _owner)\n        external\n        ownerExists(_owner)\n        validNumOwners(m_numOwners - 1)\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\n        m_owners[ownerIndex] = 0;\n        m_ownerIndex[_owner] = 0;\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\n        reorganizeOwners();\n\n        assertOwnersAreConsistent();\n        OwnerRemoved(_owner);\n    }\n\n    /// @notice changes the required number of owner signatures\n    /// @param _newRequired new number of signatures required\n    // All pending operations will be canceled!\n    function changeRequirement(uint _newRequired)\n        external\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_multiOwnedRequired = _newRequired;\n        clearPending();\n        RequirementChanged(_newRequired);\n    }\n\n    /// @notice Gets an owner by 0-indexed position\n    /// @param ownerIndex 0-indexed owner position\n    function getOwner(uint ownerIndex) public constant returns (address) {\n        return m_owners[ownerIndex + 1];\n    }\n\n    /// @notice Gets owners\n    /// @return memory array of owners\n    function getOwners() public constant returns (address[]) {\n        address[] memory result = new address[](m_numOwners);\n        for (uint i = 0; i < m_numOwners; i++)\n            result[i] = getOwner(i);\n\n        return result;\n    }\n\n    /// @notice checks if provided address is an owner address\n    /// @param _addr address to check\n    /// @return true if it's an owner\n    function isOwner(address _addr) public constant returns (bool) {\n        return m_ownerIndex[_addr] > 0;\n    }\n\n    /// @notice Tests ownership of the current caller.\n    /// @return true if it's an owner\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n    // addOwner/changeOwner and to isOwner.\n    function amIOwner() external constant onlyowner returns (bool) {\n        return true;\n    }\n\n    /// @notice Revokes a prior confirmation of the given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    function revoke(bytes32 _operation)\n        external\n        multiOwnedOperationIsActive(_operation)\n        onlyowner\n    {\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        var pending = m_multiOwnedPending[_operation];\n        require(pending.ownersDone & ownerIndexBit > 0);\n\n        assertOperationIsConsistent(_operation);\n\n        pending.yetNeeded++;\n        pending.ownersDone -= ownerIndexBit;\n\n        assertOperationIsConsistent(_operation);\n        Revoke(msg.sender, _operation);\n    }\n\n    /// @notice Checks if owner confirmed given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    /// @param _owner an owner address\n    function hasConfirmed(bytes32 _operation, address _owner)\n        external\n        constant\n        multiOwnedOperationIsActive(_operation)\n        ownerExists(_owner)\n        returns (bool)\n    {\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\n    }\n\n    // INTERNAL METHODS\n\n    function confirmAndCheck(bytes32 _operation)\n        private\n        onlyowner\n        returns (bool)\n    {\n        if (512 == m_multiOwnedPendingIndex.length)\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\n            // we won't be able to do it because of block gas limit.\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\n            // TODO use more graceful approach like compact or removal of clearPending completely\n            clearPending();\n\n        var pending = m_multiOwnedPending[_operation];\n\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\n        if (! isOperationActive(_operation)) {\n            // reset count of confirmations needed.\n            pending.yetNeeded = m_multiOwnedRequired;\n            // reset which owners have confirmed (none) - set our bitmap to 0.\n            pending.ownersDone = 0;\n            pending.index = m_multiOwnedPendingIndex.length++;\n            m_multiOwnedPendingIndex[pending.index] = _operation;\n            assertOperationIsConsistent(_operation);\n        }\n\n        // determine the bit to set for this owner.\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        // make sure we (the message sender) haven't confirmed this operation previously.\n        if (pending.ownersDone & ownerIndexBit == 0) {\n            // ok - check if count is enough to go ahead.\n            assert(pending.yetNeeded > 0);\n            if (pending.yetNeeded == 1) {\n                // enough confirmations: reset and run interior.\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\n                delete m_multiOwnedPending[_operation];\n                FinalConfirmation(msg.sender, _operation);\n                return true;\n            }\n            else\n            {\n                // not enough: record that this owner in particular confirmed.\n                pending.yetNeeded--;\n                pending.ownersDone |= ownerIndexBit;\n                assertOperationIsConsistent(_operation);\n                Confirmation(msg.sender, _operation);\n            }\n        }\n    }\n\n    // Reclaims free slots between valid owners in m_owners.\n    // TODO given that its called after each removal, it could be simplified.\n    function reorganizeOwners() private {\n        uint free = 1;\n        while (free < m_numOwners)\n        {\n            // iterating to the first free slot from the beginning\n            while (free < m_numOwners && m_owners[free] != 0) free++;\n\n            // iterating to the first occupied slot from the end\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n\n            // swap, if possible, so free slot is located at the end after the swap\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n            {\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\n                m_owners[free] = m_owners[m_numOwners];\n                m_ownerIndex[m_owners[free]] = free;\n                m_owners[m_numOwners] = 0;\n            }\n        }\n    }\n\n    function clearPending() private onlyowner {\n        uint length = m_multiOwnedPendingIndex.length;\n        // TODO block gas limit\n        for (uint i = 0; i < length; ++i) {\n            if (m_multiOwnedPendingIndex[i] != 0)\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\n        }\n        delete m_multiOwnedPendingIndex;\n    }\n\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\n        return ownerIndex;\n    }\n\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\n        return 2 ** ownerIndex;\n    }\n\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\n    }\n\n\n    function assertOwnersAreConsistent() private constant {\n        assert(m_numOwners > 0);\n        assert(m_numOwners <= c_maxOwners);\n        assert(m_owners[0] == 0);\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\n    }\n\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\n        var pending = m_multiOwnedPending[_operation];\n        assert(0 != pending.yetNeeded);\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\n    }\n\n\n   \t// FIELDS\n\n    uint constant c_maxOwners = 250;\n\n    // the number of owners that must confirm the same operation before it is run.\n    uint public m_multiOwnedRequired;\n\n\n    // pointer used to find a free slot in m_owners\n    uint public m_numOwners;\n\n    // list of owners (addresses),\n    // slot 0 is unused so there are no owner which index is 0.\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\n    address[256] internal m_owners;\n\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\n    mapping(address => uint) internal m_ownerIndex;\n\n\n    // the ongoing operations.\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\n    bytes32[] internal m_multiOwnedPendingIndex;\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed from, uint256 amount);\n\n    /**\n     * Function to burn msg.sender's tokens.\n     *\n     * @param _amount amount of tokens to burn\n     *\n     * @return boolean that indicates if the operation was successful\n     */\n    function burn(uint256 _amount)\n        public\n        returns (bool)\n    {\n        address from = msg.sender;\n\n        require(_amount > 0);\n        require(_amount <= balances[from]);\n\n        totalSupply = totalSupply.sub(_amount);\n        balances[from] = balances[from].sub(_amount);\n        Burn(from, _amount);\n        Transfer(from, address(0), _amount);\n\n        return true;\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract TokenWithApproveAndCallMethod is StandardToken {\n\n    /**\n     * @notice Approves spending tokens and immediately triggers token recipient logic.\n     *\n     * @param _spender contract which supports IApprovalRecipient and allowed to receive tokens\n     * @param _value amount of tokens approved to be spent\n     * @param _extraData any extra data which to be provided to the _spender\n     *\n     * By invoking this utility function token holder could do two things in one transaction: approve spending his\n     * tokens and execute some external contract which spends them on token holder's behalf.\n     * It can't be known if _spender's invocation succeed or not.\n     * This function will throw if approval failed.\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public {\n        require(approve(_spender, _value));\n        IApprovalRecipient(_spender).receiveApproval(msg.sender, _value, _extraData);\n    }\n}\n\ncontract SmartzToken is ArgumentsChecker, multiowned, BurnableToken, StandardToken, TokenWithApproveAndCallMethod {\n\n    /// @title Unit of frozen tokens - tokens which can't be spent until certain conditions is met.\n    struct FrozenCell {\n        /// @notice amount of frozen tokens\n        uint amount;\n\n        /// @notice until this unix time the cell is considered frozen\n        uint128 thawTS;\n\n        /// @notice is KYC required for a token holder to spend this cell?\n        uint128 isKYCRequired;\n    }\n\n\n    // MODIFIERS\n\n    modifier onlySale(address account) {\n        require(isSale(account));\n        _;\n    }\n\n    modifier validUnixTS(uint ts) {\n        require(ts >= 1522046326 && ts <= 1800000000);\n        _;\n    }\n\n    modifier checkTransferInvariant(address from, address to) {\n        uint initial = balanceOf(from).add(balanceOf(to));\n        _;\n        assert(balanceOf(from).add(balanceOf(to)) == initial);\n    }\n\n    modifier privilegedAllowed {\n        require(m_allowPrivileged);\n        _;\n    }\n\n\n    // PUBLIC FUNCTIONS\n\n    /**\n     * @notice Constructs token.\n     *\n     * Initial owners have power over the token contract only during bootstrap phase (early investments and token\n     * sales). To be precise, the owners can set KYC provider and sales (which can freeze transfered tokens) during\n     * bootstrap phase. After final token sale any control over the token removed by issuing disablePrivileged call.\n     */\n    function SmartzToken()\n        public\n        payable\n        multiowned(getInitialOwners(), 1)\n    {\n        if (0 != 35000000000000000000000000) {\n            totalSupply = 35000000000000000000000000;\n            balances[msg.sender] = totalSupply;\n            Transfer(address(0), msg.sender, totalSupply);\n        }\n\n        \ntotalSupply = totalSupply.add(0);\n\n        \n    }\n\n    function getInitialOwners() private pure returns (address[]) {\n        address[] memory result = new address[](1);\nresult[0] = address(0x15B694A7C4106beC672cCB8E0b0590B1d649b4aF);\n        return result;\n    }\n\n    /**\n     * @notice Version of balanceOf() which includes all frozen tokens.\n     *\n     * @param _owner the address to query the balance of\n     *\n     * @return an uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        uint256 balance = balances[_owner];\n\n        for (uint cellIndex = 0; cellIndex < frozenBalances[_owner].length; ++cellIndex) {\n            balance = balance.add(frozenBalances[_owner][cellIndex].amount);\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice Version of balanceOf() which includes only currently spendable tokens.\n     *\n     * @param _owner the address to query the balance of\n     *\n     * @return an uint256 representing the amount spendable by the passed address\n     */\n    function availableBalanceOf(address _owner) public view returns (uint256) {\n        uint256 balance = balances[_owner];\n\n        for (uint cellIndex = 0; cellIndex < frozenBalances[_owner].length; ++cellIndex) {\n            if (isSpendableFrozenCell(_owner, cellIndex))\n                balance = balance.add(frozenBalances[_owner][cellIndex].amount);\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice Standard transfer() overridden to have a chance to thaw sender's tokens.\n     *\n     * @param _to the address to transfer to\n     * @param _value the amount to be transferred\n     *\n     * @return true iff operation was successfully completed\n     */\n    function transfer(address _to, uint256 _value)\n        public\n        payloadSizeIs(2 * 32)\n        returns (bool)\n    {\n        thawSomeTokens(msg.sender, _value);\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @notice Standard transferFrom overridden to have a chance to thaw sender's tokens.\n     *\n     * @param _from address the address which you want to send tokens from\n     * @param _to address the address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     *\n     * @return true iff operation was successfully completed\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        payloadSizeIs(3 * 32)\n        returns (bool)\n    {\n        thawSomeTokens(_from, _value);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    \n    /**\n     * Function to burn msg.sender's tokens. Overridden to have a chance to thaw sender's tokens.\n     *\n     * @param _amount amount of tokens to burn\n     *\n     * @return boolean that indicates if the operation was successful\n     */\n    function burn(uint256 _amount)\n        public\n        payloadSizeIs(1 * 32)\n        returns (bool)\n    {\n        thawSomeTokens(msg.sender, _amount);\n        return super.burn(_amount);\n    }\n\n\n    // INFORMATIONAL FUNCTIONS (VIEWS)\n\n    /**\n     * @notice Number of frozen cells of an account.\n     *\n     * @param owner account address\n     *\n     * @return number of frozen cells\n     */\n    function frozenCellCount(address owner) public view returns (uint) {\n        return frozenBalances[owner].length;\n    }\n\n    /**\n     * @notice Retrieves information about account frozen tokens.\n     *\n     * @param owner account address\n     * @param index index of so-called frozen cell from 0 (inclusive) up to frozenCellCount(owner) exclusive\n     *\n     * @return amount amount of tokens frozen in this cell\n     * @return thawTS unix timestamp at which tokens'll become available\n     * @return isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\n     */\n    function frozenCell(address owner, uint index) public view returns (uint amount, uint thawTS, bool isKYCRequired) {\n        require(index < frozenCellCount(owner));\n\n        amount = frozenBalances[owner][index].amount;\n        thawTS = uint(frozenBalances[owner][index].thawTS);\n        isKYCRequired = decodeKYCFlag(frozenBalances[owner][index].isKYCRequired);\n    }\n\n\n    // ADMINISTRATIVE FUNCTIONS\n\n    /**\n     * @notice Sets current KYC provider of the token.\n     *\n     * @param KYCProvider address of the IKYCProvider-compatible contract\n     *\n     * Function is used only during token sale phase, before disablePrivileged() is called.\n     */\n    function setKYCProvider(address KYCProvider)\n        external\n        validAddress(KYCProvider)\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_KYCProvider = IKYCProvider(KYCProvider);\n    }\n\n    /**\n     * @notice Sets sale status of an account.\n     *\n     * @param account account address\n     * @param isSale is this account has access to frozen* functions\n     *\n     * Function is used only during token sale phase, before disablePrivileged() is called.\n     */\n    function setSale(address account, bool isSale)\n        external\n        validAddress(account)\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_sales[account] = isSale;\n    }\n\n\n    /**\n     * @notice Transfers tokens to a recipient and freezes it.\n     *\n     * @param _to account to which tokens are sent\n     * @param _value amount of tokens to send\n     * @param thawTS unix timestamp at which tokens'll become available\n     * @param isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\n     *\n     * Function is used only during token sale phase and available only to sale accounts.\n     */\n    function frozenTransfer(address _to, uint256 _value, uint thawTS, bool isKYCRequired)\n        external\n        validAddress(_to)\n        validUnixTS(thawTS)\n        payloadSizeIs(4 * 32)\n        privilegedAllowed\n        onlySale(msg.sender)\n        checkTransferInvariant(msg.sender, _to)\n        returns (bool)\n    {\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        addFrozen(_to, _value, thawTS, isKYCRequired);\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @notice Transfers frozen tokens back.\n     *\n     * @param _from account to send tokens from\n     * @param _to account to which tokens are sent\n     * @param _value amount of tokens to send\n     * @param thawTS unix timestamp at which tokens'll become available\n     * @param isKYCRequired it's required to pass KYC to spend tokens iff isKYCRequired is true\n     *\n     * Function is used only during token sale phase to make a refunds and available only to sale accounts.\n     * _from account has to explicitly approve spending with the approve() call.\n     * thawTS and isKYCRequired parameters are required to withdraw exact \"same\" tokens (to not affect availability of\n     * other tokens of the account).\n     */\n    function frozenTransferFrom(address _from, address _to, uint256 _value, uint thawTS, bool isKYCRequired)\n        external\n        validAddress(_to)\n        validUnixTS(thawTS)\n        payloadSizeIs(5 * 32)\n        privilegedAllowed\n        //onlySale(msg.sender) too many local variables - compiler fails\n        //onlySale(_to)\n        checkTransferInvariant(_from, _to)\n        returns (bool)\n    {\n        require(isSale(msg.sender) && isSale(_to));\n        require(_value <= allowed[_from][msg.sender]);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        subFrozen(_from, _value, thawTS, isKYCRequired);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /// @notice Disables further use of any privileged functions like freezing tokens.\n    function disablePrivileged()\n        external\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_allowPrivileged = false;\n    }\n\n\n    // INTERNAL FUNCTIONS\n\n    function isSale(address account) private view returns (bool) {\n        return m_sales[account];\n    }\n\n    /**\n     * @dev Tries to find existent FrozenCell that matches (thawTS, isKYCRequired).\n     *\n     * @return index in frozenBalances[_owner] which equals to frozenBalances[_owner].length in case cell is not found\n     *\n     * Because frozen* functions are only for token sales and token sale number is limited, expecting cellIndex\n     * to be ~ 1-5 and the following loop to be O(1).\n     */\n    function findFrozenCell(address owner, uint128 thawTSEncoded, uint128 isKYCRequiredEncoded)\n        private\n        view\n        returns (uint cellIndex)\n    {\n        for (cellIndex = 0; cellIndex < frozenBalances[owner].length; ++cellIndex) {\n            FrozenCell storage checkedCell = frozenBalances[owner][cellIndex];\n            if (checkedCell.thawTS == thawTSEncoded && checkedCell.isKYCRequired == isKYCRequiredEncoded)\n                break;\n        }\n\n        assert(cellIndex <= frozenBalances[owner].length);\n    }\n\n    /// @dev Says if the given cell could be spent now\n    function isSpendableFrozenCell(address owner, uint cellIndex)\n        private\n        view\n        returns (bool)\n    {\n        FrozenCell storage cell = frozenBalances[owner][cellIndex];\n        if (uint(cell.thawTS) > getTime())\n            return false;\n\n        if (0 == cell.amount)   // already spent\n            return false;\n\n        if (decodeKYCFlag(cell.isKYCRequired) && !m_KYCProvider.isKYCPassed(owner))\n            return false;\n\n        return true;\n    }\n\n    /// @dev Internal function to increment or create frozen cell.\n    function addFrozen(address _to, uint256 _value, uint thawTS, bool isKYCRequired)\n        private\n        validAddress(_to)\n        validUnixTS(thawTS)\n    {\n        uint128 thawTSEncoded = uint128(thawTS);\n        uint128 isKYCRequiredEncoded = encodeKYCFlag(isKYCRequired);\n\n        uint cellIndex = findFrozenCell(_to, thawTSEncoded, isKYCRequiredEncoded);\n\n        // In case cell is not found - creating new.\n        if (cellIndex == frozenBalances[_to].length) {\n            frozenBalances[_to].length++;\n            targetCell = frozenBalances[_to][cellIndex];\n            assert(0 == targetCell.amount);\n\n            targetCell.thawTS = thawTSEncoded;\n            targetCell.isKYCRequired = isKYCRequiredEncoded;\n        }\n\n        FrozenCell storage targetCell = frozenBalances[_to][cellIndex];\n        assert(targetCell.thawTS == thawTSEncoded && targetCell.isKYCRequired == isKYCRequiredEncoded);\n\n        targetCell.amount = targetCell.amount.add(_value);\n    }\n\n    /// @dev Internal function to decrement frozen cell.\n    function subFrozen(address _from, uint256 _value, uint thawTS, bool isKYCRequired)\n        private\n        validUnixTS(thawTS)\n    {\n        uint cellIndex = findFrozenCell(_from, uint128(thawTS), encodeKYCFlag(isKYCRequired));\n        require(cellIndex != frozenBalances[_from].length);   // has to be found\n\n        FrozenCell storage cell = frozenBalances[_from][cellIndex];\n        require(cell.amount >= _value);\n\n        cell.amount = cell.amount.sub(_value);\n    }\n\n    /// @dev Thaws tokens of owner until enough tokens could be spent or no more such tokens found.\n    function thawSomeTokens(address owner, uint requiredAmount)\n        private\n    {\n        if (balances[owner] >= requiredAmount)\n            return;     // fast path\n\n        // Checking that our goal is reachable before issuing expensive storage modifications.\n        require(availableBalanceOf(owner) >= requiredAmount);\n\n        for (uint cellIndex = 0; cellIndex < frozenBalances[owner].length; ++cellIndex) {\n            if (isSpendableFrozenCell(owner, cellIndex)) {\n                uint amount = frozenBalances[owner][cellIndex].amount;\n                frozenBalances[owner][cellIndex].amount = 0;\n                balances[owner] = balances[owner].add(amount);\n            }\n        }\n\n        assert(balances[owner] >= requiredAmount);\n    }\n\n    /// @dev to be overridden in tests\n    function getTime() internal view returns (uint) {\n        return now;\n    }\n\n    function encodeKYCFlag(bool isKYCRequired) private pure returns (uint128) {\n        return isKYCRequired ? uint128(1) : uint128(0);\n    }\n\n    function decodeKYCFlag(uint128 isKYCRequired) private pure returns (bool) {\n        return isKYCRequired != uint128(0);\n    }\n\n\n    // FIELDS\n\n    /// @notice current KYC provider of the token\n    IKYCProvider public m_KYCProvider;\n\n    /// @notice set of sale accounts which can freeze tokens\n    mapping (address => bool) public m_sales;\n\n    /// @notice frozen tokens\n    mapping (address => FrozenCell[]) public frozenBalances;\n\n    /// @notice allows privileged functions (token sale phase)\n    bool public m_allowPrivileged = true;\n\n\n    // CONSTANTS\n\n    string public constant name = 'BitDraw';\n    string public constant symbol = 'BTDW';\n    uint8 public constant decimals = 18;\n}",
  "bytecode": ""
}