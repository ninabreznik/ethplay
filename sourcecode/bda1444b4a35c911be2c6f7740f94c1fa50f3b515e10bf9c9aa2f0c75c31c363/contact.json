{
  "address": "0xb5b2eb90588a2200aa0400c99203c6371b7009bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICO",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/InvestedProvider.sol\n\ncontract InvestedProvider is Ownable {\n\n  uint public invested;\n\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/MintableToken.sol\n\ncontract MintableToken is StandardToken, Ownable {\n\n  event Mint(address indexed to, uint256 amount);\n\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  modifier notLocked() {\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\n    _;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    \n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n\n}\n\n// File: contracts/PercentRateProvider.sol\n\ncontract PercentRateProvider is Ownable {\n\n  uint public percentRate = 100;\n\n  function setPercentRate(uint newPercentRate) public onlyOwner {\n    percentRate = newPercentRate;\n  }\n\n}\n\n// File: contracts/RetrieveTokensFeature.sol\n\ncontract RetrieveTokensFeature is Ownable {\n\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\n// File: contracts/WalletProvider.sol\n\ncontract WalletProvider is Ownable {\n\n  address public wallet;\n\n  function setWallet(address newWallet) public onlyOwner {\n    wallet = newWallet;\n  }\n\n}\n\n// File: contracts/CommonSale.sol\n\ncontract CommonSale is InvestedProvider, WalletProvider, PercentRateProvider, RetrieveTokensFeature {\n\n  using SafeMath for uint;\n\n  address public directMintAgent;\n\n  uint public price;\n\n  uint public start;\n\n  uint public minInvestedLimit;\n\n  MintableToken public token;\n\n  uint public hardcap;\n\n  modifier isUnderHardcap() {\n    require(invested < hardcap);\n    _;\n  }\n\n  function setHardcap(uint newHardcap) public onlyOwner {\n    hardcap = newHardcap;\n  }\n\n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n\n  modifier minInvestLimited(uint value) {\n    require(value >= minInvestedLimit);\n    _;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n    minInvestedLimit = newMinInvestedLimit;\n  }\n\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n\n  function setPrice(uint newPrice) public onlyOwner {\n    price = newPrice;\n  }\n\n  function setToken(address newToken) public onlyOwner {\n    token = MintableToken(newToken);\n  }\n\n  function calculateTokens(uint _invested) internal returns(uint);\n\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\n    mintTokens(to, tokens);\n  }\n\n  function mintTokens(address to, uint tokens) internal {\n    token.mint(this, tokens);\n    token.transfer(to, tokens);\n  }\n\n  function endSaleDate() public view returns(uint);\n\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\n    return mintTokensByETH(to, _invested);\n  }\n\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\n    invested = invested.add(_invested);\n    uint tokens = calculateTokens(_invested);\n    mintTokens(to, tokens);\n    return tokens;\n  }\n\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\n    require(now >= start && now < endSaleDate());\n    wallet.transfer(msg.value);\n    return mintTokensByETH(msg.sender, msg.value);\n  }\n\n  function () public payable {\n    fallback();\n  }\n\n}\n\n// File: contracts/FreezeTokensWallet.sol\n\ncontract FreezeTokensWallet is Ownable {\n\n  using SafeMath for uint256;\n\n  MintableToken public token;\n\n  bool public started;\n\n  uint public startLockPeriod = 180 days;\n\n  uint public period = 360 days;\n\n  uint public duration = 90 days;\n\n  uint public startUnlock;\n\n  uint public retrievedTokens;\n\n  uint public startBalance;\n\n  modifier notStarted() {\n    require(!started);\n    _;\n  }\n\n  function setPeriod(uint newPeriod) public onlyOwner notStarted {\n    period = newPeriod * 1 days;\n  }\n\n  function setDuration(uint newDuration) public onlyOwner notStarted {\n    duration = newDuration * 1 days;\n  }\n\n  function setStartLockPeriod(uint newStartLockPeriod) public onlyOwner notStarted {\n    startLockPeriod = newStartLockPeriod * 1 days;\n  }\n\n  function setToken(address newToken) public onlyOwner notStarted {\n    token = MintableToken(newToken);\n  }\n\n  function start() public onlyOwner notStarted {\n    startUnlock = now + startLockPeriod;\n    retrievedTokens = 0;\n    startBalance = token.balanceOf(this);\n    started = true;\n  }\n\n  function retrieveTokens(address to) public onlyOwner {\n    require(started && now >= startUnlock);\n    if (now >= startUnlock + period) {\n      token.transfer(to, token.balanceOf(this));\n    } else {\n      uint parts = period.div(duration);\n      uint tokensByPart = startBalance.div(parts);\n      uint timeSinceStart = now.sub(startUnlock);\n      uint pastParts = timeSinceStart.div(duration);\n      uint tokensToRetrieveSinceStart = pastParts.mul(tokensByPart);\n      uint tokensToRetrieve = tokensToRetrieveSinceStart.sub(retrievedTokens);\n      if(tokensToRetrieve > 0) {\n        retrievedTokens = retrievedTokens.add(tokensToRetrieve);\n        token.transfer(to, tokensToRetrieve);\n      }\n    }\n  }\n}\n\n// File: contracts/StagedCrowdsale.sol\n\ncontract StagedCrowdsale is Ownable {\n\n  using SafeMath for uint;\n\n  struct Milestone {\n    uint period;\n    uint bonus;\n  }\n\n  uint public totalPeriod;\n\n  Milestone[] public milestones;\n\n  function milestonesCount() public view returns(uint) {\n    return milestones.length;\n  }\n\n  function addMilestone(uint period, uint bonus) public onlyOwner {\n    require(period > 0);\n    milestones.push(Milestone(period, bonus));\n    totalPeriod = totalPeriod.add(period);\n  }\n\n  function removeMilestone(uint8 number) public onlyOwner {\n    require(number < milestones.length);\n    Milestone storage milestone = milestones[number];\n    totalPeriod = totalPeriod.sub(milestone.period);\n\n    delete milestones[number];\n\n    for (uint i = number; i < milestones.length - 1; i++) {\n      milestones[i] = milestones[i+1];\n    }\n\n    milestones.length--;\n  }\n\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\n    require(number < milestones.length);\n    Milestone storage milestone = milestones[number];\n\n    totalPeriod = totalPeriod.sub(milestone.period);\n\n    milestone.period = period;\n    milestone.bonus = bonus;\n\n    totalPeriod = totalPeriod.add(period);\n  }\n\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\n    require(numberAfter < milestones.length);\n\n    totalPeriod = totalPeriod.add(period);\n\n    milestones.length++;\n\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\n      milestones[i + 1] = milestones[i];\n    }\n\n    milestones[numberAfter + 1] = Milestone(period, bonus);\n  }\n\n  function clearMilestones() public onlyOwner {\n    require(milestones.length > 0);\n    for (uint i = 0; i < milestones.length; i++) {\n      delete milestones[i];\n    }\n    milestones.length -= milestones.length;\n    totalPeriod = 0;\n  }\n\n  function lastSaleDate(uint start) public view returns(uint) {\n    return start + totalPeriod * 1 days;\n  }\n\n  function currentMilestone(uint start) public view returns(uint) {\n    uint previousDate = start;\n    for(uint i=0; i < milestones.length; i++) {\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\n        return i;\n      }\n      previousDate = previousDate.add(milestones[i].period * 1 days);\n    }\n    revert();\n  }\n\n}\n\n// File: contracts/ValueBonusFeature.sol\n\ncontract ValueBonusFeature is PercentRateProvider {\n\n  using SafeMath for uint;\n\n  bool public activeValueBonus = true;\n\n  struct ValueBonus {\n    uint from;\n    uint bonus;\n  }\n\n  ValueBonus[] public valueBonuses;\n\n  modifier checkPrevBonus(uint number, uint from, uint bonus) {\n    if(number > 0 && number < valueBonuses.length) {\n      ValueBonus storage valueBonus = valueBonuses[number - 1];\n      require(valueBonus.from < from && valueBonus.bonus < bonus);\n    }\n    _;\n  }\n\n  modifier checkNextBonus(uint number, uint from, uint bonus) {\n    if(number + 1 < valueBonuses.length) {\n      ValueBonus storage valueBonus = valueBonuses[number + 1];\n      require(valueBonus.from > from && valueBonus.bonus > bonus);\n    }\n    _;\n  }\n\n  function setActiveValueBonus(bool newActiveValueBonus) public onlyOwner {\n    activeValueBonus = newActiveValueBonus;\n  }\n\n  function addValueBonus(uint from, uint bonus) public onlyOwner checkPrevBonus(valueBonuses.length - 1, from, bonus) {\n    valueBonuses.push(ValueBonus(from, bonus));\n  }\n\n  function getValueBonusTokens(uint tokens, uint invested) public view returns(uint) {\n    uint valueBonus = getValueBonus(invested);\n    if(valueBonus == 0) {\n      return 0;\n    }\n    return tokens.mul(valueBonus).div(percentRate);\n  }\n\n  function getValueBonus(uint value) public view returns(uint) {\n    uint bonus = 0;\n    if(activeValueBonus) {\n      for(uint i = 0; i < valueBonuses.length; i++) {\n        if(value >= valueBonuses[i].from) {\n          bonus = valueBonuses[i].bonus;\n        } else {\n          return bonus;\n        }\n      }\n    }\n    return bonus;\n  }\n\n  function removeValueBonus(uint8 number) public onlyOwner {\n    require(number < valueBonuses.length);\n\n    delete valueBonuses[number];\n\n    for (uint i = number; i < valueBonuses.length - 1; i++) {\n      valueBonuses[i] = valueBonuses[i+1];\n    }\n\n    valueBonuses.length--;\n  }\n\n  function changeValueBonus(uint8 number, uint from, uint bonus) public onlyOwner checkPrevBonus(number, from, bonus) checkNextBonus(number, from, bonus) {\n    require(number < valueBonuses.length);\n    ValueBonus storage valueBonus = valueBonuses[number];\n    valueBonus.from = from;\n    valueBonus.bonus = bonus;\n  }\n\n  function insertValueBonus(uint8 numberAfter, uint from, uint bonus) public onlyOwner checkPrevBonus(numberAfter, from, bonus) checkNextBonus(numberAfter, from, bonus) {\n    require(numberAfter < valueBonuses.length);\n\n    valueBonuses.length++;\n\n    for (uint i = valueBonuses.length - 2; i > numberAfter; i--) {\n      valueBonuses[i + 1] = valueBonuses[i];\n    }\n\n    valueBonuses[numberAfter + 1] = ValueBonus(from, bonus);\n  }\n\n  function clearValueBonuses() public onlyOwner {\n    require(valueBonuses.length > 0);\n    for (uint i = 0; i < valueBonuses.length; i++) {\n      delete valueBonuses[i];\n    }\n    valueBonuses.length = 0;\n  }\n\n}\n\n// File: contracts/ICO.sol\n\ncontract ICO is ValueBonusFeature, StagedCrowdsale, CommonSale {\n\n  FreezeTokensWallet public teamTokensWallet;\n\n  address public bountyTokensWallet;\n\n  address public reservedTokensWallet;\n\n  uint public teamTokensPercent;\n\n  uint public bountyTokensPercent;\n\n  uint public reservedTokensPercent;\n\n  function setTeamTokensPercent(uint newTeamTokensPercent) public onlyOwner {\n    teamTokensPercent = newTeamTokensPercent;\n  }\n\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n    bountyTokensPercent = newBountyTokensPercent;\n  }\n\n  function setReservedTokensPercent(uint newReservedTokensPercent) public onlyOwner {\n    reservedTokensPercent = newReservedTokensPercent;\n  }\n\n  function setTeamTokensWallet(address newTeamTokensWallet) public onlyOwner {\n    teamTokensWallet = FreezeTokensWallet(newTeamTokensWallet);\n  }\n\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n    bountyTokensWallet = newBountyTokensWallet;\n  }\n\n  function setReservedTokensWallet(address newReservedTokensWallet) public onlyOwner {\n    reservedTokensWallet = newReservedTokensWallet;\n  }\n\n  function calculateTokens(uint _invested) internal returns(uint) {\n    uint milestoneIndex = currentMilestone(start);\n    Milestone storage milestone = milestones[milestoneIndex];\n    uint tokens = _invested.mul(price).div(1 ether);\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\n    if(milestone.bonus > 0) {\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\n    }\n    return tokens.add(valueBonusTokens);\n  }\n\n  function finish() public onlyOwner {\n    uint summaryTokensPercent = bountyTokensPercent.add(teamTokensPercent).add(reservedTokensPercent);\n    uint mintedTokens = token.totalSupply();\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    uint foundersTokens = allTokens.mul(teamTokensPercent).div(percentRate);\n    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(percentRate);\n    uint reservedTokens = allTokens.mul(reservedTokensPercent).div(percentRate);\n    mintTokens(teamTokensWallet, foundersTokens);\n    mintTokens(bountyTokensWallet, bountyTokens);\n    mintTokens(reservedTokensWallet, reservedTokens);\n    token.finishMinting();\n    teamTokensWallet.start();\n    teamTokensWallet.transferOwnership(owner);\n  }\n\n  function endSaleDate() public view returns(uint) {\n    return lastSaleDate(start);\n  }\n\n}",
  "bytecode": "606060405260646003556001600460006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613442806100736000396000f30060606040526004361061029e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063144fa6d7146102a957806320ad8a81146102e257806329033133146103055780632c1382361461031a578063388fb0af1461036f578063480b890d146103985780634c94ac6a146103bb578063521eb273146103d057806354717ea9146104255780635601477b14610465578063575300171461049157806359169d06146104ca5780636341ca0b146104ed5780636793c8e1146105455780636abc3fe41461057c5780636c9d99da146105d1578063702b7bc314610626578063769ffb7d1461065e5780638090114f146106975780638da5cb5b146106c057806391b7f5ed14610715578063931672041461073857806399cd211d146107615780639a3fdfd0146107b65780639bf6eb60146107df5780639c05093b146108215780639dc905bb1461085a578063a035b1fe14610892578063a34d9270146108bb578063aa525c55146108de578063ab36e4a614610904578063af78facf1461092d578063b071cbe61461096b578063b8a4db8114610994578063bd17647f146109c0578063be9a6555146109f8578063c66c67e914610a21578063c865cadb14610a44578063ca1e5bb714610a69578063cafb220214610abf578063cd7e318414610ae8578063ce14a46e14610b1f578063cf51ee7a14610b48578063d4b03d3414610b6e578063d56b288914610ba6578063d64196f814610bbb578063d7d8804314610be4578063deaa59df14610c0d578063e28fa27d14610c46578063e89e4ed614610c69578063f2fde38b14610ca7578063f6a03ebf14610ce0578063f95bbc9c14610d03578063fa8b72ff14610d30578063fc0c546a14610d69578063fd83da0914610dbe575b6102a6610df5565b50005b34156102b457600080fd5b6102e0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e9e565b005b34156102ed57600080fd5b6103036004808035906020019091905050610f3d565b005b341561031057600080fd5b610318610fa2565b005b341561032557600080fd5b61032d611075565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037a57600080fd5b61038261109b565b6040518082815260200191505060405180910390f35b34156103a357600080fd5b6103b960048080359060200190919050506110a1565b005b34156103c657600080fd5b6103ce611106565b005b34156103db57600080fd5b6103e36111ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043057600080fd5b61044f6004808035906020019091908035906020019091905050611214565b6040518082815260200191505060405180910390f35b341561047057600080fd5b61048f6004808035906020019091908035906020019091905050611265565b005b341561049c57600080fd5b6104c8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611343565b005b34156104d557600080fd5b6104eb60048080359060200190919050506113e2565b005b34156104f857600080fd5b610543600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611447565b005b341561055057600080fd5b6105666004808035906020019091905050611630565b6040518082815260200191505060405180910390f35b341561058757600080fd5b61058f6116e0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105dc57600080fd5b6105e4611706565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561063157600080fd5b61065c600480803560ff1690602001909190803590602001909190803590602001909190505061172c565b005b341561066957600080fd5b610695600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061194a565b005b34156106a257600080fd5b6106aa6119e9565b6040518082815260200191505060405180910390f35b34156106cb57600080fd5b6106d36119ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561072057600080fd5b6107366004808035906020019091905050611a14565b005b341561074357600080fd5b61074b611a79565b6040518082815260200191505060405180910390f35b341561076c57600080fd5b610774611a7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c157600080fd5b6107c9611aa5565b6040518082815260200191505060405180910390f35b34156107ea57600080fd5b61081f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611aab565b005b341561082c57600080fd5b610858600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b6c565b005b341561086557600080fd5b610890600480803560ff16906020019091908035906020019091908035906020019091905050611c0b565b005b341561089d57600080fd5b6108a5611d7c565b6040518082815260200191505060405180910390f35b34156108c657600080fd5b6108dc6004808035906020019091905050611d82565b005b34156108e957600080fd5b610902600480803560ff16906020019091905050611de7565b005b341561090f57600080fd5b610917611f62565b6040518082815260200191505060405180910390f35b341561093857600080fd5b61094e6004808035906020019091905050611f6f565b604051808381526020018281526020019250505060405180910390f35b341561097657600080fd5b61097e611fa2565b6040518082815260200191505060405180910390f35b341561099f57600080fd5b6109be6004808035906020019091908035906020019091905050611fa8565b005b34156109cb57600080fd5b6109f6600480803560ff169060200190919080359060200190919080359060200190919050506120c9565b005b3415610a0357600080fd5b610a0b6121b0565b6040518082815260200191505060405180910390f35b3415610a2c57600080fd5b610a4260048080359060200190919050506121b6565b005b3415610a4f57600080fd5b610a676004808035151590602001909190505061221b565b005b3415610a7457600080fd5b610aa9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612293565b6040518082815260200191505060405180910390f35b3415610aca57600080fd5b610ad261235a565b6040518082815260200191505060405180910390f35b3415610af357600080fd5b610b096004808035906020019091905050612360565b6040518082815260200191505060405180910390f35b3415610b2a57600080fd5b610b32612401565b6040518082815260200191505060405180910390f35b3415610b5357600080fd5b610b6c600480803560ff16906020019091905050612407565b005b3415610b7957600080fd5b610ba4600480803560ff1690602001909190803590602001909190803590602001909190505061253f565b005b3415610bb157600080fd5b610bb96126b4565b005b3415610bc657600080fd5b610bce612b6e565b6040518082815260200191505060405180910390f35b3415610bef57600080fd5b610bf7612b74565b6040518082815260200191505060405180910390f35b3415610c1857600080fd5b610c44600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b86565b005b3415610c5157600080fd5b610c676004808035906020019091905050612c25565b005b3415610c7457600080fd5b610c8a6004808035906020019091905050612c8a565b604051808381526020018281526020019250505060405180910390f35b3415610cb257600080fd5b610cde600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612cbd565b005b3415610ceb57600080fd5b610d016004808035906020019091905050612e12565b005b3415610d0e57600080fd5b610d16612e77565b604051808215151515815260200191505060405180910390f35b3415610d3b57600080fd5b610d67600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612e8a565b005b3415610d7457600080fd5b610d7c612f29565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610dc957600080fd5b610ddf6004808035906020019091905050612f4f565b6040518082815260200191505060405180910390f35b600034600b548110151515610e0957600080fd5b600a544210158015610e215750610e1e612b74565b42105b1515610e2c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610e8e57600080fd5b610e983334612f62565b91505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ef957600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9857600080fd5b8060118190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fff57600080fd5b600060058054905011151561101357600080fd5b600090505b6005805490508110156110625760058181548110151561103457fe5b9060005260206000209060020201600080820160009055600182016000905550508080600101915050611018565b600060058161107191906132f0565b5050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60135481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110fc57600080fd5b8060038190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561116357600080fd5b600060078054905011151561117757600080fd5b600090505b6007805490508110156111c65760078181548110151561119857fe5b906000526020600020906002020160008082016000905560018201600090555050808060010191505061117c565b6007805490506007818180549050039150816111e29190613322565b50600060068190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061122083612360565b90506000811415611234576000915061125e565b61125b60035461124d8387612fb190919063ffffffff16565b612fec90919063ffffffff16565b91505b5092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c057600080fd5b6000821115156112cf57600080fd5b600780548060010182816112e39190613354565b91600052602060002090600202016000604080519081016040528086815260200185815250909190915060008201518160000155602082015181600101555050506113398260065461300790919063ffffffff16565b6006819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139e57600080fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143d57600080fd5b8060128190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a457600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb848373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561156757600080fd5b6102c65a03f1151561157857600080fd5b505050604051805190506000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561160f57600080fd5b6102c65a03f1151561162057600080fd5b5050506040518051905050505050565b6000806000839150600090505b6007805490508110156116d45781421015801561168057506201518060078281548110151561166857fe5b90600052602060002090600202016000015402820142105b1561168d578092506116d9565b6116c5620151806007838154811015156116a357fe5b906000526020600020906002020160000154028361300790919063ffffffff16565b9150808060010191505061163d565b600080fd5b5050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561178957600080fd5b8360ff168383600080841180156117a4575060058054905084105b156117ed576005600185038154811015156117bb57fe5b906000526020600020906002020190508281600001541080156117e15750818160010154105b15156117ec57600080fd5b5b8760ff16878760006005805490506001850110156118495760056001850181548110151561181757fe5b9060005260206000209060020201905082816000015411801561183d5750818160010154115b151561184857600080fd5b5b6005805490508c60ff1610151561185f57600080fd5b6005805480919060010161187391906132f0565b5060026005805490500398505b8b60ff168911156118ed5760058981548110151561189a57fe5b9060005260206000209060020201600560018b018154811015156118ba57fe5b90600052602060002090600202016000820154816000015560018201548160010155905050888060019003995050611880565b60408051908101604052808c81526020018b815250600560018e0160ff1681548110151561191757fe5b90600052602060002090600202016000820151816000015560208201518160010155905050505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a557600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a6f57600080fd5b8060098190555050565b60115481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b3373ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611b5357503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611b5e57600080fd5b611b688282613025565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bc757600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c6857600080fd5b6007805490508460ff16101515611c7e57600080fd5b611c938360065461300790919063ffffffff16565b60068190555060078054809190600101611cad9190613322565b5060026007805490500390505b8360ff16811115611d2757600781815481101515611cd457fe5b9060005260206000209060020201600760018301815481101515611cf457fe5b90600052602060002090600202016000820154816000015560018201548160010155905050808060019003915050611cba565b60408051908101604052808481526020018381525060076001860160ff16815481101515611d5157fe5b9060005260206000209060020201600082015181600001556020820151816001015590505050505050565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ddd57600080fd5b80600b8190555050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e4557600080fd5b6007805490508360ff16101515611e5b57600080fd5b60078360ff16815481101515611e6d57fe5b90600052602060002090600202019150611e9682600001546006546131fb90919063ffffffff16565b60068190555060078360ff16815481101515611eae57fe5b9060005260206000209060020201600080820160009055600182016000905550508260ff1690505b600160078054905003811015611f4757600760018201815481101515611ef857fe5b9060005260206000209060020201600782815481101515611f1557fe5b906000526020600020906002020160008201548160000155600182015481600101559050508080600101915050611ed6565b6007805480919060019003611f5c9190613322565b50505050565b6000600780549050905090565b600581815481101515611f7e57fe5b90600052602060002090600202016000915090508060000154908060010154905082565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561200357600080fd5b600160058054905003828260008084118015612023575060058054905084105b1561206c5760056001850381548110151561203a57fe5b906000526020600020906002020190508281600001541080156120605750818160010154105b151561206b57600080fd5b5b600580548060010182816120809190613386565b9160005260206000209060020201600060408051908101604052808a81526020018981525090919091506000820151816000015560208201518160010155505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561212657600080fd5b6007805490508460ff1610151561213c57600080fd5b60078460ff1681548110151561214e57fe5b9060005260206000209060020201905061217781600001546006546131fb90919063ffffffff16565b6006819055508281600001819055508181600101819055506121a48360065461300790919063ffffffff16565b60068190555050505050565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221157600080fd5b8060138190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561227657600080fd5b80600460006101000a81548160ff02191690831515021790555050565b60003373ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061233d57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561234857600080fd5b6123528383612f62565b905092915050565b60015481565b6000806000809150600460009054906101000a900460ff16156123f657600090505b6005805490508110156123f55760058181548110151561239e57fe5b906000526020600020906002020160000154841015156123e0576005818154811015156123c757fe5b90600052602060002090600202016001015491506123e8565b8192506123fa565b8080600101915050612382565b5b8192505b5050919050565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246457600080fd5b6005805490508260ff1610151561247a57600080fd5b60058260ff1681548110151561248c57fe5b9060005260206000209060020201600080820160009055600182016000905550508160ff1690505b600160058054905003811015612525576005600182018154811015156124d657fe5b90600052602060002090600202016005828154811015156124f357fe5b9060005260206000209060020201600082015481600001556001820154816001015590505080806001019150506124b4565b600580548091906001900361253a91906132f0565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561259c57600080fd5b8360ff168383600080841180156125b7575060058054905084105b15612600576005600185038154811015156125ce57fe5b906000526020600020906002020190508281600001541080156125f45750818160010154105b15156125ff57600080fd5b5b8760ff168787600060058054905060018501101561265c5760056001850181548110151561262a57fe5b906000526020600020906002020190508281600001541180156126505750818160010154115b151561265b57600080fd5b5b6005805490508c60ff1610151561267257600080fd5b60058c60ff1681548110151561268457fe5b906000526020600020906002020198508a8960000181905550898960010181905550505050505050505050505050565b6000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561271857600080fd5b61274360135461273560115460125461300790919063ffffffff16565b61300790919063ffffffff16565b9550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156127d357600080fd5b6102c65a03f115156127e457600080fd5b50505060405180519050945061282b612808876003546131fb90919063ffffffff16565b61281d60035488612fb190919063ffffffff16565b612fec90919063ffffffff16565b935061285660035461284860115487612fb190919063ffffffff16565b612fec90919063ffffffff16565b925061288160035461287360125487612fb190919063ffffffff16565b612fec90919063ffffffff16565b91506128ac60035461289e60135487612fb190919063ffffffff16565b612fec90919063ffffffff16565b90506128da600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613025565b612906600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613025565b612932601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682613025565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d64bcb46000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156129c057600080fd5b6102c65a03f115156129d157600080fd5b5050506040518051905050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be9a65556040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515612a6157600080fd5b6102c65a03f11515612a7257600080fd5b505050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515612b5257600080fd5b6102c65a03f11515612b6357600080fd5b505050505050505050565b600b5481565b6000612b81600a54612f4f565b905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612be157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c8057600080fd5b80600d8190555050565b600781815481101515612c9957fe5b90600052602060002090600202016000915090508060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d5457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e6d57600080fd5b80600a8190555050565b600460009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ee557600080fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000620151806006540282019050919050565b600080600d54600154101515612f7757600080fd5b612f8c8360015461300790919063ffffffff16565b600181905550612f9b83613214565b9050612fa78482613025565b8091505092915050565b6000806000841415612fc65760009150612fe5565b8284029050828482811515612fd757fe5b04141515612fe157fe5b8091505b5092915050565b6000808284811515612ffa57fe5b0490508091505092915050565b600080828401905083811015151561301b57fe5b8091505092915050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156130f257600080fd5b6102c65a03f1151561310357600080fd5b5050506040518051905050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156131db57600080fd5b6102c65a03f115156131ec57600080fd5b50505060405180519050505050565b600082821115151561320957fe5b818303905092915050565b6000806000806000613227600a54611630565b935060078481548110151561323857fe5b90600052602060002090600202019250613277670de0b6b3a764000061326960095489612fb190919063ffffffff16565b612fec90919063ffffffff16565b91506132838287611214565b90506000836001015411156132d2576132cf6132c06003546132b2866001015486612fb190919063ffffffff16565b612fec90919063ffffffff16565b8361300790919063ffffffff16565b91505b6132e5818361300790919063ffffffff16565b945050505050919050565b81548183558181151161331d5760020281600202836000526020600020918201910161331c91906133b8565b5b505050565b81548183558181151161334f5760020281600202836000526020600020918201910161334e91906133e7565b5b505050565b8154818355818115116133815760020281600202836000526020600020918201910161338091906133e7565b5b505050565b8154818355818115116133b3576002028160020283600052602060002091820191016133b291906133b8565b5b505050565b6133e491905b808211156133e0576000808201600090556001820160009055506002016133be565b5090565b90565b61341391905b8082111561340f576000808201600090556001820160009055506002016133ed565b5090565b905600a165627a7a72305820ba1487a73a7382085e873aad0925db3b695e2ba68b3665caac6cd5291fa2d61b0029"
}