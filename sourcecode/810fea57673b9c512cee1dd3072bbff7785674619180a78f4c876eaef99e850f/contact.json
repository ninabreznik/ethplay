{
  "address": "0x71d01db8d6a2fbea7f8d434599c237980c234e4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Gladius Token",
  "contractName": "GLAToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-05\n*/\n\npragma solidity ^0.4.15;\n\ncontract InputValidator {\n\n\n    /**\n     * ERC20 Short Address Attack fix\n     */\n    modifier safe_arguments(uint _numArgs) {\n        assert(msg.data.length == _numArgs * 32 + 4);\n        _;\n    }\n}\n\ncontract Owned {\n\n    // The address of the account that is the current owner \n    address internal owner;\n\n\n    /**\n     * The publisher is the inital owner\n     */\n    function Owned() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * Access is restricted to the current owner\n     */\n    modifier only_owner() {\n        require(msg.sender == owner);\n\n        _;\n    }\n}\n\ncontract IOwnership {\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) constant returns (bool);\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() constant returns (address);\n}\n\ncontract Ownership is IOwnership, Owned {\n\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) public constant returns (bool) {\n        return _account == owner;\n    }\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() public constant returns (address) {\n        return owner;\n    }\n}\n\ncontract ITransferableOwnership {\n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner);\n}\n\ncontract TransferableOwnership is ITransferableOwnership, Ownership {\n\n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner) public only_owner {\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title ERC20 compatible token interface\n *\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n * - Short address attack fix\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract IToken { \n\n    /** \n     * Get the total supply of tokens\n     * \n     * @return The total supply\n     */\n    function totalSupply() constant returns (uint);\n\n\n    /** \n     * Get balance of `_owner` \n     * \n     * @param _owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _owner) constant returns (uint);\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) returns (bool);\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) returns (bool);\n\n\n    /** \n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n     * \n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) constant returns (uint);\n}\n\n\n/**\n * @title ERC20 compatible token\n *\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n * - Short address attack fix\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract Token is IToken, InputValidator {\n\n    // Ethereum token standard\n    string public standard = \"Token 0.3\";\n    string public name;        \n    string public symbol;\n    uint8 public decimals = 8;\n\n    // Token state\n    uint internal totalTokenSupply;\n\n    // Token balances\n    mapping (address => uint) internal balances;\n\n    // Token allowances\n    mapping (address => mapping (address => uint)) internal allowed;\n\n\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    /** \n     * Construct \n     * \n     * @param _name The full token name\n     * @param _symbol The token symbol (aberration)\n     */\n    function Token(string _name, string _symbol) {\n        name = _name;\n        symbol = _symbol;\n        balances[msg.sender] = 0;\n        totalTokenSupply = 0;\n    }\n\n\n    /** \n     * Get the total token supply\n     * \n     * @return The total supply\n     */\n    function totalSupply() public constant returns (uint) {\n        return totalTokenSupply;\n    }\n\n\n    /** \n     * Get balance of `_owner` \n     * \n     * @param _owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _owner) public constant returns (uint) {\n        return balances[_owner];\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public safe_arguments(2) returns (bool) {\n\n        // Check if the sender has enough tokens\n        require(balances[msg.sender] >= _value);   \n\n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Transfer tokens\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        // Notify listeners\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not \n     */\n    function transferFrom(address _from, address _to, uint _value) public safe_arguments(3) returns (bool) {\n\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n\n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Check allowance\n        require(_value <= allowed[_from][msg.sender]);\n\n        // Transfer tokens\n        balances[_to] += _value;\n        balances[_from] -= _value;\n\n        // Update allowance\n        allowed[_from][msg.sender] -= _value;\n\n        // Notify listeners\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) public safe_arguments(2) returns (bool) {\n\n        // Update allowance\n        allowed[msg.sender][_spender] = _value;\n\n        // Notify listeners\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /** \n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n     * \n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n      return allowed[_owner][_spender];\n    }\n}\n\n\n/**\n * @title ManagedToken interface\n *\n * Adds the following functionallity to the basic ERC20 token\n * - Locking\n * - Issuing\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract IManagedToken is IToken { \n\n    /** \n     * Returns true if the token is locked\n     * \n     * @return Whether the token is locked\n     */\n    function isLocked() constant returns (bool);\n\n\n    /**\n     * Unlocks the token so that the transferring of value is enabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function unlock() returns (bool);\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the tokens where sucessfully issued or not\n     */\n    function issue(address _to, uint _value) returns (bool);\n}\n\n\n/**\n * @title ManagedToken\n *\n * Adds the following functionallity to the basic ERC20 token\n * - Locking\n * - Issuing\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract ManagedToken is IManagedToken, Token, TransferableOwnership {\n\n    // Token state\n    bool internal locked;\n\n\n    /**\n     * Allow access only when not locked\n     */\n    modifier only_when_unlocked() {\n        require(!locked);\n\n        _;\n    }\n\n\n    /** \n     * Construct \n     * \n     * @param _name The full token name\n     * @param _symbol The token symbol (aberration)\n     * @param _locked Whether the token should be locked initially\n     */\n    function ManagedToken(string _name, string _symbol, bool _locked) Token(_name, _symbol) {\n        locked = _locked;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public only_when_unlocked returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) public only_when_unlocked returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) public returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n\n    /** \n     * Returns true if the token is locked\n     * \n     * @return Wheter the token is locked\n     */\n    function isLocked() public constant returns (bool) {\n        return locked;\n    }\n\n\n    /**\n     * Unlocks the token so that the transferring of value is enabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function unlock() public only_owner returns (bool)  {\n        locked = false;\n        return !locked;\n    }\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the approval was successful or not\n     */\n    function issue(address _to, uint _value) public only_owner safe_arguments(2) returns (bool) {\n        \n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Create tokens\n        balances[_to] += _value;\n        totalTokenSupply += _value;\n\n        // Notify listeners \n        Transfer(0, this, _value);\n        Transfer(this, _to, _value);\n\n        return true;\n    }\n}\n\n\n/**\n * @title Token retrieve interface\n *\n * Allows tokens to be retrieved from a contract\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract ITokenRetreiver {\n\n    /**\n     * Extracts tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retreiveTokens(address _tokenContract);\n}\n\n/**\n * @title GLA (Gladius) token\n *\n * #created 26/09/2017\n * #author Frank Bonnet\n */\ncontract GLAToken is ManagedToken, ITokenRetreiver {\n\n\n    /**\n     * Starts with a total supply of zero and the creator starts with \n     * zero tokens (just like everyone else)\n     */\n    function GLAToken() ManagedToken(\"Gladius Token\", \"GLA\", true) {}\n\n\n    /**\n     * Failsafe mechanism\n     * \n     * Allows owner to retreive tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retreiveTokens(address _tokenContract) public only_owner {\n        IToken tokenInstance = IToken(_tokenContract);\n        uint tokenBalance = tokenInstance.balanceOf(this);\n        if (tokenBalance > 0) {\n            tokenInstance.transfer(owner, tokenBalance);\n        }\n    }\n\n\n    /**\n     * Prevents accidental sending of ether\n     */\n    function () payable {\n        revert();\n    }\n}",
  "bytecode": "606060405260408051908101604052600981527f546f6b656e20302e3300000000000000000000000000000000000000000000006020820152600090805161004b92916020019061016e565b506003805460ff19166008179055341561006457600080fd5b5b604080519081016040908152600d82527f476c616469757320546f6b656e0000000000000000000000000000000000000060208301528051908101604052600381527f474c410000000000000000000000000000000000000000000000000000000000602082015260015b5b82825b60018280516100e792916020019061016e565b5060028180516100fb92916020019061016e565b50600160a060020a03331660009081526005602052604081208190556004555b505060078054600160a060020a03191633600160a060020a03161790555b6007805460a060020a60ff02191674010000000000000000000000000000000000000000831515021790555b5050505b61020e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101af57805160ff19168380011785556101dc565b828001600101855582156101dc579182015b828111156101dc5782518255916020019190600101906101c1565b5b506101e99291506101ed565b5090565b61020b91905b808211156101e957600081556001016101f3565b5090565b90565b610d13806200021e6000396000f300606060405236156100d55763ffffffff60e060020a60003504166306fdde0381146100dd578063095ea7b31461016857806318160ddd1461019e57806323b872dd146101c35780632f54bf6e146101ff578063313ce567146102325780635a3b7e421461025b57806370a08231146102e6578063867904b414610317578063893d20e81461034d57806395d89b411461037c57806396a0492514610407578063a4e2d63414610428578063a69df4b51461044f578063a9059cbb14610476578063dd62ed3e146104ac578063f2fde38b146104e3575b5b600080fd5b005b34156100e857600080fd5b6100f0610504565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012d5780820151818401525b602001610114565b50505050905090810190601f16801561015a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017357600080fd5b61018a600160a060020a03600435166024356105a2565b604051901515815260200160405180910390f35b34156101a957600080fd5b6101b16105b7565b60405190815260200160405180910390f35b34156101ce57600080fd5b61018a600160a060020a03600435811690602435166044356105be565b604051901515815260200160405180910390f35b341561020a57600080fd5b61018a600160a060020a03600435166105ee565b604051901515815260200160405180910390f35b341561023d57600080fd5b610245610605565b60405160ff909116815260200160405180910390f35b341561026657600080fd5b6100f061060e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012d5780820151818401525b602001610114565b50505050905090810190601f16801561015a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102f157600080fd5b6101b1600160a060020a03600435166106ac565b60405190815260200160405180910390f35b341561032257600080fd5b61018a600160a060020a03600435166024356106cb565b604051901515815260200160405180910390f35b341561035857600080fd5b6103606107ad565b604051600160a060020a03909116815260200160405180910390f35b341561038757600080fd5b6100f06107bd565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012d5780820151818401525b602001610114565b50505050905090810190601f16801561015a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041257600080fd5b6100db600160a060020a036004351661085b565b005b341561043357600080fd5b61018a610980565b604051901515815260200160405180910390f35b341561045a57600080fd5b61018a610991565b604051901515815260200160405180910390f35b341561048157600080fd5b61018a600160a060020a03600435166024356109e0565b604051901515815260200160405180910390f35b34156104b757600080fd5b6101b1600160a060020a0360043581169060243516610a0e565b60405190815260200160405180910390f35b34156104ee57600080fd5b6100db600160a060020a0360043516610a3b565b005b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b505050505081565b60006105ae8383610a83565b90505b92915050565b6004545b90565b60075460009060a060020a900460ff16156105d857600080fd5b6105e3848484610afe565b90505b5b9392505050565b600754600160a060020a038281169116145b919050565b60035460ff1681565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b505050505081565b600160a060020a0381166000908152600560205260409020545b919050565b60075460009033600160a060020a039081169116146106e957600080fd5b6002366044146106f557fe5b600160a060020a038416600090815260056020526040902054838101101561071c57600080fd5b600160a060020a0380851660009081526005602052604080822080548701905560048054870190553090921691600080516020610cc88339815191529086905190815260200160405180910390a383600160a060020a031630600160a060020a0316600080516020610cc88339815191528560405190815260200160405180910390a3600191505b5b505b92915050565b600754600160a060020a03165b90565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b505050505081565b600754600090819033600160a060020a0390811691161461087b57600080fd5b82915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108d557600080fd5b6102c65a03f115156108e657600080fd5b5050506040518051915050600081111561097957600754600160a060020a038084169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095d57600080fd5b6102c65a03f1151561096e57600080fd5b505050604051805150505b5b5b505050565b60075460a060020a900460ff165b90565b60075460009033600160a060020a039081169116146109af57600080fd5b506007805474ff000000000000000000000000000000000000000019169081905560a060020a900460ff16155b5b90565b60075460009060a060020a900460ff16156109fa57600080fd5b6105ae8383610c0c565b90505b5b92915050565b600160a060020a038083166000908152600660209081526040808320938516835292905220545b92915050565b60075433600160a060020a03908116911614610a5657600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000600236604414610a9157fe5b600160a060020a03338116600081815260066020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b6000600336606414610b0c57fe5b600160a060020a03851660009081526005602052604090205483901015610b3257600080fd5b600160a060020a0384166000908152600560205260409020548381011015610b5957600080fd5b600160a060020a0380861660009081526006602090815260408083203390941683529290522054831115610b8c57600080fd5b600160a060020a03808516600081815260056020908152604080832080548901905589851680845281842080548a9003905560068352818420339096168452949091529081902080548790039055909190600080516020610cc88339815191529086905190815260200160405180910390a3600191505b5b509392505050565b6000600236604414610c1a57fe5b600160a060020a03331660009081526005602052604090205483901015610c4057600080fd5b600160a060020a0384166000908152600560205260409020548381011015610c6757600080fd5b600160a060020a03338116600081815260056020526040808220805488900390559287168082529083902080548701905591600080516020610cc88339815191529086905190815260200160405180910390a3600191505b5b50929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820110c0ed6fa664ce3b8c73cc210aa33cfbdceffef3ae91ae726724e7102c46b7f0029"
}