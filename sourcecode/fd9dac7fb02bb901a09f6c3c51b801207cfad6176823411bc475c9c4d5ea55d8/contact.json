{
  "address": "0x58487f6f0de31cdffbe903dc4cfaf77cb3ac92c9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LivenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-27\n*/\n\n/**\n *  Liven crowdsale contract.\n *\n *  There is no ETH hard cap in this contract due to the fact that Liven are\n *  collecting funds in more than one currency. This contract is a single\n *  component of a wider sale. The hard cap for the entire sale is USD $28m.\n *\n *  This sale has a six week time limit which can be extended by the owner. It\n *  can be stopped at any time by the owner.\n *\n *  More information is available on https://livenpay.io.\n *\n *  Minimum contribution: 0.1 ETH\n *  Maximum contribution: 1000 ETH\n *  Minimum duration: 6 weeks from deployment\n *\n */\n\npragma solidity 0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private owner_;\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner_ = msg.sender;\n    }\n\n    /**\n    * @return the address of the owner.\n    */\n    function owner() public view returns(address) {\n        return owner_;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner_, \"Only the owner can call this function.\");\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    * @notice Renouncing to ownership will leave the contract without an owner.\n    * It will not be possible to call the functions with the `onlyOwner`\n    * modifier anymore.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner_);\n        owner_ = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0), \"Cannot transfer ownership to zero address.\");\n        emit OwnershipTransferred(owner_, _newOwner);\n        owner_ = _newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\ncontract LivenSale is Ownable {\n\n    using SafeMath for uint256;\n\n    uint256 public maximumContribution = 1000 ether;\n    uint256 public minimumContribution = 100 finney;\n    uint256 public totalWeiRaised;\n    uint256 public endTimestamp;\n    uint256 public constant SIX_WEEKS_IN_SECONDS = 86400 * 7 * 6;\n\n    bool public saleEnded = false;\n    address public proceedsAddress;\n\n    mapping (address => uint256) public weiContributed;\n\n    constructor (address _proceedsAddress) public {\n        proceedsAddress = _proceedsAddress;\n        endTimestamp = block.timestamp + SIX_WEEKS_IN_SECONDS;\n    }\n\n    function () public payable {\n        buyTokens();\n    }\n\n    function buyTokens () public payable {\n        require(!saleEnded && block.timestamp < endTimestamp, \"Campaign has ended. No more contributions possible.\");\n        require(msg.value >= minimumContribution, \"No contributions below 0.1 ETH.\");\n        require(weiContributed[msg.sender] < maximumContribution, \"Contribution cap already reached.\");\n\n        uint purchaseAmount = msg.value;\n        uint weiToReturn;\n        \n        // Check max contribution\n        uint remainingContributorAllowance = maximumContribution.sub(weiContributed[msg.sender]);\n        if (remainingContributorAllowance < purchaseAmount) {\n            purchaseAmount = remainingContributorAllowance;\n            weiToReturn = msg.value.sub(purchaseAmount);\n        }\n\n        // Store allocation\n        weiContributed[msg.sender] = weiContributed[msg.sender].add(purchaseAmount);\n        totalWeiRaised = totalWeiRaised.add(purchaseAmount);\n\n        // Forward ETH immediately to the multisig\n        proceedsAddress.transfer(purchaseAmount);\n\n        // Return excess ETH\n        if (weiToReturn > 0) {\n            address(msg.sender).transfer(weiToReturn);\n        }\n    }\n\n    function extendSale (uint256 _seconds) public onlyOwner {\n        endTimestamp += _seconds;\n    }\n\n    function endSale () public onlyOwner {\n        saleEnded = true;\n    }\n}",
  "bytecode": "6080604052683635c9adc5dea0000060015567016345785d8a00006002556005805460ff1916905534801561003357600080fd5b50604051602080610949833981016040525160008054600160a060020a0319163317905560058054600160a060020a039092166101000261010060a860020a03199092169190911790554262375f00016004556108b4806100956000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631f1886e481146100d957806320c0d4df146100f15780633209943e14610118578063380d831b1461014957806353f4db011461015e578063715018a6146101735780638da5cb5b14610188578063937e09b11461019d5780639b8906ae146101b25780639c2fcd45146101db578063a85adeab146101f0578063d0febe4c146100cf578063d5307b0c14610205578063f2fde38b14610226575b6100d7610247565b005b3480156100e557600080fd5b506100d76004356104cd565b3480156100fd57600080fd5b5061010661053c565b60408051918252519081900360200190f35b34801561012457600080fd5b5061012d610543565b60408051600160a060020a039092168252519081900360200190f35b34801561015557600080fd5b506100d7610557565b34801561016a57600080fd5b506101066105ca565b34801561017f57600080fd5b506100d76105d0565b34801561019457600080fd5b5061012d610689565b3480156101a957600080fd5b50610106610698565b3480156101be57600080fd5b506101c761069e565b604080519115158252519081900360200190f35b3480156101e757600080fd5b506101066106a7565b3480156101fc57600080fd5b506101066106ad565b34801561021157600080fd5b50610106600160a060020a03600435166106b3565b34801561023257600080fd5b506100d7600160a060020a03600435166106c5565b6005546000908190819060ff16158015610262575060045442105b15156102de576040805160e560020a62461bcd02815260206004820152603360248201527f43616d706169676e2068617320656e6465642e204e6f206d6f726520636f6e7460448201527f7269627574696f6e7320706f737369626c652e00000000000000000000000000606482015290519081900360840190fd5b600254341015610338576040805160e560020a62461bcd02815260206004820152601f60248201527f4e6f20636f6e747269627574696f6e732062656c6f7720302e31204554482e00604482015290519081900360640190fd5b60015433600090815260066020526040902054106103c6576040805160e560020a62461bcd02815260206004820152602160248201527f436f6e747269627574696f6e2063617020616c7265616479207265616368656460448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600660205260409020546001543494506103eb9163ffffffff61073516565b90508281101561040b57915081610408348263ffffffff61073516565b91505b3360009081526006602052604090205461042b908463ffffffff61074716565b3360009081526006602052604090205560035461044e908463ffffffff61074716565b600355600554604051610100909104600160a060020a0316906108fc8515029085906000818181858888f1935050505015801561048f573d6000803e3d6000fd5b5060008211156104c857604051339083156108fc029084906000818181858888f193505050501580156104c6573d6000803e3d6000fd5b505b505050565b600054600160a060020a03163314610531576040805160e560020a62461bcd02815260206004820152602660248201526000805160206108498339815191526044820152600080516020610869833981519152606482015290519081900360840190fd5b600480549091019055565b62375f0081565b6005546101009004600160a060020a031681565b600054600160a060020a031633146105bb576040805160e560020a62461bcd02815260206004820152602660248201526000805160206108498339815191526044820152600080516020610869833981519152606482015290519081900360840190fd5b6005805460ff19166001179055565b60035481565b600054600160a060020a03163314610634576040805160e560020a62461bcd02815260206004820152602660248201526000805160206108498339815191526044820152600080516020610869833981519152606482015290519081900360840190fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b60025481565b60055460ff1681565b60015481565b60045481565b60066020526000908152604090205481565b600054600160a060020a03163314610729576040805160e560020a62461bcd02815260206004820152602660248201526000805160206108498339815191526044820152600080516020610869833981519152606482015290519081900360840190fd5b6107328161075a565b50565b60008282111561074157fe5b50900390565b8181018281101561075457fe5b92915050565b600160a060020a03811615156107e0576040805160e560020a62461bcd02815260206004820152602a60248201527f43616e6e6f74207472616e73666572206f776e65727368697020746f207a657260448201527f6f20616464726573732e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556004f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e0000000000000000000000000000000000000000000000000000a165627a7a723058207a872784457fc87c92476a96f3248005988bc3a52b3fb71d60489276198d3c780029000000000000000000000000ee66055c67a82ffa2734c898cefe4964fabf0f41",
  "constructorArguments": "000000000000000000000000ee66055c67a82ffa2734c898cefe4964fabf0f41"
}