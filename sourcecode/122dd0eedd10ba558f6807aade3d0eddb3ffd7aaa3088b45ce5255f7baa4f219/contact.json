{
  "address": "0x214c1c9962761be484e365a14d9bca3739020517",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KingOfEthOpenAuctions",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-13\n*/\n\n// File: contracts/GodMode.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title God Mode\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a basic interface for God\n///  in a contract as well as the ability for God to pause\n///  the contract\ncontract GodMode {\n    /// @dev Is the contract paused?\n    bool public isPaused;\n\n    /// @dev God's address\n    address public god;\n\n    /// @dev Only God can run this function\n    modifier onlyGod()\n    {\n        require(god == msg.sender);\n        _;\n    }\n\n    /// @dev This function can only be run while the contract\n    ///  is not paused\n    modifier notPaused()\n    {\n        require(!isPaused);\n        _;\n    }\n\n    /// @dev This event is fired when the contract is paused\n    event GodPaused();\n\n    /// @dev This event is fired when the contract is unpaused\n    event GodUnpaused();\n\n    constructor() public\n    {\n        // Make the creator of the contract God\n        god = msg.sender;\n    }\n\n    /// @dev God can change the address of God\n    /// @param _newGod The new address for God\n    function godChangeGod(address _newGod) public onlyGod\n    {\n        god = _newGod;\n    }\n\n    /// @dev God can pause the game\n    function godPause() public onlyGod\n    {\n        isPaused = true;\n\n        emit GodPaused();\n    }\n\n    /// @dev God can unpause the game\n    function godUnpause() public onlyGod\n    {\n        isPaused = false;\n\n        emit GodUnpaused();\n    }\n}\n\n// File: contracts/KingOfEthAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for titles and taxes\ncontract KingOfEthAbstractInterface {\n    /// @dev The address of the current King\n    address public king;\n\n    /// @dev The address of the current Wayfarer\n    address public wayfarer;\n\n    /// @dev Anyone can pay taxes\n    function payTaxes() public payable;\n}\n\n// File: contracts/KingOfEthAuctionsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Auctions Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for auctions of houses\ncontract KingOfEthAuctionsAbstractInterface {\n    /// @dev Determines if there is an auction at a particular location\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    /// @return true if there is an existing auction\n    function existingAuction(uint _x, uint _y) public view returns(bool);\n}\n\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Blind Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the blind auctions contract\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\n    /// @dev The address of the blind auctions contract\n    address public blindAuctionsContract;\n\n    /// @dev Only the blind auctions contract can run this\n    modifier onlyBlindAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new blind auctions contract\n    /// @param _blindAuctionsContract the address of the blind auctions\n    ///  contract\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\n        public\n        onlyGod\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Open Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the open auctions contract\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\n    /// @dev The address of the auctions contract\n    address public openAuctionsContract;\n\n    /// @dev Only the open auctions contract can run this\n    modifier onlyOpenAuctionsContract()\n    {\n        require(openAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new auctions contract\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\n        public\n        onlyGod\n    {\n        openAuctionsContract = _openAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title King of Eth: Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the auctions contracts\ncontract KingOfEthAuctionsReferencer is\n      KingOfEthBlindAuctionsReferencer\n    , KingOfEthOpenAuctionsReferencer\n{\n    /// @dev Only an auctions contract can run this\n    modifier onlyAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender\n             || openAuctionsContract == msg.sender);\n        _;\n    }\n}\n\n// File: contracts/KingOfEthReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the king contract\ncontract KingOfEthReferencer is GodMode {\n    /// @dev The address of the king contract\n    address public kingOfEthContract;\n\n    /// @dev Only the king contract can run this\n    modifier onlyKingOfEthContract()\n    {\n        require(kingOfEthContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the king contract\n    /// @param _kingOfEthContract The new address\n    function godSetKingOfEthContract(address _kingOfEthContract)\n        public\n        onlyGod\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n}\n\n// File: contracts/KingOfEthBoard.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/// @title King of Eth: Board\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for board\ncontract KingOfEthBoard is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthReferencer\n{\n    /// @dev x coordinate of the top left corner of the boundary\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev y coordinate of the top left corner of the boundary\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev x coordinate of the bottom right corner of the boundary\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev y coordinate of the bottom right corner of the boundary\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev Number used to divide the total number of house locations\n    /// after any expansion to yield the number of auctions that  will be\n    /// available to start for the expansion's duration\n    uint public constant auctionsAvailableDivisor = 10;\n\n    /// @dev Amount of time the King must wait between increasing the board\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\n\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\n\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\n    ///  before increasing the board\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\n\n    /// @dev The last time the board was increased in size\n    uint public lastIncreaseTime;\n\n    /// @dev The direction of the next increase\n    uint8 public nextIncreaseDirection;\n\n    /// @dev The number of auctions that players may choose to start\n    ///  for this expansion\n    uint public auctionsRemaining;\n\n    constructor() public\n    {\n        // Game is paused as God must start it\n        isPaused = true;\n\n        // Set the auctions remaining\n        setAuctionsAvailableForBounds();\n    }\n\n    /// @dev Fired when the board is increased in size\n    event BoardSizeIncreased(\n          address initiator\n        , uint newBoundX1\n        , uint newBoundY1\n        , uint newBoundX2\n        , uint newBoundY2\n        , uint lastIncreaseTime\n        , uint nextIncreaseDirection\n        , uint auctionsRemaining\n    );\n\n    /// @dev Only the King can run this\n    modifier onlyKing()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\n        _;\n    }\n\n    /// @dev Only the Wayfarer can run this\n    modifier onlyWayfarer()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\n        _;\n    }\n\n    /// @dev Set the total auctions available\n    function setAuctionsAvailableForBounds() private\n    {\n        uint boundDiffX = boundX2 - boundX1;\n        uint boundDiffY = boundY2 - boundY1;\n\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\n    }\n\n    /// @dev Increase the board's size making sure to keep steady at\n    ///  the maximum outer bounds\n    function increaseBoard() private\n    {\n        // The length of increase\n        uint _increaseLength;\n\n        // If this increase direction is right\n        if(0 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n            uint _updatedX2 = boundX2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\n            {\n                boundX2 = ~uint(0);\n            }\n            else\n            {\n                boundX2 = _updatedX2;\n            }\n        }\n        // If this increase direction is down\n        else if(1 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n            uint _updatedY2 = boundY2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\n            {\n                boundY2 = ~uint(0);\n            }\n            else\n            {\n                boundY2 = _updatedY2;\n            }\n        }\n        // If this increase direction is left\n        else if(2 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n\n            // Stay within bounds\n            if(boundX1 <= _increaseLength)\n            {\n                boundX1 = 0;\n            }\n            else\n            {\n                boundX1 -= _increaseLength;\n            }\n        }\n        // If this increase direction is up\n        else if(3 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n\n            // Stay within bounds\n            if(boundY1 <= _increaseLength)\n            {\n                boundY1 = 0;\n            }\n            else\n            {\n                boundY1 -= _increaseLength;\n            }\n        }\n\n        // The last increase time is now\n        lastIncreaseTime = now;\n\n        // Set the next increase direction\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\n\n        // Reset the auctions available\n        setAuctionsAvailableForBounds();\n\n        emit BoardSizeIncreased(\n              msg.sender\n            , boundX1\n            , boundY1\n            , boundX2\n            , boundY2\n            , now\n            , nextIncreaseDirection\n            , auctionsRemaining\n        );\n    }\n\n    /// @dev God can start the game\n    function godStartGame() public onlyGod\n    {\n        // Reset increase times\n        lastIncreaseTime = now;\n\n        // Unpause the game\n        godUnpause();\n    }\n\n    /// @dev The auctions contracts can decrement the number\n    ///  of auctions that are available to be started\n    function auctionsDecrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining -= 1;\n    }\n\n    /// @dev The auctions contracts can increment the number\n    ///  of auctions that are available to be started when\n    ///  an auction ends wihout a winner\n    function auctionsIncrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining += 1;\n    }\n\n    /// @dev The King can increase the board much faster than the plebs\n    function kingIncreaseBoard()\n        public\n        onlyKing\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev The Wayfarer can increase the board faster than the plebs\n    function wayfarerIncreaseBoard()\n        public\n        onlyWayfarer\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev Any old pleb can increase the board\n    function plebIncreaseBoard() public\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n}\n\n// File: contracts/KingOfEthBoardReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Board Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the board contract\ncontract KingOfEthBoardReferencer is GodMode {\n    /// @dev The address of the board contract\n    address public boardContract;\n\n    /// @dev Only the board contract can run this\n    modifier onlyBoardContract()\n    {\n        require(boardContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the board contract\n    /// @param _boardContract The new address\n    function godSetBoardContract(address _boardContract)\n        public\n        onlyGod\n    {\n        boardContract = _boardContract;\n    }\n}\n\n// File: contracts/KingOfEthHousesAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Houses Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for houses\ncontract KingOfEthHousesAbstractInterface {\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address);\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8);\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthHousesReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Houses Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the houses contract\ncontract KingOfEthHousesReferencer is GodMode {\n    /// @dev The houses contract's address\n    address public housesContract;\n\n    /// @dev Only the houses contract can run this function\n    modifier onlyHousesContract()\n    {\n        require(housesContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _housesContract The new address\n    function godSetHousesContract(address _housesContract)\n        public\n        onlyGod\n    {\n        housesContract = _housesContract;\n    }\n}\n\n// File: contracts/KingOfEthOpenAuctions.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n\n/// @title King of Eth: Open Auctions\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for open auctions of houses\ncontract KingOfEthOpenAuctions is\n      GodMode\n    , KingOfEthAuctionsAbstractInterface\n    , KingOfEthReferencer\n    , KingOfEthBlindAuctionsReferencer\n    , KingOfEthBoardReferencer\n    , KingOfEthHousesReferencer\n{\n    /// @dev Data for an auction\n    struct Auction {\n        /// @dev The time the auction started\n        uint startTime;\n\n        /// @dev The (current) winning bid\n        uint winningBid;\n\n        /// @dev The address of the (current) winner\n        address winner;\n    }\n\n    /// @dev Mapping from location (x, y) to the auction at that location\n    mapping (uint => mapping (uint => Auction)) auctions;\n\n    /// @dev The span of time that players may bid on an auction\n    uint public constant bidSpan = 20 minutes;\n\n    /// @param _kingOfEthContract The address for the king contract\n    /// @param _blindAuctionsContract The address for the blind auctions contract\n    /// @param _boardContract The address for the board contract\n    constructor(\n          address _kingOfEthContract\n        , address _blindAuctionsContract\n        , address _boardContract\n    )\n        public\n    {\n        kingOfEthContract     = _kingOfEthContract;\n        blindAuctionsContract = _blindAuctionsContract;\n        boardContract         = _boardContract;\n\n        // Auctions are not allowed before God has begun the game\n        isPaused = true;\n    }\n\n    /// @dev Fired when a new auction is started\n    event OpenAuctionStarted(\n          uint x\n        , uint y\n        , address starter\n        , uint startTime\n    );\n\n    /// @dev Fired when a new bid is placed\n    event OpenBidPlaced(uint x, uint y, address bidder, uint amount);\n\n    /// @dev Fired when an auction is closed\n    event OpenAuctionClosed(uint x, uint y, address newOwner, uint amount);\n\n    /// @dev Determines if there is an auction at a particular location\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    /// @return true if there is an existing auction\n    function existingAuction(uint _x, uint _y) public view returns(bool)\n    {\n        return 0 != auctions[_x][_y].startTime;\n    }\n\n    /// @dev Create an auction at a particular location\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    function createAuction(uint _x, uint _y) public notPaused\n    {\n        // Require that there is not an auction already started at\n        // the location\n        require(0 == auctions[_x][_y].startTime);\n\n        // Require that there is no blind auction at that location\n        require(!KingOfEthAuctionsAbstractInterface(blindAuctionsContract).existingAuction(_x, _y));\n\n        KingOfEthBoard _board = KingOfEthBoard(boardContract);\n\n        // Require that there is at least one available auction remaining\n        require(0 < _board.auctionsRemaining());\n\n        // Require that the auction is within the current bounds of the board\n        require(_board.boundX1() < _x);\n        require(_board.boundY1() < _y);\n        require(_board.boundX2() > _x);\n        require(_board.boundY2() > _y);\n\n        // Require that nobody currently owns the house\n        require(0x0 == KingOfEthHousesAbstractInterface(housesContract).ownerOf(_x, _y));\n\n        // Use up an available auction\n        _board.auctionsDecrementAuctionsRemaining();\n\n        auctions[_x][_y].startTime = now;\n\n        emit OpenAuctionStarted(_x, _y, msg.sender, now);\n    }\n\n    /// @dev Make a bid on an auction. The amount bid is the amount sent\n    ///  with the transaction.\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    function placeBid(uint _x, uint _y) public payable notPaused\n    {\n        // Lookup the auction\n        Auction storage _auction = auctions[_x][_y];\n\n        // Require that the auction actually exists\n        require(0 != _auction.startTime);\n\n        // Require that it is still during the bid span\n        require(_auction.startTime + bidSpan > now);\n\n        // If the new bid is larger than the current winning bid\n        if(_auction.winningBid < msg.value)\n        {\n            // Temporarily save the old winning values\n            uint    _oldWinningBid = _auction.winningBid;\n            address _oldWinner     = _auction.winner;\n\n            // Store the new winner\n            _auction.winningBid = msg.value;\n            _auction.winner     = msg.sender;\n\n            // Send the loser back their ETH\n            if(0 < _oldWinningBid) {\n                _oldWinner.transfer(_oldWinningBid);\n            }\n        }\n        else\n        {\n            // Return the sender their ETH\n            msg.sender.transfer(msg.value);\n        }\n\n        emit OpenBidPlaced(_x, _y, msg.sender, msg.value);\n    }\n\n    /// @dev Close an auction and distribute the bid amount as taxes\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    function closeAuction(uint _x, uint _y) public notPaused\n    {\n        // Lookup the auction\n        Auction storage _auction = auctions[_x][_y];\n\n        // Require that the auction actually exists\n        require(0 != _auction.startTime);\n\n        // If nobody won the auction\n        if(0x0 == _auction.winner)\n        {\n            // Mark that there is no current auction for this location\n            _auction.startTime = 0;\n\n            // Allow another auction to be created\n            KingOfEthBoard(boardContract).auctionsIncrementAuctionsRemaining();\n        }\n        // If a player won the auction\n        else\n        {\n            // Set the auction's winner as the owner of the house.\n            // Note that this will fail if there is already an owner so we\n            // don't need to mark the auction as closed with some extra\n            // variable.\n            KingOfEthHousesAbstractInterface(housesContract).auctionsSetOwner(\n                  _x\n                , _y\n                , _auction.winner\n            );\n\n            // Pay the taxes\n            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_auction.winningBid)();\n        }\n\n        emit OpenAuctionClosed(_x, _y, _auction.winner, _auction.winningBid);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610e7c8339810160409081528151602083015191909201516000805460018054600160a060020a0319908116600160a060020a039788161782556002805482169688169690961790955560038054909516959093169490941790925561010060a860020a031990921633610100021760ff19169091178155610ddd90819061009f90396000f3006080604052600436106100e25763ffffffff60e060020a6000350416630121683f81146100e75780630aa39daa14610104578063121e0d4e146101255780633983a2601461013a5780634ae401141461015557806357c90de51461017c5780635e67a4a31461018a57806375fb4b62146101b957806387e8a980146101ea57806398a0d4651461020b5780639b05376c1461022c578063a730428714610241578063b187bd2614610256578063ba56f6ee1461026b578063bbe6a8fb14610280578063d9b92ef4146102a1578063deb63d4f146102c2578063f7ace48d146102d7575b600080fd5b3480156100f357600080fd5b506101026004356024356102ec565b005b34801561011057600080fd5b50610102600160a060020a036004351661079a565b34801561013157600080fd5b506101026107e5565b34801561014657600080fd5b50610102600435602435610837565b34801561016157600080fd5b5061016a610a5d565b60408051918252519081900360200190f35b610102600435602435610a63565b34801561019657600080fd5b506101a5600435602435610bb8565b604080519115158252519081900360200190f35b3480156101c557600080fd5b506101ce610bd7565b60408051600160a060020a039092168252519081900360200190f35b3480156101f657600080fd5b50610102600160a060020a0360043516610be6565b34801561021757600080fd5b50610102600160a060020a0360043516610c37565b34801561023857600080fd5b506101ce610c82565b34801561024d57600080fd5b50610102610c91565b34801561026257600080fd5b506101a5610ce0565b34801561027757600080fd5b506101ce610ce9565b34801561028c57600080fd5b50610102600160a060020a0360043516610cfd565b3480156102ad57600080fd5b50610102600160a060020a0360043516610d48565b3480156102ce57600080fd5b506101ce610d93565b3480156102e357600080fd5b506101ce610da2565b6000805460ff16156102fd57600080fd5b60008381526005602090815260408083208584529091529020541561032157600080fd5b600254604080517f5e67a4a300000000000000000000000000000000000000000000000000000000815260048101869052602481018590529051600160a060020a0390921691635e67a4a3916044808201926020929091908290030181600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505050506040513d60208110156103b957600080fd5b5051156103c557600080fd5b50600354604080517fa66667d10000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691829163a66667d19160048083019260209291908290030181600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b505050506040513d602081101561045157600080fd5b505160001061045f57600080fd5b8281600160a060020a031663fed84f216040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050506040513d60208110156104c857600080fd5b5051106104d457600080fd5b8181600160a060020a031663fd4fbf916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b505050506040513d602081101561053d57600080fd5b50511061054957600080fd5b8281600160a060020a031663fc419a2c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506040513d60208110156105b257600080fd5b5051116105be57600080fd5b8181600160a060020a031663af9913d06040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156105fd57600080fd5b505af1158015610611573d6000803e3d6000fd5b505050506040513d602081101561062757600080fd5b50511161063357600080fd5b60048054604080517fd9dad80d0000000000000000000000000000000000000000000000000000000081529283018690526024830185905251600160a060020a039091169163d9dad80d9160448083019260209291908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b5051600160a060020a0316156106de57600080fd5b80600160a060020a0316637dcd46556040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b5050506000848152600560209081526040808320868452825291829020429081905582518781529182018690523382840152606082015290517f53952687255876f23fa81e156bdf6f930bd338eaee9fa4670d15c033a5fa197792509081900360800190a1505050565b6000546101009004600160a060020a031633146107b657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000546101009004600160a060020a0316331461080157600080fd5b6000805460ff191660011781556040517f02b2464d82b27b9e05464c651333aa75ab50f9ab9bc79a218dd84c200c6fc7999190a1565b6000805460ff161561084857600080fd5b50600082815260056020908152604080832084845290915290208054151561086f57600080fd5b6002810154600160a060020a031615156108fe576000808255600354604080517ff84e353e0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263f84e353e9260048084019382900301818387803b1580156108e157600080fd5b505af11580156108f5573d6000803e3d6000fd5b505050506109fe565b600480546002830154604080517f64abb80b00000000000000000000000000000000000000000000000000000000815293840187905260248401869052600160a060020a039182166044850152519116916364abb80b91606480830192600092919082900301818387803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b50505050600160009054906101000a9004600160a060020a0316600160a060020a031663e10e384a82600101546040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156109e457600080fd5b505af11580156109f8573d6000803e3d6000fd5b50505050505b600281015460018201546040805186815260208101869052600160a060020a03909316838201526060830191909152517f3550aa350dd80c2a9b863e62f9a00c8f63a3bbaa811b58680d3f8a8c4417429d9181900360800190a1505050565b6104b081565b600080548190819060ff1615610a7857600080fd5b6000858152600560209081526040808320878452909152902080549093501515610aa157600080fd5b8254426104b090910111610ab457600080fd5b3483600101541015610b3e5750506001810180546002830180543490935573ffffffffffffffffffffffffffffffffffffffff1983163317905590600160a060020a03166000821115610b3957604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015610b37573d6000803e3d6000fd5b505b610b6c565b60405133903480156108fc02916000818181858888f19350505050158015610b6a573d6000803e3d6000fd5b505b6040805186815260208101869052338183015234606082015290517faf3a48e30b0886c4ac2c553524d3156fa9945ea43bbc5e1c516b0c122962f4c29181900360800190a15050505050565b6000918252600560209081526040808420928452919052902054151590565b600354600160a060020a031681565b6000546101009004600160a060020a03163314610c0257600080fd5b60008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000546101009004600160a060020a03163314610c5357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b6000546101009004600160a060020a03163314610cad57600080fd5b6000805460ff191681556040517f0f0519ab053b7af599830cff5b49ec5284889db5b2dfcfdad2838d25e281e83c9190a1565b60005460ff1681565b6000546101009004600160a060020a031681565b6000546101009004600160a060020a03163314610d1957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000546101009004600160a060020a03163314610d6457600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b600154600160a060020a0316815600a165627a7a7230582001d2ac3c1716fe10f9f4f4e8a6ef01a0adde8c2b43949e849c46cf0c3999f3ba002900000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000001e19bec0e4ec6d524585f1d89f57afa2d0e951060000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d",
  "constructorArguments": "00000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000001e19bec0e4ec6d524585f1d89f57afa2d0e951060000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d"
}