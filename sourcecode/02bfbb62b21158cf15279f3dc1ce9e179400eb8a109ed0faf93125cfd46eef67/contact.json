{
  "address": "0x1afafc35b364595f06e89a0429c5762452eb7ffd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CXTCContract",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-20\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public systemAcc; // charge fee\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the systemAcc.\n     */\n    modifier onlySys() {\n        require(systemAcc !=address(0) && msg.sender == systemAcc);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Pausable {\n    using SafeMath for uint256;\n\n    //   mapping(address => uint256) balances;\n    mapping(address => uint256) freeBalances;\n    mapping(address => uint256) frozenBalances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= freeBalances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_value);\n        freeBalances[_to] = freeBalances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return freeBalances[_owner] + frozenBalances[_owner];\n    }\n\n    function freeBalanceOf(address _owner) public view returns (uint256 balance) {\n        return freeBalances[_owner];\n    }\n\n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\n        return frozenBalances[_owner];\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(_to != address(0));\n        require(_value <= freeBalances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        freeBalances[_from] = freeBalances[_from].sub(_value);\n        freeBalances[_to] = freeBalances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title CXTCToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract CXTCContract is StandardToken {\n\n    string public constant name = \"Culture eXchange Token Chain\"; // solium-disable-line uppercase\n    string public constant symbol = \"CXTC\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 8; // solium-disable-line uppercase\n\n    uint256 public constant freeSupply = 21000000 * (10 ** uint256(decimals)); // 10%自由量\n    uint256 public constant frozenSupply = 189000000 * (10 ** uint256(decimals)); // 90%冻结量\n\n    address[] parterAcc;\n\n    struct ArtInfo {\n        string idtReport;\n        string evtReport;\n        string escReport;\n        string regReport;\n    }\n\n    mapping (string => ArtInfo) internal artInfos;\n    mapping (address => mapping (uint256 => uint256)) public freezeRecord;\n\n    event Freeze(address indexed _addr, uint256 indexed _amount, uint256 indexed _timestamp);\n    event Defreeze(address indexed _addr, uint256 indexed _amount, uint256 indexed _timestamp);\n    event Release(address indexed _addr, uint256 indexed _amount);\n    event SetParter(address indexed _addr, uint256 indexed _amount);\n    event SetSysAcc(address indexed _addr);\n    event NewArt(string indexed _id);\n    event SetArtIdt(string indexed _id, string indexed _idtReport);\n    event SetArtEvt(string indexed _id, string indexed _evtReport);\n    event SetArtEsc(string indexed _id, string indexed _escReport);\n    event SetArtReg(string indexed _id, string indexed _regReport);\n\n    /**\n     * @dev Constructor\n     */\n    function CXTCContract() public {\n        owner = msg.sender;\n        totalSupply_ = freeSupply + frozenSupply;\n        freeBalances[owner] = freeSupply;\n        frozenBalances[owner] = frozenSupply;\n    }\n\n    /**\n     * init parter\n     */\n    function setParter(address _parter, uint256 _amount, uint256 _timestamp) public onlyOwner {\n        parterAcc.push(_parter);\n        frozenBalances[owner] = frozenBalances[owner].sub(_amount);\n        frozenBalances[_parter] = frozenBalances[_parter].add(_amount);\n        freezeRecord[_parter][_timestamp] = freezeRecord[_parter][_timestamp].add(_amount);\n        Freeze(_parter, _amount, _timestamp);\n        SetParter(_parter, _amount);\n    }\n\n    /**\n     * set systemAccount\n     */\n    function setSysAcc(address _sysAcc) public onlyOwner returns (bool) {\n        systemAcc = _sysAcc;\n        SetSysAcc(_sysAcc);\n        return true;\n    }\n\n    /**\n     * new art hash info\n     */\n    function newArt(string _id, string _regReport) public onlySys returns (bool) {\n        ArtInfo memory info = ArtInfo({idtReport: \"\", evtReport: \"\", escReport: \"\", regReport: _regReport});\n        artInfos[_id] = info;\n        NewArt(_id);\n        return true;\n    }\n\n    /**\n     * get artInfo\n     */\n    function getArt(string _id) public view returns (string, string, string, string) {\n        ArtInfo memory info = artInfos[_id];\n        return (info.regReport, info.idtReport, info.evtReport, info.escReport);\n    }\n\n    /**\n     * set art idtReport\n     */\n    function setArtIdt(string _id, string _idtReport) public onlySys returns (bool) {\n        string idtReport = artInfos[_id].idtReport;\n        bytes memory idtReportLen = bytes(idtReport);\n        if (idtReportLen.length == 0){\n            artInfos[_id].idtReport = _idtReport;\n            SetArtIdt(_id, _idtReport);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * set art evtReport\n     */\n    function setArtEvt(string _id, string _evtReport) public onlySys returns (bool) {\n        string evtReport = artInfos[_id].evtReport;\n        bytes memory evtReportLen = bytes(evtReport);\n        if (evtReportLen.length == 0){\n            artInfos[_id].evtReport = _evtReport;\n            SetArtEvt(_id, _evtReport);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * set art escrow report\n     */\n    function setArtEsc(string _id, string _escReport) public onlySys returns (bool) {\n        string escReport = artInfos[_id].escReport;\n        bytes memory escReportLen = bytes(escReport);\n        if (escReportLen.length == 0){\n            artInfos[_id].escReport = _escReport;\n            SetArtEsc(_id, _escReport);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * issue art coin to user.\n     */\n    function issue(address _addr, uint256 _amount, uint256 _timestamp) public onlySys returns (bool) {\n        // 2018/03/23 = 1521734400\n        require(frozenBalances[owner] >= _amount);\n        frozenBalances[owner] = frozenBalances[owner].sub(_amount);\n        frozenBalances[_addr]= frozenBalances[_addr].add(_amount);\n        freezeRecord[_addr][_timestamp] = freezeRecord[_addr][_timestamp].add(_amount);\n        Freeze(_addr, _amount, _timestamp);\n        return true;\n    }\n\n    /**\n     * distribute\n     */\n    function distribute(address _to, uint256 _amount, uint256 _timestamp, address[] _addressLst, uint256[] _amountLst) public onlySys returns(bool) {\n        frozenBalances[_to]= frozenBalances[_to].add(_amount);\n        freezeRecord[_to][_timestamp] = freezeRecord[_to][_timestamp].add(_amount);\n        for(uint i = 0; i < _addressLst.length; i++) {\n            frozenBalances[_addressLst[i]] = frozenBalances[_addressLst[i]].sub(_amountLst[i]);\n            Defreeze(_addressLst[i], _amountLst[i], _timestamp);\n        }\n        Freeze(_to, _amount, _timestamp);\n        return true;\n    }\n\n    /**\n     * send with charge fee\n     */\n    function send(address _to, uint256 _amount, uint256 _fee, uint256 _timestamp) public whenNotPaused returns (bool) {\n        require(freeBalances[msg.sender] >= _amount);\n        require(_amount >= _fee);\n        require(_to != address(0));\n        uint256 toAmt = _amount.sub(_fee);\n        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_amount);\n        freeBalances[_to] = freeBalances[_to].add(toAmt);\n        // systemAcc\n        frozenBalances[systemAcc] = frozenBalances[systemAcc].add(_fee);\n        freezeRecord[systemAcc][_timestamp] = freezeRecord[systemAcc][_timestamp].add(_fee);\n        Transfer(msg.sender, _to, toAmt);\n        Freeze(systemAcc, _fee, _timestamp);\n        return true;\n    }\n\n    /**\n     * user freeze free balance\n     */\n    function freeze(uint256 _amount, uint256 _timestamp) public whenNotPaused returns (bool) {\n        require(freeBalances[msg.sender] >= _amount);\n        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_amount);\n        frozenBalances[msg.sender] = frozenBalances[msg.sender].add(_amount);\n        freezeRecord[msg.sender][_timestamp] = freezeRecord[msg.sender][_timestamp].add(_amount);\n        Freeze(msg.sender, _amount, _timestamp);\n        return true;\n    }\n\n    /**\n     * auto release\n     */\n    function release(address[] _addressLst, uint256[] _amountLst) public onlySys returns (bool) {\n        require(_addressLst.length == _amountLst.length);\n        for(uint i = 0; i < _addressLst.length; i++) {\n            freeBalances[_addressLst[i]] = freeBalances[_addressLst[i]].add(_amountLst[i]);\n            frozenBalances[_addressLst[i]] = frozenBalances[_addressLst[i]].sub(_amountLst[i]);\n            Release(_addressLst[i], _amountLst[i]);\n        }\n        return true;\n    }\n\n    /**\n     * bonus shares\n     */\n    function bonus(uint256 _sum, address[] _addressLst, uint256[] _amountLst) public onlySys returns (bool) {\n        require(frozenBalances[systemAcc] >= _sum);\n        require(_addressLst.length == _amountLst.length);\n        for(uint i = 0; i < _addressLst.length; i++) {\n            freeBalances[_addressLst[i]] = freeBalances[_addressLst[i]].add(_amountLst[i]);\n            Transfer(systemAcc, _addressLst[i], _amountLst[i]);\n        }\n        frozenBalances[systemAcc].sub(_sum);\n        Release(systemAcc, _sum);\n        return true;\n    }\n}",
  "bytecode": "60606040526001805460a060020a60ff0219169055341561001f57600080fd5b60008054600160a060020a03338116600160a060020a03199283168117909216909117808355664a9b638448800060045581168252600260209081526040808420660775f05a074000905583549092168352600390529020664325732a4140009055612dd0806100906000396000f3006060604052600436106101b65763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101bb578063095ea7b31461024557806318160ddd1461027b57806323b872dd146102a057806324a6ab0c146102c85780632ef140ef146102db578063313ce5671461030357806335d7a0521461032c5780633b2269cf146103455780633f4ba83a146103745780634150f4cd146103895780634496f183146103a8578063543e9954146104375780635c975abb146104565780635ca8556414610469578063661884631461050f5780636a78edac146105315780636e6b4bed1461055357806370a08231146107575780637783c06b146107765780638456cb59146108095780638da5cb5b1461081c57806391c203751461082f57806395d89b41146108c2578063a9059cbb146108d5578063b34362be146108f7578063b47dd3181461091c578063be91de53146109b0578063c7be7ae3146109cf578063d02d518d146109e2578063d73dd62314610a75578063d813b4b914610a97578063dd62ed3e14610b2a578063dfe5ef4814610b4f578063f2fde38b14610b74575b600080fd5b34156101c657600080fd5b6101ce610b93565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561020a5780820151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025057600080fd5b610267600160a060020a0360043516602435610bca565b604051901515815260200160405180910390f35b341561028657600080fd5b61028e610c4d565b60405190815260200160405180910390f35b34156102ab57600080fd5b610267600160a060020a0360043581169060243516604435610c54565b34156102d357600080fd5b61028e610ddc565b34156102e657600080fd5b610267600160a060020a0360043516602435604435606435610de7565b341561030e57600080fd5b610316610fd2565b60405160ff909116815260200160405180910390f35b341561033757600080fd5b610267600435602435610fd7565b341561035057600080fd5b610358611102565b604051600160a060020a03909116815260200160405180910390f35b341561037f57600080fd5b610387611111565b005b341561039457600080fd5b610267600160a060020a0360043516611190565b34156103b357600080fd5b61026760046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061120b95505050505050565b341561044257600080fd5b61028e600160a060020a03600435166113eb565b341561046157600080fd5b610267611406565b341561047457600080fd5b61026760048035600160a060020a03169060248035916044359160849060643590810190830135806020808202016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061141695505050505050565b341561051a57600080fd5b610267600160a060020a03600435166024356115c7565b341561053c57600080fd5b61028e600160a060020a03600435166024356116dc565b341561055e57600080fd5b6105a460046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506116f995505050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156105ed5780820151838201526020016105d5565b50505050905090810190601f16801561061a5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015610650578082015183820152602001610638565b50505050905090810190601f16801561067d5780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b838110156106b357808201518382015260200161069b565b50505050905090810190601f1680156106e05780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156107165780820151838201526020016106fe565b50505050905090810190601f1680156107435780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b341561076257600080fd5b61028e600160a060020a0360043516611a3d565b341561078157600080fd5b61026760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611a6595505050505050565b341561081457600080fd5b610387611c58565b341561082757600080fd5b610358611cdc565b341561083a57600080fd5b61026760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611ceb95505050505050565b34156108cd57600080fd5b6101ce611fac565b34156108e057600080fd5b610267600160a060020a0360043516602435611fe3565b341561090257600080fd5b610387600160a060020a03600435166024356044356120cc565b341561092757600080fd5b610267600480359060446024803590810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061224095505050505050565b34156109bb57600080fd5b61028e600160a060020a03600435166123d3565b34156109da57600080fd5b61028e6123ee565b34156109ed57600080fd5b61026760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506123f995505050505050565b3415610a8057600080fd5b610267600160a060020a03600435166024356126ad565b3415610aa257600080fd5b61026760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061276995505050505050565b3415610b3557600080fd5b61028e600160a060020a0360043581169060243516612a1b565b3415610b5a57600080fd5b610267600160a060020a0360043516602435604435612a46565b3415610b7f57600080fd5b610387600160a060020a0360043516612b8e565b60408051908101604052601c81527f43756c747572652065586368616e676520546f6b656e20436861696e00000000602082015281565b60015460009060a060020a900460ff1615610be457600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6004545b90565b60015460009060a060020a900460ff1615610c6e57600080fd5b600160a060020a0383161515610c8357600080fd5b600160a060020a038416600090815260026020526040902054821115610ca857600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054821115610cdb57600080fd5b600160a060020a038416600090815260026020526040902054610d04908363ffffffff612c2916565b600160a060020a038086166000908152600260205260408082209390935590851681522054610d39908363ffffffff612c3b16565b600160a060020a03808516600090815260026020908152604080832094909455878316825260058152838220339093168252919091522054610d81908363ffffffff612c2916565b600160a060020a0380861660008181526005602090815260408083203386168452909152908190209390935590851691600080516020612d858339815191529085905190815260200160405180910390a35060019392505050565b660775f05a07400081565b600154600090819060a060020a900460ff1615610e0357600080fd5b600160a060020a03331660009081526002602052604090205485901015610e2957600080fd5b83851015610e3657600080fd5b600160a060020a0386161515610e4b57600080fd5b610e5b858563ffffffff612c2916565b600160a060020a033316600090815260026020526040902054909150610e87908663ffffffff612c2916565b600160a060020a033381166000908152600260205260408082209390935590881681522054610ebc908263ffffffff612c3b16565b600160a060020a03808816600090815260026020908152604080832094909455600154909216815260039091522054610efb908563ffffffff612c3b16565b60018054600160a060020a0390811660009081526003602090815260408083209590955592549091168152600882528281208682529091522054610f45908563ffffffff612c3b16565b600154600160a060020a0390811660009081526008602090815260408083208884529091529081902092909255878116913390911690600080516020612d858339815191529084905190815260200160405180910390a360015483908590600160a060020a0316600080516020612d6583398151915260405160405180910390a450600195945050505050565b600881565b60015460009060a060020a900460ff1615610ff157600080fd5b600160a060020a0333166000908152600260205260409020548390101561101757600080fd5b600160a060020a033316600090815260026020526040902054611040908463ffffffff612c2916565b600160a060020a033316600090815260026020908152604080832093909355600390522054611075908463ffffffff612c3b16565b600160a060020a03331660009081526003602090815260408083209390935560088152828220858352905220546110b2908463ffffffff612c3b16565b600160a060020a033316600081815260086020908152604080832087845290915290819020929092558391859190600080516020612d65833981519152905160405180910390a450600192915050565b600154600160a060020a031681565b60005433600160a060020a0390811691161461112c57600080fd5b60015460a060020a900460ff16151561114457600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000805433600160a060020a039081169116146111ac57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091557f761b03f19eadd511a353b5ca9ee1ba4a74035e94e2f5dcd87242cd83b7968bb560405160405180910390a2506001919050565b6001546000908190600160a060020a031615801590611238575060015433600160a060020a039081169116145b151561124357600080fd5b825184511461125157600080fd5b5060005b83518110156113e1576112b783828151811061126d57fe5b906020019060200201516002600087858151811061128757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff612c3b16565b600260008684815181106112c757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020556113448382815181106112fa57fe5b906020019060200201516003600087858151811061131457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff612c2916565b6003600086848151811061135457fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205582818151811061138457fe5b9060200190602002015184828151811061139a57fe5b90602001906020020151600160a060020a03167ff6334794522b9db534a812aaae1af828a2e96aac68473b58e36d7d0bfd67477b60405160405180910390a3600101611255565b5060019392505050565b600160a060020a031660009081526002602052604090205490565b60015460a060020a900460ff1681565b6001546000908190600160a060020a031615801590611443575060015433600160a060020a039081169116145b151561144e57600080fd5b600160a060020a038716600090815260036020526040902054611477908763ffffffff612c3b16565b600160a060020a03881660009081526003602090815260408083209390935560088152828220888352905220546114b4908763ffffffff612c3b16565b600160a060020a038816600090815260086020908152604080832089845290915281209190915590505b8351811015611594576114f68382815181106112fa57fe5b6003600086848151811061150657fe5b90602001906020020151600160a060020a031681526020810191909152604001600020558483828151811061153757fe5b9060200190602002015185838151811061154d57fe5b90602001906020020151600160a060020a03167f851b19f953f6ce704efcb7884dde0e0bb5a2d74266a988299b6d799f55ece58d60405160405180910390a46001016114de565b848688600160a060020a0316600080516020612d6583398151915260405160405180910390a45060019695505050505050565b600154600090819060a060020a900460ff16156115e357600080fd5b50600160a060020a033381166000908152600560209081526040808320938716835292905220548083111561163f57600160a060020a033381166000908152600560209081526040808320938816835292905290812055611676565b61164f818463ffffffff612c2916565b600160a060020a033381166000908152600560209081526040808320938916835292905220555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600860209081526000928352604080842090915290825290205481565b611701612c51565b611709612c51565b611711612c51565b611719612c51565b611721612c63565b6007866040518082805190602001908083835b602083106117535780518252601f199092019160209182019101611734565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060806040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561182b5780601f106118005761010080835404028352916020019161182b565b820191906000526020600020905b81548152906001019060200180831161180e57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118cd5780601f106118a2576101008083540402835291602001916118cd565b820191906000526020600020905b8154815290600101906020018083116118b057829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561196f5780601f106119445761010080835404028352916020019161196f565b820191906000526020600020905b81548152906001019060200180831161195257829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a115780601f106119e657610100808354040283529160200191611a11565b820191906000526020600020905b8154815290600101906020018083116119f457829003601f168201915b505050505081525050905080606001518151826020015183604001519299919850965090945092505050565b600160a060020a03166000908152600360209081526040808320546002909252909120540190565b6000611a6f612c63565b600154600160a060020a031615801590611a97575060015433600160a060020a039081169116145b1515611aa257600080fd5b608060405190810160405280602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001848152509050806007856040518082805190602001908083835b60208310611b295780518252601f199092019160209182019101611b0a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020815181908051611b71929160200190612ca3565b50602082015181600101908051611b8c929160200190612ca3565b50604082015181600201908051611ba7929160200190612ca3565b50606082015181600301908051611bc2929160200190612ca3565b50905050836040518082805190602001908083835b60208310611bf65780518252601f199092019160209182019101611bd7565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390207f63e2fbacbff1e7ca6da3ea228700a56d02a54633e433af07b14091caf313e0e060405160405180910390a25060019392505050565b60005433600160a060020a03908116911614611c7357600080fd5b60015460a060020a900460ff1615611c8a57600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b600080611cf6612c51565b600154600160a060020a031615801590611d1e575060015433600160a060020a039081169116145b1515611d2957600080fd5b6007856040518082805190602001908083835b60208310611d5b5780518252601f199092019160209182019101611d3c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002019150818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e285780601f10611dfd57610100808354040283529160200191611e28565b820191906000526020600020905b815481529060010190602001808311611e0b57829003601f168201915b5050505050905080511515611f9f57836007866040518082805190602001908083835b60208310611e6a5780518252601f199092019160209182019101611e4b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201908051611eb1929160200190612ca3565b50836040518082805190602001908083835b60208310611ee25780518252601f199092019160209182019101611ec3565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020856040518082805190602001908083835b60208310611f3e5780518252601f199092019160209182019101611f1f565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390207fbd3b2c44b0a55bd3130934b88a084ca3c6245d836b50e48f318b83b60f5f435e60405160405180910390a360019250611fa4565b600092505b505092915050565b60408051908101604052600481527f4358544300000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515611ffa57600080fd5b600160a060020a03331660009081526002602052604090205482111561201f57600080fd5b600160a060020a033316600090815260026020526040902054612048908363ffffffff612c2916565b600160a060020a03338116600090815260026020526040808220939093559085168152205461207d908363ffffffff612c3b16565b600160a060020a038085166000818152600260205260409081902093909355913390911690600080516020612d858339815191529085905190815260200160405180910390a350600192915050565b60005433600160a060020a039081169116146120e757600080fd5b60068054600181016120f98382612d21565b506000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691909117909155825416825260039052604090205461214b9083612c29565b60008054600160a060020a0390811682526003602052604080832093909355851681522054612180908363ffffffff612c3b16565b600160a060020a03841660009081526003602090815260408083209390935560088152828220848352905220546121bd908363ffffffff612c3b16565b600160a060020a038416600081815260086020908152604080832086845290915290819020929092558291849190600080516020612d65833981519152905160405180910390a48183600160a060020a03167f0964cb3cb91f38ae015ef2db02ed9bc8b27c9e38c779763cbc23f871139df53960405160405180910390a3505050565b6001546000908190600160a060020a03161580159061226d575060015433600160a060020a039081169116145b151561227857600080fd5b600154600160a060020a0316600090815260036020526040902054859010156122a057600080fd5b82518451146122ae57600080fd5b5060005b8351811015612362576122ca83828151811061126d57fe5b600260008684815181106122da57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205583818151811061230a57fe5b90602001906020020151600154600160a060020a039182169116600080516020612d8583398151915285848151811061233f57fe5b9060200190602002015160405190815260200160405180910390a36001016122b2565b600154600160a060020a031660009081526003602052604090205461238d908663ffffffff612c2916565b506001548590600160a060020a03167ff6334794522b9db534a812aaae1af828a2e96aac68473b58e36d7d0bfd67477b60405160405180910390a3506001949350505050565b600160a060020a031660009081526003602052604090205490565b664325732a41400081565b600080612404612c51565b600154600160a060020a03161580159061242c575060015433600160a060020a039081169116145b151561243757600080fd5b6007856040518082805190602001908083835b602083106124695780518252601f19909201916020918201910161244a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019150818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125365780601f1061250b57610100808354040283529160200191612536565b820191906000526020600020905b81548152906001019060200180831161251957829003601f168201915b5050505050905080511515611f9f57836007866040518082805190602001908083835b602083106125785780518252601f199092019160209182019101612559565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080516125bf929160200190612ca3565b50836040518082805190602001908083835b602083106125f05780518252601f1990920191602091820191016125d1565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020856040518082805190602001908083835b6020831061264c5780518252601f19909201916020918201910161262d565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390207fd39b770e3e7a7207e17fcabc45633511b959fc1f03b8d274f17c21ecb409e1ca60405160405180910390a360019250611fa4565b60015460009060a060020a900460ff16156126c757600080fd5b600160a060020a033381166000908152600560209081526040808320938716835292905220546126fd908363ffffffff612c3b16565b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600080612774612c51565b600154600160a060020a03161580159061279c575060015433600160a060020a039081169116145b15156127a757600080fd5b6007856040518082805190602001908083835b602083106127d95780518252601f1990920191602091820191016127ba565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019150818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128a65780601f1061287b576101008083540402835291602001916128a6565b820191906000526020600020905b81548152906001019060200180831161288957829003601f168201915b5050505050905080511515611f9f57836007866040518082805190602001908083835b602083106128e85780518252601f1990920191602091820191016128c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902090805161292d929160200190612ca3565b50836040518082805190602001908083835b6020831061295e5780518252601f19909201916020918201910161293f565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020856040518082805190602001908083835b602083106129ba5780518252601f19909201916020918201910161299b565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390207fd41e249605eb6c6e38b56dcce49c445565d06b9b36427510ab6ac5b5aaf2e1eb60405160405180910390a360019250611fa4565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600154600090600160a060020a031615801590612a71575060015433600160a060020a039081169116145b1515612a7c57600080fd5b60008054600160a060020a031681526003602052604090205483901015612aa257600080fd5b60008054600160a060020a0316815260036020526040902054612acb908463ffffffff612c2916565b60008054600160a060020a0390811682526003602052604080832093909355861681522054612b00908463ffffffff612c3b16565b600160a060020a0385166000908152600360209081526040808320939093556008815282822085835290522054612b3d908463ffffffff612c3b16565b600160a060020a038516600081815260086020908152604080832087845290915290819020929092558391859190600080516020612d65833981519152905160405180910390a45060019392505050565b60005433600160a060020a03908116911614612ba957600080fd5b600160a060020a0381161515612bbe57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115612c3557fe5b50900390565b600082820183811015612c4a57fe5b9392505050565b60206040519081016040526000815290565b608060405190810160405280612c77612c51565b8152602001612c84612c51565b8152602001612c91612c51565b8152602001612c9e612c51565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ce457805160ff1916838001178555612d11565b82800160010185558215612d11579182015b82811115612d11578251825591602001919060010190612cf6565b50612d1d929150612d4a565b5090565b815481835581811511612d4557600083815260209020612d45918101908301612d4a565b505050565b610c5191905b80821115612d1d5760008155600101612d505600029d06ff78b8c68fca5225af637c626c0176c9fcaa163beec8e558d4c3ae65b6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207de5308ee3263b1fd20bead2b8fbc8312ed7a16b2bedd56c8ef00108c20627120029"
}