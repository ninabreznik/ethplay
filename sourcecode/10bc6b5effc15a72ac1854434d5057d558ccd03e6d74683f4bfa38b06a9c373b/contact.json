{
  "address": "0x807a8889e84cc9a2b3271c45e886b0a4469b64fc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YourVoteMatters",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-05\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\t\n\n}\n\ncontract VoteToken is HasNoEther, BurnableToken {\n\t\n    struct stSuggestion {\n\t\tstring  text;\t//suggestion text (question)\n\t\tuint256 total_yes;\t//votes score\n\t\tuint256 total_no;\t//votes score\n\t\tuint256 timeStop; //timestamp\n\t\tbool \tfinished;\n\t\tuint\tvoters_count;\n\t\tmapping(uint \t => address) voters_addrs; //Voted addresses\n\t\tmapping(address  => uint256) voters_value; //Voted values\n    }\n\t\n\t// List of all suggestions\n\tuint lastID;\n    mapping (uint => stSuggestion) suggestions;\n\t\n\t// Price per Suggestion\n    uint256 public Price;\n\t\n\tfunction setSuggPrice( uint256 newPrice ) public onlyOwner \n    {\n        Price = newPrice;\n    }\n\n\tfunction getListSize() public view returns (uint count) \n    {\n        return lastID;\n    }\n\t\n\tfunction addSuggestion(string s, uint  forDays) public returns (uint newID)\n    {\n        require ( Price <= balances[msg.sender] );\n       \n\t\tnewID = lastID++;\n        suggestions[newID].text = s;\n        suggestions[newID].total_yes = 0;\n        suggestions[newID].total_no  = 0;\n        suggestions[newID].timeStop =  now + forDays * 1 days;\n        suggestions[newID].finished = false;\n        suggestions[newID].voters_count = 0;\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(Price);\n        totalSupply = totalSupply.sub(Price);\n    }\n\t\n\tfunction getSuggestion(uint id) public constant returns(string, uint256, uint256, uint256, bool, uint )\n    {\n\t\trequire ( id <= lastID );\n        return (\n            suggestions[id].text,\n            suggestions[id].total_yes,\n            suggestions[id].total_no,\n            suggestions[id].timeStop,\n            suggestions[id].finished,\n            suggestions[id].voters_count\n            );\n    } \n\t\n\tfunction isSuggestionNeedToFinish(uint id) public view returns ( bool ) \n    {\n\t\tif ( id > lastID ) return false;\n\t\tif ( suggestions[id].finished ) return false;\n\t\tif ( now <= suggestions[id].timeStop ) return false;\n\t\t\n        return true;\n    } \n\t\n\tfunction finishSuggestion( uint id ) public onlyOwner returns (bool)\n\t{\n\t    \n\t\tif ( !isSuggestionNeedToFinish(id) ) return false;\n\t\t\n\t\tuint i;\n\t\taddress addr;\n\t\tuint256 val;\n\t\tfor ( i = 1; i <= suggestions[id].voters_count; i++){\n\t\t\taddr = suggestions[id].voters_addrs[i];\n\t\t\tval  = suggestions[id].voters_value[addr];\n\t\t\t\n\t\t\tbalances[addr] = balances[addr].add( val );\n\t\t\ttotalSupply = totalSupply.add( val );\n\t\t\t\n\t\t\tsuggestions[id].voters_value[addr] = 0;\n\t\t}\n\t\tsuggestions[id].finished = true;\n\t\t\n\t\treturn true;\n\t}\n\t\n\tfunction Vote( uint id, bool MyVote, uint256 Value ) public returns (bool)\n\t{\n\t\tif ( id > lastID ) return false;\n\t\tif ( Value > balances[msg.sender] ) return false;\n\t\tif ( suggestions[id].finished ) return false;\n\t\n\t\tif (MyVote)\n\t\t\tsuggestions[id].total_yes += Value;\n\t\telse\n\t\t\tsuggestions[id].total_no  += Value;\n\t\t\n\t\tsuggestions[id].voters_count++;\n\t\tsuggestions[id].voters_addrs[ suggestions[id].voters_count ] = msg.sender;\n\t\tsuggestions[id].voters_value[msg.sender] = suggestions[id].voters_value[msg.sender].add(Value);\n\t\t\n\t\tbalances[msg.sender] = balances[msg.sender].sub(Value);\n\t\t\n\t\ttotalSupply = totalSupply.sub(Value);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n}\n\n\n\ncontract YourVoteMatters is VoteToken {\n\n    string public constant name = \"Your Vote Matters\";\n    string public constant symbol = \"YVM\";\n    uint8 public constant decimals = 18;\n\tstring public constant version = \"YVM version: 1.7\";\n    uint256 constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    function YourVoteMatters() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function multiTransfer(address[] recipients, uint256[] amounts) public {\n        require(recipients.length == amounts.length);\n        for (uint i = 0; i < recipients.length; i++) {\n            transfer(recipients[i], amounts[i]);\n        }\n    }\n\t\n\t/**\n\t* @dev Create `mintedAmount` tokens\n    * @param mintedAmount The amount of tokens it will minted\n\t**/\n    function mintToken(uint256 mintedAmount) public onlyOwner {\n\t\t\ttotalSupply += mintedAmount;\n\t\t\tbalances[owner] += mintedAmount;\n\t\t\tTransfer(address(0), owner, mintedAmount);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003414151561006057600080fd5b601260ff16600a0a61271002600181905550601260ff16600a0a61271002600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a3612831806101386000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610163578063095ea7b3146101f357806318160ddd146102585780631b4f6ced146102835780631e89d5451461030a57806323b872dd146103b3578063313ce567146104385780633ca79fc91461046957806342966c68146104ae5780634a89a6c8146104db5780634b1ea6591461050657806354fd4d501461056157806366188463146105f157806370a08231146106565780637db2acf3146106ad5780638da5cb5b146106f257806395d89b41146107495780639dfde201146107d95780639f727c2714610804578063a9059cbb1461081b578063af83f65e14610880578063c634d0321461094d578063d73dd6231461097a578063dd62ed3e146109df578063e6f910ba14610a56578063f2fde38b14610a83575b34801561016057600080fd5b50005b34801561016f57600080fd5b50610178610ac6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b857808201518184015260208101905061019d565b50505050905090810190601f1680156101e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ff57600080fd5b5061023e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aff565b604051808215151515815260200191505060405180910390f35b34801561026457600080fd5b5061026d610bf1565b6040518082815260200191505060405180910390f35b34801561028f57600080fd5b506102f4600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610bf7565b6040518082815260200191505060405180910390f35b34801561031657600080fd5b506103b16004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610de6565b005b3480156103bf57600080fd5b5061041e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e51565b604051808215151515815260200191505060405180910390f35b34801561044457600080fd5b5061044d610e67565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047557600080fd5b5061049460048036038101908080359060200190929190505050610e6c565b604051808215151515815260200191505060405180910390f35b3480156104ba57600080fd5b506104d9600480360381019080803590602001909291905050506110fb565b005b3480156104e757600080fd5b506104f061125e565b6040518082815260200191505060405180910390f35b34801561051257600080fd5b506105476004803603810190808035906020019092919080351515906020019092919080359060200190929190505050611268565b604051808215151515815260200191505060405180910390f35b34801561056d57600080fd5b5061057661156e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105b657808201518184015260208101905061059b565b50505050905090810190601f1680156105e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105fd57600080fd5b5061063c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115a7565b604051808215151515815260200191505060405180910390f35b34801561066257600080fd5b50610697600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611838565b6040518082815260200191505060405180910390f35b3480156106b957600080fd5b506106d860048036038101908080359060200190929190505050611881565b604051808215151515815260200191505060405180910390f35b3480156106fe57600080fd5b506107076118fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561075557600080fd5b5061075e61191f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079e578082015181840152602081019050610783565b50505050905090810190601f1680156107cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107e557600080fd5b506107ee611958565b6040518082815260200191505060405180910390f35b34801561081057600080fd5b5061081961195e565b005b34801561082757600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a30565b604051808215151515815260200191505060405180910390f35b34801561088c57600080fd5b506108ab60048036038101908080359060200190929190505050611a44565b604051808060200187815260200186815260200185815260200184151515158152602001838152602001828103825288818151815260200191508051906020019080838360005b8381101561090d5780820151818401526020810190506108f2565b50505050905090810190601f16801561093a5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561095957600080fd5b5061097860048036038101908080359060200190929190505050611ba6565b005b34801561098657600080fd5b506109c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d09565b604051808215151515815260200191505060405180910390f35b3480156109eb57600080fd5b50610a40600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f05565b6040518082815260200191505060405180910390f35b348015610a6257600080fd5b50610a8160048036038101908080359060200190929190505050611f8c565b005b348015610a8f57600080fd5b50610ac4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ff1565b005b6040805190810160405280601181526020017f596f757220566f7465204d61747465727300000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60015481565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065411151515610c4957600080fd5b6004600081548092919060010191905055905082600560008381526020019081526020016000206000019080519060200190610c86929190612760565b5060006005600083815260200190815260200160002060010181905550600060056000838152602001908152602001600020600201819055506201518082024201600560008381526020019081526020016000206003018190555060006005600083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060006005600083815260200190815260200160002060050181905550610d80600654600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dda60065460015461214690919063ffffffff16565b60018190555092915050565b600081518351141515610df857600080fd5b600090505b8251811015610e4c57610e3e8382815181101515610e1757fe5b906020019060200201518383815181101515610e2f57fe5b90602001906020020151611a30565b508080600101915050610dfd565b505050565b6000610e5e84848461215f565b90509392505050565b601281565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ecd57600080fd5b610ed685611881565b1515610ee557600093506110f3565b600192505b6005600086815260200190815260200160002060050154831115156110bf5760056000868152602001908152602001600020600601600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506005600086815260200190815260200160002060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610ffb81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461251e90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110538160015461251e90919063ffffffff16565b60018190555060006005600087815260200190815260200160002060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508280600101935050610eea565b60016005600087815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600193505b505050919050565b6000808211151561110b57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561115957600080fd5b3390506111ae82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112068260015461214690919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6000600454905090565b600060045484111561127d5760009050611567565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156112cd5760009050611567565b6005600085815260200190815260200160002060040160009054906101000a900460ff16156112ff5760009050611567565b821561132e57816005600086815260200190815260200160002060010160008282540192505081905550611353565b8160056000868152602001908152602001600020600201600082825401925050819055505b6005600085815260200190815260200160002060050160008154809291906001019190505550336005600086815260200190815260200160002060060160006005600088815260200190815260200160002060050154815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061145b826005600087815260200190815260200160002060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461251e90919063ffffffff16565b6005600086815260200190815260200160002060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150482600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061155c8260015461214690919063ffffffff16565b600181905550600190505b9392505050565b6040805190810160405280601081526020017f59564d2076657273696f6e3a20312e370000000000000000000000000000000081525081565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156116b8576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174c565b6116cb838261214690919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060045482111561189657600090506118f5565b6005600083815260200190815260200160002060040160009054906101000a900460ff16156118c857600090506118f5565b6005600083815260200190815260200160002060030154421115156118f057600090506118f5565b600190505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f59564d000000000000000000000000000000000000000000000000000000000081525081565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119b957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611a2e57fe5b565b6000611a3c838361253c565b905092915050565b606060008060008060006004548711151515611a5f57600080fd5b600560008881526020019081526020016000206000016005600089815260200190815260200160002060010154600560008a815260200190815260200160002060020154600560008b815260200190815260200160002060030154600560008c815260200190815260200160002060040160009054906101000a900460ff16600560008d815260200190815260200160002060050154858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b8a5780601f10611b5f57610100808354040283529160200191611b8a565b820191906000526020600020905b815481529060010190602001808311611b6d57829003601f168201915b5050505050955095509550955095509550955091939550919395565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c0157600080fd5b8060016000828254019250508190555080600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000611d9a82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461251e90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fe757600080fd5b8060068190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561204c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561208857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561215457fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561219c57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156121ea57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561227557600080fd5b6122c782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061235c82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461251e90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061242e82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561253257fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561257957600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156125c757600080fd5b61261982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461214690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126ae82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461251e90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106127a157805160ff19168380011785556127cf565b828001600101855582156127cf579182015b828111156127ce5782518255916020019190600101906127b3565b5b5090506127dc91906127e0565b5090565b61280291905b808211156127fe5760008160009055506001016127e6565b5090565b905600a165627a7a723058204d2b7ae8a92e52ecf22cd8c0687d735b73992b0bae62dabe962fa99fa7f03cda0029"
}