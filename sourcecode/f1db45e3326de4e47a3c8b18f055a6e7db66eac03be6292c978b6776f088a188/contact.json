{
  "address": "0x9e89760ac2f33ba684f494742af312801e75064c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Contract",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\n//author : dm & w\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tuint256 c = a / b;\n    \treturn c;\n  \t}\n\n  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tassert(b <= a);\n    \treturn a - b;\n  \t}\n\n  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tuint256 c = a + b;\n    \tassert(c >= a);\n    \treturn c;\n  \t}\n}\n\ncontract ERC20 {\n  \tfunction transfer(address _to, uint256 _value) public returns (bool success);\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n}\n\ncontract Controller {\n\n\taddress public owner;\n\n\tmodifier onlyOwner {\n    \trequire(msg.sender == owner);\n    \t_;\n  \t}\n\n  \tfunction change_owner(address new_owner) onlyOwner {\n    \trequire(new_owner != 0x0);\n    \towner = new_owner;\n  \t}\n\n  \tfunction Controller() {\n    \towner = msg.sender;\n  \t}\n}\n\ncontract Contract is Controller {\n\n\tusing SafeMath for uint256;\n\n  \tstruct Contributor {\n\t\tuint256 balance;\n\t    uint256 fee_owner;\n\t\tuint256 fee_devs;\n\t    uint8 rounds;\n\t    bool whitelisted;\n  \t}\n\n\tstruct Snapshot {\n\t\tuint256 tokens_balance;\n\t\tuint256 eth_balance;\n\t}\n\n  \tmodifier underMaxAmount {\n    \trequire(max_amount == 0 || this.balance <= max_amount);\n    \t_;\n  \t}\n\n\taddress constant public DEVELOPER1 = 0x8C006d807EBAe91F341a4308132Fd756808e0126;\n\taddress constant public DEVELOPER2 = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\n\tuint256 constant public FEE_DEV = 670;\n\n\tuint256 public FEE_OWNER;\n\tuint256 public max_amount;\n\tuint256 public individual_cap;\n\tuint256 public gas_price_max;\n\tuint8 public rounds;\n\tbool public whitelist_enabled;\n\n\tmapping (address => Contributor) public contributors;\n\tSnapshot[] public snapshots;\n\tuint256[] public total_fees;\n\n\tuint256 public const_contract_eth_value;\n\tuint256 public percent_reduction;\n\n\taddress public sale;\n\tERC20 public token;\n\tbool public bought_tokens;\n\tbool public owner_supplied_eth;\n\tbool public allow_contributions = true;\n\tbool public allow_refunds;\n  //============================\n\n\tconstructor(\n\t\tuint256 _max_amount,\n\t\tbool _whitelist,\n\t\tuint256 _owner_fee_divisor\n\t\t) {\n\t\t\tFEE_OWNER = _owner_fee_divisor;\n\t\t\tmax_amount = calculate_with_fees(_max_amount);\n\t\t  \twhitelist_enabled = _whitelist;\n\t\t  \tContributor storage contributor = contributors[msg.sender];\n\t\t  \tcontributor.whitelisted = true;\n\t\t\ttotal_fees.length = 2;\n  \t\t}\n\n\n\tfunction buy_the_tokens(bytes _data) onlyOwner {\n\t\trequire(!bought_tokens && sale != 0x0);\n\t\tbought_tokens = true;\n\t\tconst_contract_eth_value = this.balance;\n\t\ttake_fees_eth_dev();\n\t\ttake_fees_eth_owner();\n\t\tconst_contract_eth_value = this.balance;\n\t\trequire(sale.call.gas(msg.gas).value(this.balance)(_data));\n\t}\n\n\tfunction whitelist_addys(address[] _addys, bool _state) onlyOwner {\n\t\tfor (uint256 i = 0; i < _addys.length; i++) {\n\t\t\tContributor storage contributor = contributors[_addys[i]];\n\t\t\tcontributor.whitelisted = _state;\n\t\t}\n\t}\n\n\tfunction force_refund(address _addy) onlyOwner {\n\t\trefund(_addy);\n\t}\n\n\tfunction force_partial_refund(address _addy) onlyOwner {\n\t\tpartial_refund(_addy);\n\t}\n\n\tfunction set_gas_price_max(uint256 _gas_price) onlyOwner {\n\t\tgas_price_max = _gas_price;\n\t}\n\n\tfunction set_sale_address(address _sale) onlyOwner {\n\t\trequire(_sale != 0x0);\n\t\tsale = _sale;\n\t}\n\n\tfunction set_token_address(address _token) onlyOwner {\n\t\trequire(_token != 0x0);\n\t\ttoken = ERC20(_token);\n\t}\n\n\tfunction set_allow_contributions(bool _boolean) onlyOwner {\n\t\tallow_contributions = _boolean;\n\t}\n\n\tfunction set_allow_refunds(bool _boolean) onlyOwner {\n\t\tallow_refunds = _boolean;\n\t}\n\n\tfunction set_tokens_received() onlyOwner {\n\t\ttokens_received();\n\t}\n\n\tfunction set_percent_reduction(uint256 _reduction) onlyOwner payable {\n\t\trequire(bought_tokens && rounds == 0 && _reduction <= 100);\n\t\tpercent_reduction = _reduction;\n\t\tif (msg.value > 0) {\n\t\t\towner_supplied_eth = true;\n\t\t}\n\t\tconst_contract_eth_value = const_contract_eth_value.sub((const_contract_eth_value.mul(_reduction)).div(100));\n\t}\n\n\tfunction set_whitelist_enabled(bool _boolean) onlyOwner {\n\t\twhitelist_enabled = _boolean;\n\t}\n\n\tfunction change_individual_cap(uint256 _cap) onlyOwner {\n\t\tindividual_cap = _cap;\n\t}\n\n\tfunction change_max_amount(uint256 _amount) onlyOwner {\n\t\t//ATTENTION! The new amount should be in wei\n\t\t//Use https://etherconverter.online/\n\t\tmax_amount = calculate_with_fees(_amount);\n\t}\n\n\tfunction change_fee(uint256 _fee) onlyOwner {\n\t\tFEE_OWNER = _fee;\n\t}\n\n\tfunction emergency_token_withdraw(address _address) onlyOwner {\n\t \tERC20 temp_token = ERC20(_address);\n\t\trequire(temp_token.transfer(msg.sender, temp_token.balanceOf(this)));\n\t}\n\n\tfunction emergency_eth_withdraw() onlyOwner {\n\t\tmsg.sender.transfer(this.balance);\n\t}\n\n\tfunction withdraw(address _user) internal {\n\t\trequire(bought_tokens);\n\t\tuint256 contract_token_balance = token.balanceOf(address(this));\n\t\trequire(contract_token_balance != 0);\n\t\tContributor storage contributor = contributors[_user];\n\t\tif (contributor.rounds < rounds) {\n\t\t\tSnapshot storage snapshot = snapshots[contributor.rounds];\n            uint256 tokens_to_withdraw = contributor.balance.mul(snapshot.tokens_balance).div(snapshot.eth_balance);\n\t\t\tsnapshot.tokens_balance = snapshot.tokens_balance.sub(tokens_to_withdraw);\n\t\t\tsnapshot.eth_balance = snapshot.eth_balance.sub(contributor.balance);\n            contributor.rounds++;\n            require(token.transfer(_user, tokens_to_withdraw));\n        }\n\t}\n\n\tfunction refund(address _user) internal {\n\t\trequire(!bought_tokens && allow_refunds && percent_reduction == 0);\n\t\tContributor storage contributor = contributors[_user];\n\t\ttotal_fees[0] -= contributor.fee_owner;\n\t\ttotal_fees[1] -= contributor.fee_devs;\n\t\tuint256 eth_to_withdraw = contributor.balance.add(contributor.fee_owner).add(contributor.fee_devs);\n\t\tcontributor.balance = 0;\n\t\tcontributor.fee_owner = 0;\n\t\tcontributor.fee_devs = 0;\n\t\t_user.transfer(eth_to_withdraw);\n\t}\n\n\tfunction partial_refund(address _user) internal {\n\t\trequire(bought_tokens && allow_refunds && rounds == 0 && percent_reduction > 0);\n\t\tContributor storage contributor = contributors[_user];\n\t\trequire(contributor.rounds == 0);\n\t\tuint256 eth_to_withdraw = contributor.balance.mul(percent_reduction).div(100);\n\t\tcontributor.balance = contributor.balance.sub(eth_to_withdraw);\n\t\tif (owner_supplied_eth) {\n\t\t\tuint256 fee = contributor.fee_owner.mul(percent_reduction).div(100);\n\t\t\teth_to_withdraw = eth_to_withdraw.add(fee);\n\t\t}\n\t\t_user.transfer(eth_to_withdraw);\n\t}\n\n\tfunction take_fees_eth_dev() internal {\n\t\tif (FEE_DEV != 0) {\n\t\t\tDEVELOPER1.transfer(total_fees[1]);\n\t\t\tDEVELOPER2.transfer(total_fees[1]);\n\t\t}\n\t}\n\n\tfunction take_fees_eth_owner() internal {\n\t\tif (FEE_OWNER != 0) {\n\t\t\towner.transfer(total_fees[0]);\n\t\t}\n\t}\n\n\tfunction calculate_with_fees(uint256 _amount) internal returns (uint256) {\n\t\tuint256 temp = _amount;\n\t\tif (FEE_DEV != 0) {\n\t\t\ttemp = temp.add(_amount.div(FEE_DEV/2));\n\t\t}\n\t\tif (FEE_OWNER != 0) {\n\t\t\ttemp = temp.add(_amount.div(FEE_OWNER));\n\t\t}\n\t\treturn temp;\n\t}\n\n\tfunction tokens_received() internal {\n\t\tuint256 previous_balance;\n\t\tfor (uint8 i = 0; i < snapshots.length; i++) {\n\t\t\tprevious_balance = previous_balance.add(snapshots[i].tokens_balance);\n\t\t}\n\t\tsnapshots.push(Snapshot(token.balanceOf(address(this)).sub(previous_balance), const_contract_eth_value));\n\t\trounds++;\n\t}\n\n\n  function tokenFallback(address _from, uint _value, bytes _data) {\n\t\tif (ERC20(msg.sender) == token) {\n\t\t\ttokens_received();\n\t\t}\n\t}\n\n\tfunction withdraw_my_tokens() {\n\t\tfor (uint8 i = contributors[msg.sender].rounds; i < rounds; i++) {\n\t\t\twithdraw(msg.sender);\n\t\t}\n\t}\n\n\tfunction withdraw_tokens_for(address _addy) {\n\t\tfor (uint8 i = contributors[_addy].rounds; i < rounds; i++) {\n\t\t\twithdraw(_addy);\n\t\t}\n\t}\n\n\tfunction refund_my_ether() {\n\t\trefund(msg.sender);\n\t}\n\n\tfunction partial_refund_my_ether() {\n\t\tpartial_refund(msg.sender);\n\t}\n\n\tfunction provide_eth() payable {}\n\n\tfunction () payable underMaxAmount {\n\t\trequire(!bought_tokens && allow_contributions && (gas_price_max == 0 || tx.gasprice <= gas_price_max));\n\t\tContributor storage contributor = contributors[msg.sender];\n\t\tif (whitelist_enabled) {\n\t\t\trequire(contributor.whitelisted);\n\t\t}\n\t\tuint256 fee = 0;\n\t\tif (FEE_OWNER != 0) {\n\t\t\tfee = SafeMath.div(msg.value, FEE_OWNER);\n\t\t\tcontributor.fee_owner += fee;\n\t\t\ttotal_fees[0] += fee;\n\t\t}\n\t\tuint256 fees = fee;\n\t\tif (FEE_DEV != 0) {\n\t\t\tfee = msg.value.div(FEE_DEV);\n\t\t\ttotal_fees[1] += fee;\n\t\t\tcontributor.fee_devs += fee*2;\n\t\t\tfees = fees.add(fee*2);\n\t\t}\n\t\tcontributor.balance = contributor.balance.add(msg.value.sub(fees));\n\n\t\trequire(individual_cap == 0 || contributor.balance <= individual_cap);\n\t}\n}",
  "bytecode": "6080604052600c805460b060020a60ff0219167601000000000000000000000000000000000000000000001790553480156200003a57600080fd5b5060405160608062001bd283398101604090815281516020830151919092015160008054600160a060020a0319163317815560018290556200008584640100000000620000d9810204565b60029081556005805485151561010090810261ff00199283161790925533600090815260066020526040902060038101805490921690921790559150620000ce60088262000178565b5050505050620001c8565b60008162000112620000fc8261014f6401000000006200014981026200095e1704565b82906401000000006200097a6200016182021704565b90506001541562000143576001546200014090620000fc9085906401000000006200095e6200014982021704565b90505b92915050565b60008082848115156200015857fe5b04949350505050565b6000828201838110156200017157fe5b9392505050565b8154818355818111156200019f576000838152602090206200019f918101908301620001a4565b505050565b620001c591905b80821115620001c15760008155600101620001ab565b5090565b90565b6119fa80620001d86000396000f3006080604052600436106102245763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303b918dc81146103c457806310d2f2e5146103ed578063111485ef14610409578063157f67e81461043057806318af7021146104455780631a34fe81146104665780631f6d49421461047b578063223db315146104cc578063253c8bd4146104e157806329d98a7b14610502578063398f26481461051a5780633c4293d81461053257806342263aa214610547578063481030771461056857806349edfb941461057d5780635219ffb81461059257806356813535146105b35780635a8830e2146105c857806360e393c6146105dd5780636360fc3f1461060e578063666375e514610623578063678f70331461063d578063687ab381146106485780636954abee146106695780636ad1fe021461067e5780636ceba55e146106935780637036f9d9146106ab5780637520bf60146106cc5780637a87f51a146106e157806382b2f95f146106f657806383b47a4d1461070b57806386117319146107645780638a8b7e02146107bd5780638da5cb5b146107d25780638f49a264146107e7578063a2e800ad146107ef578063c0ee0b8a1461081a578063c34dd14114610883578063d54839bf14610898578063d6565a2d146108ad578063e70e690a146108de578063ebc56eec146108f6578063ef956c4114610910578063f2bee03d14610928578063fc0c546a14610949575b60008060006002546000148061023d5750600254303111155b151561024857600080fd5b600c5460a060020a900460ff1615801561027e5750600c54760100000000000000000000000000000000000000000000900460ff165b80156102965750600454158061029657506004543a11155b15156102a157600080fd5b336000908152600660205260409020600554909350610100900460ff16156102db576003830154610100900460ff1615156102db57600080fd5b6001546000925015610324576102f33460015461095e565b60018401805482019055600880549193508391600090811061031157fe5b6000918252602090912001805490910190555b50806103383461029e63ffffffff61095e16565b9150816008600181548110151561034b57fe5b60009182526020909120018054909101905560028381018054918402918201905561037d90829063ffffffff61097a16565b90506103a0610392348363ffffffff61099016565b84549063ffffffff61097a16565b835560035415806103b45750600354835411155b15156103bf57600080fd5b505050005b3480156103d057600080fd5b506103d96109a2565b604080519115158252519081900360200190f35b3480156103f957600080fd5b5061040760043515156109c5565b005b34801561041557600080fd5b5061041e6109f6565b60408051918252519081900360200190f35b34801561043c57600080fd5b506104076109fc565b34801561045157600080fd5b50610407600160a060020a0360043516610a38565b34801561047257600080fd5b5061041e610a58565b34801561048757600080fd5b5061049c600160a060020a0360043516610a5e565b6040805195865260208601949094528484019290925260ff16606084015215156080830152519081900360a00190f35b3480156104d857600080fd5b506103d9610a91565b3480156104ed57600080fd5b50610407600160a060020a0360043516610aa1565b34801561050e57600080fd5b50610407600435610afc565b34801561052657600080fd5b50610407600435610b18565b34801561053e57600080fd5b50610407610b3e565b34801561055357600080fd5b50610407600160a060020a0360043516610b49565b34801561057457600080fd5b50610407610ba4565b34801561058957600080fd5b5061041e610bc3565b34801561059e57600080fd5b50610407600160a060020a0360043516610bc9565b3480156105bf57600080fd5b5061041e610c0f565b3480156105d457600080fd5b50610407610c15565b3480156105e957600080fd5b506105f2610c1e565b60408051600160a060020a039092168252519081900360200190f35b34801561061a57600080fd5b506103d9610c36565b34801561062f57600080fd5b506104076004351515610c46565b610407600435610ca1565b34801561065457600080fd5b50610407600160a060020a0360043516610d70565b34801561067557600080fd5b506103d9610ebf565b34801561068a57600080fd5b506105f2610ee1565b34801561069f57600080fd5b50610407600435610ef0565b3480156106b757600080fd5b50610407600160a060020a0360043516610f0c565b3480156106d857600080fd5b5061041e610f2c565b3480156106ed57600080fd5b50610407610f32565b34801561070257600080fd5b506105f2610f76565b34801561071757600080fd5b506040805160206004803580820135838102808601850190965280855261040795369593946024949385019291829185019084908082843750949750505050913515159250610f8e915050565b34801561077057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104079436949293602493928401919081908401838280828437509497506110149650505050505050565b3480156107c957600080fd5b506103d9611129565b3480156107de57600080fd5b506105f2611137565b610407610b47565b3480156107fb57600080fd5b50610804611146565b6040805160ff9092168252519081900360200190f35b34801561082657600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610407948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061114f9650505050505050565b34801561088f57600080fd5b5061041e61116f565b3480156108a457600080fd5b5061041e611175565b3480156108b957600080fd5b506108c560043561117b565b6040805192835260208301919091528051918290030190f35b3480156108ea57600080fd5b506104076004356111a7565b34801561090257600080fd5b5061040760043515156111c3565b34801561091c57600080fd5b5061041e60043561120c565b34801561093457600080fd5b50610407600160a060020a036004351661122b565b34801561095557600080fd5b506105f2611286565b600080828481151561096c57fe5b0490508091505b5092915050565b60008282018381101561098957fe5b9392505050565b60008282111561099c57fe5b50900390565b600c54760100000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a031633146109dc57600080fd5b600580549115156101000261ff0019909216919091179055565b60035481565b3360009081526006602052604090206003015460ff165b60055460ff9081169082161015610a3557610a2d33611295565b600101610a13565b50565b600054600160a060020a03163314610a4f57600080fd5b610a35816114cd565b60025481565b60066020526000908152604090208054600182015460028301546003909301549192909160ff8082169161010090041685565b600c5460b860020a900460ff1681565b600054600160a060020a03163314610ab857600080fd5b600160a060020a0381161515610acd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610b1357600080fd5b600355565b600054600160a060020a03163314610b2f57600080fd5b610b38816115ee565b60025550565b610b47336114cd565b565b600054600160a060020a03163314610b6057600080fd5b600160a060020a0381161515610b7557600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610bbb57600080fd5b610b47611638565b60015481565b600160a060020a03811660009081526006602052604090206003015460ff165b60055460ff9081169082161015610c0b57610c0382611295565b600101610be9565b5050565b60095481565b610b473361177e565b7363f7547ac277ea0b52a0b060be6af8c5904953aa81565b600c5460a060020a900460ff1681565b600054600160a060020a03163314610c5d57600080fd5b600c80549115157601000000000000000000000000000000000000000000000276ff0000000000000000000000000000000000000000000019909216919091179055565b600054600160a060020a03163314610cb857600080fd5b600c5460a060020a900460ff168015610cd4575060055460ff16155b8015610ce1575060648111155b1515610cec57600080fd5b600a8190556000341115610d3257600c805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790555b610d6a610d5b6064610d4f846009546118bc90919063ffffffff16565b9063ffffffff61095e16565b6009549063ffffffff61099016565b60095550565b60008054600160a060020a03163314610d8857600080fd5b50604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518291600160a060020a0383169163a9059cbb91339184916370a082319160248083019260209291908290030181600087803b158015610df657600080fd5b505af1158015610e0a573d6000803e3d6000fd5b505050506040513d6020811015610e2057600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b505050506040513d6020811015610eb257600080fd5b50511515610c0b57600080fd5b600c547501000000000000000000000000000000000000000000900460ff1681565b600b54600160a060020a031681565b600054600160a060020a03163314610f0757600080fd5b600155565b600054600160a060020a03163314610f2357600080fd5b610a358161177e565b60045481565b600054600160a060020a03163314610f4957600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610a35573d6000803e3d6000fd5b738c006d807ebae91f341a4308132fd756808e012681565b600080548190600160a060020a03163314610fa857600080fd5b600091505b835182101561100e57600660008584815181101515610fc857fe5b602090810291909101810151600160a060020a0316825281019190915260400160002060038101805461ff00191661010086151502179055600192909201919050610fad565b50505050565b600054600160a060020a0316331461102b57600080fd5b600c5460a060020a900460ff1615801561104f5750600b54600160a060020a031615155b151561105a57600080fd5b600c805474ff0000000000000000000000000000000000000000191660a060020a179055303160095561108b6118e7565b6110936119a6565b3031600955600b54600160a060020a03165a30600160a060020a0316318360405180828051906020019080838360005b838110156110db5781810151838201526020016110c3565b50505050905090810190601f1680156111085780820380516001836020036101000a031916815260200191505b50915050600060405180830381858888f193505050501515610a3557600080fd5b600554610100900460ff1681565b600054600160a060020a031681565b60055460ff1681565b600c54600160a060020a031633141561116a5761116a611638565b505050565b600a5481565b61029e81565b600780548290811061118957fe5b60009182526020909120600290910201805460019091015490915082565b600054600160a060020a031633146111be57600080fd5b600455565b600054600160a060020a031633146111da57600080fd5b600c805491151560b860020a0277ff000000000000000000000000000000000000000000000019909216919091179055565b600880548290811061121a57fe5b600091825260209091200154905081565b600054600160a060020a0316331461124257600080fd5b600160a060020a038116151561125757600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c54600160a060020a031681565b600080600080600c60149054906101000a900460ff1615156112b657600080fd5b600c54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b505050506040513d602081101561134657600080fd5b5051935083151561135657600080fd5b600160a060020a0385166000908152600660205260409020600554600382015491945060ff908116911610156114c657600383015460078054909160ff1690811061139d57fe5b906000526020600020906002020191506113d08260010154610d4f846000015486600001546118bc90919063ffffffff16565b82549091506113e5908263ffffffff61099016565b8255825460018301546113fd9163ffffffff61099016565b60018381019190915560038401805460ff19811660ff91821690930116919091179055600c54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561148f57600080fd5b505af11580156114a3573d6000803e3d6000fd5b505050506040513d60208110156114b957600080fd5b505115156114c657600080fd5b5050505050565b600c54600090819060a060020a900460ff161580156114f55750600c5460b860020a900460ff165b80156115015750600a54155b151561150c57600080fd5b600160a060020a038316600090815260066020526040812060018101546008805492955090929091811061153c57fe5b60009182526020909120018054919091039055600282015460088054600190811061156357fe5b600091825260209091200180549190910390556002820154600183015483546115a39291611597919063ffffffff61097a16565b9063ffffffff61097a16565b60008084556001840181905560028401819055604051919250600160a060020a0385169183156108fc0291849190818181858888f1935050505015801561100e573d6000803e3d6000fd5b60008161160d6116008261014f61095e565b829063ffffffff61097a16565b9050600154156116325761162f6116006001548561095e90919063ffffffff16565b90505b92915050565b6000805b60075460ff821610156116865761167c60078260ff1681548110151561165e57fe5b6000918252602090912060029091020154839063ffffffff61097a16565b915060010161163c565b60408051808201808352600c547f70a082310000000000000000000000000000000000000000000000000000000090915230604483015291516007928291611733918791600160a060020a03909116906370a08231906064808701916020918189030181600087803b1580156116fb57600080fd5b505af115801561170f573d6000803e3d6000fd5b505050506040513d602081101561172557600080fd5b50519063ffffffff61099016565b81526009546020918201528254600180820185556000948552938290208351600290920201908155910151908201556005805460ff19811660ff918216909301169190911790555050565b6000806000600c60149054906101000a900460ff1680156117a85750600c5460b860020a900460ff165b80156117b7575060055460ff16155b80156117c557506000600a54115b15156117d057600080fd5b600160a060020a0384166000908152600660205260409020600381015490935060ff16156117fd57600080fd5b600a54835461181891606491610d4f9163ffffffff6118bc16565b835490925061182d908363ffffffff61099016565b8355600c547501000000000000000000000000000000000000000000900460ff1615611886576118716064610d4f600a5486600101546118bc90919063ffffffff16565b9050611883828263ffffffff61097a16565b91505b604051600160a060020a0385169083156108fc029084906000818181858888f193505050501580156114c6573d6000803e3d6000fd5b6000808315156118cf5760009150610973565b508282028284828115156118df57fe5b041461098957fe5b60088054738c006d807ebae91f341a4308132fd756808e0126916108fc91600190811061191057fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015611946573d6000803e3d6000fd5b50600880547363f7547ac277ea0b52a0b060be6af8c5904953aa916108fc91600190811061197057fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015610a35573d6000803e3d6000fd5b60015415610b47576000805460088054600160a060020a03909216926108fc92811061197057fe00a165627a7a723058209822f7283488680babb90d6ae7bb94f60a823dbee55bf04e99cc79b4fe3aa963002900000000000000000000000000000000000000000000000d8d726b7177a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021",
  "constructorArguments": "00000000000000000000000000000000000000000000000d8d726b7177a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021"
}