{
  "address": "0x9733e6c4dc6f1f6b9c5723b8a64fc2ab90b14a8b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StreamityContract",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-22\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath\n{\n    function mul(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n\n        assert(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable\n{\n    address owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient\n{\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract TokenERC20 is Ownable\n{\n    using SafeMath for uint;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint256 public decimals = 18;\n    uint256 DEC = 10 ** uint256(decimals);\n    uint256 public totalSupply;\n    uint256 public avaliableSupply;\n    uint256 public buyPrice = 1000000000000000000 wei;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public\n    {\n        totalSupply = initialSupply.mul(DEC);  // Update total supply with the decimal amount\n        balanceOf[this] = totalSupply;         // Give the creator all initial tokens\n        avaliableSupply = balanceOf[this];     // Show how much tokens on contract\n        name = tokenName;                      // Set the name for display purposes\n        symbol = tokenSymbol;                  // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     *\n     * @param _from - address of the contract\n     * @param _to - address of the investor\n     * @param _value - tokens for the investor\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal\n    {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        returns (bool success)\n    {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success)\n    {\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner\n        returns (bool success)\n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public\n        returns (bool success)\n    {\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\n\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public\n        returns (bool success)\n    {\n        uint oldValue = allowance[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n            allowance[msg.sender][_spender] = 0;\n        } else {\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public onlyOwner\n        returns (bool success)\n    {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        avaliableSupply = avaliableSupply.sub(_value);\n\n        Burn(msg.sender, _value);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public onlyOwner\n        returns (bool success)\n    {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);              // Update totalSupply\n        avaliableSupply = avaliableSupply.sub(_value);\n\n        Burn(_from, _value);\n\n        return true;\n    }\n}\n\ncontract Pauseble is TokenERC20\n{\n    event EPause();\n    event EUnpause();\n\n    bool public paused = true;\n    uint public startIcoDate = 0;\n\n    modifier whenNotPaused()\n    {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused()\n    {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner\n    {\n        paused = true;\n        EPause();\n    }\n\n    function pauseInternal() internal\n    {\n        paused = true;\n        EPause();\n    }\n\n    function unpause() public onlyOwner\n    {\n        paused = false;\n        EUnpause();\n    }\n\n    function unpauseInternal() internal\n    {\n        paused = false;\n        EUnpause();\n    }\n}\n\ncontract ERC20Extending is TokenERC20\n{\n    using SafeMath for uint;\n\n    /**\n    * Function for transfer ethereum from contract to any address\n    *\n    * @param _to - address of the recipient\n    * @param amount - ethereum\n    */\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\n    {\n        _to.transfer(amount);\n    }\n\n    /**\n    * Function for transfer tokens from contract to any address\n    *\n    */\n    function transferTokensFromContract(address _to, uint256 _value) public onlyOwner\n    {\n        avaliableSupply = avaliableSupply.sub(_value);\n        _transfer(this, _to, _value);\n    }\n}\n\ncontract StreamityCrowdsale is Pauseble\n{\n    using SafeMath for uint;\n\n    uint public stage = 0;\n    uint256 public weisRaised;  // how many weis was raised on crowdsale\n\n    event CrowdSaleFinished(string info);\n\n    struct Ico {\n        uint256 tokens;             // Tokens in crowdsale\n        uint startDate;             // Date when crowsale will be starting, after its starting that property will be the 0\n        uint endDate;               // Date when crowdsale will be stop\n        uint8 discount;             // Discount\n        uint8 discountFirstDayICO;  // Discount. Only for first stage ico\n    }\n\n    Ico public ICO;\n\n    /*\n    * Function confirm autosell\n    *\n    */\n    function confirmSell(uint256 _amount) internal view\n        returns(bool)\n    {\n        if (ICO.tokens < _amount) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /*\n    *  Make discount\n    */\n    function countDiscount(uint256 amount) internal\n        returns(uint256)\n    {\n        uint256 _amount = (amount.mul(DEC)).div(buyPrice);\n\n        if (1 == stage) {\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\n        }\n        else if (2 == stage)\n        {\n            if (now <= ICO.startDate + 1 days)\n            {\n                if (0 == ICO.discountFirstDayICO) {\n                    ICO.discountFirstDayICO = 20;\n                }\n                _amount = _amount.add(withDiscount(_amount, ICO.discountFirstDayICO));\n            }\n            else\n            {\n                _amount = _amount.add(withDiscount(_amount, ICO.discount));\n            }\n        }\n        else if (3 == stage) {\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\n        }\n\n        return _amount;\n    }\n\n    /**\n    * Function for change discount if need\n    *\n    */\n    function changeDiscount(uint8 _discount) public onlyOwner\n        returns (bool)\n    {\n        ICO = Ico (ICO.tokens, ICO.startDate, ICO.endDate, _discount, ICO.discountFirstDayICO);\n        return true;\n    }\n\n    /**\n    * Expanding of the functionality\n    *\n    * @param _numerator - Numerator - value (10000)\n    * @param _denominator - Denominator - value (10000)\n    *\n    * example: price 1000 tokens by 1 ether = changeRate(1, 1000)\n    */\n    function changeRate(uint256 _numerator, uint256 _denominator) public onlyOwner\n        returns (bool success)\n    {\n        if (_numerator == 0) _numerator = 1;\n        if (_denominator == 0) _denominator = 1;\n\n        buyPrice = (_numerator.mul(DEC)).div(_denominator);\n\n        return true;\n    }\n\n    /*\n    * Function show in contract what is now\n    *\n    */\n    function crowdSaleStatus() internal constant\n        returns (string)\n    {\n        if (1 == stage) {\n            return \"Pre-ICO\";\n        } else if(2 == stage) {\n            return \"ICO first stage\";\n        } else if (3 == stage) {\n            return \"ICO second stage\";\n        } else if (4 >= stage) {\n            return \"feature stage\";\n        }\n\n        return \"there is no stage at present\";\n    }\n\n    /*\n    * Seles manager\n    *\n    */\n    function paymentManager(address sender, uint256 value) internal\n    {\n        uint256 discountValue = countDiscount(value);\n        bool conf = confirmSell(discountValue);\n\n        if (conf) {\n\n            sell(sender, discountValue);\n\n            weisRaised = weisRaised.add(value);\n\n            if (now >= ICO.endDate) {\n                pauseInternal();\n                CrowdSaleFinished(crowdSaleStatus()); // if time is up\n            }\n\n        } else {\n\n            sell(sender, ICO.tokens); // sell tokens which has been accessible\n\n            weisRaised = weisRaised.add(value);\n\n            pauseInternal();\n            CrowdSaleFinished(crowdSaleStatus());  // if tokens sold\n        }\n    }\n\n    /*\n    * Function for selling tokens in crowd time.\n    *\n    */\n    function sell(address _investor, uint256 _amount) internal\n    {\n        ICO.tokens = ICO.tokens.sub(_amount);\n        avaliableSupply = avaliableSupply.sub(_amount);\n\n        _transfer(this, _investor, _amount);\n    }\n\n    /*\n    * Function for start crowdsale (any)\n    *\n    * @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\n    * @param _startDate - When crowdsale will be start - unix timestamp (1512231703 )\n    * @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\n    * @param _discount - Discount for the crowd - humanlive value (7) same as 7 %\n    * @param _discount - Discount for the crowds first day - humanlive value (7) same as 7 %\n    */\n    function startCrowd(uint256 _tokens, uint _startDate, uint _endDate, uint8 _discount, uint8 _discountFirstDayICO) public onlyOwner\n    {\n        require(_tokens * DEC <= avaliableSupply);  // require to set correct tokens value for crowd\n        ICO = Ico (_tokens * DEC, _startDate, _startDate + _endDate * 1 days , _discount, _discountFirstDayICO);\n        stage = stage.add(1);\n        unpauseInternal();\n    }\n\n    /**\n    * Function for web3js, should be call when somebody will buy tokens from website. This function only delegator.\n    *\n    * @param _investor - address of investor (who payed)\n    * @param _amount - ethereum\n    */\n    function transferWeb3js(address _investor, uint256 _amount) external onlyOwner\n    {\n        sell(_investor, _amount);\n    }\n\n    /**\n    * Function for adding discount\n    *\n    */\n    function withDiscount(uint256 _amount, uint _percent) internal pure\n        returns (uint256)\n    {\n        return (_amount.mul(_percent)).div(100);\n    }\n}\n\ncontract StreamityContract is ERC20Extending, StreamityCrowdsale\n{\n    /* Streamity tokens Constructor */\n    function StreamityContract() public TokenERC20(186000000, \"Streamity\", \"STM\") {} //change before send !!!\n\n    /**\n    * Function payments handler\n    *\n    */\n    function () public payable\n    {\n        assert(msg.value >= 1 ether / 10);\n        require(now >= ICO.startDate);\n\n        if (paused == false) {\n            paymentManager(msg.sender, msg.value);\n        } else {\n            revert();\n        }\n    }\n}",
  "bytecode": "60606040526012600355670de0b6b3a76400006004819055600755600a805460ff191660011790556000600b819055600c5534156200003d57600080fd5b630b162280604080519081016040908152600982527f53747265616d697479000000000000000000000000000000000000000000000060208301528051908101604052600381527f53544d0000000000000000000000000000000000000000000000000000000000602082015260008054600160a060020a03191633600160a060020a0316179055600454620000e39084906401000000006200013b8102620017d31704565b6005819055600160a060020a033016600090815260086020526040902081905560065560018280516200011b92916020019062000169565b5060028180516200013192916020019062000169565b505050506200020e565b60008282028315806200015957508284828115156200015657fe5b04145b15156200016257fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ac57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001dc578251825591602001919060010190620001bf565b50620001ea929150620001ee565b5090565b6200020b91905b80821115620001ea5760008155600101620001f5565b90565b611863806200021e6000396000f30060606040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304a8493881146101c257806306fdde03146101e7578063095ea7b31461027157806318160ddd146102a757806323b872dd146102ba578063273ba6bb146102e257806331198d191461032b578063313ce5671461034d5780633f4ba83a1461036057806342966c68146103735780635bda1af0146103895780635c975abb146103b157806366188463146103c457806370a08231146103e657806379cc6790146104055780638456cb59146104275780638620410b1461043a57806395d89b411461044d578063a883b0c414610460578063a9059cbb14610479578063c040e6b81461049b578063c99d9ef7146104ae578063cae9ca51146104c1578063d0973af814610526578063d73dd62314610548578063da5f838d1461056a578063dd62ed3e1461057d578063ec993f3d146105a2578063ee67575f146105bb578063f2fde38b146105dd575b67016345785d8a000034101561019157fe5b600f544210156101a057600080fd5b600a5460ff1615156101bb576101b633346105fc565b6101c0565b600080fd5b005b34156101cd57600080fd5b6101d56107c4565b60405190815260200160405180910390f35b34156101f257600080fd5b6101fa6107ca565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023657808201518382015260200161021e565b50505050905090810190601f1680156102635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027c57600080fd5b610293600160a060020a0360043516602435610868565b604051901515815260200160405180910390f35b34156102b257600080fd5b6101d5610898565b34156102c557600080fd5b610293600160a060020a036004358116906024351660443561089e565b34156102ed57600080fd5b6102f5610946565b604051948552602085019390935260408085019290925260ff9081166060850152909116608083015260a0909101905180910390f35b341561033657600080fd5b6101c0600160a060020a0360043516602435610961565b341561035857600080fd5b6101d56109b1565b341561036b57600080fd5b6101c06109b7565b341561037e57600080fd5b610293600435610a0a565b341561039457600080fd5b6101c060043560243560443560ff60643581169060843516610b00565b34156103bc57600080fd5b610293610be5565b34156103cf57600080fd5b610293600160a060020a0360043516602435610bee565b34156103f157600080fd5b6101d5600160a060020a0360043516610ce8565b341561041057600080fd5b610293600160a060020a0360043516602435610cfa565b341561043257600080fd5b6101c0610e74565b341561044557600080fd5b6101d5610eca565b341561045857600080fd5b6101fa610ed0565b341561046b57600080fd5b610293600435602435610f3b565b341561048457600080fd5b6101c0600160a060020a0360043516602435610fa0565b34156104a657600080fd5b6101d5610fab565b34156104b957600080fd5b6101d5610fb1565b34156104cc57600080fd5b61029360048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610fb795505050505050565b341561053157600080fd5b6101c0600160a060020a0360043516602435611106565b341561055357600080fd5b610293600160a060020a0360043516602435611142565b341561057557600080fd5b6101d56111e6565b341561058857600080fd5b6101d5600160a060020a03600435811690602435166111ec565b34156105ad57600080fd5b61029360ff60043516611209565b34156105c657600080fd5b6101c0600160a060020a03600435166024356112c2565b34156105e857600080fd5b6101c0600160a060020a03600435166112e7565b60008061060883611382565b915061061382611474565b905080156106f1576106258483611493565b600d54610638908463ffffffff6114bc16565b600d5560105442106106ec5761064c610e8f565b7f85b8d86f52e6555fa7f5d8f5e1fe2dbca432512924156cc733ad10ba881c121c6106756114d2565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156106b1578082015183820152602001610699565b50505050905090810190601f1680156106de5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b6107be565b61070084600e60000154611493565b600d54610713908463ffffffff6114bc16565b600d5561071e610e8f565b7f85b8d86f52e6555fa7f5d8f5e1fe2dbca432512924156cc733ad10ba881c121c6107476114d2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561078357808201518382015260200161076b565b50505050905090810190601f1680156107b05780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b50505050565b60065481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108605780601f1061083557610100808354040283529160200191610860565b820191906000526020600020905b81548152906001019060200180831161084357829003601f168201915b505050505081565b600160a060020a033381166000908152600960209081526040808320938616835292905220819055600192915050565b60055481565b600160a060020a038084166000908152600960209081526040808320339094168352929052908120548211156108d357600080fd5b600160a060020a038085166000908152600960209081526040808320339094168352929052205461090a908363ffffffff61162b16565b600160a060020a038086166000908152600960209081526040808320339094168352929052205561093c84848461163d565b5060019392505050565b600e54600f5460105460115460ff8082169161010090041685565b60005433600160a060020a0390811691161461097c57600080fd5b600160a060020a03821681156108fc0282604051600060405180830381858888f1935050505015156109ad57600080fd5b5050565b60035481565b60005433600160a060020a039081169116146109d257600080fd5b600a805460ff191690557f9b1d6b460eaa8350c2f15712231e94c803e08e072db0737a0efb84745848694060405160405180910390a1565b6000805433600160a060020a03908116911614610a2657600080fd5b600160a060020a03331660009081526008602052604090205482901015610a4c57600080fd5b600160a060020a033316600090815260086020526040902054610a75908363ffffffff61162b16565b600160a060020a033316600090815260086020526040902055600554610aa1908363ffffffff61162b16565b600555600654610ab7908363ffffffff61162b16565b600655600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b919050565b60005433600160a060020a03908116911614610b1b57600080fd5b60065460045486021115610b2e57600080fd5b60a06040519081016040908152600454870282526020820186905262015180850286019082015260ff808416606083015282166080820152600e815181556020820151816001015560408201518160020155606082015160038201805460ff191660ff9290921691909117905560808201516003909101805460ff929092166101000261ff001990921691909117905550600c54610bd390600163ffffffff6114bc16565b600c55610bde6109d2565b5050505050565b600a5460ff1681565b600160a060020a03338116600090815260096020908152604080832093861683529290529081205480831115610c4b57600160a060020a033381166000908152600960209081526040808320938816835292905290812055610c82565b610c5b818463ffffffff61162b16565b600160a060020a033381166000908152600960209081526040808320938916835292905220555b600160a060020a0333811660008181526009602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60086020526000908152604090205481565b6000805433600160a060020a03908116911614610d1657600080fd5b600160a060020a03831660009081526008602052604090205482901015610d3c57600080fd5b600160a060020a0380841660009081526009602090815260408083203390941683529290522054821115610d6f57600080fd5b600160a060020a038316600090815260086020526040902054610d98908363ffffffff61162b16565b600160a060020a0380851660009081526008602090815260408083209490945560098152838220339093168252919091522054610ddb908363ffffffff61162b16565b600160a060020a0380851660009081526009602090815260408083203390941683529290522055600554610e15908363ffffffff61162b16565b600555600654610e2b908363ffffffff61162b16565b600655600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250600192915050565b60005433600160a060020a03908116911614610e8f57600080fd5b600a805460ff191660011790557fd2ef4ae6592c2a8f5d1c602eaa8a0685727b41b23509703db861621a9614813a60405160405180910390a1565b60075481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108605780601f1061083557610100808354040283529160200191610860565b6000805433600160a060020a03908116911614610f5757600080fd5b821515610f6357600192505b811515610f6f57600191505b610f9482610f88600454866117d390919063ffffffff16565b9063ffffffff6117f716565b60075550600192915050565b6109ad33838361163d565b600c5481565b600b5481565b60008054819033600160a060020a03908116911614610fd557600080fd5b5083610fe18185610868565b156110fe5780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561109757808201518382015260200161107f565b50505050905090810190601f1680156110c45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156110e557600080fd5b6102c65a03f115156110f657600080fd5b505050600191505b509392505050565b60005433600160a060020a0390811691161461112157600080fd5b600654611134908263ffffffff61162b16565b6006556109ad30838361163d565b600160a060020a03338116600090815260096020908152604080832093861683529290529081205461117a908363ffffffff6114bc16565b600160a060020a0333811660008181526009602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600d5481565b600960209081526000928352604080842090915290825290205481565b6000805433600160a060020a0390811691161461122557600080fd5b60a06040519081016040908152600e80548352600f5460208401526010549183019190915260ff80851660608401526011546101009004166080830152815181556020820151816001015560408201518160020155606082015160038201805460ff191660ff9290921691909117905560808201516003909101805460ff929092166101000261ff00199092169190911790555060019050919050565b60005433600160a060020a039081169116146112dd57600080fd5b6109ad8282611493565b60005433600160a060020a0390811691161461130257600080fd5b600160a060020a038116151561131757600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806113a0600754610f88600454866117d390919063ffffffff16565b9050600c54600114156113d6576011546113cf906113c290839060ff1661180e565b829063ffffffff6114bc16565b905061146e565b600c546002141561144b57600f546201518001421161143157601154610100900460ff161515611410576011805461ff0019166114001790555b60115461142a906113c2908390610100900460ff1661180e565b9050611446565b6011546113cf906113c290839060ff1661180e565b61146e565b600c546003141561146e5760115461146b906113c290839060ff1661180e565b90505b92915050565b600081600e60000154101561148b57506000610afb565b506001919050565b600e546114a6908263ffffffff61162b16565b600e55600654611134908263ffffffff61162b16565b6000828201838110156114cb57fe5b9392505050565b6114da611825565b600c54600114156115205760408051908101604052600781527f5072652d49434f0000000000000000000000000000000000000000000000000060208201529050611628565b600c54600214156115665760408051908101604052600f81527f49434f206669727374207374616765000000000000000000000000000000000060208201529050611628565b600c54600314156115ac5760408051908101604052601081527f49434f207365636f6e642073746167650000000000000000000000000000000060208201529050611628565b600c546004106115f15760408051908101604052600d81527f666561747572652073746167650000000000000000000000000000000000000060208201529050611628565b60408051908101604052601c81527f7468657265206973206e6f2073746167652061742070726573656e7400000000602082015290505b90565b60008282111561163757fe5b50900390565b6000600160a060020a038316151561165457600080fd5b600160a060020a0384166000908152600860205260409020548290101561167a57600080fd5b600160a060020a0383166000908152600860205260409020546116a3818463ffffffff6114bc16565b116116ad57600080fd5b600160a060020a038084166000908152600860205260408082205492871682529020546116df9163ffffffff6114bc16565b600160a060020a03851660009081526008602052604090205490915061170b908363ffffffff61162b16565b600160a060020a038086166000908152600860205260408082209390935590851681522054611740908363ffffffff6114bc16565b600160a060020a03808516600081815260086020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a0380841660009081526008602052604080822054928716825290205482916117cc919063ffffffff6114bc16565b146107be57fe5b60008282028315806117ef57508284828115156117ec57fe5b04145b15156114cb57fe5b600080828481151561180557fe5b04949350505050565b60006114cb6064610f88858563ffffffff6117d316565b602060405190810160405260008152905600a165627a7a72305820bff421aa5064bbcc2a0cf451204b3a78249d95360ab9c25ab0f3a4c4801cb95b0029"
}