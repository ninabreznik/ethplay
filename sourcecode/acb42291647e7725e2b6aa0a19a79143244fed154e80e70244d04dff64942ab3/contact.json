{
  "address": "0x68350d30d9f58c81aaaa41929f1bfc52fff4ea49",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Rapidz Token",
  "contractName": "CrowdSale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-18\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal constant returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n  }\n\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() constant returns (uint);\n    function balanceOf(address tokenOwner) constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) constant returns (uint remaining);\n    function transfer(address to, uint tokens) returns (bool success);\n    function approve(address spender, uint tokens) returns (bool success);\n    function transferFrom(address from, address to, uint tokens) returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// To change contract ownaship if needed\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract CrowdSale is ERC20Interface, Owned, SafeMath {\n    //address where tokens will be stored;also the address where ether sent into contract is stored\n    address public tokenAddress;\n    //symbol of token; only 8 characters(8bytes)\n    bytes8 public symbol;\n    //name of token; only 16 characters(16bytes)\n    bytes16 public  name;\n    //numbers of decimals for the tokens\n    uint256 public decimals;\n    //total token supplies\n    uint256 public _totalSupply;\n\n    //mapping of each address tokens\n    mapping(address => uint) tokenBalances;\n\n    mapping(address => mapping(address => uint)) internal allowed;\n\n        /*****\n        * @dev Modifier to check that amount transferred is not 0\n        */\n    modifier nonZero() {\n        require(msg.value != 0);\n        _;\n    }\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function CrowdSale(\n            address _tokenAddress\n            ) public {\n                //*****************************Edit here*****************************\n                symbol = \"RPZX\";\n                name = \"Rapidz\";\n                decimals = 18;\n                _totalSupply = 5000000000000000000000000000;\n                //*********************************************************************\n                tokenAddress=_tokenAddress;\n                tokenBalances[tokenAddress] = _totalSupply;//map token address to mapping\n                Transfer(address(0), tokenAddress,_totalSupply);//initial creation of tokens and send to tokenAddress\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() constant returns (uint) {\n        return _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) constant returns (uint balance) {\n        return tokenBalances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) returns (bool success) {\n\n        tokenBalances[msg.sender] = safeSub(tokenBalances[msg.sender], tokens);\n        tokenBalances[to] = safeAdd(tokenBalances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer tokens from the from account to the to account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the from account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) returns (bool success) {\n        tokenBalances[from] = safeSub(tokenBalances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        tokenBalances[to] = safeAdd(tokenBalances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n    /*****\n        * @dev Fallback Function to buy the tokens\n        */ //default function when ether is Received\n    function () nonZero payable {\n        revert();\n    }//end function()\n\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061140e83398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f52505a5800000000000000000000000000000000000000000000000000000000600260146101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055507f52617069647a0000000000000000000000000000000000000000000000000000600360006101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555060126004819055506b1027e72f1f1281308800000060058190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060055460066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a35061118f8061027f6000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100fb578063095ea7b31461014a57806318160ddd146101a457806323b872dd146101cd578063313ce567146102465780633eaaf86b1461026f57806370a082311461029857806379ba5097146102e55780638da5cb5b146102fa57806395d89b411461034f5780639d76ea58146103ae578063a9059cbb14610403578063cae9ca511461045d578063d4ee1d90146104fa578063dd62ed3e1461054f578063f2fde38b146105bb575b600034141515156100f657600080fd5b600080fd5b341561010657600080fd5b61010e6105f4565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561015557600080fd5b61018a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610617565b604051808215151515815260200191505060405180910390f35b34156101af57600080fd5b6101b7610709565b6040518082815260200191505060405180910390f35b34156101d857600080fd5b61022c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610713565b604051808215151515815260200191505060405180910390f35b341561025157600080fd5b6102596109a3565b6040518082815260200191505060405180910390f35b341561027a57600080fd5b6102826109a9565b6040518082815260200191505060405180910390f35b34156102a357600080fd5b6102cf600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109af565b6040518082815260200191505060405180910390f35b34156102f057600080fd5b6102f86109f8565b005b341561030557600080fd5b61030d610b97565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561035a57600080fd5b610362610bbc565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34156103b957600080fd5b6103c1610be7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040e57600080fd5b610443600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c0d565b604051808215151515815260200191505060405180910390f35b341561046857600080fd5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d96565b604051808215151515815260200191505060405180910390f35b341561050557600080fd5b61050d610fe0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055a57600080fd5b6105a5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611006565b6040518082815260200191505060405180910390f35b34156105c657600080fd5b6105f2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061108d565b005b600360009054906101000a90047001000000000000000000000000000000000281565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b600061075e600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361112c565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610827600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361112c565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f0600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611145565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60045481565b60055481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a5457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900478010000000000000000000000000000000000000000000000000281565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c58600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361112c565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ce4600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611145565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f73578082015181840152602081019050610f58565b50505050905090810190601f168015610fa05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610fc157600080fd5b6102c65a03f11515610fd257600080fd5b505050600190509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e857600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561113a57fe5b818303905092915050565b600080828401905083811015151561115957fe5b80915050929150505600a165627a7a72305820dcd70409d53d21d173ed44546c2928fa8a1f2a5dc902d94493971863cd648b9600290000000000000000000000007ddc1cb801e17c4b27c41bef58deb65144977d79",
  "constructorArguments": "0000000000000000000000007ddc1cb801e17c4b27c41bef58deb65144977d79"
}