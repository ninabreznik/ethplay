{
  "address": "0x44691b39d1a75dc4e0a0346cbb15e310e6ed1e86",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SignatureReg",
  "compilerVersion": "v0.4.2+commit.af6afb04",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-10-19\n*/\n\n//! A decentralised registry of 4-bytes signatures => method mappings\n//! By Parity Team (Ethcore), 2016.\n//! Released under the Apache Licence 2.\n\npragma solidity ^0.4.1;\n\ncontract Owned {\n  modifier only_owner {\n    if (msg.sender != owner) return;\n    _;\n  }\n\n  event NewOwner(address indexed old, address indexed current);\n\n  function setOwner(address _new) only_owner { NewOwner(owner, _new); owner = _new; }\n\n  address public owner = msg.sender;\n}\n\ncontract SignatureReg is Owned {\n  // mapping of signatures to entries\n  mapping (bytes4 => string) public entries;\n\n  // the total count of registered signatures\n  uint public totalSignatures = 0;\n\n  // allow only new calls to go in\n  modifier when_unregistered(bytes4 _signature) {\n    if (bytes(entries[_signature]).length != 0) return;\n    _;\n  }\n\n  // dispatched when a new signature is registered\n  event Registered(address indexed creator, bytes4 indexed signature, string method);\n\n  // constructor with self-registration\n  function SignatureReg() {\n    register('register(string)');\n  }\n\n  // registers a method mapping\n  function register(string _method) returns (bool) {\n    return _register(bytes4(sha3(_method)), _method);\n  }\n\n  // internal register function, signature => method\n  function _register(bytes4 _signature, string _method) internal when_unregistered(_signature) returns (bool) {\n    entries[_signature] = _method;\n    totalSignatures = totalSignatures + 1;\n    Registered(msg.sender, _signature, _method);\n    return true;\n  }\n\n  // in the case of any extra funds\n  function drain() only_owner {\n    if (!msg.sender.send(this.balance)) {\n      throw;\n    }\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"entries\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_method\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"signature\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"method\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]",
  "bytecode": "60008054600160a060020a03191633178155600281905560a06040819052601060608181527f726567697374657228737472696e67290000000000000000000000000000000060809081526100cd94919391926100dc9285929091829190808381848a60046012f1509050019150506040518091039020837fffffffff0000000000000000000000000000000000000000000000000000000082166000908152600160208190526040822054849160026000199183161561010002919091019091160482146100e257610231565b506105088061026c6000396000f35b92915050565b7fffffffff000000000000000000000000000000000000000000000000000000008416600090815260016020818152604083208651815482865294839020919460029481161561010002600019011693909304601f9081018390048201939288019083901061023857805160ff19168380011785555b506101749291505b808211156102685760008155600101610160565b505060026000505460010160026000508190555083600160e060020a03191633600160a060020a03167f50e01e16719d6c699e516c57f4c514e77f6bc21a978d33f23980acdddbcbd0b28560405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561021f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a3600191505b5092915050565b82800160010185558215610158579182015b8281111561015857825182600050559160200191906001019061024a565b509056606060405236156100565760e060020a600035046313af4035811461005b5780633015a521146100835780638da5cb5b146100915780639890220b146100a8578063b46bcdaa146100cb578063f2c298be1461013d575b610002565b3461000257610206600435600054600160a060020a039081163391909116146102b857610311565b346100025761020860025481565b346100025761021a600054600160a060020a031681565b3461000257610206600054600160a060020a03908116339190911614610314575b565b346100025761023660043560016020818152600092835260409283902080548451600294821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156103735780601f1061034857610100808354040283529160200191610373565b34610002576102a46004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061037b82604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902083600160e060020a03198216600090815260016020819052604082205484916002600019610100928416159290920291909101909116048214610381576104cd565b005b60408051918252519081900360200190f35b60408051600160a060020a039092168252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080519115158252519081900360200190f35b60405160008054600160a060020a03808516939116917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36000805473ffffffffffffffffffffffffffffffffffffffff1916821790555b50565b604051600160a060020a0333811691309091163180156108fc02916000818181858888f1935050505015156100c957610002565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b92915050565b600160e060020a03198416600090815260016020818152604083208651815482865294839020919460029481161561010002600019011693909304601f908101839004820193928801908390106104d457805160ff19168380011785555b506103fb9291505b8082111561050457600081556001016103e7565b5050600260005054600101600260005081905550837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191633600160a060020a03167f50e01e16719d6c699e516c57f4c514e77f6bc21a978d33f23980acdddbcbd0b28560405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156104bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390a3600191505b5092915050565b828001600101855582156103df579182015b828111156103df5782518260005055916020019190600101906104e6565b509056",
  "constructorArguments": "481161561010002600019011693909304601f908101839004820193928801908390106104d457805160ff19168380011785555b506103fb9291505b8082111561050457600081556001016103e7565b5050600260005054600101600260005081905550837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191633600160a060020a03167f50e01e16719d6c699e516c57f4c514e77f6bc21a978d33f23980acdddbcbd0b28560405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156104bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390a3600191505b5092915050565b828001600101855582156103df579182015b828111156103df5782518260005055916020019190600101906104e6565b509056"
}