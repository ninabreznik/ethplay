{
  "address": "0xa6bff4f91016c2b4aac140b2d8d7317b36afe5ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CompleteSets",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-08\n*/\n\npragma solidity 0.4.20;\n\ncontract IAugur {\n    function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] _parentPayoutNumerators, bool _parentInvalid) public returns (IUniverse);\n    function isKnownUniverse(IUniverse _universe) public view returns (bool);\n    function trustedTransfer(ERC20 _token, address _from, address _to, uint256 _amount) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, bytes32[] _outcomes, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] _payoutNumerators, uint256 _size, bool _invalid) public returns (bool);\n    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked) public returns (bool);\n    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer) public returns (bool);\n    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logFeeWindowRedeemed(IUniverse _universe, address _reporter, uint256 _amountRedeemed, uint256 _reportingFeesReceived) public returns (bool);\n    function logMarketFinalized(IUniverse _universe) public returns (bool);\n    function logMarketMigrated(IMarket _market, IUniverse _originalUniverse) public returns (bool);\n    function logReportingParticipantDisavowed(IUniverse _universe, IMarket _market) public returns (bool);\n    function logMarketParticipantsDisavowed(IUniverse _universe) public returns (bool);\n    function logOrderCanceled(IUniverse _universe, address _shareToken, address _sender, bytes32 _orderId, Order.Types _orderType, uint256 _tokenRefund, uint256 _sharesRefund) public returns (bool);\n    function logOrderCreated(Order.Types _orderType, uint256 _amount, uint256 _price, address _creator, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _tradeGroupId, bytes32 _orderId, IUniverse _universe, address _shareToken) public returns (bool);\n    function logOrderFilled(IUniverse _universe, address _shareToken, address _filler, bytes32 _orderId, uint256 _numCreatorShares, uint256 _numCreatorTokens, uint256 _numFillerShares, uint256 _numFillerTokens, uint256 _marketCreatorFees, uint256 _reporterFees, uint256 _amountFilled, bytes32 _tradeGroupId) public returns (bool);\n    function logCompleteSetsPurchased(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logCompleteSetsSold(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logTradingProceedsClaimed(IUniverse _universe, address _shareToken, address _sender, address _market, uint256 _numShares, uint256 _numPayoutTokens, uint256 _finalTokenBalance) public returns (bool);\n    function logUniverseForked() public returns (bool);\n    function logFeeWindowTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logDisputeCrowdsourcerTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logShareTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logReputationTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowCreated(IFeeWindow _feeWindow, uint256 _id) public returns (bool);\n    function logFeeTokenTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logFeeTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logTimestampSet(uint256 _newTimestamp) public returns (bool);\n    function logInitialReporterTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logMarketTransferred(IUniverse _universe, address _from, address _to) public returns (bool);\n    function logMarketMailboxTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logEscapeHatchChanged(bool _isOn) public returns (bool);\n}\n\ncontract IControlled {\n    function getController() public view returns (IController);\n    function setController(IController _controller) public returns(bool);\n}\n\ncontract Controlled is IControlled {\n    IController internal controller;\n\n    modifier onlyWhitelistedCallers {\n        require(controller.assertIsWhitelisted(msg.sender));\n        _;\n    }\n\n    modifier onlyCaller(bytes32 _key) {\n        require(msg.sender == controller.lookup(_key));\n        _;\n    }\n\n    modifier onlyControllerCaller {\n        require(IController(msg.sender) == controller);\n        _;\n    }\n\n    modifier onlyInGoodTimes {\n        require(controller.stopInEmergency());\n        _;\n    }\n\n    modifier onlyInBadTimes {\n        require(controller.onlyInEmergency());\n        _;\n    }\n\n    function Controlled() public {\n        controller = IController(msg.sender);\n    }\n\n    function getController() public view returns(IController) {\n        return controller;\n    }\n\n    function setController(IController _controller) public onlyControllerCaller returns(bool) {\n        controller = _controller;\n        return true;\n    }\n}\n\ncontract IController {\n    function assertIsWhitelisted(address _target) public view returns(bool);\n    function lookup(bytes32 _key) public view returns(address);\n    function stopInEmergency() public view returns(bool);\n    function onlyInEmergency() public view returns(bool);\n    function getAugur() public view returns (IAugur);\n    function getTimestamp() public view returns (uint256);\n}\n\ncontract CashAutoConverter is Controlled {\n    /**\n     * @dev Convert any ETH provided in the transaction into Cash before the function executes and convert any remaining Cash balance into ETH after the function completes\n     */\n    modifier convertToAndFromCash() {\n        ethToCash();\n        _;\n        cashToEth();\n    }\n\n    function ethToCash() private returns (bool) {\n        if (msg.value > 0) {\n            ICash(controller.lookup(\"Cash\")).depositEtherFor.value(msg.value)(msg.sender);\n        }\n        return true;\n    }\n\n    function cashToEth() private returns (bool) {\n        ICash _cash = ICash(controller.lookup(\"Cash\"));\n        uint256 _tokenBalance = _cash.balanceOf(msg.sender);\n        if (_tokenBalance > 0) {\n            IAugur augur = controller.getAugur();\n            augur.trustedTransfer(_cash, msg.sender, this, _tokenBalance);\n            _cash.withdrawEtherTo(msg.sender, _tokenBalance);\n        }\n        return true;\n    }\n}\n\ncontract IOwnable {\n    function getOwner() public view returns (address);\n    function transferOwnership(address newOwner) public returns (bool);\n}\n\ncontract ITyped {\n    function getTypeName() public view returns (bytes32);\n}\n\ncontract Initializable {\n    bool private initialized = false;\n\n    modifier afterInitialized {\n        require(initialized);\n        _;\n    }\n\n    modifier beforeInitialized {\n        require(!initialized);\n        _;\n    }\n\n    function endInitialization() internal beforeInitialized returns (bool) {\n        initialized = true;\n        return true;\n    }\n\n    function getInitialized() public view returns (bool) {\n        return initialized;\n    }\n}\n\ncontract MarketValidator is Controlled {\n    modifier marketIsLegit(IMarket _market) {\n        IUniverse _universe = _market.getUniverse();\n        require(controller.getAugur().isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(_market));\n        _;\n    }\n}\n\ncontract ReentrancyGuard {\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    bool private rentrancyLock = false;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * @notice If you mark a function `nonReentrant`, you should also mark it `external`. Calling one nonReentrant function from another is not supported. Instead, you can implement a `private` function doing the actual work, and a `external` wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(!rentrancyLock);\n        rentrancyLock = true;\n        _;\n        rentrancyLock = false;\n    }\n}\n\nlibrary SafeMathUint256 {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function getUint256Min() internal pure returns (uint256) {\n        return 0;\n    }\n\n    function getUint256Max() internal pure returns (uint256) {\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    }\n\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\n        return a % b == 0;\n    }\n\n    // Float [fixed point] Operations\n    function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, b), base);\n    }\n\n    function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, base), b);\n    }\n}\n\ncontract ERC20Basic {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n}\n\ncontract ERC20 is ERC20Basic {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n}\n\ncontract IFeeToken is ERC20, Initializable {\n    function initialize(IFeeWindow _feeWindow) public returns (bool);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function feeWindowBurn(address _target, uint256 _amount) public returns (bool);\n    function mintForReportingParticipant(address _target, uint256 _amount) public returns (bool);\n}\n\ncontract IFeeWindow is ITyped, ERC20 {\n    function initialize(IUniverse _universe, uint256 _feeWindowId) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getStartTime() public view returns (uint256);\n    function getEndTime() public view returns (uint256);\n    function getNumMarkets() public view returns (uint256);\n    function getNumInvalidMarkets() public view returns (uint256);\n    function getNumIncorrectDesignatedReportMarkets() public view returns (uint256);\n    function getNumDesignatedReportNoShows() public view returns (uint256);\n    function getFeeToken() public view returns (IFeeToken);\n    function isActive() public view returns (bool);\n    function isOver() public view returns (bool);\n    function onMarketFinalized() public returns (bool);\n    function buy(uint256 _attotokens) public returns (bool);\n    function redeem(address _sender) public returns (bool);\n    function redeemForReportingParticipant() public returns (bool);\n    function mintFeeTokens(uint256 _amount) public returns (bool);\n    function trustedUniverseBuy(address _buyer, uint256 _attotokens) public returns (bool);\n}\n\ncontract IMailbox {\n    function initialize(address _owner, IMarket _market) public returns (bool);\n    function depositEther() public payable returns (bool);\n}\n\ncontract IMarket is ITyped, IOwnable {\n    enum MarketType {\n        YES_NO,\n        CATEGORICAL,\n        SCALAR\n    }\n\n    function initialize(IUniverse _universe, uint256 _endTime, uint256 _feePerEthInAttoeth, ICash _cash, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks) public payable returns (bool _success);\n    function derivePayoutDistributionHash(uint256[] _payoutNumerators, bool _invalid) public view returns (bytes32);\n    function getUniverse() public view returns (IUniverse);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function getNumberOfOutcomes() public view returns (uint256);\n    function getNumTicks() public view returns (uint256);\n    function getDenominationToken() public view returns (ICash);\n    function getShareToken(uint256 _outcome)  public view returns (IShareToken);\n    function getMarketCreatorSettlementFeeDivisor() public view returns (uint256);\n    function getForkingMarket() public view returns (IMarket _market);\n    function getEndTime() public view returns (uint256);\n    function getMarketCreatorMailbox() public view returns (IMailbox);\n    function getWinningPayoutDistributionHash() public view returns (bytes32);\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getReputationToken() public view returns (IReputationToken);\n    function getFinalizationTime() public view returns (uint256);\n    function getInitialReporterAddress() public view returns (address);\n    function deriveMarketCreatorFeeAmount(uint256 _amount) public view returns (uint256);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isInvalid() public view returns (bool);\n    function finalize() public returns (bool);\n    function designatedReporterWasCorrect() public view returns (bool);\n    function designatedReporterShowed() public view returns (bool);\n    function isFinalized() public view returns (bool);\n    function finalizeFork() public returns (bool);\n    function assertBalances() public view returns (bool);\n}\n\ncontract IReportingParticipant {\n    function getStake() public view returns (uint256);\n    function getPayoutDistributionHash() public view returns (bytes32);\n    function liquidateLosing() public returns (bool);\n    function redeem(address _redeemer) public returns (bool);\n    function isInvalid() public view returns (bool);\n    function isDisavowed() public view returns (bool);\n    function migrate() public returns (bool);\n    function getPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getMarket() public view returns (IMarket);\n    function getSize() public view returns (uint256);\n}\n\ncontract IDisputeCrowdsourcer is IReportingParticipant, ERC20 {\n    function initialize(IMarket market, uint256 _size, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function contribute(address _participant, uint256 _amount) public returns (uint256);\n}\n\ncontract IReputationToken is ITyped, ERC20 {\n    function initialize(IUniverse _universe) public returns (bool);\n    function migrateOut(IReputationToken _destination, uint256 _attotokens) public returns (bool);\n    function migrateIn(address _reporter, uint256 _attotokens) public returns (bool);\n    function trustedReportingParticipantTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedMarketTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFeeWindowTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedUniverseTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getTotalMigrated() public view returns (uint256);\n    function getTotalTheoreticalSupply() public view returns (uint256);\n    function mintForReportingParticipant(uint256 _amountMigrated) public returns (bool);\n}\n\ncontract IUniverse is ITyped {\n    function initialize(IUniverse _parentUniverse, bytes32 _parentPayoutDistributionHash) external returns (bool);\n    function fork() public returns (bool);\n    function getParentUniverse() public view returns (IUniverse);\n    function createChildUniverse(uint256[] _parentPayoutNumerators, bool _invalid) public returns (IUniverse);\n    function getChildUniverse(bytes32 _parentPayoutDistributionHash) public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getForkingMarket() public view returns (IMarket);\n    function getForkEndTime() public view returns (uint256);\n    function getForkReputationGoal() public view returns (uint256);\n    function getParentPayoutDistributionHash() public view returns (bytes32);\n    function getDisputeRoundDurationInSeconds() public view returns (uint256);\n    function getOrCreateFeeWindowByTimestamp(uint256 _timestamp) public returns (IFeeWindow);\n    function getOrCreateCurrentFeeWindow() public returns (IFeeWindow);\n    function getOrCreateNextFeeWindow() public returns (IFeeWindow);\n    function getOpenInterestInAttoEth() public view returns (uint256);\n    function getRepMarketCapInAttoeth() public view returns (uint256);\n    function getTargetRepMarketCapInAttoeth() public view returns (uint256);\n    function getOrCacheValidityBond() public returns (uint256);\n    function getOrCacheDesignatedReportStake() public returns (uint256);\n    function getOrCacheDesignatedReportNoShowBond() public returns (uint256);\n    function getOrCacheReportingFeeDivisor() public returns (uint256);\n    function getDisputeThresholdForFork() public view returns (uint256);\n    function getInitialReportMinValue() public view returns (uint256);\n    function calculateFloatingValue(uint256 _badMarkets, uint256 _totalMarkets, uint256 _targetDivisor, uint256 _previousValue, uint256 _defaultValue, uint256 _floor) public pure returns (uint256 _newValue);\n    function getOrCacheMarketCreationCost() public returns (uint256);\n    function getCurrentFeeWindow() public view returns (IFeeWindow);\n    function getOrCreateFeeWindowBefore(IFeeWindow _feeWindow) public returns (IFeeWindow);\n    function isParentOf(IUniverse _shadyChild) public view returns (bool);\n    function updateTentativeWinningChildUniverse(bytes32 _parentPayoutDistributionHash) public returns (bool);\n    function isContainerForFeeWindow(IFeeWindow _shadyTarget) public view returns (bool);\n    function isContainerForMarket(IMarket _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForFeeToken(IFeeToken _shadyTarget) public view returns (bool);\n    function addMarketTo() public returns (bool);\n    function removeMarketFrom() public returns (bool);\n    function decrementOpenInterest(uint256 _amount) public returns (bool);\n    function decrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function incrementOpenInterest(uint256 _amount) public returns (bool);\n    function incrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function getWinningChildUniverse() public view returns (IUniverse);\n    function isForking() public view returns (bool);\n}\n\ncontract ICash is ERC20 {\n    function depositEther() external payable returns(bool);\n    function depositEtherFor(address _to) external payable returns(bool);\n    function withdrawEther(uint256 _amount) external returns(bool);\n    function withdrawEtherTo(address _to, uint256 _amount) external returns(bool);\n    function withdrawEtherToIfPossible(address _to, uint256 _amount) external returns (bool);\n}\n\ncontract ICompleteSets {\n    function buyCompleteSets(address _sender, IMarket _market, uint256 _amount) external returns (bool);\n    function sellCompleteSets(address _sender, IMarket _market, uint256 _amount) external returns (uint256, uint256);\n}\n\ncontract CompleteSets is Controlled, CashAutoConverter, ReentrancyGuard, MarketValidator, ICompleteSets {\n    using SafeMathUint256 for uint256;\n\n    /**\n     * Buys `_amount` shares of every outcome in the specified market.\n    **/\n    function publicBuyCompleteSets(IMarket _market, uint256 _amount) external marketIsLegit(_market) payable convertToAndFromCash onlyInGoodTimes returns (bool) {\n        this.buyCompleteSets(msg.sender, _market, _amount);\n        controller.getAugur().logCompleteSetsPurchased(_market.getUniverse(), _market, msg.sender, _amount);\n        _market.assertBalances();\n        return true;\n    }\n\n    function publicBuyCompleteSetsWithCash(IMarket _market, uint256 _amount) external marketIsLegit(_market) onlyInGoodTimes returns (bool) {\n        this.buyCompleteSets(msg.sender, _market, _amount);\n        controller.getAugur().logCompleteSetsPurchased(_market.getUniverse(), _market, msg.sender, _amount);\n        _market.assertBalances();\n        return true;\n    }\n\n    function buyCompleteSets(address _sender, IMarket _market, uint256 _amount) external onlyWhitelistedCallers nonReentrant returns (bool) {\n        require(_sender != address(0));\n\n        uint256 _numOutcomes = _market.getNumberOfOutcomes();\n        ICash _denominationToken = _market.getDenominationToken();\n        IAugur _augur = controller.getAugur();\n\n        uint256 _cost = _amount.mul(_market.getNumTicks());\n        require(_augur.trustedTransfer(_denominationToken, _sender, _market, _cost));\n        for (uint256 _outcome = 0; _outcome < _numOutcomes; ++_outcome) {\n            _market.getShareToken(_outcome).createShares(_sender, _amount);\n        }\n\n        if (!_market.isFinalized()) {\n            _market.getUniverse().incrementOpenInterest(_cost);\n        }\n\n        return true;\n    }\n\n    function publicSellCompleteSets(IMarket _market, uint256 _amount) external marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bool) {\n        this.sellCompleteSets(msg.sender, _market, _amount);\n        controller.getAugur().logCompleteSetsSold(_market.getUniverse(), _market, msg.sender, _amount);\n        _market.assertBalances();\n        return true;\n    }\n\n    function publicSellCompleteSetsWithCash(IMarket _market, uint256 _amount) external marketIsLegit(_market) onlyInGoodTimes returns (bool) {\n        this.sellCompleteSets(msg.sender, _market, _amount);\n        controller.getAugur().logCompleteSetsSold(_market.getUniverse(), _market, msg.sender, _amount);\n        _market.assertBalances();\n        return true;\n    }\n\n    function sellCompleteSets(address _sender, IMarket _market, uint256 _amount) external onlyWhitelistedCallers nonReentrant returns (uint256 _creatorFee, uint256 _reportingFee) {\n        require(_sender != address(0));\n\n        uint256 _numOutcomes = _market.getNumberOfOutcomes();\n        ICash _denominationToken = _market.getDenominationToken();\n        uint256 _payout = _amount.mul(_market.getNumTicks());\n        if (!_market.isFinalized()) {\n            _market.getUniverse().decrementOpenInterest(_payout);\n        }\n        _creatorFee = _market.deriveMarketCreatorFeeAmount(_payout);\n        uint256 _reportingFeeDivisor = _market.getUniverse().getOrCacheReportingFeeDivisor();\n        _reportingFee = _payout.div(_reportingFeeDivisor);\n        _payout = _payout.sub(_creatorFee).sub(_reportingFee);\n\n        // Takes shares away from participant and decreases the amount issued in the market since we're exchanging complete sets\n        for (uint256 _outcome = 0; _outcome < _numOutcomes; ++_outcome) {\n            _market.getShareToken(_outcome).destroyShares(_sender, _amount);\n        }\n\n        if (_creatorFee != 0) {\n            require(_denominationToken.transferFrom(_market, _market.getMarketCreatorMailbox(), _creatorFee));\n        }\n        if (_reportingFee != 0) {\n            IFeeWindow _feeWindow = _market.getUniverse().getOrCreateNextFeeWindow();\n            require(_denominationToken.transferFrom(_market, _feeWindow, _reportingFee));\n        }\n        require(_denominationToken.transferFrom(_market, _sender, _payout));\n\n        return (_creatorFee, _reportingFee);\n    }\n}\n\ncontract IOrders {\n    function saveOrder(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) public returns (bytes32 _orderId);\n    function removeOrder(bytes32 _orderId) public returns (bool);\n    function getMarket(bytes32 _orderId) public view returns (IMarket);\n    function getOrderType(bytes32 _orderId) public view returns (Order.Types);\n    function getOutcome(bytes32 _orderId) public view returns (uint256);\n    function getAmount(bytes32 _orderId) public view returns (uint256);\n    function getPrice(bytes32 _orderId) public view returns (uint256);\n    function getOrderCreator(bytes32 _orderId) public view returns (address);\n    function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getBetterOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getWorseOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256);\n    function getOrderId(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _blockNumber, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed) public pure returns (bytes32);\n    function getTotalEscrowed(IMarket _market) public view returns (uint256);\n    function isBetterPrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function isWorsePrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function assertIsNotBetterPrice(Order.Types _type, uint256 _price, bytes32 _betterOrderId) public view returns (bool);\n    function assertIsNotWorsePrice(Order.Types _type, uint256 _price, bytes32 _worseOrderId) public returns (bool);\n    function recordFillOrder(bytes32 _orderId, uint256 _sharesFilled, uint256 _tokensFilled) public returns (bool);\n    function setPrice(IMarket _market, uint256 _outcome, uint256 _price) external returns (bool);\n    function incrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n    function decrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n}\n\ncontract IShareToken is ITyped, ERC20 {\n    function initialize(IMarket _market, uint256 _outcome) external returns (bool);\n    function createShares(address _owner, uint256 _amount) external returns (bool);\n    function destroyShares(address, uint256 balance) external returns (bool);\n    function getMarket() external view returns (IMarket);\n    function getOutcome() external view returns (uint256);\n    function trustedOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFillOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedCancelOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n}\n\nlibrary Order {\n    using SafeMathUint256 for uint256;\n\n    enum Types {\n        Bid, Ask\n    }\n\n    enum TradeDirections {\n        Long, Short\n    }\n\n    struct Data {\n        // Contracts\n        IOrders orders;\n        IMarket market;\n        IAugur augur;\n\n        // Order\n        bytes32 id;\n        address creator;\n        uint256 outcome;\n        Order.Types orderType;\n        uint256 amount;\n        uint256 price;\n        uint256 sharesEscrowed;\n        uint256 moneyEscrowed;\n        bytes32 betterOrderId;\n        bytes32 worseOrderId;\n    }\n\n    //\n    // Constructor\n    //\n\n    // No validation is needed here as it is simply a librarty function for organizing data\n    function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) {\n        require(_outcome < _market.getNumberOfOutcomes());\n        require(_price < _market.getNumTicks());\n\n        IOrders _orders = IOrders(_controller.lookup(\"Orders\"));\n        IAugur _augur = _controller.getAugur();\n\n        return Data({\n            orders: _orders,\n            market: _market,\n            augur: _augur,\n            id: 0,\n            creator: _creator,\n            outcome: _outcome,\n            orderType: _type,\n            amount: _attoshares,\n            price: _price,\n            sharesEscrowed: 0,\n            moneyEscrowed: 0,\n            betterOrderId: _betterOrderId,\n            worseOrderId: _worseOrderId\n        });\n    }\n\n    //\n    // \"public\" functions\n    //\n\n    function getOrderId(Order.Data _orderData) internal view returns (bytes32) {\n        if (_orderData.id == bytes32(0)) {\n            bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);\n            require(_orderData.orders.getAmount(_orderId) == 0);\n            _orderData.id = _orderId;\n        }\n        return _orderData.id;\n    }\n\n    function getOrderTradingTypeFromMakerDirection(Order.TradeDirections _creatorDirection) internal pure returns (Order.Types) {\n        return (_creatorDirection == Order.TradeDirections.Long) ? Order.Types.Bid : Order.Types.Ask;\n    }\n\n    function getOrderTradingTypeFromFillerDirection(Order.TradeDirections _fillerDirection) internal pure returns (Order.Types) {\n        return (_fillerDirection == Order.TradeDirections.Long) ? Order.Types.Ask : Order.Types.Bid;\n    }\n\n    function escrowFunds(Order.Data _orderData) internal returns (bool) {\n        if (_orderData.orderType == Order.Types.Ask) {\n            return escrowFundsForAsk(_orderData);\n        } else if (_orderData.orderType == Order.Types.Bid) {\n            return escrowFundsForBid(_orderData);\n        }\n    }\n\n    function saveOrder(Order.Data _orderData, bytes32 _tradeGroupId) internal returns (bytes32) {\n        return _orderData.orders.saveOrder(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed, _orderData.betterOrderId, _orderData.worseOrderId, _tradeGroupId);\n    }\n\n    //\n    // Private functions\n    //\n\n    function escrowFundsForBid(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        uint256 _attosharesToCover = _orderData.amount;\n        uint256 _numberOfOutcomes = _orderData.market.getNumberOfOutcomes();\n\n        // Figure out how many almost-complete-sets (just missing `outcome` share) the creator has\n        uint256 _attosharesHeld = 2**254;\n        for (uint256 _i = 0; _i < _numberOfOutcomes; _i++) {\n            if (_i != _orderData.outcome) {\n                uint256 _creatorShareTokenBalance = _orderData.market.getShareToken(_i).balanceOf(_orderData.creator);\n                _attosharesHeld = SafeMathUint256.min(_creatorShareTokenBalance, _attosharesHeld);\n            }\n        }\n\n        // Take shares into escrow if they have any almost-complete-sets\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            for (_i = 0; _i < _numberOfOutcomes; _i++) {\n                if (_i != _orderData.outcome) {\n                    _orderData.market.getShareToken(_i).trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n                }\n            }\n        }\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _attosharesToCover.mul(_orderData.price);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n\n    function escrowFundsForAsk(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        IShareToken _shareToken = _orderData.market.getShareToken(_orderData.outcome);\n        uint256 _attosharesToCover = _orderData.amount;\n\n        // Figure out how many shares of the outcome the creator has\n        uint256 _attosharesHeld = _shareToken.balanceOf(_orderData.creator);\n\n        // Take shares in escrow if user has shares\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            _shareToken.trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n        }\n\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _orderData.market.getNumTicks().sub(_orderData.price).mul(_attosharesToCover);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicBuyCompleteSetsWithCash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellCompleteSets\",\"outputs\":[{\"name\":\"_creatorFee\",\"type\":\"uint256\"},{\"name\":\"_reportingFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSellCompleteSetsWithCash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicBuyCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSellCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "bytecode": "606060405260008054600160a060020a033316600160a860020a031990911617905561247f806100306000396000f3006060604052600436106100745763ffffffff60e060020a6000350416632054279e81146100795780632bb66c48146100af5780633018205f146100ef5780637d8ec2cf1461011e57806392eefe9b14610140578063aa48db201461015f578063abb60c8014610187578063ad16158e1461019e575b600080fd5b341561008457600080fd5b61009b600160a060020a03600435166024356101c0565b604051901515815260200160405180910390f35b34156100ba57600080fd5b6100d7600160a060020a0360043581169060243516604435610636565b60405191825260208201526040908101905180910390f35b34156100fa57600080fd5b610102610f06565b604051600160a060020a03909116815260200160405180910390f35b341561012957600080fd5b61009b600160a060020a0360043516602435610f15565b341561014b57600080fd5b61009b600160a060020a036004351661128e565b341561016a57600080fd5b61009b600160a060020a03600435811690602435166044356112dc565b61009b600160a060020a0360043516602435611861565b34156101a957600080fd5b61009b600160a060020a0360043516602435611cea565b600082600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561027357600080fd5b6102c65a03f1151561028457600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156102e457600080fd5b6102c65a03f115156102f557600080fd5b50505060405180519050151561030a57600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561036157600080fd5b6102c65a03f1151561037257600080fd5b50505060405180519050151561038757600080fd5b60008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156103d057600080fd5b6102c65a03f115156103e157600080fd5b5050506040518051905015156103f657600080fd5b30600160a060020a031663aa48db2033878760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561046057600080fd5b6102c65a03f1151561047157600080fd5b5050506040518051505060008054600160a060020a031690634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156104c457600080fd5b6102c65a03f115156104d557600080fd5b50505060405180519050600160a060020a031663c509d0b286600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561053357600080fd5b6102c65a03f1151561054457600080fd5b5050506040518051905087338860006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b15156105af57600080fd5b6102c65a03f115156105c057600080fd5b50505060405180515050600160a060020a03851663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561061057600080fd5b6102c65a03f1151561062157600080fd5b50505060405180515060019695505050505050565b600080548190819081908190819081908190600160a060020a0316633f08882f33836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069d57600080fd5b6102c65a03f115156106ae57600080fd5b5050506040518051905015156106c357600080fd5b60005474010000000000000000000000000000000000000000900460ff16156106eb57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600160a060020a038b16151561073557600080fd5b89600160a060020a03166327ce5b8c6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561077b57600080fd5b6102c65a03f1151561078c57600080fd5b5050506040518051965050600160a060020a038a1663df2a29da6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107dd57600080fd5b6102c65a03f115156107ee57600080fd5b50505060405180519050945061086a8a600160a060020a031663bad84c9e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561084357600080fd5b6102c65a03f1151561085457600080fd5b50505060405180518b915063ffffffff61206c16565b935089600160a060020a0316638d4e40836000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156108b257600080fd5b6102c65a03f115156108c357600080fd5b50505060405180519050151561099e5789600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561091957600080fd5b6102c65a03f1151561092a57600080fd5b50505060405180519050600160a060020a031663b62418a18560006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561098257600080fd5b6102c65a03f1151561099357600080fd5b505050604051805150505b89600160a060020a031663f8c521258560006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156109ed57600080fd5b6102c65a03f115156109fe57600080fd5b5050506040518051985050600160a060020a038a1663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a4f57600080fd5b6102c65a03f11515610a6057600080fd5b50505060405180519050600160a060020a0316638f93bffe6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610aaf57600080fd5b6102c65a03f11515610ac057600080fd5b50505060405180519350610adc9050848463ffffffff61209a16565b9650610afe87610af2868b63ffffffff6120b116565b9063ffffffff6120b116565b9350600091505b85821015610bf95789600160a060020a03166365957bf58360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610b5c57600080fd5b6102c65a03f11515610b6d57600080fd5b50505060405180519050600160a060020a031663d333d7cf8c8b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610bd357600080fd5b6102c65a03f11515610be457600080fd5b50505060405180515050600190910190610b05565b8715610cef5784600160a060020a03166323b872dd8b8c600160a060020a031663ed23378b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610c5557600080fd5b6102c65a03f11515610c6657600080fd5b505050604051805190508b60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610cc957600080fd5b6102c65a03f11515610cda57600080fd5b505050604051805190501515610cef57600080fd5b8615610e475789600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d3b57600080fd5b6102c65a03f11515610d4c57600080fd5b50505060405180519050600160a060020a0316630cc8c9af6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d9b57600080fd5b6102c65a03f11515610dac57600080fd5b5050506040518051915050600160a060020a0385166323b872dd8b838a60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610e2157600080fd5b6102c65a03f11515610e3257600080fd5b505050604051805190501515610e4757600080fd5b84600160a060020a03166323b872dd8b8d8760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610eb157600080fd5b6102c65a03f11515610ec257600080fd5b505050604051805190501515610ed757600080fd5b50506000805474ff00000000000000000000000000000000000000001916905550939792965091945050505050565b600054600160a060020a031690565b600082600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610f6057600080fd5b6102c65a03f11515610f7157600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fc857600080fd5b6102c65a03f11515610fd957600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561103957600080fd5b6102c65a03f1151561104a57600080fd5b50505060405180519050151561105f57600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156110b657600080fd5b6102c65a03f115156110c757600080fd5b5050506040518051905015156110dc57600080fd5b60008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561112557600080fd5b6102c65a03f1151561113657600080fd5b50505060405180519050151561114b57600080fd5b30600160a060020a0316632bb66c4833878760006040516040015260405160e060020a63ffffffff8616028152600160a060020a03938416600482015291909216602482015260448101919091526064016040805180830381600087803b15156111b457600080fd5b6102c65a03f115156111c557600080fd5b5050506040518051906020018051505060008054600160a060020a03169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561121f57600080fd5b6102c65a03f1151561123057600080fd5b50505060405180519050600160a060020a031663ed654fd786600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561053357600080fd5b6000805433600160a060020a039081169116146112aa57600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b6000805481908190819081908190600160a060020a0316633f08882f33836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561133f57600080fd5b6102c65a03f1151561135057600080fd5b50505060405180519050151561136557600080fd5b60005474010000000000000000000000000000000000000000900460ff161561138d57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600160a060020a03891615156113d757600080fd5b87600160a060020a03166327ce5b8c6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561141d57600080fd5b6102c65a03f1151561142e57600080fd5b5050506040518051955050600160a060020a03881663df2a29da6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561147f57600080fd5b6102c65a03f1151561149057600080fd5b505050604051805160008054919650600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156114e757600080fd5b6102c65a03f115156114f857600080fd5b50505060405180519050925061157488600160a060020a031663bad84c9e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561154d57600080fd5b6102c65a03f1151561155e57600080fd5b505050604051805189915063ffffffff61206c16565b915082600160a060020a031663ec238994858b8b8660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b15156115e757600080fd5b6102c65a03f115156115f857600080fd5b50505060405180519050151561160d57600080fd5b5060005b848110156117025787600160a060020a03166365957bf58260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561166857600080fd5b6102c65a03f1151561167957600080fd5b50505060405180519050600160a060020a0316630f9e5bbd8a8960006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156116df57600080fd5b6102c65a03f115156116f057600080fd5b50505060405180515050600101611611565b87600160a060020a0316638d4e40836000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561174857600080fd5b6102c65a03f1151561175957600080fd5b5050506040518051905015156118345787600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156117af57600080fd5b6102c65a03f115156117c057600080fd5b50505060405180519050600160a060020a031663ce483e888360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561181857600080fd5b6102c65a03f1151561182957600080fd5b505050604051805150505b50506000805474ff0000000000000000000000000000000000000000191690555060019695505050505050565b600082600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118ac57600080fd5b6102c65a03f115156118bd57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561191457600080fd5b6102c65a03f1151561192557600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561198557600080fd5b6102c65a03f1151561199657600080fd5b5050506040518051905015156119ab57600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611a0257600080fd5b6102c65a03f11515611a1357600080fd5b505050604051805190501515611a2857600080fd5b611a306120c6565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611a7a57600080fd5b6102c65a03f11515611a8b57600080fd5b505050604051805190501515611aa057600080fd5b30600160a060020a031663aa48db2033878760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515611b0a57600080fd5b6102c65a03f11515611b1b57600080fd5b5050506040518051505060008054600160a060020a031690634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b6e57600080fd5b6102c65a03f11515611b7f57600080fd5b50505060405180519050600160a060020a031663c509d0b286600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611bdd57600080fd5b6102c65a03f11515611bee57600080fd5b5050506040518051905087338860006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b1515611c5957600080fd5b6102c65a03f11515611c6a57600080fd5b50505060405180515050600160a060020a03851663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611cba57600080fd5b6102c65a03f11515611ccb57600080fd5b5050506040518051506001935050611ce16121d3565b50505092915050565b600082600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d3557600080fd5b6102c65a03f11515611d4657600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d9d57600080fd5b6102c65a03f11515611dae57600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611e0e57600080fd5b6102c65a03f11515611e1f57600080fd5b505050604051805190501515611e3457600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611e8b57600080fd5b6102c65a03f11515611e9c57600080fd5b505050604051805190501515611eb157600080fd5b611eb96120c6565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611f0357600080fd5b6102c65a03f11515611f1457600080fd5b505050604051805190501515611f2957600080fd5b30600160a060020a0316632bb66c4833878760006040516040015260405160e060020a63ffffffff8616028152600160a060020a03938416600482015291909216602482015260448101919091526064016040805180830381600087803b1515611f9257600080fd5b6102c65a03f11515611fa357600080fd5b5050506040518051906020018051505060008054600160a060020a03169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611ffd57600080fd5b6102c65a03f1151561200e57600080fd5b50505060405180519050600160a060020a031663ed654fd786600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611bdd57600080fd5b6000828202831580612088575082848281151561208557fe5b04145b151561209357600080fd5b9392505050565b60008082848115156120a857fe5b04949350505050565b6000828211156120c057600080fd5b50900390565b6000803411156121cd5760008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561213f57600080fd5b6102c65a03f1151561215057600080fd5b50505060405180519050600160a060020a0316634faa8a26343360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156121b057600080fd5b6125ee5a03f115156121c157600080fd5b50505050604051805150505b50600190565b60008054819081908190600160a060020a031663f39ec1f7826040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561224757600080fd5b6102c65a03f1151561225857600080fd5b5050506040518051935050600160a060020a0383166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156122ba57600080fd5b6102c65a03f115156122cb57600080fd5b505050604051805192505060008211156124495760008054600160a060020a031690634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561232857600080fd5b6102c65a03f1151561233957600080fd5b5050506040518051915050600160a060020a03811663ec2389948433308660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b15156123b557600080fd5b6102c65a03f115156123c657600080fd5b50505060405180515050600160a060020a038316631baffe38338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561242d57600080fd5b6102c65a03f1151561243e57600080fd5b505050604051805150505b60019350505050905600a165627a7a72305820886fb80446e49a97f5d30bbed018b7373dfff7f6f785292c564d04c7640c95f10029"
}