{
  "address": "0xBfc9154A280F28b0962d8cCe9951E3c8fFCa096D",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TemplateCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\n/*\n * This file was generated by MyWish Platform (https://mywish.io/)\n * The complete code could be found at https://github.com/MyWishPlatform/\n * Copyright (C) 2018 MyWish\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\ncontract FreezableToken is StandardToken {\n    // freezing chains\n    mapping (bytes32 => uint64) internal chains;\n    // freezing amounts for each chain\n    mapping (bytes32 => uint) internal freezings;\n    // total freezing balance per address\n    mapping (address => uint) internal freezingBalance;\n\n    event Freezed(address indexed to, uint64 release, uint amount);\n    event Released(address indexed owner, uint amount);\n\n    /**\n     * @dev Gets the balance of the specified address include freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner) + freezingBalance[_owner];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address without freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner);\n    }\n\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n        return freezingBalance[_owner];\n    }\n\n    /**\n     * @dev gets freezing count\n     * @param _addr Address of freeze tokens owner.\n     */\n    function freezingCount(address _addr) public view returns (uint count) {\n        uint64 release = chains[toKey(_addr, 0)];\n        while (release != 0) {\n            count++;\n            release = chains[toKey(_addr, release)];\n        }\n    }\n\n    /**\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\n     * @param _addr Address of freeze tokens owner.\n     * @param _index Freezing portion index. It ordered by release date descending.\n     */\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n        for (uint i = 0; i < _index + 1; i++) {\n            _release = chains[toKey(_addr, _release)];\n            if (_release == 0) {\n                return;\n            }\n        }\n        _balance = freezings[toKey(_addr, _release)];\n    }\n\n    /**\n     * @dev freeze your tokens to the specified address.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to freeze.\n     * @param _until Release date, must be in future.\n     */\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        emit Transfer(msg.sender, _to, _amount);\n        emit Freezed(_to, _until, _amount);\n    }\n\n    /**\n     * @dev release first available freezing tokens.\n     */\n    function releaseOnce() public {\n        bytes32 headKey = toKey(msg.sender, 0);\n        uint64 head = chains[headKey];\n        require(head != 0);\n        require(uint64(block.timestamp) > head);\n        bytes32 currentKey = toKey(msg.sender, head);\n\n        uint64 next = chains[currentKey];\n\n        uint amount = freezings[currentKey];\n        delete freezings[currentKey];\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\n        if (next == 0) {\n            delete chains[headKey];\n        } else {\n            chains[headKey] = next;\n            delete chains[currentKey];\n        }\n        emit Released(msg.sender, amount);\n    }\n\n    /**\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\n     * @return how many tokens was released\n     */\n    function releaseAll() public returns (uint tokens) {\n        uint release;\n        uint balance;\n        (release, balance) = getFreezing(msg.sender, 0);\n        while (release != 0 && block.timestamp > release) {\n            releaseOnce();\n            tokens += balance;\n            (release, balance) = getFreezing(msg.sender, 0);\n        }\n    }\n\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n        // WISH masc to increase entropy\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n        assembly {\n            result := or(result, mul(_addr, 0x10000000000000000))\n            result := or(result, _release)\n        }\n    }\n\n    function freeze(address _to, uint64 _until) internal {\n        require(_until > block.timestamp);\n        bytes32 key = toKey(_to, _until);\n        bytes32 parentKey = toKey(_to, uint64(0));\n        uint64 next = chains[parentKey];\n\n        if (next == 0) {\n            chains[parentKey] = _until;\n            return;\n        }\n\n        bytes32 nextKey = toKey(_to, next);\n        uint parent;\n\n        while (next != 0 && _until > next) {\n            parent = next;\n            parentKey = nextKey;\n\n            next = chains[nextKey];\n            nextKey = toKey(_to, next);\n        }\n\n        if (_until == next) {\n            return;\n        }\n\n        if (next != 0) {\n            chains[key] = next;\n        }\n\n        chains[parentKey] = _until;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\ncontract FreezableMintableToken is FreezableToken, MintableToken {\n    /**\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to mint and freeze.\n     * @param _until Release date, must be in future.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        emit Mint(_to, _amount);\n        emit Freezed(_to, _until, _amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n}\n\n\n\ncontract Consts {\n    uint public constant TOKEN_DECIMALS = 18;\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 18;\n    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    string public constant TOKEN_NAME = \"QUESTRA-WORLD-FONDATION\";\n    string public constant TOKEN_SYMBOL = \"QWF\";\n    bool public constant PAUSED = false;\n    address public constant TARGET_USER = 0xeb7B89b0A5a1fe000C684F5be34aE78672043BDa;\n    \n    uint public constant START_TIME = 1558282467;\n    \n    bool public constant CONTINUE_MINTING = false;\n}\n\n\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n\n}\n\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\n    \n{\n    \n\n    function name() public pure returns (string _name) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() public pure returns (string _symbol) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() public pure returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transfer(_to, _value);\n    }\n\n    \n}\n\n\n\n\ncontract MainCrowdsale is Consts, FinalizableCrowdsale, MintedCrowdsale, CappedCrowdsale {\n    function hasStarted() public view returns (bool) {\n        return now >= openingTime;\n    }\n\n    function startTime() public view returns (uint256) {\n        return openingTime;\n    }\n\n    function endTime() public view returns (uint256) {\n        return closingTime;\n    }\n\n    function hasClosed() public view returns (bool) {\n        return super.hasClosed() || capReached();\n    }\n\n    function hasEnded() public view returns (bool) {\n        return hasClosed();\n    }\n\n    function finalization() internal {\n        super.finalization();\n\n        if (PAUSED) {\n            MainToken(token).unpause();\n        }\n\n        if (!CONTINUE_MINTING) {\n            require(MintableToken(token).finishMinting());\n        }\n\n        Ownable(token).transferOwnership(TARGET_USER);\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount)\n        internal view returns (uint256)\n    {\n        return _weiAmount.mul(rate).div(1 ether);\n    }\n}\n\n\ncontract BonusableCrowdsale is Consts, Crowdsale {\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount)\n        internal view returns (uint256)\n    {\n        uint256 bonusRate = getBonusRate(_weiAmount);\n        return _weiAmount.mul(bonusRate).div(1 ether);\n    }\n\n    function getBonusRate(uint256 _weiAmount) internal view returns (uint256) {\n        uint256 bonusRate = rate;\n\n        \n        // apply bonus for time & weiRaised\n        uint[1] memory weiRaisedStartsBounds = [uint(12500000000000000)];\n        uint[1] memory weiRaisedEndsBounds = [uint(75000000000000000000000)];\n        uint64[1] memory timeStartsBounds = [uint64(1558282467)];\n        uint64[1] memory timeEndsBounds = [uint64(1566424735)];\n        uint[1] memory weiRaisedAndTimeRates = [uint(100)];\n\n        for (uint i = 0; i < 1; i++) {\n            bool weiRaisedInBound = (weiRaisedStartsBounds[i] <= weiRaised) && (weiRaised < weiRaisedEndsBounds[i]);\n            bool timeInBound = (timeStartsBounds[i] <= now) && (now < timeEndsBounds[i]);\n            if (weiRaisedInBound && timeInBound) {\n                bonusRate += bonusRate * weiRaisedAndTimeRates[i] / 1000;\n            }\n        }\n        \n\n        \n        // apply amount\n        uint[3] memory weiAmountBounds = [uint(100000000000000000000),uint(100000000000000000000),uint(10000000000000000000)];\n        uint[3] memory weiAmountRates = [uint(80),uint(0),uint(50)];\n\n        for (uint j = 0; j < 3; j++) {\n            if (_weiAmount >= weiAmountBounds[j]) {\n                bonusRate += bonusRate * weiAmountRates[j] / 1000;\n                break;\n            }\n        }\n        \n\n        return bonusRate;\n    }\n}\n\n\n\n\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\n    mapping (address => bool) private whitelist;\n\n    event WhitelistedAddressAdded(address indexed _address);\n    event WhitelistedAddressRemoved(address indexed _address);\n\n    /**\n     * @dev throws if buyer is not whitelisted.\n     * @param _buyer address\n     */\n    modifier onlyIfWhitelisted(address _buyer) {\n        require(whitelist[_buyer]);\n        _;\n    }\n\n    /**\n     * @dev add single address to whitelist\n     */\n    function addAddressToWhitelist(address _address) external onlyOwner {\n        whitelist[_address] = true;\n        emit WhitelistedAddressAdded(_address);\n    }\n\n    /**\n     * @dev add addresses to whitelist\n     */\n    function addAddressesToWhitelist(address[] _addresses) external onlyOwner {\n        for (uint i = 0; i < _addresses.length; i++) {\n            whitelist[_addresses[i]] = true;\n            emit WhitelistedAddressAdded(_addresses[i]);\n        }\n    }\n\n    /**\n     * @dev remove single address from whitelist\n     */\n    function removeAddressFromWhitelist(address _address) external onlyOwner {\n        delete whitelist[_address];\n        emit WhitelistedAddressRemoved(_address);\n    }\n\n    /**\n     * @dev remove addresses from whitelist\n     */\n    function removeAddressesFromWhitelist(address[] _addresses) external onlyOwner {\n        for (uint i = 0; i < _addresses.length; i++) {\n            delete whitelist[_addresses[i]];\n            emit WhitelistedAddressRemoved(_addresses[i]);\n        }\n    }\n\n    /**\n     * @dev getter to determine if address is in whitelist\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return whitelist[_address];\n    }\n\n    /**\n     * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n     * @param _beneficiary Token beneficiary\n     * @param _weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n        internal\n        onlyIfWhitelisted(_beneficiary)\n    {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n}\n\n\n\ncontract TemplateCrowdsale is Consts, MainCrowdsale\n    \n    , BonusableCrowdsale\n    \n    \n    \n    \n    , WhitelistedCrowdsale\n    \n{\n    event Initialized();\n    event TimesChanged(uint startTime, uint endTime, uint oldStartTime, uint oldEndTime);\n    bool public initialized = false;\n\n    constructor(MintableToken _token) public\n        Crowdsale(800 * TOKEN_DECIMAL_MULTIPLIER, 0xECF3710c77c285F9e6e50C8337Cd640Ca80821bb, _token)\n        TimedCrowdsale(START_TIME > now ? START_TIME : now, 1566424740)\n        CappedCrowdsale(125000000000000000000000)\n        \n    {\n    }\n\n    function init() public onlyOwner {\n        require(!initialized);\n        initialized = true;\n\n        if (PAUSED) {\n            MainToken(token).pause();\n        }\n\n        \n        address[1] memory addresses = [address(0xeb7b89b0a5a1fe000c684f5be34ae78672043bda)];\n        uint[1] memory amounts = [uint(3000000000000000000)];\n        uint64[1] memory freezes = [uint64(1566424802)];\n\n        for (uint i = 0; i < addresses.length; i++) {\n            if (freezes[i] == 0) {\n                MainToken(token).mint(addresses[i], amounts[i]);\n            } else {\n                MainToken(token).mintAndFreeze(addresses[i], amounts[i], freezes[i]);\n            }\n        }\n        \n\n        transferOwnership(TARGET_USER);\n\n        emit Initialized();\n    }\n\n    \n\n    \n\n    \n    function setEndTime(uint _endTime) public onlyOwner {\n        // only if CS was not ended\n        require(now < closingTime);\n        // only if new end time in future\n        require(now < _endTime);\n        require(_endTime > openingTime);\n        emit TimesChanged(openingTime, _endTime, openingTime, closingTime);\n        closingTime = _endTime;\n    }\n    \n\n    \n\n    \n\n    \n    /**\n     * @dev override purchase validation to add extra value logic.\n     * @return true if sended more than minimal value\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n        internal\n    {\n        \n        \n        require(msg.value <= 200000000000000000000000);\n        \n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n    \n}",
  "bytecode": "60806040526006805460a060020a60ff02191690556009805460ff1916905534801561002a57600080fd5b506040516020806116308339810160405251691a784379d99db420000042635ce180e311610058574261005e565b635ce180e35b635d5dbea4682b5e3af16b1880000073ecf3710c77c285f9e6e50c8337cd640ca80821bb85600160a060020a038116151561009857600080fd5b60029290925560018054600160a060020a03928316600160a060020a03199182161790915560008054929093169116179055428210156100d757600080fd5b818110156100e457600080fd5b60049190915560055560068054600160a060020a031916331790556000811161010c57600080fd5b600755506115118061011f6000396000f3006080604052600436106101a75763ffffffff60e060020a6000350416623fd35a81146101b25780631515bc2b146101db578063158ef93e146101f0578063188214001461020557806324953eaa1461028f578063286dd3f5146102af5780632a905318146102d05780632c4e722e146102e55780633197cbb61461030c578063355274ea146103215780633af32abf146103365780634042b66f1461035757806344691f7e1461036c5780634b6753bc146103815780634bb278f3146103965780634f935945146103ab578063521eb273146103c057806356780085146103f15780635b7f415c14610406578063715018a61461041b578063726a431a1461043057806378e97925146104455780637b9417c81461045a5780638d4e40831461047b5780638da5cb5b14610490578063a9aad58c146101b2578063b7a8807c146104a5578063ccb98ffc146104ba578063cf3b1967146104d2578063ddaa26ad146104fd578063e1c7392a14610512578063e2ec6ec314610527578063ec8ac4d814610547578063ecb70fb71461055b578063f2fde38b14610570578063fc0c546a14610591575b6101b0336105a6565b005b3480156101be57600080fd5b506101c7610648565b604080519115158252519081900360200190f35b3480156101e757600080fd5b506101c761064d565b3480156101fc57600080fd5b506101c761066a565b34801561021157600080fd5b5061021a610673565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025457818101518382015260200161023c565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029b57600080fd5b506101b060048035602481019101356106aa565b3480156102bb57600080fd5b506101b0600160a060020a0360043516610763565b3480156102dc57600080fd5b5061021a6107c3565b3480156102f157600080fd5b506102fa6107fa565b60408051918252519081900360200190f35b34801561031857600080fd5b506102fa610800565b34801561032d57600080fd5b506102fa610806565b34801561034257600080fd5b506101c7600160a060020a036004351661080c565b34801561036357600080fd5b506102fa61082a565b34801561037857600080fd5b506101c7610830565b34801561038d57600080fd5b506102fa610839565b3480156103a257600080fd5b506101b061083f565b3480156103b757600080fd5b506101c76108f9565b3480156103cc57600080fd5b506103d5610904565b60408051600160a060020a039092168252519081900360200190f35b3480156103fd57600080fd5b506102fa610913565b34801561041257600080fd5b506102fa61091f565b34801561042757600080fd5b506101b0610924565b34801561043c57600080fd5b506103d5610992565b34801561045157600080fd5b506102fa6109aa565b34801561046657600080fd5b506101b0600160a060020a03600435166109b0565b34801561048757600080fd5b506101c7610a13565b34801561049c57600080fd5b506103d5610a34565b3480156104b157600080fd5b506102fa610a43565b3480156104c657600080fd5b506101b0600435610a49565b3480156104de57600080fd5b506104e761091f565b6040805160ff9092168252519081900360200190f35b34801561050957600080fd5b506102fa610adb565b34801561051e57600080fd5b506101b0610ae3565b34801561053357600080fd5b506101b06004803560248101910135610d93565b6101b0600160a060020a03600435166105a6565b34801561056757600080fd5b506101c7610e55565b34801561057c57600080fd5b506101b0600160a060020a0360043516610e5f565b34801561059d57600080fd5b506103d5610e82565b3460006105b38383610e91565b6105bc82610eb6565b6003549091506105d2908363ffffffff610ef316565b6003556105df8382610f06565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a36106318383610eb2565b610639610f10565b6106438383610eb2565b505050565b600081565b6000610657610f49565b8061066557506106656108f9565b905090565b60095460ff1681565b60408051808201909152601781527f515545535452412d574f524c442d464f4e444154494f4e000000000000000000602082015281565b600654600090600160a060020a031633146106c457600080fd5b5060005b8181101561064357600860008484848181106106e057fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff1916905582828281811061071657fe5b90506020020135600160a060020a0316600160a060020a03167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a26001016106c8565b600654600160a060020a0316331461077a57600080fd5b600160a060020a038116600081815260086020526040808220805460ff19169055517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9190a250565b60408051808201909152600381527f5157460000000000000000000000000000000000000000000000000000000000602082015281565b60025481565b60055490565b60075481565b600160a060020a031660009081526008602052604090205460ff1690565b60035481565b60045442101590565b60055481565b600654600160a060020a0316331461085657600080fd5b60065474010000000000000000000000000000000000000000900460ff161561087e57600080fd5b61088661064d565b151561089157600080fd5b610899610f51565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16006805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600754600354101590565b600154600160a060020a031681565b670de0b6b3a764000081565b601281565b600654600160a060020a0316331461093b57600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b73eb7b89b0a5a1fe000c684f5be34ae78672043bda81565b60045490565b600654600160a060020a031633146109c757600080fd5b600160a060020a038116600081815260086020526040808220805460ff19166001179055517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9190a250565b60065474010000000000000000000000000000000000000000900460ff1681565b600654600160a060020a031681565b60045481565b600654600160a060020a03163314610a6057600080fd5b6005544210610a6e57600080fd5b428111610a7a57600080fd5b6004548111610a8857600080fd5b6004546005546040805183815260208101859052808201939093526060830191909152517ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b79181900360800190a1600555565b635ce180e381565b610aeb6114a7565b610af36114a7565b610afb6114a7565b600654600090600160a060020a03163314610b1557600080fd5b60095460ff1615610b2557600080fd5b6009805460ff191660011790555050604080516020818101835273eb7b89b0a5a1fe000c684f5be34ae78672043bda8252825180820184526729a2241af62c000081528351918201909352635d5dbee2815290935090915060005b6001811015610d4757818160018110610b9557fe5b602002015167ffffffffffffffff161515610c6157600054600160a060020a03166340c10f19858360018110610bc757fe5b6020020151858460018110610bd857fe5b60200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c2f57600080fd5b505af1158015610c43573d6000803e3d6000fd5b505050506040513d6020811015610c5957600080fd5b50610d3f9050565b600054600160a060020a0316630bb2cd6b858360018110610c7e57fe5b6020020151858460018110610c8f57fe5b6020020151858560018110610ca057fe5b60200201516040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018381526020018267ffffffffffffffff1667ffffffffffffffff1681526020019350505050602060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050506040513d6020811015610d3c57600080fd5b50505b600101610b80565b610d6473eb7b89b0a5a1fe000c684f5be34ae78672043bda610e5f565b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050565b600654600090600160a060020a03163314610dad57600080fd5b5060005b8181101561064357600160086000858585818110610dcb57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff1916911515919091179055828282818110610e0857fe5b90506020020135600160a060020a0316600160a060020a03167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a2600101610db1565b600061066561064d565b600654600160a060020a03163314610e7657600080fd5b610e7f81611070565b50565b600054600160a060020a031681565b692a5a058fc295ed000000341115610ea857600080fd5b610eb282826110ee565b5050565b600080610ec283611121565b9050610eec670de0b6b3a7640000610ee0858463ffffffff61134e16565b9063ffffffff61137716565b9392505050565b81810182811015610f0057fe5b92915050565b610eb2828261138c565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610e7f573d6000803e3d6000fd5b600554421190565b610f59611435565b6000809054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505050506040513d6020811015610fd557600080fd5b50511515610fe257600080fd5b60008054604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273eb7b89b0a5a1fe000c684f5be34ae78672043bda60048201529051600160a060020a039092169263f2fde38b9260248084019382900301818387803b15801561105657600080fd5b505af115801561106a573d6000803e3d6000fd5b50505050565b600160a060020a038116151561108557600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040902054829060ff16151561111757600080fd5b6106438383611437565b60008061112c6114a7565b6111346114a7565b61113c6114a7565b6111446114a7565b61114c6114a7565b60008060006111596114c6565b6111616114c6565b6002546040805160208181018352662c68af0bb14000825282518082018452690fe1c215e8f838e00000815283518083018552635ce180e3815284518084018652635d5dbe9f8152855193840190955260648352949f50919d50909b509199509750955060009450845b600186101561128d576003548b87600181106111e357fe5b60200201511115801561120757508986600181106111fd57fe5b6020020151600354105b94504289876001811061121657fe5b602002015167ffffffffffffffff161115801561124c575087866001811061123a57fe5b602002015167ffffffffffffffff1642105b93508480156112585750835b15611282576103e887876001811061126c57fe5b60200201518d0281151561127c57fe5b048c019b505b6001909501946111cb565b60606040519081016040528068056bc75e2d63100000815260200168056bc75e2d631000008152602001678ac7230489e800008152509250606060405190810160405280605081526020016000815260200160328152509150600090505b600381101561133c5782816003811061130057fe5b60200201518e10611334576103e882826003811061131a57fe5b60200201518d0281151561132a57fe5b048c019b5061133c565b6001016112eb565b50999c9b505050505050505050505050565b600082151561135f57506000610f00565b5081810281838281151561136f57fe5b0414610f0057fe5b6000818381151561138457fe5b049392505050565b60008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216926340c10f1992604480820193602093909283900390910190829087803b1580156113fe57600080fd5b505af1158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b50511515610eb257600080fd5b565b6114418282611462565b600754600354611457908363ffffffff610ef316565b1115610eb257600080fd5b600454421015801561147657506005544211155b151561148157600080fd5b610eb28282600160a060020a038216151561149b57600080fd5b801515610eb257600080fd5b6020604051908101604052806001906020820280388339509192915050565b60606040519081016040528060039060208202803883395091929150505600a165627a7a723058202a610ab097707ab577f75fc2186cfa26ebb26a36bbcc7a67740b55885473637c0029000000000000000000000000766bd4b7588459124c738cf29b4d17816cbd8a60",
  "constructorArguments": "000000000000000000000000766bd4b7588459124c738cf29b4d17816cbd8a60"
}