{
  "address": "0x0e55c54249f25f70d519b7fb1c20e3331e7ba76d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NectarController",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-30\n*/\n\npragma solidity ^0.4.18;\n\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n/// CHANGE LOG: Will Harborne (Ethfinex)  - 07/10/2017\n/// `transferFrom` edited to allow infinite approvals\n/// New function `pledgeFees` for Controller to update balance owned by token holders\n/// New getter functions `totalPledgedFeesAt` and `totalPledgedFees`\n/// New Checkpoint[] totalPledgedFeesHistory;\n/// Addition of onBurn function to Controller, called when user tries to burn tokens\n/// Version 'MMT_0.2' bumped to 'EFX_0.1'\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n\n    /// @notice Notifies the controller about a token burn\n    /// @param _owner The address of the burner\n    /// @param _amount The amount to burn\n    /// @return False if the controller does not authorize the burn\n    function onBurn(address _owner, uint _amount) public returns(bool);\n}\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'EFX_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // Tracks the history of the `pledgedFees` belonging to token holders\n    Checkpoint[] totalPledgedFeesHistory; // in wei\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    uint constant MAX_UINT = 2**256 - 1;\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < MAX_UINT) {\n                require(allowed[_from][msg.sender] >= _amount);\n                allowed[_from][msg.sender] -= _amount;\n            }\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal {\n\n           if (_amount == 0) {\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n               return;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer throws\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n\n           require(previousBalanceFrom >= _amount);\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Query pledgedFees // in wei\n////////////////\n\n   /// @dev This function makes it easy to get the total pledged fees\n   /// @return The total number of fees belonging to token holders\n   function totalPledgedFees() public constant returns (uint) {\n       return totalPledgedFeesAt(block.number);\n   }\n\n   /// @notice Total amount of fees at a specific `_blockNumber`.\n   /// @param _blockNumber The block number when the totalPledgedFees is queried\n   /// @return The total amount of pledged fees at `_blockNumber`\n   function totalPledgedFeesAt(uint _blockNumber) public constant returns(uint) {\n\n       // These next few lines are used when the totalPledgedFees of the token is\n       //  requested before a check point was ever created for this token, it\n       //  requires that the `parentToken.totalPledgedFeesAt` be queried at the\n       //  genesis block for this token as that contains totalPledgedFees of this\n       //  token at this block number.\n       if ((totalPledgedFeesHistory.length == 0)\n           || (totalPledgedFeesHistory[0].fromBlock > _blockNumber)) {\n           if (address(parentToken) != 0) {\n               return parentToken.totalPledgedFeesAt(min(_blockNumber, parentSnapShotBlock));\n           } else {\n               return 0;\n           }\n\n       // This will return the expected totalPledgedFees during normal situations\n       } else {\n           return getValueAt(totalPledgedFeesHistory, _blockNumber);\n       }\n   }\n\n////////////////\n// Pledge Fees To Token Holders or Reduce Pledged Fees // in wei\n////////////////\n\n   /// @notice Pledges fees to the token holders, later to be claimed by burning\n   /// @param _value The amount sent to the vault by controller, reserved for token holders\n   function pledgeFees(uint _value) public onlyController returns (bool) {\n       uint curTotalFees = totalPledgedFees();\n       require(curTotalFees + _value >= curTotalFees); // Check for overflow\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees + _value);\n       return true;\n   }\n\n   /// @notice Reduces pledged fees to the token holders, i.e. during upgrade or token burning\n   /// @param _value The amount of pledged fees which are being distributed to token holders, reducing liability\n   function reducePledgedFees(uint _value) public onlyController returns (bool) {\n       uint curTotalFees = totalPledgedFees();\n       require(curTotalFees >= _value);\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees - _value);\n       return true;\n   }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () public payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n\n/*\n    Copyright 2017, Will Harborne (Ethfinex)\n*/\n\ncontract NEC is MiniMeToken {\n\n  function NEC(\n    address _tokenFactory,\n    address efxVaultWallet\n  ) public MiniMeToken(\n    _tokenFactory,\n    0x0,                    // no parent token\n    0,                      // no snapshot block number from parent\n    \"Ethfinex Nectar Token\", // Token name\n    18,                     // Decimals\n    \"NEC\",                  // Symbol\n    true                    // Enable transfers\n    ) {\n        generateTokens(efxVaultWallet, 1000000000000000000000000000);\n        enableBurning(false);\n    }\n\n    // Flag that determines if the token can be burned for rewards or not\n    bool public burningEnabled;\n\n\n////////////////\n// Enable token burning by users\n////////////////\n\n    function enableBurning(bool _burningEnabled) public onlyController {\n        burningEnabled = _burningEnabled;\n    }\n\n    function burnAndRetrieve(uint256 _tokensToBurn) public returns (bool success) {\n        require(burningEnabled);\n\n        var previousBalanceFrom = balanceOfAt(msg.sender, block.number);\n        if (previousBalanceFrom < _tokensToBurn) {\n            return false;\n        }\n\n        // Alerts the token controller of the burn function call\n        // If enabled, controller will distribute fees and destroy tokens\n        // Or any other logic chosen by controller\n        if (isContract(controller)) {\n            require(TokenController(controller).onBurn(msg.sender, _tokensToBurn));\n        }\n\n        Burned(msg.sender, _tokensToBurn);\n        return true;\n    }\n\n    event Burned(address indexed who, uint256 _amount);\n\n}\n\n\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n///  later changed\ncontract Owned {\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner { require (msg.sender == owner); _; }\n\n    address public owner;\n\n    /// @notice The Constructor assigns the message sender to be `owner`\n    function Owned() public { owner = msg.sender;}\n\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n    ///  an unowned neutral vault, however that cannot be undone\n    function changeOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\n/*\n    Copyright 2017, Will Harborne (Ethfinex)\n*/\n\n\n/// @title Whitelist contract - Only addresses which are registered as part of the market maker loyalty scheme can be whitelisted to earn and own Nectar tokens\ncontract Whitelist is Owned {\n\n  function Whitelist() {\n    admins[msg.sender] = true;\n  }\n\n  bool public listActive = true;\n\n  // Only users who are on the whitelist\n  function isRegistered(address _user) public constant returns (bool) {\n    if (!listActive) {\n      return true;\n    } else {\n      return isOnList[_user];\n    }\n  }\n\n  // Can add people to the whitelist\n  function isAdmin(address _admin) public view returns(bool) {\n    return admins[_admin];\n  }\n\n  /// @notice The owner is able to add new admin\n  /// @param _newAdmin Address of new admin\n  function addAdmin(address _newAdmin) public onlyOwner {\n    admins[_newAdmin] = true;\n  }\n\n  /// @notice Only owner is able to remove admin\n  /// @param _admin Address of current admin\n  function removeAdmin(address _admin) public onlyOwner {\n    admins[_admin] = false;\n  }\n\n  // Only authorised sources/contracts can contribute fees on behalf of makers to earn tokens\n  modifier authorised () {\n    require(isAuthorisedMaker[msg.sender]);\n    _;\n  }\n\n  modifier onlyAdmins() {\n    require(isAdmin(msg.sender));\n    _;\n  }\n\n  // These admins are able to add new users to the whitelist\n  mapping (address => bool) public admins;\n\n  // This is the whitelist of users who are registered to be able to own the tokens\n  mapping (address => bool) public isOnList;\n\n  // This is a more select list of a few contracts or addresses which can contribute fees on behalf of makers, to generate tokens\n  mapping (address => bool) public isAuthorisedMaker;\n\n\n  /// @dev register\n  /// @param newUsers - Array of users to add to the whitelist\n  function register(address[] newUsers) public onlyAdmins {\n    for (uint i = 0; i < newUsers.length; i++) {\n      isOnList[newUsers[i]] = true;\n    }\n  }\n\n  /// @dev deregister\n  /// @param bannedUsers - Array of users to remove from the whitelist\n  function deregister(address[] bannedUsers) public onlyAdmins {\n    for (uint i = 0; i < bannedUsers.length; i++) {\n      isOnList[bannedUsers[i]] = false;\n    }\n  }\n\n  /// @dev authoriseMaker\n  /// @param maker - Source to add to authorised contributors\n  function authoriseMaker(address maker) public onlyOwner {\n      isAuthorisedMaker[maker] = true;\n      // Also add any authorised Maker to the whitelist\n      address[] memory makers = new address[](1);\n      makers[0] = maker;\n      register(makers);\n  }\n\n  /// @dev deauthoriseMaker\n  /// @param maker - Source to remove from authorised contributors\n  function deauthoriseMaker(address maker) public onlyOwner {\n      isAuthorisedMaker[maker] = false;\n  }\n\n  function activateWhitelist(bool newSetting) public onlyOwner {\n      listActive = newSetting;\n  }\n\n  /////// Getters to allow the same whitelist to be used also by other contracts (including upgraded Controllers) ///////\n\n  function getRegistrationStatus(address _user) constant external returns (bool) {\n    return isOnList[_user];\n  }\n\n  function getAuthorisationStatus(address _maker) constant external returns (bool) {\n    return isAuthorisedMaker[_maker];\n  }\n\n  function getOwner() external constant returns (address) {\n    return owner;\n  }\n\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/*\n    Copyright 2018, Will Harborne (Ethfinex)\n    v2.0.0\n*/\n\ncontract NectarController is TokenController, Whitelist {\n    using SafeMath for uint256;\n\n    NEC public tokenContract;   // The new token for this Campaign\n    address public vaultAddress;        // The address to hold the funds donated\n\n    uint public periodLength = 30;       // Contribution windows length in days\n    uint public startTime = 1518523865;  // Time of window 1 opening\n\n    mapping (uint => uint) public windowFinalBlock;  // Final block before initialisation of new window\n\n\n    /// @dev There are several checks to make sure the parameters are acceptable\n    /// @param _vaultAddress The address that will store the donated funds\n    /// @param _tokenAddress Address of the token contract this contract controls\n\n    function NectarController(\n        address _vaultAddress,\n        address _tokenAddress\n    ) public {\n        require(_vaultAddress != 0);                // To prevent burning ETH\n        tokenContract = NEC(_tokenAddress); // The Deployed Token Contract\n        vaultAddress = _vaultAddress;\n        windowFinalBlock[0] = 5082733;\n        windowFinalBlock[1] = 5260326;\n    }\n\n    /// @dev The fallback function is called when ether is sent to the contract, it\n    /// simply calls `doTakerPayment()` . No tokens are created when takers contribute.\n    /// `_owner`. Payable is a required solidity modifier for functions to receive\n    /// ether, without this modifier functions will throw if ether is sent to them\n\n    function ()  public payable {\n        doTakerPayment();\n    }\n\n    function contributeForMakers(address _owner) public payable authorised {\n        doMakerPayment(_owner);\n    }\n\n/////////////////\n// TokenController interface\n/////////////////\n\n    /// @notice `proxyPayment()` allows the caller to send ether to the Campaign\n    /// but does not create tokens. This functions the same as the fallback function.\n    /// @param _owner Does not do anything, but preserved because of MiniMe standard function.\n    function proxyPayment(address _owner) public payable returns(bool) {\n        doTakerPayment();\n        return true;\n    }\n\n    /// @notice `proxyAccountingCreation()` allows owner to create tokens without sending ether via the contract\n    /// Creates tokens, pledging an amount of eth to token holders but not sending it through the contract to the vault\n    /// @param _owner The person who will have the created tokens\n    function proxyAccountingCreation(address _owner, uint _pledgedAmount, uint _tokensToCreate) public onlyOwner returns(bool) {\n        // Ethfinex is a hybrid decentralised exchange\n        // This function is only for use to create tokens on behalf of users of the centralised side of Ethfinex\n        // Because there are several different fee tiers (depending on trading volume) token creation rates may not always be proportional to fees contributed.\n        // For example if a user is trading with a 0.025% fee as opposed to the standard 0.1% the tokensToCreate the pledged fees will be lower than through using the standard contributeForMakers function\n        // Tokens to create must be calculated off-chain using the issuance equation and current parameters of this contract, multiplied depending on user's fee tier\n        doProxyAccounting(_owner, _pledgedAmount, _tokensToCreate);\n        return true;\n    }\n\n\n    /// @notice Notifies the controller about a transfer.\n    /// Transfers can only happen to whitelisted addresses\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n        if (isRegistered(_to) && isRegistered(_from)) {\n          return true;\n        } else {\n          return false;\n        }\n    }\n\n    /// @notice Notifies the controller about an approval, for this Campaign all\n    ///  approvals are allowed by default and no extra notifications are needed\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool)\n    {\n        if (isRegistered(_owner)) {\n          return true;\n        } else {\n          return false;\n        }\n    }\n\n    /// @notice Notifies the controller about a burn attempt. Initially all burns are disabled.\n    /// Upgraded Controllers in the future will allow token holders to claim the pledged ETH\n    /// @param _owner The address that calls `burn()`\n    /// @param _tokensToBurn The amount in the `burn()` call\n    /// @return False if the controller does not authorize the approval\n    function onBurn(address _owner, uint _tokensToBurn) public\n        returns(bool)\n    {\n        // This plugin can only be called by the token contract\n        require(msg.sender == address(tokenContract));\n\n        uint256 feeTotal = tokenContract.totalPledgedFees();\n        uint256 totalTokens = tokenContract.totalSupply();\n        uint256 feeValueOfTokens = (feeTotal.mul(_tokensToBurn)).div(totalTokens);\n\n        // Destroy the owners tokens prior to sending them the associated fees\n        require (tokenContract.destroyTokens(_owner, _tokensToBurn));\n        require (address(this).balance >= feeValueOfTokens);\n        require (_owner.send(feeValueOfTokens));\n\n        emit LogClaim(_owner, feeValueOfTokens);\n        return true;\n    }\n\n/////////////////\n// Maker and taker fee payments handling\n/////////////////\n\n\n    /// @dev `doMakerPayment()` is an internal function that sends the ether that this\n    ///  contract receives to the `vault` and creates tokens in the address of the\n    ///  `_owner`who the fee contribution was sent by\n    /// @param _owner The address that will hold the newly created tokens\n    function doMakerPayment(address _owner) internal {\n\n        require ((tokenContract.controller() != 0) && (msg.value != 0) );\n        tokenContract.pledgeFees(msg.value);\n        require (vaultAddress.send(msg.value));\n\n        // Set the block number which will be used to calculate issuance rate during\n        // this window if it has not already been set\n        if(windowFinalBlock[currentWindow()-1] == 0) {\n            windowFinalBlock[currentWindow()-1] = block.number -1;\n        }\n\n        uint256 newIssuance = getFeeToTokenConversion(msg.value);\n        require (tokenContract.generateTokens(_owner, newIssuance));\n\n        emit LogContributions (_owner, msg.value, true);\n        return;\n    }\n\n    /// @dev `doTakerPayment()` is an internal function that sends the ether that this\n    ///  contract receives to the `vault`, creating no tokens\n    function doTakerPayment() internal {\n\n        require ((tokenContract.controller() != 0) && (msg.value != 0) );\n        tokenContract.pledgeFees(msg.value);\n        require (vaultAddress.send(msg.value));\n\n        emit LogContributions (msg.sender, msg.value, false);\n        return;\n    }\n\n    /// @dev `doProxyAccounting()` is an internal function that creates tokens\n    /// for fees pledged by the owner\n    function doProxyAccounting(address _owner, uint _pledgedAmount, uint _tokensToCreate) internal {\n\n        require ((tokenContract.controller() != 0));\n        if(windowFinalBlock[currentWindow()-1] == 0) {\n            windowFinalBlock[currentWindow()-1] = block.number -1;\n        }\n        tokenContract.pledgeFees(_pledgedAmount);\n\n        if(_tokensToCreate > 0) {\n            uint256 newIssuance = getFeeToTokenConversion(_pledgedAmount);\n            require (tokenContract.generateTokens(_owner, _tokensToCreate));\n        }\n\n        emit LogContributions (msg.sender, _pledgedAmount, true);\n        return;\n    }\n\n    /// @notice `onlyOwner` changes the location that ether is sent\n    /// @param _newVaultAddress The address that will store the fees collected\n    function setVault(address _newVaultAddress) public onlyOwner {\n        vaultAddress = _newVaultAddress;\n    }\n\n    /// @notice `onlyOwner` can upgrade the controller contract\n    /// @param _newControllerAddress The address that will have the token control logic\n    function upgradeController(address _newControllerAddress) public onlyOwner {\n        tokenContract.changeController(_newControllerAddress);\n        emit UpgradedController(_newControllerAddress);\n    }\n\n/////////////////\n// Issuance reward related functions - upgraded by changing controller\n/////////////////\n\n    /// @dev getFeeToTokenConversion (v2) - Controller could be changed in the future to update this function\n    /// @param _contributed - The value of fees contributed during the window\n    function getFeeToTokenConversion(uint256 _contributed) public view returns (uint256) {\n\n        uint calculationBlock = windowFinalBlock[currentWindow()-1];\n        uint256 previousSupply = tokenContract.totalSupplyAt(calculationBlock);\n        uint256 initialSupply = tokenContract.totalSupplyAt(windowFinalBlock[0]);\n        // Rate = 1000 * (2-totalSupply/InitialSupply)^2\n        // This imposes a max possible supply of 2 billion\n        if (previousSupply >= 2 * initialSupply) {\n            return 0;\n        }\n        uint256 newTokens = _contributed.mul(1000).mul(bigInt(2)-(bigInt(previousSupply).div(initialSupply))).mul(bigInt(2)-(bigInt(previousSupply).div(initialSupply))).div(bigInt(1).mul(bigInt(1)));\n        return newTokens;\n    }\n\n    function bigInt(uint256 input) internal pure returns (uint256) {\n      return input.mul(10 ** 10);\n    }\n\n    function currentWindow() public constant returns (uint) {\n       return windowAt(block.timestamp);\n    }\n\n    function windowAt(uint timestamp) public constant returns (uint) {\n      return timestamp < startTime\n          ? 0\n          : timestamp.sub(startTime).div(periodLength * 1 days) + 1;\n    }\n\n    /// @dev topUpBalance - This is only used to increase this.balance in the case this controller is used to allow burning\n    function topUpBalance() public payable {\n        // Pledged fees could be sent here and used to payout users who burn their tokens\n        emit LogFeeTopUp(msg.value);\n    }\n\n    /// @dev evacuateToVault - This is only used to evacuate remaining to ether from this contract to the vault address\n    function evacuateToVault() public onlyOwner{\n        vaultAddress.transfer(address(this).balance);\n        emit LogFeeEvacuation(address(this).balance);\n    }\n\n    /// @dev enableBurning - Allows the owner to activate burning on the underlying token contract\n    function enableBurning(bool _burningEnabled) public onlyOwner{\n        tokenContract.enableBurning(_burningEnabled);\n    }\n\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    function claimTokens(address _token) public onlyOwner {\n\n        NEC token = NEC(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit ClaimedTokens(_token, owner, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n\n    event LogFeeTopUp(uint _amount);\n    event LogFeeEvacuation(uint _amount);\n    event LogContributions (address _user, uint _amount, bool _maker);\n    event LogClaim (address _user, uint _amount);\n\n    event UpgradedController (address newAddress);\n\n}",
  "bytecode": "60606040526000805460a060020a60ff02191674010000000000000000000000000000000000000000179055601e600655635a82d5d9600755341561004357600080fd5b604051604080611a55833981016040528080519190602001805160008054600160a060020a03338116600160a060020a031990921682178355908252600160208190526040909220805460ff19169092179091559092508316151590506100a957600080fd5b60048054600160a060020a03928316600160a060020a031991821617909155600580549390921692169190911790556008602052624d8e6d7f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7556001600052625044267fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f556119188061013d6000396000f3006060604052600436106101be5763ffffffff60e060020a6000350416630a5dc24d81146101c85780631785f53c146101fb578063198695551461021a57806324d7806c1461022d5780632b8b66671461024c5780632dff7a2b1461029b57806337aa7f91146102ba578063429b62e5146102d9578063430bf08a146102f857806343dc3ab21461032757806345a1b92c146103765780634714c0aa146103985780634a393149146103bd5780634cedfc0c146103e557806355a373d6146103fd5780636817031b14610410578063704802751461042f5780637330daac1461044e57806378e979251461046d5780637efff88714610492578063893d20e81461049a5780638da5cb5b146104ad578063a6f9dae1146104c0578063a8af4ff5146104df578063aba3d017146104fe578063b45dd87314610514578063b9c2ee821461052c578063ba0bafb41461054b578063c3c5a5471461055e578063cb22d3921461057d578063cdc62c0314610593578063d2ca2115146105a9578063da682aeb146105bc578063db25b407146105e4578063df8de3e7146105f7578063dfca8fd214610616578063e24a1d1e1461062a578063f48c305414610649575b6101c661065d565b005b34156101d357600080fd5b6101e7600160a060020a03600435166107bc565b604051901515815260200160405180910390f35b341561020657600080fd5b6101c6600160a060020a03600435166107de565b341561022557600080fd5b6101c661081a565b341561023857600080fd5b6101e7600160a060020a03600435166108ad565b341561025757600080fd5b6101c660046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506108cb95505050505050565b34156102a657600080fd5b6101c6600160a060020a036004351661093e565b34156102c557600080fd5b6101e7600160a060020a03600435166109d6565b34156102e457600080fd5b6101e7600160a060020a03600435166109eb565b341561030357600080fd5b61030b610a00565b604051600160a060020a03909116815260200160405180910390f35b341561033257600080fd5b6101c66004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610a0f95505050505050565b341561038157600080fd5b6101e7600160a060020a0360043516602435610a7e565b34156103a357600080fd5b6101e7600160a060020a0360043516602435604435610c87565b34156103c857600080fd5b6101e7600160a060020a0360043581169060243516604435610cb9565b34156103f057600080fd5b6101c66004351515610ce9565b341561040857600080fd5b61030b610d44565b341561041b57600080fd5b6101c6600160a060020a0360043516610d53565b341561043a57600080fd5b6101c6600160a060020a0360043516610d9d565b341561045957600080fd5b6101e7600160a060020a0360043516610ddf565b341561047857600080fd5b610480610df4565b60405190815260200160405180910390f35b6101c6610dfa565b34156104a557600080fd5b61030b610e2f565b34156104b857600080fd5b61030b610e3e565b34156104cb57600080fd5b6101c6600160a060020a0360043516610e4d565b34156104ea57600080fd5b6101e7600160a060020a0360043516610e97565b341561050957600080fd5b610480600435610eb5565b341561051f57600080fd5b6101c66004351515610ef1565b341561053757600080fd5b6101c6600160a060020a0360043516610f67565b341561055657600080fd5b610480611022565b341561056957600080fd5b6101e7600160a060020a0360043516611032565b341561058857600080fd5b610480600435611081565b341561059e57600080fd5b610480600435611093565b34156105b457600080fd5b61048061123e565b34156105c757600080fd5b6101e7600160a060020a0360043581169060243516604435611244565b34156105ef57600080fd5b6101e761124f565b341561060257600080fd5b6101c6600160a060020a0360043516611270565b6101c6600160a060020a03600435166113b2565b341561063557600080fd5b6101c6600160a060020a03600435166113e5565b6101e7600160a060020a0360043516611421565b600454600160a060020a031663f77c47916040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561069c57600080fd5b5af115156106a957600080fd5b5050506040518051600160a060020a031615801591506106c857503415155b15156106d357600080fd5b600454600160a060020a0316634fa7e3533460405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561071b57600080fd5b5af1151561072857600080fd5b50505060405180515050600554600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561076657600080fd5b7f07c7bae800cac64b1ccb6998a41bfc58b5da0447a2bcea4f8430983a566cd13c33346000604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a1565b600160a060020a03811660009081526003602052604090205460ff165b919050565b60005433600160a060020a039081169116146107f957600080fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b60005433600160a060020a0390811691161461083557600080fd5b600554600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561086e57600080fd5b7f8cf1c5c446b156b14402e4a2526dab237cb6defe71043cbb787f51ce6724b0db30600160a060020a03163160405190815260200160405180910390a1565b600160a060020a031660009081526001602052604090205460ff1690565b60006108d6336108ad565b15156108e157600080fd5b5060005b815181101561093a5760006002600084848151811061090057fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790556001016108e5565b5050565b6109466118da565b60005433600160a060020a0390811691161461096157600080fd5b600160a060020a03821660009081526003602052604090819020805460ff1916600190811790915590518059106109955750595b9080825280602002602001820160405250905081816000815181106109b657fe5b600160a060020a0390921660209283029091019091015261093a81610a0f565b60036020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b600554600160a060020a031681565b6000610a1a336108ad565b1515610a2557600080fd5b5060005b815181101561093a57600160026000848481518110610a4457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610a29565b60045460009081908190819033600160a060020a03908116911614610aa257600080fd5b600454600160a060020a031663311325bd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ae157600080fd5b5af11515610aee57600080fd5b5050506040518051600454909450600160a060020a031690506318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b3a57600080fd5b5af11515610b4757600080fd5b50505060405180519250610b73905082610b67858863ffffffff61143316565b9063ffffffff61146916565b600454909150600160a060020a031663d3ce77fe878760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610bcc57600080fd5b5af11515610bd957600080fd5b505050604051805190501515610bee57600080fd5b600160a060020a0330163181901015610c0657600080fd5b600160a060020a03861681156108fc0282604051600060405180830381858888f193505050501515610c3757600080fd5b7ffce6d5860f911bc27ece1365300332d2ddbe20c1adc46ee2eddd8f72c48053b28682604051600160a060020a03909216825260208201526040908101905180910390a150600195945050505050565b6000805433600160a060020a03908116911614610ca357600080fd5b610cae848484611480565b5060015b9392505050565b6000610cc483611032565b8015610cd45750610cd484611032565b15610ce157506001610cb2565b506000610cb2565b60005433600160a060020a03908116911614610d0457600080fd5b60008054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600454600160a060020a031681565b60005433600160a060020a03908116911614610d6e57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610db857600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b60026020526000908152604090205460ff1681565b60075481565b7f386c5a74f4b48b1c24abbf0aedacece36a9699f01ed737f0486ebfd9d549b14a3460405190815260200160405180910390a1565b600054600160a060020a031690565b600054600160a060020a031681565b60005433600160a060020a03908116911614610e6857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a031660009081526002602052604090205460ff1690565b60006007548210610ee857610ee06006546201518002610b676007548561167e90919063ffffffff16565b600101610eeb565b60005b92915050565b60005433600160a060020a03908116911614610f0c57600080fd5b600454600160a060020a031663b45dd8738260405160e060020a63ffffffff84160281529015156004820152602401600060405180830381600087803b1515610f5457600080fd5b5af11515610f6157600080fd5b50505050565b60005433600160a060020a03908116911614610f8257600080fd5b600454600160a060020a0316633cebb8238260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610fd257600080fd5b5af11515610fdf57600080fd5b5050507fbef2873659f3bf8b3c7c64380b7543be225c22ebb0f56a811c1a7209b00f822281604051600160a060020a03909116815260200160405180910390a150565b600061102d42610eb5565b905090565b6000805474010000000000000000000000000000000000000000900460ff16151561105f575060016107d9565b50600160a060020a03811660009081526002602052604090205460ff166107d9565b60086020526000908152604090205481565b60008060008060006008600060016110a9611022565b0381526020810191909152604090810160002054600454909550600160a060020a03169063981b24d09086905160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561110957600080fd5b5af1151561111657600080fd5b50505060405180516004546000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c754919550600160a060020a0316915063981b24d09060405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561119657600080fd5b5af115156111a357600080fd5b50505060405180519250506002820283106111c15760009450611235565b61122f6111e76111d16001611690565b6111db6001611690565b9063ffffffff61143316565b610b676111f785610b6788611690565b6112016002611690565b036111db61121287610b678a611690565b61121c6002611690565b036111db8c6103e863ffffffff61143316565b90508094505b50505050919050565b60065481565b6000610cd484611032565b60005474010000000000000000000000000000000000000000900460ff1681565b60008054819033600160a060020a0390811691161461128e57600080fd5b82915081600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112df57600080fd5b5af115156112ec57600080fd5b5050506040518051600054909250600160a060020a03808516925063a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561135257600080fd5b5af1151561135f57600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a3505050565b600160a060020a03331660009081526003602052604090205460ff1615156113d957600080fd5b6113e2816116a7565b50565b60005433600160a060020a0390811691161461140057600080fd5b600160a060020a03166000908152600360205260409020805460ff19169055565b600061142b61065d565b506001919050565b6000808315156114465760009150611462565b5082820282848281151561145657fe5b041461145e57fe5b8091505b5092915050565b600080828481151561147757fe5b04949350505050565b600454600090600160a060020a031663f77c47916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156114c257600080fd5b5af115156114cf57600080fd5b5050506040518051600160a060020a0316151590506114ed57600080fd5b6008600060016114fb611022565b03815260200190815260200160002054600014156115385760014303600860006001611525611022565b0381526020810191909152604001600020555b600454600160a060020a0316634fa7e3538460405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561158057600080fd5b5af1151561158d57600080fd5b505050604051805150506000821115611624576115a983611093565b600454909150600160a060020a031663827f32c0858460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561160257600080fd5b5af1151561160f57600080fd5b50505060405180519050151561162457600080fd5b7f07c7bae800cac64b1ccb6998a41bfc58b5da0447a2bcea4f8430983a566cd13c33846001604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a150505050565b60008282111561168a57fe5b50900390565b6000610eeb826402540be40063ffffffff61143316565b600454600090600160a060020a031663f77c47916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156116e957600080fd5b5af115156116f657600080fd5b5050506040518051600160a060020a0316158015915061171557503415155b151561172057600080fd5b600454600160a060020a0316634fa7e3533460405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561176857600080fd5b5af1151561177557600080fd5b50505060405180515050600554600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156117b357600080fd5b6008600060016117c1611022565b03815260200190815260200160002054600014156117fe57600143036008600060016117eb611022565b0381526020810191909152604001600020555b61180734611093565b600454909150600160a060020a031663827f32c0838360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561186057600080fd5b5af1151561186d57600080fd5b50505060405180519050151561188257600080fd5b7f07c7bae800cac64b1ccb6998a41bfc58b5da0447a2bcea4f8430983a566cd13c82346001604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a15050565b602060405190810160405260008152905600a165627a7a72305820c27e71dd74eb18701ea0bccbed65b4444ba3fc7a86ebc79a81c593ddff235f310029000000000000000000000000c6cde7c39eb2f0f0095f41570af89efc2c1ea828000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e",
  "constructorArguments": "000000000000000000000000c6cde7c39eb2f0f0095f41570af89efc2c1ea828000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e"
}