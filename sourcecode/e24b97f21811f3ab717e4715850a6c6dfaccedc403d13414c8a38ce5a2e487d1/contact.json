{
  "address": "0xef69369f6ed0b0e3551f45efa942b164fdff81ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WSPXCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-05\n*/\n\npragma solidity ^0.4.25;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    /**\n    * Protection against short address attack\n    */\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function changeOwner(address _newOwner) onlyOwner internal {\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    string public constant name = \"WebSpaceX\";\n    string public constant symbol = \"WSPX\";\n    uint8 public constant decimals = 18;\n    mapping(uint8 => uint8) public approveOwner;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint internal returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    /**\n     * Peterson's Law Protection\n     * Claim tokens\n     */\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n        MintableToken token = MintableToken(_token);\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n        emit Transfer(_token, owner, balance);\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    // address where funds are collected\n    address public wallet;\n    uint256 public hardWeiCap = 15830 ether;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n    uint256 public tokenAllocated;\n\n    constructor(address _wallet) public {\n        require(_wallet != address(0));\n        wallet = _wallet;\n    }\n}\n\n\ncontract WSPXCrowdsale is Ownable, Crowdsale, MintableToken {\n    using SafeMath for uint256;\n\n    uint256 public rate  = 312500;\n\n    mapping (address => uint256) public deposited;\n    mapping (address => bool) internal isRefferer;\n\n    uint256 public weiMinSale = 0.1 ether;\n\n    uint256 public constant INITIAL_SUPPLY = 9 * 10**9 * (10 ** uint256(decimals));\n\n    uint256 public fundForSale   = 6 * 10**9 * (10 ** uint256(decimals));\n    uint256 public    fundTeam   = 1 * 10**9 * (10 ** uint256(decimals));\n    uint256 public    fundBounty = 2 * 10**9 * (10 ** uint256(decimals));\n\n    address public addressFundTeam   = 0xA2434A8F6457fe7CF29AEa841cf3D0B0FE3217c8;\n    address public addressFundBounty = 0x8828c48DEc2764868aD3bBf7fE9e8aBE773E3064;\n\n    // 1 Jan - 15 Jan\n    uint256 startTimeIcoStage1 = 1546300800; // Tue, 01 Jan 2019 00:00:00 GMT\n    uint256 endTimeIcoStage1 =   1547596799; // Tue, 15 Jan 2019 23:59:59 GMT\n\n    // 16 Jan - 31 Jan\n    uint256 startTimeIcoStage2 = 1547596800; // Wed, 16 Jan 2019 00:00:00 GMT\n    uint256 endTimeIcoStage2   = 1548979199; // Thu, 31 Jan 2019 23:59:59 GMT\n\n    // 1 Feb - 15 Feb\n    uint256 startTimeIcoStage3 = 1548979200; // Fri, 01 Feb 2019 00:00:00 GMT\n    uint256 endTimeIcoStage3   = 1554076799; // Fri, 15 Feb 2019 23:59:59 GMT\n\n    uint256 limitStage1 =  2 * 10**9 * (10 ** uint256(decimals));\n    uint256 limitStage2 =  4 * 10**9 * (10 ** uint256(decimals));\n    uint256 limitStage3 =  6 * 10**9 * (10 ** uint256(decimals));\n\n    uint256 public countInvestor;\n\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenLimitReached(address indexed sender, uint256 tokenRaised, uint256 purchasedToken);\n    event CurrentPeriod(uint period);\n    event ChangeTime(address indexed owner, uint256 newValue, uint256 oldValue);\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\n    event ChangeRate(address indexed owner, uint256 newValue, uint256 oldValue);\n    event Burn(address indexed burner, uint256 value);\n    event HardCapReached();\n\n\n    constructor(address _owner, address _wallet) public\n    Crowdsale(_wallet)\n    {\n        require(_owner != address(0));\n        owner = _owner;\n        //owner = msg.sender; // for test's\n        transfersEnabled = true;\n        mintingFinished = false;\n        totalSupply = INITIAL_SUPPLY;\n        bool resultMintForOwner = mintForFund(owner);\n        require(resultMintForOwner);\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable public {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        weiRaised = weiRaised.add(weiAmount);\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n\n        emit TokenPurchase(_investor, weiAmount, tokens);\n        if (deposited[_investor] == 0) {\n            countInvestor = countInvestor.add(1);\n        }\n        deposit(_investor);\n        wallet.transfer(weiAmount);\n        return tokens;\n    }\n\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal returns (uint256) {\n        uint256 currentDate = now;\n        //currentDate = 1547114400; // Thu, 10 Jan 2019 10:00:00 GMT // for test's\n        uint currentPeriod = 0;\n        currentPeriod = getPeriod(currentDate);\n        uint256 amountOfTokens = 0;\n        if(currentPeriod > 0){\n            if(currentPeriod == 1){\n                amountOfTokens = _weiAmount.mul(rate).mul(130).div(100);\n                if (tokenAllocated.add(amountOfTokens) > limitStage1) {\n                    currentPeriod = currentPeriod.add(1);\n                    amountOfTokens = 0;\n                }\n            }\n            if(currentPeriod == 2){\n                amountOfTokens = _weiAmount.mul(rate).mul(120).div(100);\n                if (tokenAllocated.add(amountOfTokens) > limitStage2) {\n                    currentPeriod = currentPeriod.add(1);\n                    amountOfTokens = 0;\n                }\n            }\n            if(currentPeriod == 3){\n                amountOfTokens = _weiAmount.mul(rate).mul(110).div(100);\n                if (tokenAllocated.add(amountOfTokens) > limitStage3) {\n                    currentPeriod = 0;\n                    amountOfTokens = 0;\n                }\n            }\n        }\n        emit CurrentPeriod(currentPeriod);\n        return amountOfTokens;\n    }\n\n    function getPeriod(uint256 _currentDate) public view returns (uint) {\n        if(_currentDate < startTimeIcoStage1){\n            return 0;\n        }\n        if( startTimeIcoStage1 <= _currentDate && _currentDate <= endTimeIcoStage1){\n            return 1;\n        }\n        if( startTimeIcoStage2 <= _currentDate && _currentDate <= endTimeIcoStage2){\n            return 2;\n        }\n        if( startTimeIcoStage3 <= _currentDate && _currentDate <= endTimeIcoStage3){\n            return 3;\n        }\n        return 0;\n    }\n\n    function deposit(address investor) internal {\n        deposited[investor] = deposited[investor].add(msg.value);\n    }\n\n    function mintForFund(address _walletOwner) internal returns (bool result) {\n        result = false;\n        require(_walletOwner != address(0));\n        balances[_walletOwner] = balances[_walletOwner].add(fundForSale);\n        balances[addressFundTeam] = balances[addressFundTeam].add(fundTeam);\n        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\n        result = true;\n    }\n\n    function getDeposited(address _investor) external view returns (uint256){\n        return deposited[_investor];\n    }\n\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n        if (tokenAllocated.add(addTokens) > balances[owner]) {\n            emit TokenLimitReached(msg.sender, tokenAllocated, addTokens);\n            return 0;\n        }\n        if (weiRaised.add(_weiAmount) > hardWeiCap) {\n            emit HardCapReached();\n            return 0;\n        }\n        if (_weiAmount < weiMinSale) {\n            return 0;\n        }\n\n    return addTokens;\n    }\n\n    /**\n     * @dev owner burn Token.\n     * @param _value amount of burnt tokens\n     */\n    function ownerBurnToken(uint _value) public onlyOwner {\n        require(_value > 0);\n        require(_value <= balances[owner]);\n        require(_value <= totalSupply);\n\n        balances[owner] = balances[owner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n    }\n\n    /**\n     * @dev owner change time for startTimeIcoStage1\n     * @param _value new time value\n     */\n    function setStartTimeIcoStage1(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = startTimeIcoStage1;\n        startTimeIcoStage1 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n    /**\n     * @dev owner change time for endTimeIcoStage1\n     * @param _value new time value\n     */\n    function setEndTimeIcoStage1(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = endTimeIcoStage1;\n        endTimeIcoStage1 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n    /**\n     * @dev owner change time for startTimeIcoStage2\n     * @param _value new time value\n     */\n    function setStartTimeIcoStage2(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = startTimeIcoStage2;\n        startTimeIcoStage2 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n\n    /**\n     * @dev owner change time for endTimeIcoStage2\n     * @param _value new time value\n     */\n    function setEndTimeIcoStage2(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = endTimeIcoStage2;\n        endTimeIcoStage2 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n    /**\n * @dev owner change time for startTimeIcoStage3\n * @param _value new time value\n */\n    function setStartTimeIcoStage3(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = startTimeIcoStage3;\n        startTimeIcoStage3 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n\n    /**\n     * @dev owner change time for endTimeIcoStage3\n     * @param _value new time value\n     */\n    function setEndTimeIcoStage3(uint256 _value) external onlyOwner {\n        require(_value > 0);\n        uint256 _oldValue = endTimeIcoStage3;\n        endTimeIcoStage3 = _value;\n        emit ChangeTime(msg.sender, _value, _oldValue);\n    }\n\n    /**\n     * @dev owner change address of wallet for collecting ETH\n     * @param _newWallet new address of wallet\n     */\n    function setWallet(address _newWallet) external onlyOwner {\n        require(_newWallet != address(0));\n        address _oldWallet = wallet;\n        wallet = _newWallet;\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\n    }\n\n    /**\n     * @dev owner change price of tokens\n     * @param _newRate new price\n     */\n    function setRate(uint256 _newRate) external onlyOwner {\n        require(_newRate > 0);\n        uint256 _oldRate = rate;\n        rate = _newRate;\n        emit ChangeRate(msg.sender, _newRate, _oldRate);\n    }\n}",
  "bytecode": "608060405269035a25618910c19800006008556204c4b4600d5567016345785d8a00006010556b1363156bbee3016d7000000060118190556b033b2e3c9fd0803ce80000006012556b06765c793fa10079d0000000601381905560148054600160a060020a031990811673a2434a8f6457fe7cf29aea841cf3d0b0fe3217c81790915560158054909116738828c48dec2764868ad3bbf7fe9e8abe773e3064179055635c2aad80601655635c3e73ff601755635c3e7400601855635c538bff601955635c538c00601a55635ca1547f601b55601c556b0cecb8f27f4200f3a0000000601d55601e55348015620000f457600080fd5b5060405160408062001c65833981016040528051602090910151600081600160a060020a03811615156200012757600080fd5b60078054600160a060020a031916600160a060020a03928316179055831615156200015157600080fd5b60068054600160a060020a031916600160a060020a0385811691909117918290556003805460ff19908116600117909155600c805490911690556b1d14a0219e54822428000000600255620001b09116640100000000620001c8810204565b9050801515620001bf57600080fd5b505050620002e0565b6000600160a060020a0382161515620001e057600080fd5b601154600160a060020a0383166000908152600460205260409020546200021591640100000000620015d9620002c982021704565b600160a060020a0380841660009081526004602052604080822093909355601254601454909216815291909120546200025c91640100000000620015d9620002c982021704565b601454600160a060020a039081166000908152600460205260408082209390935560135460155490921681529190912054620002a691640100000000620015d9620002c982021704565b601554600160a060020a0316600090815260046020526040902055506001919050565b600082820183811015620002d957fe5b9392505050565b61197580620002f06000396000f30060806040526004361061020d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662c1e956811461021957806305d2035b1461024a57806306fdde0314610273578063095ea7b3146102fd57806318160ddd1461032157806323b872dd146103485780632c4e722e146103725780632f8b0250146103875780632ff2e9dc146103a1578063313ce567146103b657806334e8f247146103e157806334fcf437146103f95780634042b66f1461041157806345d503b214610426578063466bb3121461044157806348a3cbdf146104625780634b2c070614610477578063521eb2731461048f57806366188463146104a45780636b453fac146104c857806370a08231146104dd57806373fef35a146104fe5780637858f93a1461051657806378f7aeee1461052b5780638986ff32146105405780638da5cb5b1461055857806390762a8b1461056d578063916576c8146105855780639432c92c1461059a57806395d89b41146105b2578063a9059cbb146105c7578063bef97c87146105eb578063cb13cddb14610600578063ce9e6bb714610621578063d1e2eb5e14610639578063d73dd6231461064e578063dd62ed3e14610672578063deaa59df14610699578063df8de3e7146106ba578063e6512ea2146106db578063ec8ac4d8146106f0578063f4f6d6fe14610704578063fc38ce1914610719575b61021633610731565b50005b34801561022557600080fd5b5061022e61086f565b60408051600160a060020a039092168252519081900360200190f35b34801561025657600080fd5b5061025f61087e565b604080519115158252519081900360200190f35b34801561027f57600080fd5b50610288610887565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c25781810151838201526020016102aa565b50505050905090810190601f1680156102ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030957600080fd5b5061025f600160a060020a03600435166024356108be565b34801561032d57600080fd5b50610336610924565b60408051918252519081900360200190f35b34801561035457600080fd5b5061025f600160a060020a036004358116906024351660443561092a565b34801561037e57600080fd5b50610336610aaf565b34801561039357600080fd5b5061039f600435610ab5565b005b3480156103ad57600080fd5b50610336610b11565b3480156103c257600080fd5b506103cb610b21565b6040805160ff9092168252519081900360200190f35b3480156103ed57600080fd5b5061039f600435610b26565b34801561040557600080fd5b5061039f600435610b82565b34801561041d57600080fd5b50610336610bf0565b34801561043257600080fd5b506103cb60ff60043516610bf6565b34801561044d57600080fd5b50610336600160a060020a0360043516610c0b565b34801561046e57600080fd5b50610336610c2a565b34801561048357600080fd5b50610336600435610c30565b34801561049b57600080fd5b5061022e610caf565b3480156104b057600080fd5b5061025f600160a060020a0360043516602435610cbe565b3480156104d457600080fd5b50610336610dae565b3480156104e957600080fd5b50610336600160a060020a0360043516610db4565b34801561050a57600080fd5b5061039f600435610dcf565b34801561052257600080fd5b5061022e610e2b565b34801561053757600080fd5b50610336610e3a565b34801561054c57600080fd5b5061039f600435610e40565b34801561056457600080fd5b5061022e610e9c565b34801561057957600080fd5b5061039f600435610eab565b34801561059157600080fd5b50610336610f9a565b3480156105a657600080fd5b5061039f600435610fa0565b3480156105be57600080fd5b50610288610ffc565b3480156105d357600080fd5b5061025f600160a060020a0360043516602435611033565b3480156105f757600080fd5b5061025f611122565b34801561060c57600080fd5b50610336600160a060020a036004351661112b565b34801561062d57600080fd5b5061039f60043561113d565b34801561064557600080fd5b50610336611199565b34801561065a57600080fd5b5061025f600160a060020a036004351660243561119f565b34801561067e57600080fd5b50610336600160a060020a0360043581169060243516611238565b3480156106a557600080fd5b5061039f600160a060020a0360043516611273565b3480156106c657600080fd5b5061039f600160a060020a0360043516611303565b3480156106e757600080fd5b506103366114d7565b610336600160a060020a0360043516610731565b34801561071057600080fd5b506103366114dd565b34801561072557600080fd5b506103366004356114e3565b60008080600160a060020a038416151561074a57600080fd5b349150610756826114e3565b905080151561076457600080fd5b600954610777908363ffffffff6115d916565b600955600a5461078d908263ffffffff6115d916565b600a556006546107a99085908390600160a060020a03166115ef565b5060408051838152602081018390528151600160a060020a038716927fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f928290030190a2600160a060020a0384166000908152600e6020526040902054151561082457601f5461082090600163ffffffff6115d916565b601f555b61082d846116f8565b600754604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610867573d6000803e3d6000fd5b509392505050565b601554600160a060020a031681565b600c5460ff1681565b60408051808201909152600981527f5765625370616365580000000000000000000000000000000000000000000000602082015281565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025481565b600060033660641461093857fe5b600160a060020a038416151561094d57600080fd5b600160a060020a03851660009081526004602052604090205483111561097257600080fd5b600160a060020a03851660009081526005602090815260408083203384529091529020548311156109a257600080fd5b60035460ff1615156109b357600080fd5b600160a060020a0385166000908152600460205260409020546109dc908463ffffffff61173d16565b600160a060020a038087166000908152600460205260408082209390935590861681522054610a11908463ffffffff6115d916565b600160a060020a038086166000908152600460209081526040808320949094559188168152600582528281203382529091522054610a55908463ffffffff61173d16565b600160a060020a038087166000818152600560209081526040808320338452825291829020949094558051878152905192881693919260008051602061192a833981519152929181900390910190a3506001949350505050565b600d5481565b600654600090600160a060020a03163314610acf57600080fd5b60008211610adc57600080fd5b50601780549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b6b1d14a0219e5482242800000081565b601281565b600654600090600160a060020a03163314610b4057600080fd5b60008211610b4d57600080fd5b50601a80549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b600654600090600160a060020a03163314610b9c57600080fd5b60008211610ba957600080fd5b50600d8054908290556040805183815260208101839052815133927fe0745596cbd0c47ee258f65d49ccda5b6812de4997b868aebccfba913a526e9a928290030190a25050565b60095481565b600b6020526000908152604090205460ff1681565b600160a060020a0381166000908152600e60205260409020545b919050565b60125481565b6000601654821015610c4457506000610c25565b8160165411158015610c5857506017548211155b15610c6557506001610c25565b8160185411158015610c7957506019548211155b15610c8657506002610c25565b81601a5411158015610c9a5750601b548211155b15610ca757506003610c25565b506000919050565b600754600160a060020a031681565b336000908152600560209081526040808320600160a060020a038616845290915281205480831115610d1357336000908152600560209081526040808320600160a060020a0388168452909152812055610d48565b610d23818463ffffffff61173d16565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60085481565b600160a060020a031660009081526004602052604090205490565b600654600090600160a060020a03163314610de957600080fd5b60008211610df657600080fd5b50601880549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b601454600160a060020a031681565b600a5481565b600654600090600160a060020a03163314610e5a57600080fd5b60008211610e6757600080fd5b50601b80549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b600654600160a060020a031681565b600654600160a060020a03163314610ec257600080fd5b60008111610ecf57600080fd5b600654600160a060020a0316600090815260046020526040902054811115610ef657600080fd5b600254811115610f0557600080fd5b600654600160a060020a0316600090815260046020526040902054610f30908263ffffffff61173d16565b600654600160a060020a0316600090815260046020526040902055600254610f5e908263ffffffff61173d16565b60025560408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b60115481565b600654600090600160a060020a03163314610fba57600080fd5b60008211610fc757600080fd5b50601680549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b60408051808201909152600481527f5753505800000000000000000000000000000000000000000000000000000000602082015281565b600060023660441461104157fe5b600160a060020a038416151561105657600080fd5b3360009081526004602052604090205483111561107257600080fd5b60035460ff16151561108357600080fd5b336000908152600460205260409020546110a3908463ffffffff61173d16565b3360009081526004602052604080822092909255600160a060020a038616815220546110d5908463ffffffff6115d916565b600160a060020a03851660008181526004602090815260409182902093909355805186815290519192339260008051602061192a8339815191529281900390910190a35060019392505050565b60035460ff1681565b600e6020526000908152604090205481565b600654600090600160a060020a0316331461115757600080fd5b6000821161116457600080fd5b50601980549082905560408051838152602081018390528151339260008051602061190a833981519152928290030190a25050565b601f5481565b336000908152600560209081526040808320600160a060020a03861684529091528120546111d3908363ffffffff6115d916565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600060023660441461124657fe5b5050600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600090600160a060020a0316331461128d57600080fd5b600160a060020a03821615156112a257600080fd5b5060078054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1983168117909355604051911691829133907f670c5841a438bdba1d0b33bc57b8124beea019900cd34307f3f049821f7d0fed90600090a45050565b6006546000908190600160a060020a0316331461131f57600080fd5b600160a060020a038316151561136f57600654604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015611369573d6000803e3d6000fd5b506114d2565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156113d357600080fd5b505af11580156113e7573d6000803e3d6000fd5b505050506040513d60208110156113fd57600080fd5b5051600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561147157600080fd5b505af1158015611485573d6000803e3d6000fd5b505050506040513d602081101561149b57600080fd5b5050600654604080518381529051600160a060020a039283169286169160008051602061192a833981519152919081900360200190a35b505050565b60135481565b60105481565b6000806114ef8361174f565b600654600160a060020a0316600090815260046020526040902054600a5491925090611521908363ffffffff6115d916565b111561156e57600a546040805191825260208201839052805133927f953172f7e621d89577ba9acef9de1f817dcaee100ee28a6abcbfe8cdb43add6f92908290030190a2600091506115d3565b600854600954611584908563ffffffff6115d916565b11156115bc576040517f9788c3426de973293d591b3f0e14ad70f5569c28608c87c18153eabc2a157eed90600090a1600091506115d3565b6010548310156115cf57600091506115d3565b8091505b50919050565b6000828201838110156115e857fe5b9392505050565b600c5460009060ff161561160257600080fd5b600160a060020a03841660009081526004602052604090205461162b908463ffffffff6115d916565b600160a060020a038086166000908152600460205260408082209390935590841681522054611660908463ffffffff61173d16565b600160a060020a038084166000908152600460209081526040918290209390935580518681529051918716927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a283600160a060020a031682600160a060020a031660008051602061192a833981519152856040518082815260200191505060405180910390a35060019392505050565b600160a060020a0381166000908152600e6020526040902054611721903463ffffffff6115d916565b600160a060020a039091166000908152600e6020526040902055565b60008282111561174957fe5b50900390565b600042818061175d83610c30565b91506000905060008211156118935781600114156117e4576117ac60646117a06082611794600d548a6118ce90919063ffffffff16565b9063ffffffff6118ce16565b9063ffffffff6118f216565b9050601c546117c682600a546115d990919063ffffffff16565b11156117e4576117dd82600163ffffffff6115d916565b9150600090505b81600214156118445761180c60646117a06078611794600d548a6118ce90919063ffffffff16565b9050601d5461182682600a546115d990919063ffffffff16565b11156118445761183d82600163ffffffff6115d916565b9150600090505b81600314156118935761186c60646117a0606e611794600d548a6118ce90919063ffffffff16565b9050601e5461188682600a546115d990919063ffffffff16565b1115611893575060009050805b6040805183815290517f2e232fc2c310d706d2c00d04309dfb865ac701a3e4aa80af7e45333f97de5dca9181900360200190a1949350505050565b60008282028315806118ea57508284828115156118e757fe5b04145b15156115e857fe5b600080828481151561190057fe5b049493505050505600c3882a76627eabec771bbe2a39a6e0ddfe818774c840e4e662b7fe289075bb9dddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820198d14788811c42658586a724e9aa29c4a20225ccbd44d69be56e5911ad8ec8600290000000000000000000000001a9f3ac5069262e12140d4d4ddaf182312dfd2f3000000000000000000000000608ab6c548ad2667ca2bb14477a673cee7ede7d1",
  "constructorArguments": "0000000000000000000000001a9f3ac5069262e12140d4d4ddaf182312dfd2f3000000000000000000000000608ab6c548ad2667ca2bb14477a673cee7ede7d1"
}