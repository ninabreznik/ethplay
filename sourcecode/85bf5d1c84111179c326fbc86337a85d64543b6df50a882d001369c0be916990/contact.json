{
  "address": "0x96c833e43488c986676e9f6b3b8781812629bbb5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ammbr",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-18\n*/\n\npragma solidity 0.4.21;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\n        assert(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    function balanceOf(address who) constant public returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function allowance(address owner, address spender) constant public returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract Ownable {\n    address  owner;\n\n    function Ownable() public{\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public{\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping(address => uint256) balances;\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool){\n        assert(0 < _value);\n        assert(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the balance of. \n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) constant public returns (uint256 balance){\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n        uint256 _allowance = allowed[_from][msg.sender];\n        assert (balances[_from] >= _value);\n        assert (_allowance >= _value);\n        assert (_value > 0);\n        // assert ( balances[_to] + _value > balances[_to]);\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool){\n        // To change the approve amount you first have to reduce the addresses`\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\n        // already 0 to mitigate the race condition described here:\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining){\n        return allowed[_owner][_spender];\n    }\n}\n\n\ncontract  Ammbr is StandardToken, Ownable {\n    string public name = '';\n    string public symbol = '';\n    uint8 public  decimals = 0;\n    uint256 public maxMintBlock = 0;\n\n    event Mint(address indexed to, uint256 amount);\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner  public returns (bool){\n        assert(maxMintBlock == 0);\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        maxMintBlock = 1;\n        return true;\n    }\n\n    /**\n     * @dev Function is used to perform a multi-transfer operation. This could play a significant role in the Ammbr Mesh Routing protocol.\n     *  \n     * Mechanics:\n     * Sends tokens from Sender to destinations[0..n] the amount tokens[0..n]. Both arrays\n     * must have the same size, and must have a greater-than-zero length. Max array size is 127.\n     * \n     * IMPORTANT: ANTIPATTERN\n     * This function performs a loop over arrays. Unless executed in a controlled environment,\n     * it has the potential of failing due to gas running out. This is not dangerous, yet care\n     * must be taken to prevent quality being affected.\n     * \n     * @param destinations An array of destinations we would be sending tokens to\n     * @param tokens An array of tokens, sent to destinations (index is used for destination->token match)\n     */\n    function multiTransfer(address[] destinations, uint[] tokens) public returns (bool success){\n        // Two variables must match in length, and must contain elements\n        // Plus, a maximum of 127 transfers are supported\n        assert(destinations.length > 0);\n        assert(destinations.length < 128);\n        assert(destinations.length == tokens.length);\n        // Check total requested balance\n        uint8 i = 0;\n        uint totalTokensToTransfer = 0;\n        for (i = 0; i < destinations.length; i++){\n            assert(tokens[i] > 0);\n            totalTokensToTransfer += tokens[i];\n        }\n        // Do we have enough tokens in hand?\n        assert (balances[msg.sender] > totalTokensToTransfer);\n        // We have enough tokens, execute the transfer\n        balances[msg.sender] = balances[msg.sender].sub(totalTokensToTransfer);\n        for (i = 0; i < destinations.length; i++){\n            // Add the token to the intended destination\n            balances[destinations[i]] = balances[destinations[i]].add(tokens[i]);\n            // Call the event...\n            emit Transfer(msg.sender, destinations[i], tokens[i]);\n        }\n        return true;\n    }\n\n    function Ammbr(string _name , string _symbol , uint8 _decimals) public{\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destinations\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260206040519081016040526000815260049080516100269291602001906100ef565b5060206040519081016040526000815260059080516100499291602001906100ef565b506006805460ff191690556000600755341561006457600080fd5b604051610cc5380380610cc58339810160405280805182019190602001805182019190602001805160038054600160a060020a03191633600160a060020a03161790559150600490508380516100be9291602001906100ef565b5060058280516100d29291602001906100ef565b506006805460ff191660ff929092169190911790555061018a9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013057805160ff191683800117855561015d565b8280016001018555821561015d579182015b8281111561015d578251825591602001919060010190610142565b5061016992915061016d565b5090565b61018791905b808211156101695760008155600101610173565b90565b610b2c806101996000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd146101895780631e89d545146101ae57806323b872dd1461023d578063313ce5671461026557806340c10f191461028e57806370a08231146102b057806395d89b41146102cf5780639d96be58146102e2578063a9059cbb146102f5578063dd62ed3e14610317578063f2fde38b1461033c575b600080fd5b34156100d457600080fd5b6100dc61035d565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a03600435166024356103fb565b604051901515815260200160405180910390f35b341561019457600080fd5b61019c6104a1565b60405190815260200160405180910390f35b34156101b957600080fd5b6101756004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506104a795505050505050565b341561024857600080fd5b610175600160a060020a03600435811690602435166044356106bf565b341561027057600080fd5b610278610806565b60405160ff909116815260200160405180910390f35b341561029957600080fd5b610175600160a060020a036004351660243561080f565b34156102bb57600080fd5b61019c600160a060020a03600435166108d5565b34156102da57600080fd5b6100dc6108f0565b34156102ed57600080fd5b61019c61095b565b341561030057600080fd5b610175600160a060020a0360043516602435610961565b341561032257600080fd5b61019c600160a060020a0360043581169060243516610a4e565b341561034757600080fd5b61035b600160a060020a0360043516610a79565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103f35780601f106103c8576101008083540402835291602001916103f3565b820191906000526020600020905b8154815290600101906020018083116103d657829003601f168201915b505050505081565b600081158061042d5750600160a060020a03338116600090815260016020908152604080832093871683529290522054155b151561043857600080fd5b600160a060020a03338116600081815260016020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000806000808551116104b657fe5b60808551106104c157fe5b83518551146104cc57fe5b5060009050805b84518260ff161015610526576000848360ff16815181106104f057fe5b906020019060200201511161050157fe5b838260ff168151811061051057fe5b90602001906020020151600190920191016104d3565b600160a060020a03331660009081526002602052604090205481901161054857fe5b600160a060020a033316600090815260026020526040902054610571908263ffffffff610ad816565b600160a060020a03331660009081526002602052604081209190915591505b84518260ff1610156106b4576105fb848360ff16815181106105ae57fe5b9060200190602002015160026000888660ff16815181106105cb57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff610aea16565b60026000878560ff168151811061060e57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020558460ff83168151811061064157fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868560ff168151811061068e57fe5b9060200190602002015160405190815260200160405180910390a3600190910190610590565b506001949350505050565b600160a060020a038084166000818152600160209081526040808320339095168352938152838220549282526002905291822054839010156106fd57fe5b8281101561070757fe5b6000831161071157fe5b600160a060020a03841660009081526002602052604090205461073a908463ffffffff610aea16565b600160a060020a03808616600090815260026020526040808220939093559087168152205461076f908463ffffffff610ad816565b600160a060020a038616600090815260026020526040902055610798818463ffffffff610ad816565b600160a060020a03808716600081815260016020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065460ff1681565b60035460009033600160a060020a0390811691161461082d57600080fd5b6007541561083757fe5b60005461084a908363ffffffff610aea16565b6000908155600160a060020a038416815260026020526040902054610875908363ffffffff610aea16565b600160a060020a0384166000818152600260205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2506001600781905592915050565b600160a060020a031660009081526002602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103f35780601f106103c8576101008083540402835291602001916103f3565b60075481565b600081811061096c57fe5b600160a060020a0333166000908152600260205260409020548290101561098f57fe5b600160a060020a0333166000908152600260205260409020546109b8908363ffffffff610ad816565b600160a060020a0333811660009081526002602052604080822093909355908516815220546109ed908363ffffffff610aea16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a9457600080fd5b600160a060020a0381161515610aa957600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610ae457fe5b50900390565b600082820183811015610af957fe5b93925050505600a165627a7a723058208fd900d3bc33e6859847707df2dd9f76f05f038e60b36fcb78d2f7e418a8f4010029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005414d4d42520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414d520000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005414d4d42520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414d520000000000000000000000000000000000000000000000000000000000"
}