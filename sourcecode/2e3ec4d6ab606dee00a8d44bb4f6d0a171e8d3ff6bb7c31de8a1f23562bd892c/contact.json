{
  "address": "0xfa75b65e52a6cbc5503f45f4abba2c5df4688875",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Swytch Energy Token",
  "contractName": "SwytchToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-21\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    function Utils() {\n    }\n\n    // verifies that an amount is greater than zero\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n}\n\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken {\n\n    string public version = \"0.3\";\n\n    // =================================================================================================================\n    //                                      Members\n    // =================================================================================================================\n\n    bool public transfersEnabled = false;\n\n    // =================================================================================================================\n    //                                      Event\n    // =================================================================================================================\n\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\n    event NewSmartToken(address _token);\n    // triggered when the total supply is increased\n    event Issuance(uint256 _amount);\n    // triggered when the total supply is decreased\n    event Destruction(uint256 _amount);\n\n    // =================================================================================================================\n    //                                      Functions\n    // =================================================================================================================\n\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n\ncontract SmartToken is ISmartToken, Utils, Ownable, MintableToken {\n\n    string public standard = \"Token 0.1\";\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 0;\n    bool public transfersEnabled = false;\n    bool public destroyEnabled = false;\n\n    // allows execution only when transfers aren't disabled\n    modifier transfersAllowed {\n        assert(transfersEnabled);\n        _;\n    }\n\n    modifier canDestroy() {\n        require(destroyEnabled);\n        _;\n    }\n\n    function SmartToken(string _name, string _symbol, uint8 _decimals) public {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function setDestroyEnabled(bool _enable) public onlyOwner {\n        destroyEnabled = _enable;\n    }\n\n    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    *\n    */\n    //@Override\n    function disableTransfers(bool _disable) public onlyOwner {\n        transfersEnabled = !_disable;\n    }\n\n    //@Override\n    function issue(address _to, uint256 _amount) public transfersAllowed onlyOwner canMint validAddress(_to) notThis(_to) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        emit Issuance(_amount);\n        emit Transfer(this, _to, _amount);\n    }\n\n    //@Override\n    function destroy(address _from, uint256 _amount) public transfersAllowed canDestroy {\n        require(msg.sender == _from || msg.sender == owner);\n        balances[_from] = balances[_from].sub(_amount);\n        totalSupply_ = totalSupply_.sub(_amount);\n        emit Destruction(_amount);\n        emit Transfer(_from, 0x0, _amount);\n    }\n}\n\n\n\n\ncontract SwytchToken is SmartToken {\n\n    /**\n    * @dev Contract Name\n    */\n    string public name = \"Swytch Energy Token\";\n\n    /**\n    * @dev Contract Symbol\n    */\n    string public symbol = \"SET\";\n\n    /**\n    * @dev Number of decimals\n    */\n    uint8 public decimals = 18;\n\n    /**\n    * @dev Initial Supply\n    */\n    //    uint256 public INITIAL_SUPPLY = 2.03e8 * (10 ** uint256(decimals));\n    uint256 public initialSupply = 0;\n\n    uint256 public MAXIMUM_SUPPLY = 3.65e9 * (10 ** uint256(decimals));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    function SwytchToken()\n    public\n    SmartToken(name, symbol, decimals) {\n        owner = msg.sender;\n        totalSupply_ = initialSupply;\n        balances[msg.sender] = initialSupply;\n        emit Transfer(0x0, owner, initialSupply);\n        emit NewSmartToken(address(this));\n    }\n\n\n    /** Mintable overrides */\n    /**\n       * @dev Override function to mint tokens\n       * @param _to The address that will receive the minted tokens.\n       * @param _amount The amount of tokens to mint.\n       * @return A boolean that indicates if the operation was successful.\n       */\n    function mint(address _to, uint256 _amount) public transfersAllowed onlyOwner canMint returns (bool) {\n        var current = totalSupply();\n        assert(current.add(_amount) <= MAXIMUM_SUPPLY);\n        return super.mint(_to, _amount);\n    }\n\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        return super.finishMinting();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setDestroyEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NewSmartToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600360808190527f302e33000000000000000000000000000000000000000000000000000000000060a0908152620000409160009190620003f8565b506001805460ff191690556005805460a060020a60ff02191690556040805180820190915260098082527f546f6b656e20302e3100000000000000000000000000000000000000000000006020909201918252620000a191600691620003f8565b50604080516020810191829052600090819052620000c291600791620003f8565b50604080516020810191829052600090819052620000e391600891620003f8565b506009805462ffffff191690556040805180820190915260138082527f53777974636820456e6572677920546f6b656e0000000000000000000000000060209092019182526200013691600a91620003f8565b506040805180820190915260038082527f534554000000000000000000000000000000000000000000000000000000000060209092019182526200017d91600b91620003f8565b50600c8054601260ff1990911617908190556000600d5560ff16600a0a63d98e948002600e55348015620001b057600080fd5b50600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200023b5780601f106200020f576101008083540402835291602001916200023b565b820191906000526020600020905b8154815290600101906020018083116200021d57829003601f168201915b5050600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620002cd5780601f10620002a157610100808354040283529160200191620002cd565b820191906000526020600020905b815481529060010190602001808311620002af57829003601f168201915b5050600c5460058054600160a060020a03191633179055855160ff9091169350600010915050801562000301575060008251115b15156200030d57600080fd5b825162000322906007906020860190620003f8565b50815162000338906008906020850190620003f8565b506009805460ff191660ff9290921691909117905550506005805433600160a060020a031990911681178255600d5460038190556000918252600260209081526040808420839055935484519283529351600160a060020a03909416937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36040805130815290517ff4cd1f8571e8d9c97ffcb81558807ab73f9803d54de5da6a0420593c82a4a9f09181900360200190a16200049d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200043b57805160ff19168380011785556200046b565b828001600101855582156200046b579182015b828111156200046b5782518255916020019190600101906200044e565b50620004799291506200047d565b5090565b6200049a91905b8082111562000479576000815560010162000484565b90565b61118a80620004ad6000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461015857806306fdde0314610181578063095ea7b31461020b5780631608f18f1461022f57806318160ddd1461024b57806323b872dd14610272578063313ce5671461029c578063378dc3dc146102c75780633d0c4924146102dc57806340c10f19146102f15780635005ba471461031557806354fd4d501461032f5780635a3b7e4214610344578063661884631461035957806370a082311461037d5780637d64bcb41461039e578063867904b4146103b35780638da5cb5b146103d757806395d89b4114610408578063a24835d11461041d578063a9059cbb14610441578063bef97c8714610465578063d73dd6231461047a578063dd62ed3e1461049e578063decfe0d4146104c5578063f2fde38b146104da575b600080fd5b34801561016457600080fd5b5061016d6104fb565b604080519115158252519081900360200190f35b34801561018d57600080fd5b5061019661050b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d05781810151838201526020016101b8565b50505050905090810190601f1680156101fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021757600080fd5b5061016d600160a060020a0360043516602435610599565b34801561023b57600080fd5b5061024960043515156105ff565b005b34801561025757600080fd5b5061026061062d565b60408051918252519081900360200190f35b34801561027e57600080fd5b5061016d600160a060020a0360043581169060243516604435610633565b3480156102a857600080fd5b506102b161065c565b6040805160ff9092168252519081900360200190f35b3480156102d357600080fd5b50610260610665565b3480156102e857600080fd5b5061026061066b565b3480156102fd57600080fd5b5061016d600160a060020a0360043516602435610671565b34801561032157600080fd5b5061024960043515156106e7565b34801561033b57600080fd5b5061019661071a565b34801561035057600080fd5b50610196610775565b34801561036557600080fd5b5061016d600160a060020a03600435166024356107d0565b34801561038957600080fd5b50610260600160a060020a03600435166108c0565b3480156103aa57600080fd5b5061016d6108db565b3480156103bf57600080fd5b50610249600160a060020a0360043516602435610919565b3480156103e357600080fd5b506103ec610a4c565b60408051600160a060020a039092168252519081900360200190f35b34801561041457600080fd5b50610196610a5b565b34801561042957600080fd5b50610249600160a060020a0360043516602435610ab6565b34801561044d57600080fd5b5061016d600160a060020a0360043516602435610bca565b34801561047157600080fd5b5061016d610bf1565b34801561048657600080fd5b5061016d600160a060020a0360043516602435610bff565b3480156104aa57600080fd5b50610260600160a060020a0360043581169060243516610c98565b3480156104d157600080fd5b5061016d610cc3565b3480156104e657600080fd5b50610249600160a060020a0360043516610cd2565b60055460a060020a900460ff1681565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105915780601f1061056657610100808354040283529160200191610591565b820191906000526020600020905b81548152906001019060200180831161057457829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600554600160a060020a0316331461061657600080fd5b6009805461ff001916911561010002919091179055565b60035490565b600954600090610100900460ff16151561064957fe5b610654848484610d67565b949350505050565b600c5460ff1681565b600d5481565b600e5481565b6009546000908190610100900460ff16151561068957fe5b600554600160a060020a031633146106a057600080fd5b60055460a060020a900460ff16156106b757600080fd5b6106bf61062d565b600e549091506106d5828563ffffffff610ece16565b11156106dd57fe5b6106548484610edd565b600554600160a060020a031633146106fe57600080fd5b60098054911515620100000262ff000019909216919091179055565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105915780601f1061056657610100808354040283529160200191610591565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105915780601f1061056657610100808354040283529160200191610591565b336000908152600460209081526040808320600160a060020a03861684529091528120548083111561082557336000908152600460209081526040808320600160a060020a038816845290915281205561085a565b610835818463ffffffff610fd716565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600554600090600160a060020a031633146108f557600080fd5b60055460a060020a900460ff161561090c57600080fd5b610914610fe9565b905090565b600954610100900460ff16151561092c57fe5b600554600160a060020a0316331461094357600080fd5b60055460a060020a900460ff161561095a57600080fd5b81600160a060020a038116151561097057600080fd5b82600160a060020a03811630141561098757600080fd5b60035461099a908463ffffffff610ece16565b600355600160a060020a0384166000908152600260205260409020546109c6908463ffffffff610ece16565b600160a060020a03851660009081526002602090815260409182902092909255805185815290517f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3929181900390910190a1604080518481529051600160a060020a03861691309160008051602061113f8339815191529181900360200190a350505050565b600554600160a060020a031681565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105915780601f1061056657610100808354040283529160200191610591565b600954610100900460ff161515610ac957fe5b60095462010000900460ff161515610ae057600080fd5b33600160a060020a0383161480610b015750600554600160a060020a031633145b1515610b0c57600080fd5b600160a060020a038216600090815260026020526040902054610b35908263ffffffff610fd716565b600160a060020a038316600090815260026020526040902055600354610b61908263ffffffff610fd716565b6003556040805182815290517f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34539181900360200190a1604080518281529051600091600160a060020a0385169160008051602061113f8339815191529181900360200190a35050565b600954600090610100900460ff161515610be057fe5b610bea838361106d565b9392505050565b600954610100900460ff1681565b336000908152600460209081526040808320600160a060020a0386168452909152812054610c33908363ffffffff610ece16565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60095462010000900460ff1681565b600554600160a060020a03163314610ce957600080fd5b600160a060020a0381161515610cfe57600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610d7e57600080fd5b600160a060020a038416600090815260026020526040902054821115610da357600080fd5b600160a060020a0384166000908152600460209081526040808320338452909152902054821115610dd357600080fd5b600160a060020a038416600090815260026020526040902054610dfc908363ffffffff610fd716565b600160a060020a038086166000908152600260205260408082209390935590851681522054610e31908363ffffffff610ece16565b600160a060020a038085166000908152600260209081526040808320949094559187168152600482528281203382529091522054610e75908363ffffffff610fd716565b600160a060020a038086166000818152600460209081526040808320338452825291829020949094558051868152905192871693919260008051602061113f833981519152929181900390910190a35060019392505050565b600082820183811015610bea57fe5b600554600090600160a060020a03163314610ef757600080fd5b60055460a060020a900460ff1615610f0e57600080fd5b600354610f21908363ffffffff610ece16565b600355600160a060020a038316600090815260026020526040902054610f4d908363ffffffff610ece16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a0385169160009160008051602061113f8339815191529181900360200190a350600192915050565b600082821115610fe357fe5b50900390565b600554600090600160a060020a0316331461100357600080fd5b60055460a060020a900460ff161561101a57600080fd5b6005805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6000600160a060020a038316151561108457600080fd5b336000908152600260205260409020548211156110a057600080fd5b336000908152600260205260409020546110c0908363ffffffff610fd716565b3360009081526002602052604080822092909255600160a060020a038516815220546110f2908363ffffffff610ece16565b600160a060020a03841660008181526002602090815260409182902093909355805185815290519192339260008051602061113f8339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058200492abe8ce42b68ab6e4d4ac51237f20299ea627ad9d596e8f170e26bc418fec0029"
}