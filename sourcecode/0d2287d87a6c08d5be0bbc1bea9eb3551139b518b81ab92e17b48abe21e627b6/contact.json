{
  "address": "0x059d44edd2c15fd0050feb8cc97b3e93e5837506",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DecorumToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.17;\n\n// Sources: https://github.com/OpenZeppelin/openzeppelin-solidity\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title DecorumToken\n * @dev Actual ERC20 Project Decorum Token contract.\n */\ncontract DecorumToken is StandardToken, Pausable {\n  string public name = 'Project Decorum Coin';\n  string public symbol = 'PDC';\n  uint8 public constant decimals = 8;\n\n  /// @dev 50,000,000 tokens\n  uint256 public constant INITIAL_SUPPLY = 50000000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Transfer the initial supply to the sender (owner) of contract.\n   */\n  constructor() public {\n    balances[msg.sender] = INITIAL_SUPPLY;\n    totalSupply_ = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n\n    pause();\n  }\n\n  /**\n   * @dev Set a new name.\n   *\n   * @param _name Name.\n   */\n  function setName(string _name) public onlyOwner {\n    name = _name;\n  }\n\n  /**\n   * @dev Set a new symbol.\n   *\n   * @param _symbol Symbol.\n   */\n  function setSymbol(string _symbol) public onlyOwner {\n    symbol = _symbol;\n  }\n\n  /**\n   * @dev Make transferFrom pausable\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Call approve() for multiple spenders.\n   *\n   * @param _spenders The addresses which will spend the funds.\n   * @param _values The amounts of tokens to be spent.\n   */\n  function approveBatch(address[] _spenders, uint256[] _values) public onlyOwner returns (bool) {\n    for (uint i = 0; i < _spenders.length; i++) {\n      approve(_spenders[i], _values[i]);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Call increaseApproval() for multiple spenders.\n   *\n   * @param _spenders The addresses which will spend the funds.\n   * @param _addedValues The amounts of tokens to be added.\n   */\n  function increaseApprovalBatch(address[] _spenders, uint256[] _addedValues) public onlyOwner returns (bool) {\n    for (uint i = 0; i < _spenders.length; i++) {\n      increaseApproval(_spenders[i], _addedValues[i]);\n    }\n\n    return true;\n  }\n}",
  "bytecode": "6003805460a060020a60ff021916905560c0604052601460808190527f50726f6a656374204465636f72756d20436f696e00000000000000000000000060a0908152620000509160049190620001c6565b506040805180820190915260038082527f504443000000000000000000000000000000000000000000000000000000000060209092019182526200009791600591620001c6565b50348015620000a557600080fd5b5060038054600160a060020a03191633600160a060020a03169081179091556000818152602081815260408083206611c37937e08000908190556001819055815190815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3620001296401000000006200012f810204565b6200026b565b60035433600160a060020a039081169116146200014b57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156200017457600080fd5b6003805460a060020a60ff021916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020957805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002395782518255916020019190600101906200021c565b50620002479291506200024b565b5090565b6200026891905b8082111562000247576000815560010162000252565b90565b610f73806200027b6000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610121578063095ea7b3146101ab57806318160ddd146101e357806323b872dd1461020a5780632ff2e9dc14610234578063313ce567146102495780633f4ba83a146102745780635c975abb1461028b57806366188463146102a057806370a08231146102c45780638456cb59146102e55780638da5cb5b146102fa57806395d89b411461032b5780639affa42d14610340578063a9059cbb146103ce578063b84c8246146103f2578063c47f00271461044b578063c5c715e4146104a4578063d73dd62314610532578063dd62ed3e14610556578063f2fde38b1461057d575b600080fd5b34801561012d57600080fd5b5061013661059e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610170578181015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b757600080fd5b506101cf600160a060020a036004351660243561062c565b604080519115158252519081900360200190f35b3480156101ef57600080fd5b506101f8610696565b60408051918252519081900360200190f35b34801561021657600080fd5b506101cf600160a060020a036004358116906024351660443561069d565b34801561024057600080fd5b506101f86106ca565b34801561025557600080fd5b5061025e6106d5565b6040805160ff9092168252519081900360200190f35b34801561028057600080fd5b506102896106da565b005b34801561029757600080fd5b506101cf610756565b3480156102ac57600080fd5b506101cf600160a060020a0360043516602435610766565b3480156102d057600080fd5b506101f8600160a060020a036004351661085f565b3480156102f157600080fd5b5061028961087a565b34801561030657600080fd5b5061030f6108fb565b60408051600160a060020a039092168252519081900360200190f35b34801561033757600080fd5b5061013661090a565b34801561034c57600080fd5b50604080516020600480358082013583810280860185019096528085526101cf95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109659650505050505050565b3480156103da57600080fd5b506101cf600160a060020a03600435166024356109dd565b3480156103fe57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610289943694929360249392840191908190840183828082843750949750610ad69650505050505050565b34801561045757600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610289943694929360249392840191908190840183828082843750949750610b089650505050505050565b3480156104b057600080fd5b50604080516020600480358082013583810280860185019096528085526101cf95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b369650505050505050565b34801561053e57600080fd5b506101cf600160a060020a0360043516602435610ba4565b34801561056257600080fd5b506101f8600160a060020a0360043581169060243516610c46565b34801561058957600080fd5b50610289600160a060020a0360043516610c71565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106245780601f106105f957610100808354040283529160200191610624565b820191906000526020600020905b81548152906001019060200180831161060757829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6001545b90565b60035460009060a060020a900460ff16156106b757600080fd5b6106c2848484610d0a565b949350505050565b6611c37937e0800081565b600881565b60035433600160a060020a039081169116146106f557600080fd5b60035460a060020a900460ff16151561070d57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460a060020a900460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107c357600160a060020a0333811660009081526002602090815260408083209388168352929052908120556107fa565b6107d3818463ffffffff610e8a16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a0390811691161461089557600080fd5b60035460a060020a900460ff16156108ac57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106245780601f106105f957610100808354040283529160200191610624565b600354600090819033600160a060020a0390811691161461098557600080fd5b5060005b83518110156109d3576109ca84828151811015156109a357fe5b9060200190602002015184838151811015156109bb57fe5b90602001906020020151610ba4565b50600101610989565b5060019392505050565b6000600160a060020a03831615156109f457600080fd5b600160a060020a033316600090815260208190526040902054821115610a1957600080fd5b600160a060020a033316600090815260208190526040902054610a42908363ffffffff610e8a16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610a77908363ffffffff610e9c16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60035433600160a060020a03908116911614610af157600080fd5b8051610b04906005906020840190610eaf565b5050565b60035433600160a060020a03908116911614610b2357600080fd5b8051610b04906004906020840190610eaf565b600354600090819033600160a060020a03908116911614610b5657600080fd5b5060005b83518110156109d357610b9b8482815181101515610b7457fe5b906020019060200201518483815181101515610b8c57fe5b9060200190602002015161062c565b50600101610b5a565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bdc908363ffffffff610e9c16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610c8c57600080fd5b600160a060020a0381161515610ca157600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610d2157600080fd5b600160a060020a038416600090815260208190526040902054821115610d4657600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610d7957600080fd5b600160a060020a038416600090815260208190526040902054610da2908363ffffffff610e8a16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610dd7908363ffffffff610e9c16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610e1d908363ffffffff610e8a16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610e9657fe5b50900390565b81810182811015610ea957fe5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef057805160ff1916838001178555610f1d565b82800160010185558215610f1d579182015b82811115610f1d578251825591602001919060010190610f02565b50610f29929150610f2d565b5090565b61069a91905b80821115610f295760008155600101610f335600a165627a7a72305820699602d7a34a6b3e8c0ce597ba4e39b5fb99bfba9327e0a72585b8eec79e17c10029"
}