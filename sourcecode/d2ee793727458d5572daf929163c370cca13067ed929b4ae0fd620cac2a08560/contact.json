{
  "address": "0x13601888f649c96383812ec45c608b4e7da5e899",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BablosToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract BablosTokenInterface is ERC20 {\n  bool public frozen;\n  function burn(uint256 _value) public;\n  function setSale(address _sale) public;\n  function thaw() external;\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract DividendInterface {\n  function putProfit() public payable;\n  function dividendBalanceOf(address _account) public view returns (uint256);\n  function hasDividends() public view returns (bool);\n  function claimDividends() public returns (uint256);\n  function claimedDividendsOf(address _account) public view returns (uint256);\n  function saveUnclaimedDividends(address _account) public;\n}\n\ncontract BasicDividendToken is StandardToken, Ownable {\n  using SafeMath for uint256;\n\n  DividendInterface public dividends;\n\n  /**\n  * @dev set dividend contract\n  * @param _dividends The dividend contract address\n  */\n  function setDividends(DividendInterface _dividends) public onlyOwner {\n    dividends = _dividends;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    if (dividends != address(0) && dividends.hasDividends()) {\n      dividends.saveUnclaimedDividends(msg.sender);\n      dividends.saveUnclaimedDividends(_to);\n    }\n\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    if (dividends != address(0) && dividends.hasDividends()) {\n      dividends.saveUnclaimedDividends(_from);\n      dividends.saveUnclaimedDividends(_to);\n    }\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n}\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint256 public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public pure returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n}\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken {\n  using SafeMath for uint256;\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can begun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  constructor (address _upgradeMaster) public {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n    require(value > 0);\n    require(balances[msg.sender] >= value);\n    UpgradeState state = getUpgradeState();\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n    \n    balances[msg.sender] = balances[msg.sender].sub(value);\n    // Take tokens out from circulation\n    totalSupply_ = totalSupply_.sub(value);\n    totalUpgraded = totalUpgraded.add(value);\n\n    // Upgrade agent reissues the tokens\n    upgradeAgent.upgradeFrom(msg.sender, value);\n    emit Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n    require(agent != address(0));\n    require(canUpgrade());\n    // Only a master can designate the next agent\n    require(msg.sender == upgradeMaster);\n    // Upgrade has already begun for an agent\n    require(getUpgradeState() != UpgradeState.Upgrading);\n\n    upgradeAgent = UpgradeAgent(agent);\n\n    // Bad interface\n    require(upgradeAgent.isUpgradeAgent());\n    // Make sure that token supplies match in source and target\n    require(upgradeAgent.originalSupply() == totalSupply_);\n\n    emit UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public view returns(UpgradeState) {\n    if (!canUpgrade()) {\n      return UpgradeState.NotAllowed;\n    } else if (upgradeAgent == address(0)) { \n      return UpgradeState.WaitingForAgent; \n    } else if (totalUpgraded == 0) {\n      return UpgradeState.ReadyToUpgrade;\n    }\n    return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n    require(master != address(0));\n    require(msg.sender == upgradeMaster);\n    upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public pure returns(bool) {\n    return true;\n  }\n}\n\ncontract BablosToken is BablosTokenInterface, BasicDividendToken, UpgradeableToken, DetailedERC20, BurnableToken, Pausable {\n  using SafeMath for uint256;\n\n  /// @notice set of sale account which can freeze tokens\n  address public sale;\n\n  /// @notice when true - all tokens are frozen and only sales or contract owner can move their tokens\n  ///         when false - all tokens are unfrozen and can be moved by their owners\n  bool public frozen = true;\n\n  /// @dev makes transfer possible if tokens are unfrozen OR if the caller is a sale account\n  modifier saleOrUnfrozen() {\n    require((frozen == false) || msg.sender == sale || msg.sender == owner);\n    _;\n  }\n\n  /// @dev allowance to call method only if the caller is a sale account\n  modifier onlySale() {\n    require(msg.sender == sale);\n    _;\n  }\n\n  constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) \n      public \n      UpgradeableToken(msg.sender)\n      DetailedERC20(_name, _symbol, _decimals) \n  {\n    totalSupply_ = _totalSupply;\n    balances[msg.sender] = totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value)\n      public \n      whenNotPaused \n      saleOrUnfrozen\n      returns (bool) \n  {\n    super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n      public\n      whenNotPaused\n      saleOrUnfrozen\n      returns (bool) \n  {\n    super.transferFrom(_from, _to, _value);\n  }\n\n  function setSale(address _sale) public onlyOwner {\n    frozen = true;\n    sale = _sale;\n  }\n\n  /// @notice Make transfer of tokens available to everyone\n  function thaw() external onlySale {\n    frozen = false;\n  }\n}",
  "bytecode": "6080604052600b805461ff0060b060020a60ff020119167601000000000000000000000000000000000000000000001790553480156200003e57600080fd5b5060405162001a6238038062001a62833981016040908152815160208084015192840151606085015160048054600160a060020a033316600160a060020a03199182168117909255600680549091169091179055928501805190959490940193909291859185918591620000b991600991908601906200010e565b508151620000cf90600a9060208501906200010e565b50600b805460ff191660ff929092169190911790555050600281905533600160a060020a031660009081526001602052604090205550620001b3915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015157805160ff191683800117855562000181565b8280016001018555821562000181579182015b828111156200018157825182559160200191906001019062000164565b506200018f92915062000193565b5090565b620001b091905b808211156200018f57600081556001016200019a565b90565b61189f80620001c36000396000f30060806040526004361061017c5763ffffffff60e060020a600035041663054f7d9c811461018157806306fdde03146101aa578063095ea7b31461023457806318160ddd1461025857806323b872dd1461027f578063313ce567146102a957806335d97405146102d457806336af50fd146103055780633f4ba83a1461032857806342966c681461033d57806345977d03146103555780635920375c1461036d5780635c975abb146103825780635de4ccb014610397578063600440cb146103ac57806366188463146103c15780636ad1fe02146103e557806370a08231146103fa578063715018a61461041b5780638444b391146104305780638456cb59146104695780638da5cb5b1461047e57806395d89b41146104935780639738968c146104a85780639e9188ea146104bd578063a9059cbb146104de578063c752ff6214610502578063d73dd62314610517578063d7e7088a1461053b578063dd62ed3e1461055c578063f2fde38b14610583578063ffeb7d75146105a4575b600080fd5b34801561018d57600080fd5b506101966105c5565b604080519115158252519081900360200190f35b3480156101b657600080fd5b506101bf6105d5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f95781810151838201526020016101e1565b50505050905090810190601f1680156102265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024057600080fd5b50610196600160a060020a0360043516602435610663565b34801561026457600080fd5b5061026d6106cd565b60408051918252519081900360200190f35b34801561028b57600080fd5b50610196600160a060020a03600435811690602435166044356106d4565b3480156102b557600080fd5b506102be610750565b6040805160ff9092168252519081900360200190f35b3480156102e057600080fd5b506102e9610759565b60408051600160a060020a039092168252519081900360200190f35b34801561031157600080fd5b50610326600160a060020a0360043516610768565b005b34801561033457600080fd5b506103266107dd565b34801561034957600080fd5b50610326600435610844565b34801561036157600080fd5b50610326600435610851565b34801561037957600080fd5b506103266109fe565b34801561038e57600080fd5b50610196610a41565b3480156103a357600080fd5b506102e9610a4f565b3480156103b857600080fd5b506102e9610a5e565b3480156103cd57600080fd5b50610196600160a060020a0360043516602435610a6d565b3480156103f157600080fd5b506102e9610b68565b34801561040657600080fd5b5061026d600160a060020a0360043516610b7d565b34801561042757600080fd5b50610326610b98565b34801561043c57600080fd5b50610445610c0a565b6040518082600481111561045557fe5b60ff16815260200191505060405180910390f35b34801561047557600080fd5b50610326610c53565b34801561048a57600080fd5b506102e9610cbd565b34801561049f57600080fd5b506101bf610ccc565b3480156104b457600080fd5b50610196610d27565b3480156104c957600080fd5b50610326600160a060020a0360043516610d2c565b3480156104ea57600080fd5b50610196600160a060020a0360043516602435610d76565b34801561050e57600080fd5b5061026d610de9565b34801561052357600080fd5b50610196600160a060020a0360043516602435610def565b34801561054757600080fd5b50610326600160a060020a0360043516610e91565b34801561056857600080fd5b5061026d600160a060020a036004358116906024351661107d565b34801561058f57600080fd5b50610326600160a060020a03600435166110a8565b3480156105b057600080fd5b50610326600160a060020a03600435166110cc565b600b5460b060020a900460ff1681565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561065b5780601f106106305761010080835404028352916020019161065b565b820191906000526020600020905b81548152906001019060200180831161063e57829003601f168201915b505050505081565b600160a060020a03338116600081815260036020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6002545b90565b600b54600090610100900460ff16156106ec57600080fd5b600b5460b060020a900460ff1615806107195750600b5433600160a060020a039081166201000090920416145b80610732575060045433600160a060020a039081169116145b151561073d57600080fd5b61074884848461112b565b509392505050565b600b5460ff1681565b600554600160a060020a031681565b60045433600160a060020a0390811691161461078357600080fd5b600b8054600160a060020a03909216620100000275ffffffffffffffffffffffffffffffffffffffff00001976ff000000000000000000000000000000000000000000001990931660b060020a1792909216919091179055565b60045433600160a060020a039081169116146107f857600080fd5b600b54610100900460ff16151561080e57600080fd5b600b805461ff00191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b61084e338261141a565b50565b600080821161085f57600080fd5b600160a060020a03331660009081526001602052604090205482111561088457600080fd5b61088c610c0a565b9050600381600481111561089c57fe5b14806108b3575060048160048111156108b157fe5b145b15156108be57600080fd5b600160a060020a0333166000908152600160205260409020546108e7908363ffffffff61151b16565b600160a060020a033316600090815260016020526040902055600254610913908363ffffffff61151b16565b600255600854610929908363ffffffff61152d16565b600855600754604080517f753e88e5000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152602482018690529151919092169163753e88e591604480830192600092919082900301818387803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b5050600754604080518681529051600160a060020a0392831694503390921692507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b600b5433600160a060020a03908116620100009092041614610a1f57600080fd5b600b805476ff0000000000000000000000000000000000000000000019169055565b600b54610100900460ff1681565b600754600160a060020a031681565b600654600160a060020a031681565b600160a060020a03338116600090815260036020908152604080832093861683529290529081205480831115610aca57600160a060020a033381166000908152600360209081526040808320938816835292905290812055610b01565b610ada818463ffffffff61151b16565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3600191505b5092915050565b600b54620100009004600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b60045433600160a060020a03908116911614610bb357600080fd5b600454604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26004805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610c14610d27565b1515610c22575060016106d1565b600754600160a060020a03161515610c3c575060026106d1565b6008541515610c4d575060036106d1565b50600490565b60045433600160a060020a03908116911614610c6e57600080fd5b600b54610100900460ff1615610c8357600080fd5b600b805461ff0019166101001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600454600160a060020a031681565b600a805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561065b5780601f106106305761010080835404028352916020019161065b565b600190565b60045433600160a060020a03908116911614610d4757600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b54600090610100900460ff1615610d8e57600080fd5b600b5460b060020a900460ff161580610dbb5750600b5433600160a060020a039081166201000090920416145b80610dd4575060045433600160a060020a039081169116145b1515610ddf57600080fd5b610b618383611540565b60085481565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610e27908363ffffffff61152d16565b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a0381161515610ea657600080fd5b610eae610d27565b1515610eb957600080fd5b60065433600160a060020a03908116911614610ed457600080fd5b6004610ede610c0a565b6004811115610ee957fe5b1415610ef457600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055604080517f61d3d7a6000000000000000000000000000000000000000000000000000000008152905192909116916361d3d7a6916004808201926020929091908290030181600087803b158015610f7857600080fd5b505af1158015610f8c573d6000803e3d6000fd5b505050506040513d6020811015610fa257600080fd5b50511515610faf57600080fd5b600254600760009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b505050506040513d602081101561102f57600080fd5b50511461103b57600080fd5b60075460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a150565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60045433600160a060020a039081169116146110c357600080fd5b61084e816116fa565b600160a060020a03811615156110e157600080fd5b60065433600160a060020a039081169116146110fc57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561114257600080fd5b600160a060020a03841660009081526001602052604090205482111561116757600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352929052205482111561119a57600080fd5b600554600160a060020a03161580159061122f5750600560009054906101000a9004600160a060020a0316600160a060020a0316631dc9bb486040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561120257600080fd5b505af1158015611216573d6000803e3d6000fd5b505050506040513d602081101561122c57600080fd5b50515b15611307576005546040805160e060020a63233bdd69028152600160a060020a0387811660048301529151919092169163233bdd6991602480830192600092919082900301818387803b15801561128557600080fd5b505af1158015611299573d6000803e3d6000fd5b50506005546040805160e060020a63233bdd69028152600160a060020a038881166004830152915191909216935063233bdd699250602480830192600092919082900301818387803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b505050505b600160a060020a038416600090815260016020526040902054611330908363ffffffff61151b16565b600160a060020a038086166000908152600160205260408082209390935590851681522054611365908363ffffffff61152d16565b600160a060020a038085166000908152600160209081526040808320949094558783168252600381528382203390931682529190915220546113ad908363ffffffff61151b16565b600160a060020a038086166000818152600360209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a03821660009081526001602052604090205481111561143f57600080fd5b600160a060020a038216600090815260016020526040902054611468908263ffffffff61151b16565b600160a060020a038316600090815260016020526040902055600254611494908263ffffffff61151b16565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008282111561152757fe5b50900390565b8181018281101561153a57fe5b92915050565b6000600160a060020a038316151561155757600080fd5b600160a060020a03331660009081526001602052604090205482111561157c57600080fd5b600554600160a060020a0316158015906116115750600560009054906101000a9004600160a060020a0316600160a060020a0316631dc9bb486040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050506040513d602081101561160e57600080fd5b50515b156116e9576005546040805160e060020a63233bdd69028152600160a060020a0333811660048301529151919092169163233bdd6991602480830192600092919082900301818387803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b50506005546040805160e060020a63233bdd69028152600160a060020a038881166004830152915191909216935063233bdd699250602480830192600092919082900301818387803b1580156116d057600080fd5b505af11580156116e4573d6000803e3d6000fd5b505050505b6116f38383611778565b9392505050565b600160a060020a038116151561170f57600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561178f57600080fd5b600160a060020a0333166000908152600160205260409020548211156117b457600080fd5b600160a060020a0333166000908152600160205260409020546117dd908363ffffffff61151b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611812908363ffffffff61152d16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001929150505600a165627a7a72305820ce8f8a1ac1d52b877235c7f43a533ddd63867e31625fe2b62066077fc6c58e0c0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000000c4261626c6f7320546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064241424c4f530000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000000c4261626c6f7320546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064241424c4f530000000000000000000000000000000000000000000000000000"
}