{
  "address": "0xd28130c3f252ae8a7931608d1820341685c5ae6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RewardsMinter",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n    return _a >= _b ? _a : _b;\n  }\n\n  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n    return _a < _b ? _a : _b;\n  }\n\n  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a >= _b ? _a : _b;\n  }\n\n  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a < _b ? _a : _b;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC223 compatible tokens\n  * @param _from address The address that is transferring the tokens\n  * @param _value uint256 the amount of the specified token\n  * @param _data Bytes The data passed from the caller.\n  */\n  function tokenFallback(\n    address _from,\n    uint256 _value,\n    bytes _data\n  )\n    external\n    pure\n  {\n    _from;\n    _value;\n    _data;\n    revert();\n  }\n\n}\n\n\n/**\n * @title Contracts that should not own Contracts\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n * of this contract to reclaim ownership of the contracts.\n */\ncontract HasNoContracts is Ownable {\n\n  /**\n   * @dev Reclaim ownership of Ownable contracts\n   * @param _contractAddr The address of the Ownable to be reclaimed.\n   */\n  function reclaimContract(address _contractAddr) external onlyOwner {\n    Ownable contractInst = Ownable(_contractAddr);\n    contractInst.transferOwnership(owner);\n  }\n}\n\n/**\n * @title Base contract for contracts that should not own things.\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n * Owned contracts. See respective base contracts for details.\n */\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n}\n\n/**\n * @title Pausable Token\n * @dev Token that can be paused and unpaused. Only whitelisted addresses can transfer when paused\n */\ncontract PausableToken is StandardToken, Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n    mapping(address => bool) public whitelist;\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner public {\n        require(!paused);\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner public {\n        require(paused);\n        paused = false;\n        emit Unpause();\n    }\n    /**\n     * @notice add/remove whitelisted addresses\n     * @param who Address which is added or removed\n     * @param allowTransfers allow or deny dtransfers when paused to the who\n     */\n    function setWhitelisted(address who, bool allowTransfers) onlyOwner public {\n        whitelist[who] = allowTransfers;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool){\n        require(!paused || whitelist[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n        require(!paused || whitelist[msg.sender] || whitelist[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n}\n\n/**\n * @title Revocable Token\n * @dev Token that can be revokend until minting is not finished.\n */\ncontract RevocableToken is MintableToken {\n\n    event Revoke(address indexed from, uint256 value);\n\n    modifier canRevoke() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Revokes minted tokens\n     * @param _from The address whose tokens are revoked\n     * @param _value The amount of token to revoke\n     */\n    function revoke(address _from, uint256 _value) onlyOwner canRevoke public returns (bool) {\n        require(_value <= balances[_from]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_from] = balances[_from].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n\n        emit Revoke(_from, _value);\n        emit Transfer(_from, address(0), _value);\n        return true;\n    }\n}\n\ncontract RewardsToken is RevocableToken, /*MintableToken,*/ PausableToken, BurnableToken, NoOwner {\n    string public symbol = 'RWRD';\n    string public name = 'Rewards Cash';\n    uint8 public constant decimals = 18;\n\n    uint256 public hardCap = 10 ** (18 + 9); //1B tokens. Max amount of tokens which can be minted\n\n    /**\n    * @notice Function to mint tokens\n    * @dev This function checks hardCap and calls MintableToken.mint()\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public returns (bool){\n        require(totalSupply_.add(_amount) <= hardCap);\n        return super.mint(_to, _amount);\n    }\n\n\n}\ncontract RewardsMinter is Claimable, NoOwner {\n    using SafeMath for uint256;\n\n    struct MintProposal {\n        address beneficiary;    //Who will receive tokens\n        uint256 amount;         //How much tokens will be minted\n        mapping(address => bool) signers;   //Who already signed\n        uint256 weight;         //Current proposal weight\n        bool minted;            //If tokens where already minted for this proposal\n    }\n\n    RewardsToken public token;\n    mapping(address => uint256) public signers;     //Mapping of proposal signer to his weight\n    uint256 public requiredWeight;                  //Weight required for proposal to be confirmed\n\n    MintProposal[] public mintProposals;\n\n    event SignerWeightChange(address indexed signer, uint256 oldWeight, uint256 newWeight);\n    event RequiredWeightChange(uint256 oldWeight, uint256 newWeight);\n    event MintProposalCreated(uint256 proposalId, address indexed beneficiary, uint256 amount);\n    event MintProposalApproved(uint256 proposalId, address indexed signer);\n    event MintProposalCompleted(uint256 proposalId, address indexed beneficiary, uint256 amount);\n\n    modifier onlySigner(){\n        require(signers[msg.sender] > 0 );\n        _;\n    }\n\n    constructor(address _token, uint256 _requiredWeight, uint256 _ownerWeight) public {\n        if(_token == 0x0){\n            token = new RewardsToken();\n            token.setWhitelisted(address(this), true);\n            token.setWhitelisted(msg.sender, true);\n            token.pause();\n        }else{\n            token = RewardsToken(_token);\n        }\n\n        requiredWeight = _requiredWeight;         //Requires at least one signer for proposal\n        signers[owner] = _ownerWeight;    //makes owner also the signer\n        emit SignerWeightChange(owner, 0, _ownerWeight);\n    }\n\n    function mintProposalCount() view public returns(uint256){\n        return mintProposals.length;\n    }\n\n    /**\n    * @notice Add/Remove/Change signer\n    */\n    function setSignerWeight(address signer, uint256 weight) onlyOwner external {\n        emit SignerWeightChange(signer, signers[signer], weight);\n        signers[signer] = weight;\n    }\n    function setRequiredWeight(uint256 weight) onlyOwner external {\n        requiredWeight = weight;\n    }\n\n    /**\n    * @notice Create new proposal and vote for it\n    */\n    function createProposal(address _beneficiary, uint256 _amount) onlySigner external returns(uint256){\n        uint256 idx = mintProposals.length++;\n        mintProposals[idx].beneficiary = _beneficiary;\n        mintProposals[idx].amount = _amount;\n        mintProposals[idx].minted = false;\n        mintProposals[idx].signers[msg.sender] = true;\n        mintProposals[idx].weight = signers[msg.sender];\n        emit MintProposalCreated(idx, _beneficiary, _amount);\n        emit MintProposalApproved(idx, msg.sender);\n        mintIfWeightEnough(idx);\n        return idx;\n    }\n\n    /**\n    * @notice Create new proposal and vote for it\n    */\n    function approveProposal(uint256 idx, address _beneficiary, uint256 _amount) onlySigner external {\n        require(mintProposals[idx].beneficiary == _beneficiary);\n        require(mintProposals[idx].amount == _amount);\n        require(mintProposals[idx].signers[msg.sender] == false);\n        mintProposals[idx].signers[msg.sender] = true;\n        mintProposals[idx].weight = mintProposals[idx].weight.add(signers[msg.sender]);\n        emit MintProposalApproved(idx, msg.sender);\n        mintIfWeightEnough(idx);\n    }\n\n    /**\n    * @dev Check current proposal weight and mint if ready\n    */\n    function mintIfWeightEnough(uint256 idx) internal {\n        if(mintProposals[idx].weight >= requiredWeight && !mintProposals[idx].minted){\n            mint(mintProposals[idx].beneficiary, mintProposals[idx].amount);\n            mintProposals[idx].minted = true;\n            emit MintProposalCompleted(idx, mintProposals[idx].beneficiary, mintProposals[idx].amount);\n        }\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) internal returns (bool){\n        return token.mint(_to, _amount);\n    }\n\n\n    //Token management\n    function tokenPause() onlyOwner public {\n        token.pause();\n    }\n    function tokenUnpause() onlyOwner public {\n        token.unpause();\n    }\n    function tokenSetWhitelisted(address who, bool allowTransfers) onlyOwner public {\n        token.setWhitelisted(who, allowTransfers);\n    }\n    function tokenRevoke(address _from, uint256 _value) onlyOwner public {\n        token.revoke(_from, _value);\n    }\n    function tokenFinishMinting() onlyOwner public {\n        token.finishMinting();\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"tokenPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"allowTransfers\",\"type\":\"bool\"}],\"name\":\"tokenSetWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenRevoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenFinishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setRequiredWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setSignerWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintProposals\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"weight\",\"type\":\"uint256\"},{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintProposalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_requiredWeight\",\"type\":\"uint256\"},{\"name\":\"_ownerWeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"SignerWeightChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"RequiredWeightChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"MintProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintProposalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160608062002b0e83398101604090815281516020830151919092015160008054600160a060020a0319163317905534156200004f57600080fd5b600160a060020a038316151562000233576200006a620002ba565b604051809103906000f08015801562000087573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a039283161790819055604080517f9281aa0b0000000000000000000000000000000000000000000000000000000081523060048201526001602482015290519190921691639281aa0b91604480830192600092919082900301818387803b1580156200010857600080fd5b505af11580156200011d573d6000803e3d6000fd5b5050600254604080517f9281aa0b000000000000000000000000000000000000000000000000000000008152336004820152600160248201529051600160a060020a039092169350639281aa0b925060448082019260009290919082900301818387803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b50505050600260009054906101000a9004600160a060020a0316600160a060020a0316638456cb596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200021457600080fd5b505af115801562000229573d6000803e3d6000fd5b505050506200024f565b60028054600160a060020a031916600160a060020a0385161790555b600482905560008054600160a060020a03908116825260036020908152604080842085905583548151948552918401859052805191909216927ffedaed4626081741dceea161baff14db56e104449b8a7001fd3e2c35c70b29b592908290030190a2505050620002cb565b604051611673806200149b83390190565b6111c080620002db6000396000f3006080604052600436106101195763ffffffff60e060020a6000350416630abd2ba881146101285780631415078e1461013f57806317ffc320146101665780631b302a16146101875780632aed7f3f1461019c5780633d2b8ec4146101bd5780634e71e0c8146101e35780635b489dd4146101f85780636091446d1461021c578063715018a614610231578063736c0d5b146102465780638da5cb5b146102675780639da3b451146102985780639f727c27146102b0578063b6d53253146102c5578063b6ea231e146102e9578063c0ee0b8a14610333578063dfc51a2514610364578063e30c397814610388578063ed408c8c1461039d578063f2fde38b146103c4578063fc0c546a146103e5578063fcb66077146103fa575b34801561012557600080fd5b50005b34801561013457600080fd5b5061013d61040f565b005b34801561014b57600080fd5b50610154610493565b60408051918252519081900360200190f35b34801561017257600080fd5b5061013d600160a060020a0360043516610499565b34801561019357600080fd5b5061013d610565565b3480156101a857600080fd5b5061013d600160a060020a03600435166105cf565b3480156101c957600080fd5b5061013d600160a060020a03600435166024351515610669565b3480156101ef57600080fd5b5061013d6106ef565b34801561020457600080fd5b5061013d600160a060020a0360043516602435610777565b34801561022857600080fd5b5061013d610827565b34801561023d57600080fd5b5061013d6108bb565b34801561025257600080fd5b50610154600160a060020a0360043516610927565b34801561027357600080fd5b5061027c610939565b60408051600160a060020a039092168252519081900360200190f35b3480156102a457600080fd5b5061013d600435610948565b3480156102bc57600080fd5b5061013d610964565b3480156102d157600080fd5b5061013d600160a060020a03600435166024356109b9565b3480156102f557600080fd5b50610301600435610a41565b60408051600160a060020a03909516855260208501939093528383019190915215156060830152519081900360800190f35b34801561033f57600080fd5b5061013d60048035600160a060020a0316906024803591604435918201910135610a86565b34801561037057600080fd5b50610154600160a060020a0360043516602435610a8b565b34801561039457600080fd5b5061027c610c58565b3480156103a957600080fd5b5061013d600435600160a060020a0360243516604435610c67565b3480156103d057600080fd5b5061013d600160a060020a0360043516610e05565b3480156103f157600080fd5b5061027c610e4b565b34801561040657600080fd5b50610154610e5a565b600054600160a060020a0316331461042657600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316638456cb596040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561047957600080fd5b505af115801561048d573d6000803e3d6000fd5b50505050565b60045481565b60008054600160a060020a031633146104b157600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b505160005490915061056190600160a060020a0384811691168363ffffffff610e6116565b5050565b600054600160a060020a0316331461057c57600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316633f4ba83a6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561047957600080fd5b60008054600160a060020a031633146105e757600080fd5b5060008054604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905184939284169263f2fde38b926024808201939182900301818387803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050505050565b600054600160a060020a0316331461068057600080fd5b600254604080517f9281aa0b000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152841515602483015291519190921691639281aa0b91604480830192600092919082900301818387803b15801561064d57600080fd5b600154600160a060020a0316331461070657600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a0316331461078e57600080fd5b600254604080517feac449d9000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163eac449d99160448083019260209291908290030181600087803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b505050506040513d602081101561048d57600080fd5b600054600160a060020a0316331461083e57600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d602081101561056157600080fd5b600054600160a060020a031633146108d257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60036020526000908152604090205481565b600054600160a060020a031681565b600054600160a060020a0316331461095f57600080fd5b600455565b600054600160a060020a0316331461097b57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156109b6573d6000803e3d6000fd5b50565b600054600160a060020a031633146109d057600080fd5b600160a060020a03821660008181526003602090815260409182902054825190815290810184905281517ffedaed4626081741dceea161baff14db56e104449b8a7001fd3e2c35c70b29b5929181900390910190a2600160a060020a03909116600090815260036020526040902055565b6005805482908110610a4f57fe5b60009182526020909120600590910201805460018201546003830154600490930154600160a060020a039092169350919060ff1684565b600080fd5b3360009081526003602052604081205481908110610aa857600080fd5b6005805490610aba9060018301611121565b905083600582815481101515610acc57fe5b906000526020600020906005020160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555082600582815481101515610b1157fe5b9060005260206000209060050201600101819055506000600582815481101515610b3757fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055506001600582815481101515610b7057fe5b6000918252602080832033845260059283020160020181526040808420805460ff1916951515959095179094556003905291902054815490919083908110610bb457fe5b90600052602060002090600502016003018190555083600160a060020a03167f6d52d9e3a80825940553fe542418fc79c9fff5d36240a6f769ec82d853bcbfd08285604051808381526020018281526020019250505060405180910390a260408051828152905133917fb7616db5c4b4f31590563e69f9a294fd6999e489919b5659d5f1839eb543c119919081900360200190a2610c5181610efb565b9392505050565b600154600160a060020a031681565b3360009081526003602052604081205411610c8157600080fd5b81600160a060020a0316600584815481101515610c9a57fe5b6000918252602090912060059091020154600160a060020a031614610cbe57600080fd5b80600584815481101515610cce57fe5b906000526020600020906005020160010154141515610cec57600080fd5b6005805484908110610cfa57fe5b600091825260208083203384526002600590930201919091019052604090205460ff1615610d2757600080fd5b6001600584815481101515610d3857fe5b6000918252602080832033845260059283020160020181526040808420805460ff19169515159590951790945560039052919020548154610d9e929086908110610d7e57fe5b90600052602060002090600502016003015461106990919063ffffffff16565b6005805485908110610dac57fe5b60009182526020918290206003600590920201019190915560408051858152905133927fb7616db5c4b4f31590563e69f9a294fd6999e489919b5659d5f1839eb543c119928290030190a2610e0083610efb565b505050565b600054600160a060020a03163314610e1c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b6005545b90565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b50511515610e0057600080fd5b6004546005805483908110610f0c57fe5b90600052602060002090600502016003015410158015610f4e57506005805482908110610f3557fe5b600091825260209091206004600590920201015460ff16155b156109b657610fa6600582815481101515610f6557fe5b60009182526020909120600591820201548154600160a060020a03909116919084908110610f8f57fe5b90600052602060002090600502016001015461107c565b506001600582815481101515610fb857fe5b906000526020600020906005020160040160006101000a81548160ff021916908315150217905550600581815481101515610fef57fe5b60009182526020909120600591820201548154600160a060020a03909116917f7f42dd8d4d964c1e13acd5ca2a8ab06b5695576ed47f11db65f585c43d0989ff918491908290811061103d57fe5b60009182526020918290206001600590920201015460408051938452918301528051918290030190a250565b8181018281101561107657fe5b92915050565b600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915160009392909216916340c10f199160448082019260209290919082900301818787803b1580156110ee57600080fd5b505af1158015611102573d6000803e3d6000fd5b505050506040513d602081101561111857600080fd5b50519392505050565b815481835581811115610e0057600083815260209020610e0091610e5e9160059182028101918502015b8082111561119057805473ffffffffffffffffffffffffffffffffffffffff19168155600060018201819055600382015560048101805460ff1916905560050161114b565b50905600a165627a7a72305820f6311a75f0646cc98462d187f6167e49af67877ecb3e251c1402710925c68bd000296003805460a060020a61ffff021916905560c0604052600460808190527f525752440000000000000000000000000000000000000000000000000000000060a0908152620000519160059190620000cd565b5060408051808201909152600c8082527f526577617264732043617368000000000000000000000000000000000000000060209092019182526200009891600691620000cd565b506b033b2e3c9fd0803ce800000060075560038054600160a060020a031916331790553415620000c757600080fd5b62000172565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011057805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200014057825182559160200191906001019062000123565b506200014e92915062000152565b5090565b6200016f91905b808211156200014e576000815560010162000159565b90565b6114f180620001826000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461018357806306fdde03146101ac578063095ea7b31461023657806317ffc3201461025a57806318160ddd1461027d57806323b872dd146102a45780632aed7f3f146102ce578063313ce567146102ef5780633f4ba83a1461031a57806340c10f191461032f57806342966c68146103535780635c975abb1461036b578063661884631461038057806370a08231146103a4578063715018a6146103c55780637d64bcb4146103da5780638456cb59146103ef5780638da5cb5b146104045780639281aa0b1461043557806395d89b411461045b5780639b19251a146104705780639f727c2714610491578063a9059cbb146104a6578063c0ee0b8a146104ca578063d73dd623146104fb578063dd62ed3e1461051f578063eac449d914610546578063f2fde38b1461056a578063fb86a4041461058b575b34801561018057600080fd5b50005b34801561018f57600080fd5b506101986105a0565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16105b0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fb5781810151838201526020016101e3565b50505050905090810190601f1680156102285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024257600080fd5b50610198600160a060020a036004351660243561063e565b34801561026657600080fd5b5061027b600160a060020a03600435166106a4565b005b34801561028957600080fd5b50610292610772565b60408051918252519081900360200190f35b3480156102b057600080fd5b50610198600160a060020a0360043581169060243516604435610778565b3480156102da57600080fd5b5061027b600160a060020a03600435166107e4565b3480156102fb57600080fd5b50610304610882565b6040805160ff9092168252519081900360200190f35b34801561032657600080fd5b5061027b610887565b34801561033b57600080fd5b50610198600160a060020a0360043516602435610900565b34801561035f57600080fd5b5061027b600435610936565b34801561037757600080fd5b50610198610943565b34801561038c57600080fd5b50610198600160a060020a0360043516602435610953565b3480156103b057600080fd5b50610292600160a060020a0360043516610a42565b3480156103d157600080fd5b5061027b610a5d565b3480156103e657600080fd5b50610198610acb565b3480156103fb57600080fd5b5061027b610b4f565b34801561041057600080fd5b50610419610bcd565b60408051600160a060020a039092168252519081900360200190f35b34801561044157600080fd5b5061027b600160a060020a03600435166024351515610bdc565b34801561046757600080fd5b506101c1610c1e565b34801561047c57600080fd5b50610198600160a060020a0360043516610c79565b34801561049d57600080fd5b5061027b610c8e565b3480156104b257600080fd5b50610198600160a060020a0360043516602435610cdf565b3480156104d657600080fd5b5061027b60048035600160a060020a0316906024803591604435918201910135610d1f565b34801561050757600080fd5b50610198600160a060020a0360043516602435610d24565b34801561052b57600080fd5b50610292600160a060020a0360043581169060243516610dbd565b34801561055257600080fd5b50610198600160a060020a0360043516602435610de8565b34801561057657600080fd5b5061027b600160a060020a0360043516610f0d565b34801561059757600080fd5b50610292610f2d565b60035460a060020a900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600354600090600160a060020a031633146106be57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505050506040513d602081101561074957600080fd5b505160035490915061076e90600160a060020a0384811691168363ffffffff610f3316565b5050565b60015490565b60035460009060a860020a900460ff1615806107a357503360009081526004602052604090205460ff165b806107c65750600160a060020a03841660009081526004602052604090205460ff165b15156107d157600080fd5b6107dc848484610feb565b949350505050565b600354600090600160a060020a031633146107fe57600080fd5b50600354604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051839283169163f2fde38b91602480830192600092919082900301818387803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050505050565b601281565b600354600160a060020a0316331461089e57600080fd5b60035460a860020a900460ff1615156108b657600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600060075461091a8360015461114e90919063ffffffff16565b111561092557600080fd5b61092f8383611161565b9392505050565b6109403382611259565b50565b60035460a860020a900460ff1681565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106109a757336000908152600260209081526040808320600160a060020a03881684529091528120556109dc565b6109b7818463ffffffff61134816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610a7457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610ae557600080fd5b60035460a060020a900460ff1615610afc57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a03163314610b6657600080fd5b60035460a860020a900460ff1615610b7d57600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b600354600160a060020a03163314610bf357600080fd5b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106365780601f1061060b57610100808354040283529160200191610636565b60046020526000908152604090205460ff1681565b600354600160a060020a03163314610ca557600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610940573d6000803e3d6000fd5b60035460009060a860020a900460ff161580610d0a57503360009081526004602052604090205460ff165b1515610d1557600080fd5b61092f838361135a565b600080fd5b336000908152600260209081526040808320600160a060020a0386168452909152812054610d58908363ffffffff61114e16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610e0257600080fd5b60035460a060020a900460ff1615610e1957600080fd5b600160a060020a038316600090815260208190526040902054821115610e3e57600080fd5b600160a060020a038316600090815260208190526040902054610e67908363ffffffff61134816565b600160a060020a038416600090815260208190526040902055600154610e93908363ffffffff61134816565b600155604080518381529051600160a060020a038516917fec9ab91322523c899ede7830ec9bfc992b5981cdcc27b91162fb23de5791117b919081900360200190a2604080518381529051600091600160a060020a038616916000805160206114a68339815191529181900360200190a350600192915050565b600354600160a060020a03163314610f2457600080fd5b61094081611427565b60075481565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b505050506040513d6020811015610fd957600080fd5b50511515610fe657600080fd5b505050565b600160a060020a03831660009081526020819052604081205482111561101057600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561104057600080fd5b600160a060020a038316151561105557600080fd5b600160a060020a03841660009081526020819052604090205461107e908363ffffffff61134816565b600160a060020a0380861660009081526020819052604080822093909355908516815220546110b3908363ffffffff61114e16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546110f5908363ffffffff61134816565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206114a6833981519152929181900390910190a35060019392505050565b8181018281101561115b57fe5b92915050565b600354600090600160a060020a0316331461117b57600080fd5b60035460a060020a900460ff161561119257600080fd5b6001546111a5908363ffffffff61114e16565b600155600160a060020a0383166000908152602081905260409020546111d1908363ffffffff61114e16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206114a68339815191529181900360200190a350600192915050565b600160a060020a03821660009081526020819052604090205481111561127e57600080fd5b600160a060020a0382166000908152602081905260409020546112a7908263ffffffff61134816565b600160a060020a0383166000908152602081905260409020556001546112d3908263ffffffff61134816565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206114a68339815191529181900360200190a35050565b60008282111561135457fe5b50900390565b3360009081526020819052604081205482111561137657600080fd5b600160a060020a038316151561138b57600080fd5b336000908152602081905260409020546113ab908363ffffffff61134816565b3360009081526020819052604080822092909255600160a060020a038516815220546113dd908363ffffffff61114e16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206114a68339815191529281900390910190a350600192915050565b600160a060020a038116151561143c57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582055d929c3f8ca913ac571b4665183d9f373f57e777cd8a7fd7870df49d5a127b10029000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
}