{
  "address": "0x8c14692589190d08e917e38bbee3ac10eaf0acb4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "apexONE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity ^0.4.24;\n\n/***\n * https://apexONE.io\n * \n * No administrators or developers, this contract is fully autonomous\n *\n * 12 % entry fee\n * 12 % of entry fee to masternode referrals\n * 0 % transfer fee\n * Exit fee starts at 48% from contract start\n * Exit fee decreases over 30 days  until 12%\n * Stays at 12% forever.\n */\ncontract apexONE {\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier notGasbag() {\n      require(tx.gasprice < 200999999999);\n      _;\n    }\n\n    /// @dev Preventing unstable dumping and limit ambassador mine\n    modifier antiEarlyWhale {\n        if (address(this).balance  -msg.value < whaleBalanceLimit){\n          require(msg.value <= maxEarlyStake);\n        }\n        if (depositCount_ == 0){\n          require(ambassadors_[msg.sender] && msg.value == 0.25 ether);\n        }else\n        if (depositCount_ < 6){\n          require(ambassadors_[msg.sender] && msg.value == 0.75 ether);\n        }else\n        if (depositCount_ == 6 || depositCount_==7){\n          require(ambassadors_[msg.sender] && msg.value == 1 ether);\n        }\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier isControlled() {\n      require(isPremine() || isStarted());\n      _;\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"apexONE Token\";\n    string public symbol = \"APX1\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 12% dividends for token purchase\n    uint8 constant internal entryFee_ = 12;\n\n    /// @dev 48% dividends for token selling\n    uint8 constant internal startExitFee_ = 48;\n\n    /// @dev 12% dividends for token selling after step\n    uint8 constant internal finalExitFee_ = 12;\n\n    /// @dev Exit fee falls over period of 30 days\n    uint256 constant internal exitFeeFallDuration_ = 30 days;\n\n    /// @dev 12% masternode\n    uint8 constant internal refferalFee_ = 12;\n\n    /// @dev P3D pricing\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev 100 needed for masternode activation\n    uint256 public stakingRequirement = 100e18;\n\n    /// @dev anti-early-whale\n    uint256 public maxEarlyStake = 2.5 ether;\n    uint256 public whaleBalanceLimit = 75 ether;\n\n    /// @dev apex starting gun\n    address public apex;\n\n    /// @dev starting\n    uint256 public startTime = 0; //  January 1, 1970 12:00:00\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => uint256) internal bonusBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 public depositCount_;\n\n    mapping(address => bool) internal ambassadors_;\n\n    /*=======================================\n    =            CONSTRUCTOR                =\n    =======================================*/\n\n   constructor () public {\n\n     //Community Promotional Fund\n     ambassadors_[msg.sender]=true;\n     //1\n     ambassadors_[0x1D72C933BC38344e4ecD33F0B6fC2F8F7A6B336F]=true;\n     //2\n     ambassadors_[0xBAce3371fd1E65DD0255DDef233bD16bFa374DB2]=true;\n     //3\n     ambassadors_[0x87A7e71D145187eE9aAdc86954d39cf0e9446751]=true;\n     //4\n     ambassadors_[0x0C0dF6e58e5F7865b8137a7Fb663E7DCD5672995]=true;\n     //5\n     ambassadors_[0x6BCCC4AECc19d73ff967dA124f0Ae537aBb17440]=true;\n     //6\n     ambassadors_[0xa1038E5098E90E43a19B4A024fEF413028139d50]=true;\n     //7\n     ambassadors_[0x408C2a514aff2fE88D274C82B61256Ef74DA5811]=true;\n\n     apex = msg.sender;\n   }\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    // @dev Function setting the start time of the system\n    function setStartTime(uint256 _startTime) public {\n      require(msg.sender==apex && !isStarted() && now < _startTime);\n      startTime = _startTime;\n    }\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) antiEarlyWhale notGasbag isControlled public payable  returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , msg.sender);\n    }\n\n    /// @dev Converts to tokens on behalf of the customer - this allows gifting and integration with other systems\n    function buyFor(address _referredBy, address _customerAddress) antiEarlyWhale notGasbag isControlled public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , _customerAddress);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() antiEarlyWhale notGasbag isControlled payable public {\n        purchaseTokens(msg.value, 0x0 , msg.sender);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0 , _customerAddress);\n\n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // capitulation\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    /// @dev Function for the frontend to get untaxed receivable ethereum.\n    function calculateUntaxedEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        //uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        //uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _ethereum;\n    }\n\n\n    /// @dev Function for getting the current exitFee\n    function exitFee() public view returns (uint8) {\n        if (startTime==0){\n           return startExitFee_;\n        }\n        if ( now < startTime) {\n          return 0;\n        }\n        uint256 secondsPassed = now - startTime;\n        if (secondsPassed >= exitFeeFallDuration_) {\n            return finalExitFee_;\n        }\n        uint8 totalChange = startExitFee_ - finalExitFee_;\n        uint8 currentChange = uint8(totalChange * secondsPassed / exitFeeFallDuration_);\n        uint8 currentFee = startExitFee_- currentChange;\n        return currentFee;\n    }\n\n    // @dev Function for find if premine\n    function isPremine() public view returns (bool) {\n      return depositCount_<=7;\n    }\n\n    // @dev Function for find if premine\n    function isStarted() public view returns (bool) {\n      return startTime!=0 && now > startTime;\n    }\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy , address _customerAddress) internal returns (uint256) {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        // Keep track\n        depositCount_++;\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "60c0604052600d60808190527f617065784f4e4520546f6b656e0000000000000000000000000000000000000060a09081526200004091600091906200022f565b506040805180820190915260048082527f4150583100000000000000000000000000000000000000000000000000000000602090920191825262000087916001916200022f565b5068056bc75e2d631000006002556722b1c8c1227a0000600355680410d586a20a4c00006004556000600655348015620000c057600080fd5b50336000818152600e602052604081208054600160ff1991821681179092557fca34d320fc9079ee0eb1b8070a5658527cc77efd5cd7747824f7834e9fe02a6580548216831790557f3328e4bfec0662ca23281148bdf422e9f26c443520650649df0b87f9ed4c245280548216831790557f94e14bd8337cb3aa3de5f9d8ef96742e3cb698735946a6ee517ec4c388c9708a80548216831790557fc46bec84407c374c98e520b0cfdcb3cc53802a23df46790beb1ad79e971c5c3780548216831790557f0b5ce25cfb2b07f6e1d6f29273ae74a14c0739b41f0786382ee9d53be01a28d180548216831790557f9cba59e9bd88f578865ed970a5e3ac553c316c0653a8c757495c4ff051ec7b05805482168317905573408c2a514aff2fe88d274c82b61256ef74da58119092527f0565363c4ba82598f98035e807fe324e0092455753fe2d3078aadf0e1a18a89b805490921617905560058054600160a060020a0319169091179055620002d4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027257805160ff1916838001178555620002a2565b82800160010185558215620002a2579182015b82811115620002a257825182559160200191906001019062000285565b50620002b0929150620002b4565b5090565b620002d191905b80821115620002b05760008155600101620002bb565b90565b6114de80620002e46000396000f3006080604052600436106101895763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146102a757806306fdde03146102da57806310d0ffdd1461036457806318160ddd1461037c578063226093731461039157806323b3b704146103a9578063313ce567146103c15780633ccfd60b146103ec5780633e0a322d146104035780634b7503341461041b578063544736e61461043057806356d399e814610459578063585bc2811461046e5780636284ae4114610483578063688abbf7146104985780636b2f4632146104b257806370a08231146104c757806378e97925146104e85780638620410b146104fd57806391e3310714610512578063949e8acd1461052757806395d89b411461053c578063a9059cbb14610551578063caa877e714610575578063d6dda33d1461058f578063da7af32d146105a4578063e4849b32146105b9578063e9fad8ee146105d1578063f088d547146105e6578063fdb5a03e146105fa578063ff295c5d1461060f575b6004543430310310156101a5576003543411156101a557600080fd5b600d5415156101e457336000908152600e602052604090205460ff1680156101d45750346703782dace9d90000145b15156101df57600080fd5b610266565b6006600d54101561021d57336000908152600e602052604090205460ff1680156101d45750670a688906bd8b000034146101df57600080fd5b600d54600614806102305750600d546007145b1561026657336000908152600e602052604090205460ff16801561025b575034670de0b6b3a7640000145b151561026657600080fd5b642ecc8899ff3a1061027757600080fd5b61027f610640565b8061028d575061028d61064a565b151561029857600080fd5b6102a434600033610665565b50005b3480156102b357600080fd5b506102c8600160a060020a03600435166108cf565b60408051918252519081900360200190f35b3480156102e657600080fd5b506102ef61090a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610329578181015183820152602001610311565b50505050905090810190601f1680156103565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037057600080fd5b506102c8600435610998565b34801561038857600080fd5b506102c86109cb565b34801561039d57600080fd5b506102c86004356109d1565b3480156103b557600080fd5b506102c8600435610a16565b3480156103cd57600080fd5b506103d6610a3f565b6040805160ff9092168252519081900360200190f35b3480156103f857600080fd5b50610401610a44565b005b34801561040f57600080fd5b50610401600435610b17565b34801561042757600080fd5b506102c8610b51565b34801561043c57600080fd5b5061044561064a565b604080519115158252519081900360200190f35b34801561046557600080fd5b506102c8610ba9565b34801561047a57600080fd5b506102c8610baf565b34801561048f57600080fd5b506103d6610bb5565b3480156104a457600080fd5b506102c86004351515610c1d565b3480156104be57600080fd5b506102c8610c5e565b3480156104d357600080fd5b506102c8600160a060020a0360043516610c63565b3480156104f457600080fd5b506102c8610c7e565b34801561050957600080fd5b506102c8610c84565b34801561051e57600080fd5b506102c8610ccf565b34801561053357600080fd5b506102c8610cd5565b34801561054857600080fd5b506102ef610ce7565b34801561055d57600080fd5b50610445600160a060020a0360043516602435610d41565b6102c8600160a060020a0360043581169060243516610e70565b34801561059b57600080fd5b50610445610640565b3480156105b057600080fd5b506102c8610f8d565b3480156105c557600080fd5b50610401600435610f93565b3480156105dd57600080fd5b50610401611106565b6102c8600160a060020a0360043516611133565b34801561060657600080fd5b50610401611250565b34801561061b57600080fd5b50610624611307565b60408051600160a060020a039092168252519081900360200190f35b600d546007101590565b6000600654600014158015610660575060065442115b905090565b60008080808080808061068361067c8c600c611316565b6064611341565b965061069361067c88600c611316565b955061069f8787611358565b94506106ab8b88611358565b93506106b68461136a565b925068010000000000000000850291506000831180156106e05750600b546106de8482611402565b115b15156106eb57600080fd5b600160a060020a038a1615801590610715575088600160a060020a03168a600160a060020a031614155b801561073b5750600254600160a060020a038b1660009081526007602052604090205410155b1561078157600160a060020a038a166000908152600860205260409020546107639087611402565b600160a060020a038b1660009081526008602052604090205561079c565b61078b8587611402565b945068010000000000000000850291505b6000600b541115610800576107b3600b5484611402565b600b8190556801000000000000000086028115156107cd57fe5b600c8054929091049091019055600b546801000000000000000086028115156107f257fe5b048302820382039150610806565b600b8390555b600160a060020a0389166000908152600760205260409020546108299084611402565b600160a060020a03808b16600081815260076020908152604080832095909555600c54600a909152939020805493870286900393840190559192508b16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8d8642610893610c84565b604080519485526020850193909352838301919091526060830152519081900360800190a35050600d8054600101905598975050505050505050565b600160a060020a03166000908152600a6020908152604080832054600790925290912054600c54680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109905780601f1061096557610100808354040283529160200191610990565b820191906000526020600020905b81548152906001019060200180831161097357829003601f168201915b505050505081565b60008080806109ab61067c86600c611316565b92506109b78584611358565b91506109c28261136a565b95945050505050565b600b5490565b600080600080600b5485111515156109e857600080fd5b6109f185611411565b9250610a0a61067c84610a02610bb5565b60ff16611316565b91506109c28383611358565b600080600b548311151515610a2a57600080fd5b610a3383611411565b90508091505b50919050565b601281565b6000806000610a536001610c1d565b11610a5d57600080fd5b339150610a6a6000610c1d565b600160a060020a0383166000818152600a6020908152604080832080546801000000000000000087020190556008909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610ad3573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600554600160a060020a031633148015610b365750610b3461064a565b155b8015610b4157508042105b1515610b4c57600080fd5b600655565b600080600080600b5460001415610b6f576414f46b04009350610ba3565b610b80670de0b6b3a7640000611411565b9250610b9161067c84610a02610bb5565b9150610b9d8383611358565b90508093505b50505090565b60025481565b60035481565b600080600080600060065460001415610bd15760309450610c16565b600654421015610be45760009450610c16565b6006544203935062278d008410610bfe57600c9450610c16565b6024925062278d008484020491508160300390508094505b5050505090565b60003382610c3357610c2e816108cf565b610c57565b600160a060020a038116600090815260086020526040902054610c55826108cf565b015b9392505050565b303190565b600160a060020a031660009081526007602052604090205490565b60065481565b600080600080600b5460001415610ca25764199c82cc009350610ba3565b610cb3670de0b6b3a7640000611411565b9250610cc361067c84600c611316565b9150610b9d8383611402565b60045481565b600033610ce181610c63565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109905780601f1061096557610100808354040283529160200191610990565b6000806000610d4e610cd5565b11610d5857600080fd5b5033600081815260076020526040902054831115610d7557600080fd5b6000610d816001610c1d565b1115610d8f57610d8f610a44565b600160a060020a038116600090815260076020526040902054610db29084611358565b600160a060020a038083166000908152600760205260408082209390935590861681522054610de19084611402565b600160a060020a03858116600081815260076020908152604080832095909555600c8054948716808452600a83528684208054968b02909603909555548383529185902080549289029092019091558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600191505b5092915050565b600454600090343031031015610e8f57600354341115610e8f57600080fd5b600d541515610ece57336000908152600e602052604090205460ff168015610ebe5750346703782dace9d90000145b1515610ec957600080fd5b610f50565b6006600d541015610f0757336000908152600e602052604090205460ff168015610ebe5750670a688906bd8b00003414610ec957600080fd5b600d5460061480610f1a5750600d546007145b15610f5057336000908152600e602052604090205460ff168015610f45575034670de0b6b3a7640000145b1515610f5057600080fd5b642ecc8899ff3a10610f6157600080fd5b610f69610640565b80610f775750610f7761064a565b1515610f8257600080fd5b610e69348484610665565b600d5481565b6000806000806000806000610fa6610cd5565b11610fb057600080fd5b33600081815260076020526040902054909650871115610fcf57600080fd5b869450610fdb85611411565b9350610fec61067c85610a02610bb5565b9250610ff88484611358565b9150611006600b5486611358565b600b55600160a060020a03861660009081526007602052604090205461102c9086611358565b600160a060020a038716600090815260076020908152604080832093909355600c54600a909152918120805492880268010000000000000000860201928390039055600b5491925010156110a25761109e600c54600b5468010000000000000000860281151561109857fe5b04611402565b600c555b85600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8684426110d8610c84565b604080519485526020850193909352838301919091526060830152519081900360800190a250505050505050565b33600081815260076020526040812054908111156111275761112781610f93565b61112f610a44565b5050565b6004546000903430310310156111525760035434111561115257600080fd5b600d54151561119157336000908152600e602052604090205460ff1680156111815750346703782dace9d90000145b151561118c57600080fd5b611213565b6006600d5410156111ca57336000908152600e602052604090205460ff1680156111815750670a688906bd8b0000341461118c57600080fd5b600d54600614806111dd5750600d546007145b1561121357336000908152600e602052604090205460ff168015611208575034670de0b6b3a7640000145b151561121357600080fd5b642ecc8899ff3a1061122457600080fd5b61122c610640565b8061123a575061123a61064a565b151561124557600080fd5b610a39348333610665565b6000806000806112606001610c1d565b1161126a57600080fd5b6112746000610c1d565b336000818152600a60209081526040808320805468010000000000000000870201905560089091528120805490829055909201945092506112b790849084610665565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600554600160a060020a031681565b6000808315156113295760009150610e69565b5082820282848281151561133957fe5b0414610c5757fe5b600080828481151561134f57fe5b04949350505050565b60008282111561136457fe5b50900390565b600b546000906c01431e0fae6d7217caa00000009082906402540be4006113ef6113e9730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161147d565b85611358565b8115156113f857fe5b0403949350505050565b600082820183811015610c5757fe5b600b54600090670de0b6b3a764000083810191810190839061146a6414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561146457fe5b04611358565b81151561147357fe5b0495945050505050565b80600260018201045b81811015610a3957809150600281828581151561149f57fe5b04018115156114aa57fe5b0490506114865600a165627a7a72305820994294bd0658f666d9695b8bd30b25889946d40241e6cb00099b1019974b10d80029"
}