{
  "address": "0x4d807509aece24c0fa5a102b6a3b059ec6e14392",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MenloToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-16\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract MenloToken is PausableToken, BurnableToken, CanReclaimToken {\n\n  // Token properties\n  string public constant name = 'Menlo One';\n  string public constant symbol = 'ONE';\n\n  uint8 public constant decimals = 18;\n  uint256 private constant token_factor = 10**uint256(decimals);\n\n  // 1 billion ONE tokens in units divisible up to 18 decimals\n  uint256 public constant INITIAL_SUPPLY    = 1000000000 * token_factor;\n\n  uint256 public constant PUBLICSALE_SUPPLY = 354000000 * token_factor;\n  uint256 public constant GROWTH_SUPPLY     = 246000000 * token_factor;\n  uint256 public constant TEAM_SUPPLY       = 200000000 * token_factor;\n  uint256 public constant ADVISOR_SUPPLY    = 100000000 * token_factor;\n  uint256 public constant PARTNER_SUPPLY    = 100000000 * token_factor;\n\n  /**\n   * @dev Magic value to be returned upon successful reception of Menlo Tokens\n   */\n  bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\n\n  address public crowdsale;\n  address public teamTimelock;\n  address public advisorTimelock;\n\n  modifier notInitialized(address saleAddress) {\n    require(address(saleAddress) == address(0), \"Expected address to be null\");\n    _;\n  }\n\n  constructor(address _growth, address _teamTimelock, address _advisorTimelock, address _partner) public {\n    assert(INITIAL_SUPPLY > 0);\n    assert((PUBLICSALE_SUPPLY + GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY) == INITIAL_SUPPLY);\n\n    uint256 _poolTotal = GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY;\n    uint256 _availableForSales = INITIAL_SUPPLY - _poolTotal;\n\n    assert(_availableForSales == PUBLICSALE_SUPPLY);\n\n    teamTimelock = _teamTimelock;\n    advisorTimelock = _advisorTimelock;\n\n    mint(msg.sender, _availableForSales);\n    mint(_growth, GROWTH_SUPPLY);\n    mint(_teamTimelock, TEAM_SUPPLY);\n    mint(_advisorTimelock, ADVISOR_SUPPLY);\n    mint(_partner, PARTNER_SUPPLY);\n\n    assert(totalSupply_ == INITIAL_SUPPLY);\n    pause();\n  }\n\n  function initializeCrowdsale(address _crowdsale) public onlyOwner notInitialized(crowdsale) {\n    unpause();\n    transfer(_crowdsale, balances[msg.sender]);  // Transfer left over balance after private presale allocations\n    crowdsale = _crowdsale;\n    pause();\n    transferOwnership(_crowdsale);\n  }\n\n  function mint(address _to, uint256 _amount) internal {\n    balances[_to] = _amount;\n    totalSupply_ = totalSupply_.add(_amount);\n    emit Transfer(address(0), _to, _amount);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value `bytes4(0x150b7a03)`;\n   * otherwise, the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _to address to receive the tokens.  Must be a MenloTokenReceiver based contract\n   * @param _value uint256 number of tokens to transfer\n   * @param _action uint256 action to perform in target _to contract\n   * @param _data bytes data to send along with a safe transfer check\n   **/\n  function transferAndCall(address _to, uint256 _value, uint256 _action, bytes _data) public returns (bool) {\n    if (transfer(_to, _value)) {\n      require (MenloTokenReceiver(_to).onTokenReceived(msg.sender, _value, _action, _data) == ONE_RECEIVED, \"Target contract onTokenReceived failed\");\n      return true;\n    }\n\n    return false;\n  }\n}\n\ncontract MenloTokenReceiver {\n\n    /*\n     * @dev Address of the MenloToken contract\n     */\n    MenloToken token;\n\n    constructor(MenloToken _tokenContract) public {\n        token = _tokenContract;\n    }\n\n    /**\n     * @dev Magic value to be returned upon successful reception of Menlo Tokens\n     */\n    bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\n\n    /**\n     * @dev Throws if called by any account other than the Menlo Token contract.\n     */\n    modifier onlyTokenContract() {\n        require(msg.sender == address(token));\n        _;\n    }\n\n    /**\n     * @notice Handle the receipt of Menlo Tokens\n     * @dev The MenloToken contract calls this function on the recipient\n     * after a `transferAndCall`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Warning: this function must call the onlyTokenContract modifier to trust\n     * the transfer took place\n     * @param _from The address which previously owned the token\n     * @param _value Number of tokens that were transfered\n     * @param _action Used to define enumeration of possible functions to call\n     * @param _data Additional data with no specified format\n     * @return `bytes4(0x150b7a03)`\n     */\n    function onTokenReceived(\n        address _from,\n        uint256 _value,\n        uint256 _action,\n        bytes _data\n    ) public /* onlyTokenContract */ returns(bytes4);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISOR_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GROWTH_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"initializeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_action\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLICSALE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_growth\",\"type\":\"address\"},{\"name\":\"_teamTimelock\",\"type\":\"address\"},{\"name\":\"_advisorTimelock\",\"type\":\"address\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff02191690553480156200002157600080fd5b5060405160808062001685833981016040908152815160208301519183015160609093015160038054600160a060020a0319163317905590929060006b02165bd22bd91fa44600000090506b0124d26a73f76098a200000060058054600160a060020a03808816600160a060020a0319928316179092556006805492871692909116919091179055620000be338264010000000062000175810204565b620000de866acb7c86b8b8ec58b600000064010000000062000175810204565b620000fe856aa56fa5b99019a5c800000064010000000062000175810204565b6200011e846a52b7d2dcc80cd2e400000064010000000062000175810204565b6200013e836a52b7d2dcc80cd2e400000064010000000062000175810204565b6001546b033b2e3c9fd0803ce8000000146200015657fe5b62000169640100000000620001f5810204565b5050505050506200029c565b600160a060020a0382166000908152602081905260409020819055600154620001ad90826401000000006200139a6200028882021704565b600155604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600354600160a060020a031633146200020d57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156200023657600080fd5b6003805460a060020a60ff021916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b818101828110156200029657fe5b92915050565b6113d980620002ac6000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610184578063095ea7b31461020e57806317ffc3201461024657806318160ddd1461026957806323b872dd146102905780632ff2e9dc146102ba578063313ce567146102cf5780633f4ba83a146102fa57806342966c681461030f5780634fed6a101461032757806350c2e4f6146103585780635960b74f1461036d5780635b52c7fb146103825780635c975abb1461039757806366188463146103ac57806370a08231146103d0578063715018a6146103f15780638456cb59146104065780638c88512f1461041b5780638da5cb5b1461043c57806395d89b41146104515780639c1e03a014610466578063a9059cbb1461047b578063b9c3a8181461049f578063c48590e914610358578063d1c673e9146104b4578063d73dd62314610520578063dd62ed3e14610544578063ef9f60231461056b578063f2fde38b14610580575b600080fd5b34801561019057600080fd5b506101996105a1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d35781810151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021a57600080fd5b50610232600160a060020a03600435166024356105d8565b604080519115158252519081900360200190f35b34801561025257600080fd5b50610267600160a060020a0360043516610603565b005b34801561027557600080fd5b5061027e6106d1565b60408051918252519081900360200190f35b34801561029c57600080fd5b50610232600160a060020a03600435811690602435166044356106d7565b3480156102c657600080fd5b5061027e610704565b3480156102db57600080fd5b506102e4610714565b6040805160ff9092168252519081900360200190f35b34801561030657600080fd5b50610267610719565b34801561031b57600080fd5b50610267600435610791565b34801561033357600080fd5b5061033c61079e565b60408051600160a060020a039092168252519081900360200190f35b34801561036457600080fd5b5061027e6107ad565b34801561037957600080fd5b5061033c6107bc565b34801561038e57600080fd5b5061027e6107cb565b3480156103a357600080fd5b506102326107da565b3480156103b857600080fd5b50610232600160a060020a03600435166024356107ea565b3480156103dc57600080fd5b5061027e600160a060020a036004351661080e565b3480156103fd57600080fd5b50610267610829565b34801561041257600080fd5b50610267610897565b34801561042757600080fd5b50610267600160a060020a0360043516610914565b34801561044857600080fd5b5061033c610a01565b34801561045d57600080fd5b50610199610a10565b34801561047257600080fd5b5061033c610a47565b34801561048757600080fd5b50610232600160a060020a0360043516602435610a56565b3480156104ab57600080fd5b5061027e610a7a565b3480156104c057600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261023294600160a060020a038135169460248035956044359536956084949301918190840183828082843750949750610a899650505050505050565b34801561052c57600080fd5b50610232600160a060020a0360043516602435610c90565b34801561055057600080fd5b5061027e600160a060020a0360043581169060243516610cb4565b34801561057757600080fd5b5061027e610cdf565b34801561058c57600080fd5b50610267600160a060020a0360043516610cef565b60408051808201909152600981527f4d656e6c6f204f6e650000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156105f257600080fd5b6105fc8383610d0f565b9392505050565b600354600090600160a060020a0316331461061d57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561067e57600080fd5b505af1158015610692573d6000803e3d6000fd5b505050506040513d60208110156106a857600080fd5b50516003549091506106cd90600160a060020a0384811691168363ffffffff610d7516565b5050565b60015490565b60035460009060a060020a900460ff16156106f157600080fd5b6106fc848484610e2d565b949350505050565b6b033b2e3c9fd0803ce800000081565b601281565b600354600160a060020a0316331461073057600080fd5b60035460a060020a900460ff16151561074857600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b61079b3382610fa2565b50565b600554600160a060020a031681565b6a52b7d2dcc80cd2e400000081565b600654600160a060020a031681565b6acb7c86b8b8ec58b600000081565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561080457600080fd5b6105fc83836110a3565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461084057600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031633146108ae57600080fd5b60035460a060020a900460ff16156108c557600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a0316331461092b57600080fd5b600454600160a060020a031680156109a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4578706563746564206164647265737320746f206265206e756c6c0000000000604482015290519081900360640190fd5b6109ac610719565b336000908152602081905260409020546109c7908390610a56565b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790556109f8610897565b6106cd82610cef565b600354600160a060020a031681565b60408051808201909152600381527f4f4e450000000000000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a031681565b60035460009060a060020a900460ff1615610a7057600080fd5b6105fc8383611192565b6aa56fa5b99019a5c800000081565b6000610a958585610a56565b15610c85576040517fa5938410000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052604483018690526080606484019081528551608485015285517f150b7a030000000000000000000000000000000000000000000000000000000094600160a060020a038b169463a59384109490938b938b938b93929160a490910190602085019080838360005b83811015610b4e578181015183820152602001610b36565b50505050905090810190601f168015610b7b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b505050506040513d6020811015610bc757600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614610c7d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f54617267657420636f6e7472616374206f6e546f6b656e52656365697665642060448201527f6661696c65640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060016106fc565b506000949350505050565b60035460009060a060020a900460ff1615610caa57600080fd5b6105fc8383611271565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6b0124d26a73f76098a200000081565b600354600160a060020a03163314610d0657600080fd5b61079b8161130a565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050506040513d6020811015610e1b57600080fd5b50511515610e2857600080fd5b505050565b600160a060020a038316600090815260208190526040812054821115610e5257600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610e8257600080fd5b600160a060020a0383161515610e9757600080fd5b600160a060020a038416600090815260208190526040902054610ec0908363ffffffff61138816565b600160a060020a038086166000908152602081905260408082209390935590851681522054610ef5908363ffffffff61139a16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610f37908363ffffffff61138816565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a038216600090815260208190526040902054811115610fc757600080fd5b600160a060020a038216600090815260208190526040902054610ff0908263ffffffff61138816565b600160a060020a03831660009081526020819052604090205560015461101c908263ffffffff61138816565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106110f757336000908152600260209081526040808320600160a060020a038816845290915281205561112c565b611107818463ffffffff61138816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b336000908152602081905260408120548211156111ae57600080fd5b600160a060020a03831615156111c357600080fd5b336000908152602081905260409020546111e3908363ffffffff61138816565b3360009081526020819052604080822092909255600160a060020a03851681522054611215908363ffffffff61139a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546112a5908363ffffffff61139a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a038116151561131f57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561139457fe5b50900390565b818101828110156113a757fe5b929150505600a165627a7a723058203ec4bdb7ed28b3309c69eadf0f976dd7eb35c7a15675eb6e6c1245f1514a0fcd0029000000000000000000000000c7997618453cdf6d647f8ae142f050e17e753515000000000000000000000000597db3138d3e1355dad2788de0602c3a5faa41ac000000000000000000000000c85ff64317db5350d23e3066accef2b493a39d490000000000000000000000004c57c88ef190088e3cd30b9a371ae51aa598c47e",
  "constructorArguments": "000000000000000000000000c7997618453cdf6d647f8ae142f050e17e753515000000000000000000000000597db3138d3e1355dad2788de0602c3a5faa41ac000000000000000000000000c85ff64317db5350d23e3066accef2b493a39d490000000000000000000000004c57c88ef190088e3cd30b9a371ae51aa598c47e"
}