{
  "address": "0xadf07ae026c660968223f9f376a928523f248b69",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XAU",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract XAUinterface {\n    \n     function XAUFallback(address _from, uint _value, uint _code);\n    \n}\n\ncontract XAU is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n  \n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"Au Coin\";\n    string public constant symbol = \"XAU\";\n    uint public constant decimals = 10;\n    uint256 public totalSupply = 1274000000e10;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n   \n   \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n \n    \n    function XAU () public {\n        owner = msg.sender;\n        balances[owner]=1274000000e10;\n        Transfer(address(0), owner, 1274000000e10);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n  \n    function () public payable {\n    }\n    \n   \n   \n    function balanceOf(address _owner)public view  returns (uint256) {\n        return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n \n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    \n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    function transfer(address _to, uint _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n    \n    // SafeMath.sub will throw if there is not enough balance.\n        if(!isContract(_to)){\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n            }\n        else{\n            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n            balances[_to] = balanceOf(_to).add(_value);\n            XAUinterface receiver = XAUinterface(_to);\n            receiver.XAUFallback(msg.sender, _value, 0);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n    }\n\n    function transfer(address _to, uint _value,uint _code) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n    \n    // SafeMath.sub will throw if there is not enough balance.\n        if(!isContract(_to)){\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else{\n            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n            balances[_to] = balanceOf(_to).add(_value);\n            XAUinterface receiver = XAUinterface(_to);\n            receiver.XAUFallback(msg.sender, _value, _code);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n    }\n    \n\n    function isContract(address _addr) private returns (bool is_contract) {\n    uint length;\n    assembly {\n        //retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_addr)\n    }\n    return (length>0);\n  }\n\n\n}",
  "bytecode": "608060405260018054600160a060020a0319163317905567b0cd9280267a000060055534801561002e57600080fd5b5060018054600160a060020a0319163317808255600160a060020a03908116600090815260026020908152604080832067b0cd9280267a00009081905594548151958652905193169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610ad5806100b26000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c6578063095bcdb614610150578063095ea7b31461018b57806318160ddd146101af57806323b872dd146101d6578063313ce567146102005780633ccfd60b1461021557806370a082311461022a57806395d89b411461024b578063a9059cbb14610260578063dd62ed3e14610284578063f2fde38b146102ab578063f9f92be4146102cc575b005b3480156100d257600080fd5b506100db6102ed565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101155781810151838201526020016100fd565b50505050905090810190601f1680156101425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015c57600080fd5b50610177600160a060020a0360043516602435604435610324565b604080519115158252519081900360200190f35b34801561019757600080fd5b50610177600160a060020a0360043516602435610519565b3480156101bb57600080fd5b506101c46105c1565b60408051918252519081900360200190f35b3480156101e257600080fd5b50610177600160a060020a03600435811690602435166044356105c7565b34801561020c57600080fd5b506101c461073a565b34801561022157600080fd5b506100c461073f565b34801561023657600080fd5b506101c4600160a060020a0360043516610799565b34801561025757600080fd5b506100db6107b4565b34801561026c57600080fd5b50610177600160a060020a03600435166024356107eb565b34801561029057600080fd5b506101c4600160a060020a03600435811690602435166109c7565b3480156102b757600080fd5b506100c4600160a060020a03600435166109f2565b3480156102d857600080fd5b50610177600160a060020a0360043516610a44565b60408051808201909152600781527f417520436f696e00000000000000000000000000000000000000000000000000602082015281565b600080600160a060020a038516151561033c57600080fd5b3360009081526002602052604090205484111561035857600080fd5b61036185610a59565b15156104055733600090815260026020526040902054610387908563ffffffff610a6116565b3360009081526002602052604080822092909255600160a060020a038716815220546103b9908563ffffffff610a7316565b600160a060020a038616600081815260026020908152604091829020939093558051878152905191923392600080516020610a8a8339815191529281900390910190a360019150610511565b61041e8461041233610799565b9063ffffffff610a6116565b336000908152600260205260409020556104478461043b87610799565b9063ffffffff610a7316565b600160a060020a0386166000818152600260205260408082209390935582517f6ec8b5ac000000000000000000000000000000000000000000000000000000008152336004820152602481018890526044810187905292518894509192636ec8b5ac926064808301939282900301818387803b1580156104c657600080fd5b505af11580156104da573d6000803e3d6000fd5b5050604080518781529051600160a060020a0389169350339250600080516020610a8a8339815191529181900360200190a3600191505b509392505050565b6000811580159061054c5750336000908152600360209081526040808320600160a060020a038716845290915290205415155b15610559575060006105bb565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055481565b6000606060643610156105d657fe5b600160a060020a03841615156105eb57600080fd5b600160a060020a03851660009081526002602052604090205483111561061057600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561064057600080fd5b600160a060020a038516600090815260026020526040902054610669908463ffffffff610a6116565b600160a060020a03861660009081526002602090815260408083209390935560038152828220338352905220546106a6908463ffffffff610a6116565b600160a060020a0380871660009081526003602090815260408083203384528252808320949094559187168152600290915220546106ea908463ffffffff610a7316565b600160a060020a038086166000818152600260209081526040918290209490945580518781529051919392891692600080516020610a8a83398151915292918290030190a3506001949350505050565b600a81565b600154600090600160a060020a0316331461075957600080fd5b50600154604051303191600160a060020a03169082156108fc029083906000818181858888f19350505050158015610795573d6000803e3d6000fd5b5050565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600381527f5841550000000000000000000000000000000000000000000000000000000000602082015281565b600080600160a060020a038416151561080357600080fd5b3360009081526002602052604090205483111561081f57600080fd5b61082884610a59565b15156108cc573360009081526002602052604090205461084e908463ffffffff610a6116565b3360009081526002602052604080822092909255600160a060020a03861681522054610880908463ffffffff610a7316565b600160a060020a038516600081815260026020908152604091829020939093558051868152905191923392600080516020610a8a8339815191529281900390910190a3600191506109c0565b6108d98361041233610799565b336000908152600260205260409020556108f68361043b86610799565b600160a060020a0385166000818152600260205260408082209390935582517f6ec8b5ac000000000000000000000000000000000000000000000000000000008152336004820152602481018790526044810182905292518794509192636ec8b5ac926064808301939282900301818387803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b5050604080518681529051600160a060020a0388169350339250600080516020610a8a8339815191529181900360200190a3600191505b5092915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600154600160a060020a03163314610a0957600080fd5b600160a060020a03811615610a41576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60046020526000908152604090205460ff1681565b6000903b1190565b600082821115610a6d57fe5b50900390565b600082820183811015610a8257fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058206618e7eb97bc85abac1c6105a07283d75803d8af89da2b991ec931280adc17eb0029"
}