{
  "address": "0xdfcbe90d50d97babc04711fdcdf85c527375334e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sophia_Token",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-03\n*/\n\npragma solidity ^0.4.24;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Sophia_Token is IERC20 {\n    \n    using SafeMath for uint256;\n    \n    address owner;\n    \n    uint public constant _totalSupply = 250000000000000000000000000;\n    \n    string public constant name = \"OpenCryptoTrust Token\";\n    string public constant symbol = \"OCTb\";\n    uint8 public constant decimals = 18;\n    \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    \n    constructor () {\n        \n        owner = msg.sender;\n        balances[msg.sender] = _totalSupply;\n    }\n    \n    function totalSupply () constant returns (uint256 totalSupply) {\n        return _totalSupply;\n    }\n \n    function balanceOf (address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }   \n\n    function transfer (address _to, uint256 _value) returns (bool success) {\n        require(\n            balances[msg.sender] >= _value\n            && _value > 0\n        );\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\n        require(\n            allowed[_from][msg.sender] >= _value\n            && balances[_from] >= _value\n            && _value > 0\n        );\n    \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function approve (address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance (address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer (address  indexed _from, address indexed _to, uint256 _value);\n    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633908117825581526001602052604090206acecb8f27f4200f3a000000905561065e8061004d6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb5780633eaaf86b146101e657806370a08231146101fb57806395d89b411461021c578063a9059cbb14610231578063dd62ed3e14610255575b600080fd5b3480156100b457600080fd5b506100bd61027c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a03600435166024356102b3565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f610319565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a0360043581169060243516604435610328565b3480156101c757600080fd5b506101d0610497565b6040805160ff9092168252519081900360200190f35b3480156101f257600080fd5b5061017f61049c565b34801561020757600080fd5b5061017f600160a060020a03600435166104ab565b34801561022857600080fd5b506100bd6104c6565b34801561023d57600080fd5b50610156600160a060020a03600435166024356104fd565b34801561026157600080fd5b5061017f600160a060020a03600435811690602435166105d7565b60408051808201909152601581527f4f70656e43727970746f547275737420546f6b656e0000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6acecb8f27f4200f3a00000090565b600160a060020a038316600090815260026020908152604080832033845290915281205482118015906103735750600160a060020a0384166000908152600160205260409020548211155b801561037f5750600082115b151561038a57600080fd5b600160a060020a0384166000908152600160205260409020546103b3908363ffffffff61060216565b600160a060020a0380861660009081526001602052604080822093909355908516815220546103e8908363ffffffff61061916565b600160a060020a03808516600090815260016020908152604080832094909455918716815260028252828120338252909152205461042c908363ffffffff61060216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b6acecb8f27f4200f3a00000081565b600160a060020a031660009081526001602052604090205490565b60408051808201909152600481527f4f43546200000000000000000000000000000000000000000000000000000000602082015281565b33600090815260016020526040812054821180159061051c5750600082115b151561052757600080fd5b33600090815260016020526040902054610547908363ffffffff61060216565b3360009081526001602052604080822092909255600160a060020a03851681522054610579908363ffffffff61061916565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000808383111561061257600080fd5b5050900390565b60008282018381101561062b57600080fd5b93925050505600a165627a7a72305820b266f708f0fba2367bafd7aab8e693d811ce56f5b81aaec68daa8102770b24cf0029"
}