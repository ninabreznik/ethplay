{
  "address": "0xe8db4cea1f7ad7ba22f3dbbab55a336545701d96",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DutyOfCare: Token Sale",
  "contractName": "AllocatedCrowdsale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n\n/*\n * Haltable\n *\n * Abstract contract that allows children to implement an\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n *\n *\n * Originally envisioned in FirstBlood ICO contract.\n */\ncontract Haltable is Ownable {\n  bool public halted;\n\n  modifier stopInEmergency {\n    if (halted) throw;\n    _;\n  }\n\n  modifier stopNonOwnersInEmergency {\n    if (halted && msg.sender != owner) throw;\n    _;\n  }\n\n  modifier onlyInEmergency {\n    if (!halted) throw;\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * Safe unsigned safe math.\n *\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n *\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n *\n * Maintained here until merged to mainline zeppelin-solidity.\n *\n */\nlibrary SafeMathLib {\n\n  function times(uint a, uint b) returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function minus(uint a, uint b) returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function plus(uint a, uint b) returns (uint) {\n    uint c = a + b;\n    assert(c>=a);\n    return c;\n  }\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * A token that defines fractional units as decimals.\n */\ncontract FractionalERC20 is ERC20 {\n\n  uint public decimals;\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * Interface for defining crowdsale pricing.\n */\ncontract PricingStrategy {\n\n  /** Interface declaration. */\n  function isPricingStrategy() public constant returns (bool) {\n    return true;\n  }\n\n  /** Self check if all references are correctly set.\n   *\n   * Checks that pricing strategy matches crowdsale parameters.\n   */\n  function isSane(address crowdsale) public constant returns (bool) {\n    return true;\n  }\n\n  /**\n   * @dev Pricing tells if this is a presale purchase or not.\n     @param purchaser Address of the purchaser\n     @return False by default, true if a presale purchaser\n   */\n  function isPresalePurchase(address purchaser) public constant returns (bool) {\n    return false;\n  }\n\n  /**\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n   *\n   *\n   * @param value - What is the value of the transaction send in as wei\n   * @param tokensSold - how much tokens have been sold this far\n   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\n   * @param msgSender - who is the investor of this transaction\n   * @param decimals - how many decimal units the token has\n   * @return Amount of tokens the investor receives\n   */\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n\n  function getCurrentTrancheVolume(uint tokensSold) public constant returns (uint);\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * Finalize agent defines what happens at the end of succeseful crowdsale.\n *\n * - Allocate tokens for founders, bounties and community\n * - Make tokens transferable\n * - etc.\n */\ncontract FinalizeAgent {\n\n  function isFinalizeAgent() public constant returns(bool) {\n    return true;\n  }\n\n  /** Return true if we can run finalizeCrowdsale() properly.\n   *\n   * This is a safety check function that doesn't allow crowdsale to begin\n   * unless the finalizer has been set up properly.\n   */\n  function isSane() public constant returns (bool);\n\n  /** Called once by crowdsale finalize() if the sale was success. */\n  function finalizeCrowdsale();\n\n}\n\n\n\n/**\n * Crowdsale state machine without buy functionality.\n *\n * Implements basic state machine logic, but leaves out all buy functions,\n * so that subclasses can implement their own buying logic.\n *\n *\n * For the default buy() implementation see Crowdsale.sol.\n */\ncontract CrowdsaleBase is Haltable {\n\n  /* Max investment count when we are still allowed to change the multisig address */\n  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n\n  using SafeMathLib for uint;\n\n  /* The token we are selling */\n  FractionalERC20 public token;\n\n  /* How we are going to price our offering */\n  PricingStrategy public pricingStrategy;\n\n  /* Post-success callback */\n  FinalizeAgent public finalizeAgent;\n\n  /* tokens will be transfered from this address */\n  address public multisigWallet;\n\n  /* if the funding goal is not reached, investors may withdraw their funds */\n  uint public minimumFundingGoal;\n\n  /* the UNIX timestamp start date of the crowdsale */\n  uint public startsAt;\n\n  /* the UNIX timestamp end date of the crowdsale */\n  uint public endsAt;\n\n  /* the number of tokens already sold through this contract*/\n  uint public tokensSold = 0;\n\n  /* How many wei of funding we have raised */\n  uint public weiRaised = 0;\n\n  /* Calculate incoming funds from presale contracts and addresses */\n  uint public presaleWeiRaised = 0;\n\n  /* How many distinct addresses have invested */\n  uint public investorCount = 0;\n\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\n  uint public loadedRefund = 0;\n\n  /* How much wei we have given back to investors.*/\n  uint public weiRefunded = 0;\n\n  /* Has this crowdsale been finalized */\n  bool public finalized;\n\n  /** How much ETH each address has invested to this crowdsale */\n  mapping (address => uint256) public investedAmountOf;\n\n  /** How much tokens this crowdsale has credited for each investor address */\n  mapping (address => uint256) public tokenAmountOf;\n\n  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n  mapping (address => bool) public earlyParticipantWhitelist;\n\n  /** Addresses that are allowed to participate at any stage */\n  mapping (address => bool) public isKycWhitelist;\n\n  /** Addresses that are allowed to call automated management functions */\n  mapping (address => bool) public isManagement;\n\n  /** Minimum number of transactions in a tranche (protects against large purchases breaking tranche barriers by too much */\n  uint public trancheMinTx = 0;\n\n  /** Maximum that any single address can purchase (1 / max * totalSupply) */\n  uint public maximumPurchaseFraction = 0;\n\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n  uint public ownerTestValue;\n\n  /** State machine\n   *\n   * - Preparing: All contract initialization calls and variables have not been set yet\n   * - Prefunding: We have not passed start time yet\n   * - Funding: Active crowdsale\n   * - Success: Minimum funding goal reached\n   * - Failure: Minimum funding goal not reached before ending time\n   * - Finalized: The finalized has been called and succesfully executed\n   * - Refunding: Refunds are loaded on the contract for reclaim.\n   */\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n\n  // A new investment was made\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n\n  // Refund was processed for a contributor\n  event Refund(address investor, uint weiAmount);\n\n  // The rules were changed what kind of investments we accept\n  event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\n\n  // Address early participation whitelist status changed\n  event Whitelisted(address addr, bool status);\n  event KycWhitelisted(address addr, bool status);\n  event ManagementWhitelisted(address addr, bool status);\n\n  // Crowdsale end time has been changed\n  event EndsAtChanged(uint newEndsAt);\n\n  State public testState;\n\n  modifier onlyWhitelist() {\n    require(isKycWhitelist[msg.sender]);\n    _;\n  }\n  modifier onlyManagement() {\n    require(isManagement[msg.sender]);\n    _;\n  }\n\n  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {\n\n    owner = msg.sender;\n\n    token = FractionalERC20(_token);\n\n    setPricingStrategy(_pricingStrategy);\n\n    multisigWallet = _multisigWallet;\n    if(multisigWallet == 0) {\n        throw;\n    }\n\n    if(_start == 0) {\n        throw;\n    }\n\n    startsAt = _start;\n\n    if(_end == 0) {\n        throw;\n    }\n\n    endsAt = _end;\n\n    // Don't mess the dates\n    if(startsAt >= endsAt) {\n        throw;\n    }\n\n    // Minimum funding goal can be zero\n    minimumFundingGoal = _minimumFundingGoal;\n  }\n\n  /**\n   * Don't expect to just send in money and get tokens.\n   */\n  function() payable {\n    throw;\n  }\n\n  /**\n   * Whitelist manegement\n   */\n  function setKycWhitelist(address _address, bool _state) public onlyManagement {\n    isKycWhitelist[_address] = _state;\n    KycWhitelisted(_address, _state);\n  }\n  /**\n   * Management list manegement\n   */\n  function setManagement(address _address, bool _state) public onlyOwner {\n    isManagement[_address] = _state;\n    ManagementWhitelisted(_address, _state);\n  }\n\n  /**\n   * Tranche TX minimums\n   */\n  function setTrancheMinTx(uint _minimum) public onlyOwner {\n    trancheMinTx = _minimum;\n  }\n\n  /**\n   * Total allowable purchase of tokens per address\n   */\n  function setMaximumPurchaseFraction(uint _maximum) public onlyOwner {\n    maximumPurchaseFraction = _maximum;\n  }\n\n  /**\n   * Make an investment.\n   *\n   * Crowdsale must be running for one to invest.\n   * We must have not pressed the emergency brake.\n   *\n   * @param receiver The Ethereum address who receives the tokens\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side'\n   *\n   * @return tokenAmount How mony tokens were bought\n   */\n  function investInternal(address receiver, uint128 customerId) stopInEmergency onlyWhitelist internal returns(uint tokensBought) {\n\n    // Determine if it's a good time to accept investment from this participant\n    if(getState() == State.PreFunding) {\n      // Are we whitelisted for early deposit\n      if(!earlyParticipantWhitelist[receiver]) {\n        throw;\n      }\n    } else if(getState() == State.Funding) {\n      // Retail participants can only come in when the crowdsale is running\n      // pass\n    } else {\n      // Unwanted state\n      throw;\n    }\n\n    uint weiAmount = msg.value;\n\n    // Account presale sales separately, so that they do not count against pricing tranches\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals());\n\n    // Dust transaction\n    require(tokenAmount != 0);\n\n    // Check that the tx is a reasonable volume for the tranche\n    if (trancheMinTx > 0) {\n      uint trancheVolume = pricingStrategy.getCurrentTrancheVolume(tokensSold);\n      uint maxVolume = trancheVolume / trancheMinTx;\n      require(tokenAmount <= maxVolume);\n    }\n\n    if(maximumPurchaseFraction > 0) {\n      uint256 maximumPurchase = token.totalSupply() / maximumPurchaseFraction;\n      uint256 willHaveTokens = tokenAmountOf[receiver] + tokenAmount;\n      require(willHaveTokens <= maximumPurchase);\n    }\n\n    if(investedAmountOf[receiver] == 0) {\n       // A new investor\n       investorCount++;\n    }\n\n    // Update investor\n    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n\n    // Update totals\n    weiRaised = weiRaised.plus(weiAmount);\n    tokensSold = tokensSold.plus(tokenAmount);\n\n    if(pricingStrategy.isPresalePurchase(receiver)) {\n        presaleWeiRaised = presaleWeiRaised.plus(weiAmount);\n    }\n\n    // Check that we did not bust the cap\n    require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n\n    assignTokens(receiver, tokenAmount);\n\n    // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our multisig\n    if(!multisigWallet.send(weiAmount)) throw;\n\n    // Tell us invest was success\n    Invested(receiver, weiAmount, tokenAmount, customerId);\n\n    return tokenAmount;\n  }\n\n  /**\n   * Finalize a succcesful crowdsale.\n   *\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n   */\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n\n    // Already finalized\n    if(finalized) {\n      throw;\n    }\n\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\n    if(address(finalizeAgent) != 0) {\n      finalizeAgent.finalizeCrowdsale();\n    }\n\n    finalized = true;\n  }\n\n  /**\n   * Allow to (re)set finalize agent.\n   *\n   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n   */\n  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n    finalizeAgent = addr;\n\n    // Don't allow setting bad agent\n    if(!finalizeAgent.isFinalizeAgent()) {\n      throw;\n    }\n  }\n\n  /**\n   * Allow crowdsale owner to close early or extend the crowdsale.\n   *\n   * This is useful e.g. for a manual soft cap implementation:\n   * - after X amount is reached determine manual closing\n   *\n   * This may put the crowdsale to an invalid state,\n   * but we trust owners know what they are doing.\n   *\n   */\n  function setEndsAt(uint time) onlyOwner {\n\n    if(now > time) {\n      throw; // Don't change past\n    }\n\n    if(startsAt > time) {\n      throw; // Prevent human mistakes\n    }\n\n    endsAt = time;\n    EndsAtChanged(endsAt);\n  }\n\n  /**\n   * Allow to (re)set pricing strategy.\n   *\n   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n   */\n  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\n    pricingStrategy = _pricingStrategy;\n\n    // Don't allow setting bad agent\n    if(!pricingStrategy.isPricingStrategy()) {\n      throw;\n    }\n  }\n\n  /**\n   * Allow to change the team multisig address in the case of emergency.\n   *\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n   * (we have done only few test transactions). After the crowdsale is going\n   * then multisig address stays locked for the safety reasons.\n   */\n  function setMultisig(address addr) public onlyOwner {\n\n    // Change\n    if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\n      throw;\n    }\n\n    multisigWallet = addr;\n  }\n\n  /**\n   * Allow load refunds back on the contract for the refunding.\n   *\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n   */\n  function loadRefund() public payable inState(State.Failure) {\n    if(msg.value == 0) throw;\n    loadedRefund = loadedRefund.plus(msg.value);\n  }\n\n  /**\n   * Investors can claim refund.\n   *\n   * Note that any refunds from proxy buyers should be handled separately,\n   * and not through this contract.\n   */\n  function refund() public inState(State.Refunding) {\n    uint256 weiValue = investedAmountOf[msg.sender];\n    if (weiValue == 0) throw;\n    investedAmountOf[msg.sender] = 0;\n    weiRefunded = weiRefunded.plus(weiValue);\n    Refund(msg.sender, weiValue);\n    if (!msg.sender.send(weiValue)) throw;\n  }\n\n  /**\n   * @return true if the crowdsale has raised enough money to be a successful.\n   */\n  function isMinimumGoalReached() public constant returns (bool reached) {\n    return weiRaised >= minimumFundingGoal;\n  }\n\n  /**\n   * Check if the contract relationship looks good.\n   */\n  function isFinalizerSane() public constant returns (bool sane) {\n    return finalizeAgent.isSane();\n  }\n\n  /**\n   * Check if the contract relationship looks good.\n   */\n  function isPricingSane() public constant returns (bool sane) {\n    return pricingStrategy.isSane(address(this));\n  }\n\n  /**\n   * Crowdfund state machine management.\n   *\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n   */\n  function getState() public constant returns (State) {\n    if(finalized) return State.Finalized;\n    else if (address(finalizeAgent) == 0) return State.Preparing;\n    else if (!finalizeAgent.isSane()) return State.Preparing;\n    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n    else if (block.timestamp < startsAt) return State.PreFunding;\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n    else if (isMinimumGoalReached()) return State.Success;\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n    else return State.Failure;\n  }\n\n  /** This is for manual testing of multisig wallet interaction */\n  function setOwnerTestValue(uint val) onlyOwner {\n    ownerTestValue = val;\n  }\n\n  /**\n   * Allow addresses to do early participation.\n   *\n   * TODO: Fix spelling error in the name\n   */\n  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\n    earlyParticipantWhitelist[addr] = status;\n    Whitelisted(addr, status);\n  }\n\n\n  /** Interface marker. */\n  function isCrowdsale() public constant returns (bool) {\n    return true;\n  }\n\n  //\n  // Modifiers\n  //\n\n  /** Modified allowing execution only if the crowdsale is currently running.  */\n  modifier inState(State state) {\n    if(getState() != state) throw;\n    _;\n  }\n\n\n  //\n  // Abstract functions\n  //\n\n  /**\n   * Check if the current invested breaks our cap rules.\n   *\n   *\n   * The child contract must define their own cap setting rules.\n   * We allow a lot of flexibility through different capping strategies (ETH, token count)\n   * Called from invest().\n   *\n   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n   * @param weiRaisedTotal What would be our total raised balance after this transaction\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n   *\n   * @return true if taking this investment would break our cap rules\n   */\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n\n  /**\n   * Check if the current crowdsale is full and we can no longer sell any tokens.\n   */\n  function isCrowdsaleFull() public constant returns (bool);\n\n  /**\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n   */\n  function assignTokens(address receiver, uint tokenAmount) internal;\n}\n\n\n/**\n * A mixin that is selling tokens from a preallocated pool\n *\n * - Tokens have precreated supply \"premined\"\n *\n * - Token owner must transfer sellable tokens to the crowdsale contract using ERC20.approve()\n *\n * - The mixin does not implement buy entry point.\n *\n */\ncontract AllocatedCrowdsaleMixin is CrowdsaleBase {\n\n  /* The party who holds the full token pool and has approve()'ed tokens for this crowdsale */\n  address public beneficiary;\n\n  /**\n   * @param _beneficiary The account who has performed approve() to allocate tokens for the token sale.\n   *\n   */\n  function AllocatedCrowdsaleMixin(address _beneficiary) {\n    beneficiary = _beneficiary;\n  }\n\n  /**\n   * Called from invest() to confirm if the curret investment does not break our cap rule.\n   */\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n    if(tokenAmount > getTokensLeft()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * We are sold out when our approve pool becomes empty.\n   */\n  function isCrowdsaleFull() public constant returns (bool) {\n    return getTokensLeft() == 0;\n  }\n\n  /**\n   * Get the amount of unsold tokens allocated to this contract;\n   */\n  function getTokensLeft() public constant returns (uint) {\n    return token.allowance(owner, this);\n  }\n\n  /**\n   * Transfer tokens from approve() pool to the buyer.\n   *\n   * Use approve() given to this crowdsale to distribute the tokens.\n   */\n  function assignTokens(address receiver, uint tokenAmount) internal {\n    if(!token.transferFrom(beneficiary, receiver, tokenAmount)) throw;\n  }\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n\n\n\n\n\n/**\n * Abstract base contract for token sales with the default buy entry points.\n *\n * Handle\n * - start and end dates\n * - accepting investments\n * - minimum funding goal and refund\n * - various statistics during the crowdfund\n * - different pricing strategies\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\n *\n * Does not Handle\n *\n * - Token allocation (minting vs. transfer)\n * - Cap rules\n *\n */\ncontract Crowdsale is CrowdsaleBase {\n\n  /* Do we need to have unique contributor id for each customer */\n  bool public requireCustomerId;\n\n  /**\n    * Do we verify that contributor has been cleared on the server side (accredited investors only).\n    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\n    */\n  bool public requiredSignedAddress;\n\n  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n  address public signerAddress;\n\n  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {\n  }\n\n  /**\n   * Preallocate tokens for the early investors.\n   *\n   * Preallocated tokens have been sold before the actual crowdsale opens.\n   * This function mints the tokens and moves the crowdsale needle.\n   *\n   * Investor count is not handled; it is assumed this goes for multiple investors\n   * and the token distribution happens outside the smart contract flow.\n   *\n   * No money is exchanged, as the crowdsale team already have received the payment.\n   *\n   * @param fullTokens tokens as full tokens - decimal places added internally\n   * @param weiPrice Price of a single full token in wei\n   *\n   */\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner {\n\n    uint tokenAmount = fullTokens * 10**token.decimals();\n    uint weiAmount = weiPrice * fullTokens; // This can be also 0, we give out tokens for free\n\n    weiRaised = weiRaised.plus(weiAmount);\n    tokensSold = tokensSold.plus(tokenAmount);\n\n    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n\n    assignTokens(receiver, tokenAmount);\n\n    // Tell us invest was success\n    Invested(receiver, weiAmount, tokenAmount, 0);\n  }\n\n  /**\n   * Allow anonymous contributions to this crowdsale.\n   */\n  function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n     bytes32 hash = sha256(addr);\n     if (ecrecover(hash, v, r, s) != signerAddress) throw;\n     if(customerId == 0) throw;  // UUIDv4 sanity check\n     investInternal(addr, customerId);\n  }\n\n  /**\n   * Track who is the customer making the payment so we can send thank you email.\n   */\n  function investWithCustomerId(address addr, uint128 customerId) public payable {\n    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n    if(customerId == 0) throw;  // UUIDv4 sanity check\n    investInternal(addr, customerId);\n  }\n\n  /**\n   * Allow anonymous contributions to this crowdsale.\n   */\n  function invest(address addr) public payable {\n    if(requireCustomerId) throw; // Crowdsale needs to track participants for thank you email\n    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n    investInternal(addr, 0);\n  }\n\n  /**\n   * Invest to tokens, recognize the payer and clear his address.\n   *\n   */\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n    investWithSignedAddress(msg.sender, customerId, v, r, s);\n  }\n\n  /**\n   * Invest to tokens, recognize the payer.\n   *\n   */\n  function buyWithCustomerIdWithChecksum(uint128 customerId, bytes1 checksum) public payable {\n    // see customerid.py\n    if (bytes1(sha3(customerId)) != checksum) throw;\n    investWithCustomerId(msg.sender, customerId);\n  }\n\n  /**\n   * Legacy API signature.\n   */\n  function buyWithCustomerId(uint128 customerId) public payable {\n    investWithCustomerId(msg.sender, customerId);\n  }\n\n  /**\n   * The basic entry point to participate the crowdsale process.\n   *\n   * Pay for funding, get invested tokens back in the sender address.\n   */\n  function buy() public payable {\n    invest(msg.sender);\n  }\n  function() payable {\n    buy();\n  }\n\n  /**\n   * Set policy do we need to have server-side customer ids for the investments.\n   *\n   */\n  function setRequireCustomerId(bool value) onlyOwner {\n    requireCustomerId = value;\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n\n  /**\n   * Set policy if all investors must be cleared on the server side first.\n   *\n   * This is e.g. for the accredited investor clearing.\n   *\n   */\n  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\n    requiredSignedAddress = value;\n    signerAddress = _signerAddress;\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n\n}\n\n\n\n/**\n * An implementation of allocated crowdsale.\n *\n * This implementation does not have KYC logic (vs. KYCCrowdsale).\n *\n */\ncontract AllocatedCrowdsale is AllocatedCrowdsaleMixin, Crowdsale {\n\n  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) AllocatedCrowdsaleMixin(_beneficiary) {\n\n  }\n\n}",
  "bytecode": "6060604052600560015560006009556000600a556000600b556000600c556000600d556000600e556000601555600060165534156200003d57600080fd5b60405160e080620028428339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519190602001805160008054600160a060020a03338116600160a060020a0319928316811783161790925560028054928c16929091169190911790559150879050868686868686868686868686620000d985640100000000620012786200017e82021704565b60058054600160a060020a031916600160a060020a0386811691909117918290551615156200010757600080fd5b8215156200011457600080fd5b60078390558115156200012657600080fd5b60088290556007548290106200013b57600080fd5b600655505060188054600160a060020a039095166101000261010060a860020a031990951694909417909355506200023d9e505050505050505050505050505050565b60005433600160a060020a039081169116146200019a57600080fd5b60038054600160a060020a031916600160a060020a038381169190911791829055166304bbc2556000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200021257600080fd5b6102c65a03f115156200022457600080fd5b5050506040518051905015156200023a57600080fd5b50565b6125f5806200024d6000396000f3006060604052600436106102dc5763ffffffff60e060020a6000350416630226401d81146102e657806303ca0eed1461030b57806303f9c79314610332578063062b01ce146103465780630a09284a1461035957806313f4e9771461036c5780631865c57d1461037f57806319b667da146103b65780631a49803b146103d55780631aae34601461040a57806321d5c0f61461042957806332013ac31461045857806338af3eed1461047d5780634042b66f146104905780634551dd59146104a35780634bb278f3146104b65780634d925ea3146104c957806350c67734146104e8578063518ab2a814610507578063579506971461051a578063590e1ae31461052d5780635b7633d0146105405780635da89ac0146105535780635eb51d3c146105665780635ed7ca5b1461057c5780636203f09f1461058f57806363c6082f146105a2578063683799e6146105e45780636e50eb3f146105fa57806378b99c2414610610578063797d9437146106235780637c2e08a3146106365780637f7d711e1461064957806387612102146106615780638d51faec146106695780638da5cb5b1461067f5780639075becf1461069257806396401c58146106a557806397b150ca146106c957806399d9b306146106e857806399e9376c146106fb5780639d3c663f14610718578063a6f2ae3a146102dc578063a7ba44c314610737578063af4686821461074a578063b3f05b971461075d578063b9b8af0b14610770578063c3edbc2614610783578063cb16e6d0146107a7578063cb3e64fd146107c6578063d222dc04146107d9578063d5d09021146107ec578063d7e64c00146107ff578063de5f986614610812578063ea05667a14610825578063eac2493214610838578063ec0c7e281461085c578063ed68ff2c1461087b578063ef8694431461089f578063f2fde38b146108c8578063f3283fba146108e7578063f486972614610906578063f7c00e2f1461092f578063fc0c546a14610942575b6102e4610955565b005b34156102f157600080fd5b6102f9610960565b60405190815260200160405180910390f35b341561031657600080fd5b61031e610966565b604051901515815260200160405180910390f35b6102e4600160a060020a0360043516610988565b341561035157600080fd5b61031e6109ea565b341561036457600080fd5b6102f9610a65565b341561037757600080fd5b6102f9610a6b565b341561038a57600080fd5b610392610a71565b604051808260078111156103a257fe5b60ff16815260200191505060405180910390f35b34156103c157600080fd5b6102e4600160a060020a0360043516610c1b565b6102e4600160a060020a03600435166fffffffffffffffffffffffffffffffff6024351660ff60443516606435608435610cca565b341561041557600080fd5b6102f9600160a060020a0360043516610de2565b341561043457600080fd5b61043c610df4565b604051600160a060020a03909116815260200160405180910390f35b341561046357600080fd5b6102e4600160a060020a0360043516602435604435610e03565b341561048857600080fd5b61043c61115c565b341561049b57600080fd5b6102f9611170565b34156104ae57600080fd5b61031e611176565b34156104c157600080fd5b6102e461117b565b34156104d457600080fd5b61031e600160a060020a0360043516611263565b34156104f357600080fd5b6102e4600160a060020a0360043516611278565b341561051257600080fd5b6102f96112fe565b341561052557600080fd5b610392611304565b341561053857600080fd5b6102e461130d565b341561054b57600080fd5b61043c611464565b341561055e57600080fd5b6102f9611473565b341561057157600080fd5b6102e4600435611479565b341561058757600080fd5b6102e4611499565b341561059a57600080fd5b6102f96114eb565b6102e46fffffffffffffffffffffffffffffffff600435167fff00000000000000000000000000000000000000000000000000000000000000602435166114f1565b34156105ef57600080fd5b6102e4600435611584565b341561060557600080fd5b6102e46004356115a4565b341561061b57600080fd5b61043c611616565b341561062e57600080fd5b6102f9611625565b341561064157600080fd5b61031e61162b565b341561065457600080fd5b6102e46004351515611636565b6102e4611716565b341561067457600080fd5b6102e46004356117c4565b341561068a57600080fd5b61043c6117e4565b341561069d57600080fd5b61043c6117f3565b34156106b057600080fd5b6102e4600160a060020a03600435166024351515611802565b34156106d457600080fd5b6102f9600160a060020a036004351661189a565b34156106f357600080fd5b6102f96118ac565b6102e46fffffffffffffffffffffffffffffffff600435166118b2565b341561072357600080fd5b61031e6004356024356044356064356118bc565b341561074257600080fd5b61031e6118e1565b341561075557600080fd5b6102f961192b565b341561076857600080fd5b61031e611931565b341561077b57600080fd5b61031e61193a565b341561078e57600080fd5b6102e4600160a060020a0360043516602435151561195b565b34156107b257600080fd5b61031e600160a060020a03600435166119e7565b34156107d157600080fd5b6102e46119fc565b34156107e457600080fd5b61031e611a60565b34156107f757600080fd5b61031e611a83565b341561080a57600080fd5b6102f9611a93565b341561081d57600080fd5b6102f9611a99565b341561083057600080fd5b6102f9611b03565b341561084357600080fd5b6102e4600160a060020a03600435166024351515611b09565b341561086757600080fd5b61031e600160a060020a0360043516611b95565b341561088657600080fd5b6102e46004351515600160a060020a0360243516611baa565b6102e4600160a060020a03600435166fffffffffffffffffffffffffffffffff60243516611cae565b34156108d357600080fd5b6102e4600160a060020a0360043516611d05565b34156108f257600080fd5b6102e4600160a060020a0360043516611d64565b6102e46fffffffffffffffffffffffffffffffff6004351660ff60243516604435606435611dbf565b341561093a57600080fd5b6102f9611dd2565b341561094d57600080fd5b61043c611dd8565b61095e33610988565b565b60175481565b6018547501000000000000000000000000000000000000000000900460ff1681565b6018547501000000000000000000000000000000000000000000900460ff16156109b157600080fd5b601854760100000000000000000000000000000000000000000000900460ff16156109db57600080fd5b6109e6816000611de7565b5050565b600354600090600160a060020a0316638e76828830836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610a4557600080fd5b6102c65a03f11515610a5657600080fd5b50505060405180519150505b90565b60085481565b60065481565b600f5460009060ff1615610a8757506006610a62565b600454600160a060020a03161515610aa157506001610a62565b600454600160a060020a03166382771c8e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ae957600080fd5b6102c65a03f11515610afa57600080fd5b505050604051805190501515610b1257506001610a62565b600354600160a060020a0316638e7682883060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b6b57600080fd5b6102c65a03f11515610b7c57600080fd5b505050604051805190501515610b9457506001610a62565b600754421015610ba657506002610a62565b6008544211158015610bbd5750610bbb611a83565b155b15610bca57506003610a62565b610bd261162b565b15610bdf57506004610a62565b610be761162b565b158015610bf657506000600a54115b8015610c065750600a54600d5410155b15610c1357506007610a62565b506005610a62565b60005433600160a060020a03908116911614610c3657600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290551663614cb9046000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ca157600080fd5b6102c65a03f11515610cb257600080fd5b505050604051805190501515610cc757600080fd5b50565b6000600286600060405160200152604051600160a060020a03919091166c0100000000000000000000000002815260140160206040518083038160008661646e5a03f11515610d1857600080fd5b50506040518051601954909250600160a060020a031690506001828686866040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f11515610d9557600080fd5b505060206040510351600160a060020a031614610db157600080fd5b6fffffffffffffffffffffffffffffffff85161515610dcf57600080fd5b610dd98686611de7565b50505050505050565b60106020526000908152604090205481565b600454600160a060020a031681565b60008054819033600160a060020a03908116911614610e2157600080fd5b600254600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e6957600080fd5b6102c65a03f11515610e7a57600080fd5b50505060405180519050600a0a840291508383029050600a547399422cd5a7ebca1c477e9275a8093255d24bed026366098d4f90918360006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610ef257600080fd5b6102c65a03f41515610f0357600080fd5b5050506040518051600a55506009547399422cd5a7ebca1c477e9275a8093255d24bed02906366098d4f908460006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610f7157600080fd5b6102c65a03f41515610f8257600080fd5b505050604051805160095550600160a060020a038516600090815260106020526040808220547399422cd5a7ebca1c477e9275a8093255d24bed02926366098d4f92859190516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561100557600080fd5b6102c65a03f4151561101657600080fd5b5050506040518051600160a060020a03871660009081526010602090815260408083209390935560119052818120547399422cd5a7ebca1c477e9275a8093255d24bed0293506366098d4f9290918691516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156110a457600080fd5b6102c65a03f415156110b557600080fd5b5050506040518051600160a060020a038716600090815260116020526040902055506110e1858361252b565b7f0396f60aaad038749091d273dc13aaabc63db6e2271c7bad442d5cf25cc4335085828460006040518085600160a060020a0316600160a060020a03168152602001848152602001838152602001826fffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a15050505050565b6018546101009004600160a060020a031681565b600a5481565b600190565b600480611186610a71565b600781111561119157fe5b1461119b57600080fd5b60005433600160a060020a039081169116146111b657600080fd5b60005474010000000000000000000000000000000000000000900460ff16156111de57600080fd5b600f5460ff16156111ee57600080fd5b600454600160a060020a03161561125357600454600160a060020a0316630bf318a36040518163ffffffff1660e060020a028152600401600060405180830381600087803b151561123e57600080fd5b6102c65a03f1151561124f57600080fd5b5050505b50600f805460ff19166001179055565b60136020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461129357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166304bbc2556000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ca157600080fd5b60095481565b60185460ff1681565b600060078061131a610a71565b600781111561132557fe5b1461132f57600080fd5b600160a060020a033316600090815260106020526040902054915081151561135657600080fd5b600160a060020a033316600090815260106020526040808220829055600e547399422cd5a7ebca1c477e9275a8093255d24bed02926366098d4f92869190516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156113d257600080fd5b6102c65a03f415156113e357600080fd5b5050506040518051600e55507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d3383604051600160a060020a03909216825260208201526040908101905180910390a1600160a060020a03331682156108fc0283604051600060405180830381858888f1935050505015156109e657600080fd5b601954600160a060020a031681565b600e5481565b60005433600160a060020a0390811691161461149457600080fd5b601555565b60005433600160a060020a039081169116146114b457600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60015481565b7fff000000000000000000000000000000000000000000000000000000000000008116826040516fffffffffffffffffffffffffffffffff919091167001000000000000000000000000000000000281526010016040519081900390207fff00000000000000000000000000000000000000000000000000000000000000161461157a57600080fd5b6109e63383611cae565b60005433600160a060020a0390811691161461159f57600080fd5b601655565b60005433600160a060020a039081169116146115bf57600080fd5b804211156115cc57600080fd5b8060075411156115db57600080fd5b60088190557fd34bb772c4ae9baa99db852f622773b31c7827e8ee818449fef20d30980bd3108160405190815260200160405180910390a150565b600354600160a060020a031681565b600d5481565b600654600a54101590565b60005433600160a060020a0390811691161461165157600080fd5b6018805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000831515810291909117918290556019547f48d826081348f5f00e8a33c9ae8ce89ed4c6e88400b585a478bc203d9e8177d39260ff9281048316927601000000000000000000000000000000000000000000009091041690600160a060020a031660405192151583529015156020830152600160a060020a03166040808301919091526060909101905180910390a150565b600580611721610a71565b600781111561172c57fe5b1461173657600080fd5b34151561174257600080fd5b600d547399422cd5a7ebca1c477e9275a8093255d24bed026366098d4f90913460006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156117a457600080fd5b6102c65a03f415156117b557600080fd5b5050506040518051600d555050565b60005433600160a060020a039081169116146117df57600080fd5b601755565b600054600160a060020a031681565b600554600160a060020a031681565b600160a060020a03331660009081526014602052604090205460ff16151561182957600080fd5b600160a060020a03821660009081526013602052604090819020805460ff19168315151790557fa9cdd5d09190ef5411d8af62b4a1d1b260a1168b644cabcee1afdc7f9808c1ea908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60116020526000908152604090205481565b60155481565b610cc73382611cae565b60006118c6611a99565b8411156118d5575060016118d9565b5060005b949350505050565b600454600090600160a060020a03166382771c8e82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a4557600080fd5b60075481565b600f5460ff1681565b60005474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a0390811691161461197657600080fd5b600160a060020a03821660009081526014602052604090819020805460ff19168315151790557f3722931bae6148ab64541ce067a6e0ecbb3f21e016ba52c034ae3e7f8982e737908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60126020526000908152604090205460ff1681565b60005433600160a060020a03908116911614611a1757600080fd5b60005474010000000000000000000000000000000000000000900460ff161515611a4057600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b601854760100000000000000000000000000000000000000000000900460ff1681565b6000611a8d611a99565b15905090565b600c5481565b600254600080549091600160a060020a039081169163dd62ed3e911630846040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610a4557600080fd5b60165481565b60005433600160a060020a03908116911614611b2457600080fd5b600160a060020a03821660009081526012602052604090819020805460ff19168315151790557fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f26440908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60146020526000908152604090205460ff1681565b60005433600160a060020a03908116911614611bc557600080fd5b6018805476ff000000000000000000000000000000000000000000001916760100000000000000000000000000000000000000000000841515810291909117918290556019805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385811691909117918290557f48d826081348f5f00e8a33c9ae8ce89ed4c6e88400b585a478bc203d9e8177d39360ff7501000000000000000000000000000000000000000000820481169490910416911660405192151583529015156020830152600160a060020a03166040808301919091526060909101905180910390a15050565b601854760100000000000000000000000000000000000000000000900460ff1615611cd857600080fd5b6fffffffffffffffffffffffffffffffff81161515611cf657600080fd5b611d008282611de7565b505050565b60005433600160a060020a03908116911614611d2057600080fd5b600160a060020a0381161515611d3557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614611d7f57600080fd5b600154600c541115611d9057600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b611dcc3385858585610cca565b50505050565b600b5481565b600254600160a060020a031681565b60008060008060008060008060149054906101000a900460ff1615611e0b57600080fd5b600160a060020a03331660009081526013602052604090205460ff161515611e3257600080fd5b6002611e3c610a71565b6007811115611e4757fe5b1415611e7957600160a060020a03891660009081526012602052604090205460ff161515611e7457600080fd5b611e9e565b6003611e83610a71565b6007811115611e8e57fe5b1415611e9957611e9e565b600080fd5b600354600b54600a54600954600254349a50600160a060020a03948516946318a4155e948c9403929133911663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611f0657600080fd5b6102c65a03f11515611f1757600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8816028152600481019590955260248501939093526044840191909152600160a060020a03166064830152608482015260a401602060405180830381600087803b1515611f8357600080fd5b6102c65a03f11515611f9457600080fd5b5050506040518051955050841515611fab57600080fd5b6000601554111561204757600354600954600160a060020a039091169063306c4ebe9060006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561200d57600080fd5b6102c65a03f1151561201e57600080fd5b5050506040518051905093506015548481151561203757fe5b0492508285111561204757600080fd5b600060165411156120f057601654600254600160a060020a03166318160ddd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561209d57600080fd5b6102c65a03f115156120ae57600080fd5b505050604051805190508115156120c157fe5b600160a060020a038b16600090815260116020526040902054919004925085019050818111156120f057600080fd5b600160a060020a038916600090815260106020526040902054151561211957600c805460010190555b600160a060020a038916600090815260106020526040808220547399422cd5a7ebca1c477e9275a8093255d24bed02926366098d4f928a9190516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561219057600080fd5b6102c65a03f415156121a157600080fd5b5050506040518051600160a060020a038b1660009081526010602090815260408083209390935560119052818120547399422cd5a7ebca1c477e9275a8093255d24bed0293506366098d4f9290918991516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561222f57600080fd5b6102c65a03f4151561224057600080fd5b5050506040518051600160a060020a038b1660009081526011602052604080822092909255600a547399422cd5a7ebca1c477e9275a8093255d24bed0293506366098d4f9290918a91516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156122c757600080fd5b6102c65a03f415156122d857600080fd5b5050506040518051600a55506009547399422cd5a7ebca1c477e9275a8093255d24bed02906366098d4f908760006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561234657600080fd5b6102c65a03f4151561235757600080fd5b505050604051805160095550600354600160a060020a031663f14ae17d8a60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156123bc57600080fd5b6102c65a03f115156123cd57600080fd5b505050604051805190501561245c57600b547399422cd5a7ebca1c477e9275a8093255d24bed026366098d4f90918860006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561243e57600080fd5b6102c65a03f4151561244f57600080fd5b5050506040518051600b55505b61246c8686600a546009546118bc565b1561247657600080fd5b612480898661252b565b600554600160a060020a031686156108fc0287604051600060405180830381858888f1935050505015156124b357600080fd5b7f0396f60aaad038749091d273dc13aaabc63db6e2271c7bad442d5cf25cc433508987878b604051600160a060020a03909416845260208401929092526040808401919091526fffffffffffffffffffffffffffffffff90911660608301526080909101905180910390a15092979650505050505050565b600254601854600160a060020a03918216916323b872dd91610100900416848460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156125a357600080fd5b6102c65a03f115156125b457600080fd5b5050506040518051905015156109e657600080fd00a165627a7a723058208af48e030a93930483bb13006950704887d20afbb325c77ce82f2351b2f3a11d002900000000000000000000000082bd526bdb718c6d4dd2291ed013a5186cae2dca000000000000000000000000fed170a89320b695e745bece9441ee33049b25d0000000000000000000000000771226ea2e5eb2f0d4f373d0f42a63a3aa81cc3b000000000000000000000000000000000000000000000000000000005a97c110000000000000000000000000000000000000000000000000000000005ae82c900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000771226ea2e5eb2f0d4f373d0f42a63a3aa81cc3b",
  "constructorArguments": "00000000000000000000000082bd526bdb718c6d4dd2291ed013a5186cae2dca000000000000000000000000fed170a89320b695e745bece9441ee33049b25d0000000000000000000000000771226ea2e5eb2f0d4f373d0f42a63a3aa81cc3b000000000000000000000000000000000000000000000000000000005a97c110000000000000000000000000000000000000000000000000000000005ae82c900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000771226ea2e5eb2f0d4f373d0f42a63a3aa81cc3b",
  "libraries": [
    {
      "name": "SafeMathLib",
      "address": "0x99422cd5a7ebca1c477e9275a8093255d24bed02"
    }
  ]
}