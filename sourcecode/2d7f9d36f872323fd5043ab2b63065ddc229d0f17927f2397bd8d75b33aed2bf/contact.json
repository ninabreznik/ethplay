{
  "address": "0x3008a6c26e54399fd0ece8fd2e5e06b3d807509c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ChestMining",
  "compilerVersion": "v0.4.25-nightly.2018.5.18+commit.4d7b092c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface IDataMining {\n    function subFreeMineral(address _target) external returns(bool);\n}\n\n\n\ncontract Random {\n    uint256 _seed;\n\n    function _rand() internal returns (uint256) {\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n        return _seed;\n    }\n\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract RaceToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Get fashion attrs by tokenId front\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent; \n        datas[13] = _tokenId;      \n    }\n\n    /// @dev Get fashion attrs by tokenId back\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;      \n    }\n\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}\n\n//Tournament bonus interface\ninterface IRaceCoin {\n    function addTotalEtherPool(uint256 amount) external;\n    function addPlayerToList(address player) external;\n    function increasePlayersAttribute(address player, uint16[13] param) external;\n    function reducePlayersAttribute(address player, uint16[13] param) external;\n}\n\ncontract ChestMining is Random, AccessService {\n    using SafeMath for uint256;\n\n    event MiningOrderCreated(uint256 indexed index, address indexed miner, uint64 chestCnt);\n    event MiningResolved(uint256 indexed index, address indexed miner, uint64 chestCnt);\n\n    struct MiningOrder {\n        address miner;      \n        uint64 chestCnt;    \n        uint64 tmCreate;    \n        uint64 tmResolve;   \n    }\n\n    /// @dev Max fashion suit id\n    uint16 maxProtoId;\n    /// @dev prizepool percent\n    uint256 constant prizePoolPercent = 80;\n    /// @dev prizepool contact address\n    address poolContract;\n    /// @dev RaceToken(NFT) contract address\n    RaceToken public tokenContract;\n    /// @dev DataMining contract address\n    IDataMining public dataContract;\n    /// @dev mining order array\n    MiningOrder[] public ordersArray;\n\n    IRaceCoin public raceCoinContract;\n\n\n    mapping (uint16 => uint256) public protoIdToCount;\n\n\n    function ChestMining(address _nftAddr, uint16 _maxProtoId) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = RaceToken(_nftAddr);\n        maxProtoId = _maxProtoId;\n        \n        MiningOrder memory order = MiningOrder(0, 0, 1, 1);\n        ordersArray.push(order);\n    }\n\n    function() external payable {\n\n    }\n\n    function getOrderCount() external view returns(uint256) {\n        return ordersArray.length - 1;\n    }\n\n    function setDataMining(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        dataContract = IDataMining(_addr);\n    }\n    \n    function setPrizePool(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        poolContract = _addr;\n        raceCoinContract = IRaceCoin(_addr);\n    }\n\n    \n\n    function setMaxProtoId(uint16 _maxProtoId) external onlyAdmin {\n        require(_maxProtoId > 0 && _maxProtoId < 10000);\n        require(_maxProtoId != maxProtoId);\n        maxProtoId = _maxProtoId;\n    }\n\n    \n\n    function setFashionSuitCount(uint16 _protoId, uint256 _cnt) external onlyAdmin {\n        require(_protoId > 0 && _protoId <= maxProtoId);\n        require(_cnt > 0 && _cnt <= 8);\n        require(protoIdToCount[_protoId] != _cnt);\n        protoIdToCount[_protoId] = _cnt;\n    }\n\n    function _getFashionParam(uint256 _seed) internal view returns(uint16[13] attrs) {\n        uint256 curSeed = _seed;\n        // quality\n        uint256 rdm = curSeed % 10000;\n        uint16 qtyParam;\n        if (rdm < 6900) {\n            attrs[1] = 1;\n            qtyParam = 0;\n        } else if (rdm < 8700) {\n            attrs[1] = 2;\n            qtyParam = 1;\n        } else if (rdm < 9600) {\n            attrs[1] = 3;\n            qtyParam = 2;\n        } else if (rdm < 9900) {\n            attrs[1] = 4;\n            qtyParam = 4;\n        } else {\n            attrs[1] = 5;\n            qtyParam = 7;\n        }\n\n        // protoId\n        curSeed /= 10000;\n        rdm = ((curSeed % 10000) / (9999 / maxProtoId)) + 1;\n        attrs[0] = uint16(rdm <= maxProtoId ? rdm : maxProtoId);\n\n        // pos\n        curSeed /= 10000;\n        uint256 tmpVal = protoIdToCount[attrs[0]];\n        if (tmpVal == 0) {\n            tmpVal = 8;\n        }\n        rdm = ((curSeed % 10000) / (9999 / tmpVal)) + 1;\n        uint16 pos = uint16(rdm <= tmpVal ? rdm : tmpVal);\n        attrs[2] = pos;\n\n        rdm = attrs[0] % 3;\n\n        curSeed /= 10000;\n        tmpVal = (curSeed % 10000) % 21 + 90;\n\n        if (rdm == 0) {\n            if (pos == 1) {\n                attrs[3] = uint16((20 + qtyParam * 20) * tmpVal / 100);              // +production\n            } else if (pos == 2) {\n                attrs[4] = uint16((100 + qtyParam * 100) * tmpVal / 100);            // +attack\n            } else if (pos == 3) {\n                attrs[5] = uint16((70 + qtyParam * 70) * tmpVal / 100);              // +defense\n            } else if (pos == 4) {\n                attrs[6] = uint16((500 + qtyParam * 500) * tmpVal / 100);            // +plunder\n            } else if (pos == 5) {\n                attrs[7] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +productionMultiplier\n            } else if (pos == 6) {\n                attrs[8] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +attackMultiplier\n            } else if (pos == 7) {\n                attrs[9] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((4 + qtyParam * 4) * tmpVal / 100);               // +plunderMultiplier\n            } \n        } else if (rdm == 1) {\n            if (pos == 1) {\n                attrs[3] = uint16((19 + qtyParam * 19) * tmpVal / 100);              // +production\n            } else if (pos == 2) {\n                attrs[4] = uint16((90 + qtyParam * 90) * tmpVal / 100);            // +attack\n            } else if (pos == 3) {\n                attrs[5] = uint16((63 + qtyParam * 63) * tmpVal / 100);              // +defense\n            } else if (pos == 4) {\n                attrs[6] = uint16((450 + qtyParam * 450) * tmpVal / 100);            // +plunder\n            } else if (pos == 5) {\n                attrs[7] = uint16((3 + qtyParam * 3) * tmpVal / 100);                // +productionMultiplier\n            } else if (pos == 6) {\n                attrs[8] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +attackMultiplier\n            } else if (pos == 7) {\n                attrs[9] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((3 + qtyParam * 3) * tmpVal / 100);               // +plunderMultiplier\n            } \n        } else {\n            if (pos == 1) {\n                attrs[3] = uint16((21 + qtyParam * 21) * tmpVal / 100);              // +production\n            } else if (pos == 2) {\n                attrs[4] = uint16((110 + qtyParam * 110) * tmpVal / 100);            // +attack\n            } else if (pos == 3) {\n                attrs[5] = uint16((77 + qtyParam * 77) * tmpVal / 100);              // +defense\n            } else if (pos == 4) {\n                attrs[6] = uint16((550 + qtyParam * 550) * tmpVal / 100);            // +plunder\n            } else if (pos == 5) {\n                attrs[7] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +productionMultiplier\n            } else if (pos == 6) {\n                attrs[8] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +attackMultiplier\n            } else if (pos == 7) {\n                attrs[9] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((5 + qtyParam * 5) * tmpVal / 100);               // +plunderMultiplier\n            } \n        }\n        attrs[11] = 0;\n        attrs[12] = 0;\n    }\n\n    function _addOrder(address _miner, uint64 _chestCnt) internal {\n        uint64 newOrderId = uint64(ordersArray.length);\n        ordersArray.length += 1;\n        MiningOrder storage order = ordersArray[newOrderId];\n        order.miner = _miner;\n        order.chestCnt = _chestCnt;\n        order.tmCreate = uint64(block.timestamp);\n\n        emit MiningOrderCreated(newOrderId, _miner, _chestCnt);\n    }\n\n    function _transferHelper(uint256 ethVal) private {\n\n        uint256 fVal;\n        uint256 pVal;\n        \n        fVal = ethVal.mul(prizePoolPercent).div(100);\n        pVal = ethVal.sub(fVal);\n        addrFinance.transfer(pVal);\n        if (poolContract != address(0) && pVal > 0) {\n            poolContract.transfer(fVal);\n            raceCoinContract.addTotalEtherPool(fVal);\n        }        \n        \n    }\n\n    function miningOneFree()\n        external\n        payable\n        whenNotPaused\n    {\n        require(dataContract != address(0));\n\n        uint256 seed = _rand();\n        uint16[13] memory attrs = _getFashionParam(seed);\n\n        require(dataContract.subFreeMineral(msg.sender));\n\n        tokenContract.createFashion(msg.sender, attrs, 3);\n\n        emit MiningResolved(0, msg.sender, 1);\n    }\n\n    function miningOneSelf() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.01 ether);\n\n        uint256 seed = _rand();\n        uint16[13] memory attrs = _getFashionParam(seed);\n\n        tokenContract.createFashion(msg.sender, attrs, 2);\n        _transferHelper(0.01 ether);\n\n        if (msg.value > 0.01 ether) {\n            msg.sender.transfer(msg.value - 0.01 ether);\n        }\n\n        emit MiningResolved(0, msg.sender, 1);\n    }\n\n\n    function miningThreeSelf() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.03 ether);\n\n\n        for (uint64 i = 0; i < 3; ++i) {\n            uint256 seed = _rand();\n            uint16[13] memory attrs = _getFashionParam(seed);\n            tokenContract.createFashion(msg.sender, attrs, 2);\n        }\n\n        _transferHelper(0.03 ether);\n\n        if (msg.value > 0.03 ether) {\n            msg.sender.transfer(msg.value - 0.03 ether);\n        }\n\n        emit MiningResolved(0, msg.sender, 3);\n    }\n\n    function miningFiveSelf() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.0475 ether);\n\n\n        for (uint64 i = 0; i < 5; ++i) {\n            uint256 seed = _rand();\n            uint16[13] memory attrs = _getFashionParam(seed);\n            tokenContract.createFashion(msg.sender, attrs, 2);\n        }\n\n        _transferHelper(0.0475 ether);\n\n        if (msg.value > 0.0475 ether) {\n            msg.sender.transfer(msg.value - 0.0475 ether);\n        }\n\n        emit MiningResolved(0, msg.sender, 5);\n    }\n\n\n    function miningTenSelf() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.09 ether);\n\n\n        for (uint64 i = 0; i < 10; ++i) {\n            uint256 seed = _rand();\n            uint16[13] memory attrs = _getFashionParam(seed);\n            tokenContract.createFashion(msg.sender, attrs, 2);\n        }\n\n        _transferHelper(0.09 ether);\n\n        if (msg.value > 0.09 ether) {\n            msg.sender.transfer(msg.value - 0.09 ether);\n        }\n\n        emit MiningResolved(0, msg.sender, 10);\n    }\n    \n\n    function miningOne() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.01 ether);\n\n        _addOrder(msg.sender, 1);\n        _transferHelper(0.01 ether);\n\n        if (msg.value > 0.01 ether) {\n            msg.sender.transfer(msg.value - 0.01 ether);\n        }\n    }\n\n    function miningThree() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.03 ether);\n\n        _addOrder(msg.sender, 3);\n        _transferHelper(0.03 ether);\n\n        if (msg.value > 0.03 ether) {\n            msg.sender.transfer(msg.value - 0.03 ether);\n        }\n    }\n\n    function miningFive() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.0475 ether);\n\n        _addOrder(msg.sender, 5);\n        _transferHelper(0.0475 ether);\n\n        if (msg.value > 0.0475 ether) {\n            msg.sender.transfer(msg.value - 0.0475 ether);\n        }\n    }\n\n    function miningTen() \n        external \n        payable \n        whenNotPaused\n    {\n        require(msg.value >= 0.09 ether);\n        \n        _addOrder(msg.sender, 10);\n        _transferHelper(0.09 ether);\n\n        if (msg.value > 0.09 ether) {\n            msg.sender.transfer(msg.value - 0.09 ether);\n        }\n    }\n\n    function miningResolve(uint256 _orderIndex, uint256 _seed) \n        external \n        onlyService\n    {\n        require(_orderIndex > 0 && _orderIndex < ordersArray.length);\n        MiningOrder storage order = ordersArray[_orderIndex];\n        require(order.tmResolve == 0);\n        address miner = order.miner;\n        require(miner != address(0));\n        uint64 chestCnt = order.chestCnt;\n        require(chestCnt >= 1 && chestCnt <= 10);\n\n        uint256 rdm = _seed;\n        uint16[13] memory attrs;\n        for (uint64 i = 0; i < chestCnt; ++i) {\n            rdm = _randBySeed(rdm);\n            attrs = _getFashionParam(rdm);\n            tokenContract.createFashion(miner, attrs, 2);\n        }\n        order.tmResolve = uint64(block.timestamp);\n        emit MiningResolved(_orderIndex, miner, chestCnt);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad000000000000000000000000000000000000000000000000000000000000270f"
}