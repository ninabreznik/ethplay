{
  "address": "0x22aae864a5b1f8e3d41bba0050e0b0027cd793ce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CuboToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-12\n*/\n\npragma solidity ^0.4.16;\n\n\t/*\n\t * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n\t * Author: Mikhail Vladimirov <[email protected]>\n\t */\n\tpragma solidity ^0.4.20;\n\n\t/*\n\t * EIP-20 Standard Token Smart Contract Interface.\n\t * Copyright © 2016–2018 by ABDK Consulting.\n\t * Author: Mikhail Vladimirov <[email protected]>\n\t */\n\tpragma solidity ^0.4.20;\n\n\t/**\n\t * ERC-20 standard token interface, as defined\n\t * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\n\t */\n\tcontract Token {\n\t  /**\n\t   * Get total number of tokens in circulation.\n\t   *\n\t   * @return total number of tokens in circulation\n\t   */\n\t  function totalSupply () public view returns (uint256 supply);\n\n\t  /**\n\t   * Get number of tokens currently belonging to given owner.\n\t   *\n\t   * @param _owner address to get number of tokens currently belonging to the\n\t   *        owner of\n\t   * @return number of tokens currently belonging to the owner of given address\n\t   */\n\t  function balanceOf (address _owner) public view returns (uint256 balance);\n\n\t  /**\n\t   * Transfer given number of tokens from message sender to given recipient.\n\t   *\n\t   * @param _to address to transfer tokens to the owner of\n\t   * @param _value number of tokens to transfer to the owner of given address\n\t   * @return true if tokens were transferred successfully, false otherwise\n\t   */\n\t  function transfer (address _to, uint256 _value)\n\t  public returns (bool success);\n\n\t  /**\n\t   * Transfer given number of tokens from given owner to given recipient.\n\t   *\n\t   * @param _from address to transfer tokens from the owner of\n\t   * @param _to address to transfer tokens to the owner of\n\t   * @param _value number of tokens to transfer from given owner to given\n\t   *        recipient\n\t   * @return true if tokens were transferred successfully, false otherwise\n\t   */\n\t  function transferFrom (address _from, address _to, uint256 _value)\n\t  public returns (bool success);\n\n\t  /**\n\t   * Allow given spender to transfer given number of tokens from message sender.\n\t   *\n\t   * @param _spender address to allow the owner of to transfer tokens from\n\t   *        message sender\n\t   * @param _value number of tokens to allow to transfer\n\t   * @return true if token transfer was successfully approved, false otherwise\n\t   */\n\t  function approve (address _spender, uint256 _value)\n\t  public returns (bool success);\n\n\t  /**\n\t   * Tell how many tokens given spender is currently allowed to transfer from\n\t   * given owner.\n\t   *\n\t   * @param _owner address to get number of tokens allowed to be transferred\n\t   *        from the owner of\n\t   * @param _spender address to get number of tokens allowed to be transferred\n\t   *        by the owner of\n\t   * @return number of tokens given spender is currently allowed to transfer\n\t   *         from given owner\n\t   */\n\t  function allowance (address _owner, address _spender)\n\t  public view returns (uint256 remaining);\n\n\t  /**\n\t   * Logged when tokens were transferred from one owner to another.\n\t   *\n\t   * @param _from address of the owner, tokens were transferred from\n\t   * @param _to address of the owner, tokens were transferred to\n\t   * @param _value number of tokens transferred\n\t   */\n\t  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n\t  /**\n\t   * Logged when owner approved his tokens to be transferred by some spender.\n\t   *\n\t   * @param _owner owner who approved his tokens to be transferred\n\t   * @param _spender spender who were allowed to transfer the tokens belonging\n\t   *        to the owner\n\t   * @param _value number of tokens belonging to the owner, approved to be\n\t   *        transferred by the spender\n\t   */\n\t  event Approval (\n\t\taddress indexed _owner, address indexed _spender, uint256 _value);\n\t}\n\t/*\n\t * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n\t * Author: Mikhail Vladimirov <[email protected]>\n\t */\n\tpragma solidity ^0.4.20;\n\n\t/**\n\t * Provides methods to safely add, subtract and multiply uint256 numbers.\n\t */\n\tcontract SafeMath {\n\t  uint256 constant private MAX_UINT256 =\n\t\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n\t  /**\n\t   * Add two uint256 values, throw in case of overflow.\n\t   *\n\t   * @param x first value to add\n\t   * @param y second value to add\n\t   * @return x + y\n\t   */\n\t  function safeAdd (uint256 x, uint256 y)\n\t  pure internal\n\t  returns (uint256 z) {\n\t\tassert (x <= MAX_UINT256 - y);\n\t\treturn x + y;\n\t  }\n\n\t  /**\n\t   * Subtract one uint256 value from another, throw in case of underflow.\n\t   *\n\t   * @param x value to subtract from\n\t   * @param y value to subtract\n\t   * @return x - y\n\t   */\n\t  function safeSub (uint256 x, uint256 y)\n\t  pure internal\n\t  returns (uint256 z) {\n\t\tassert (x >= y);\n\t\treturn x - y;\n\t  }\n\n\t  /**\n\t   * Multiply two uint256 values, throw in case of overflow.\n\t   *\n\t   * @param x first value to multiply\n\t   * @param y second value to multiply\n\t   * @return x * y\n\t   */\n\t  function safeMul (uint256 x, uint256 y)\n\t  pure internal\n\t  returns (uint256 z) {\n\t\tif (y == 0) return 0; // Prevent division by zero at the next line\n\t\tassert (x <= MAX_UINT256 / y);\n\t\treturn x * y;\n\t  }\n\t}\n\n\n\t/**\n\t * Abstract Token Smart Contract that could be used as a base contract for\n\t * ERC-20 token contracts.\n\t */\n\tcontract AbstractToken is Token, SafeMath {\n\t  /**\n\t   * Create new Abstract Token contract.\n\t   */\n\t  function AbstractToken () public {\n\t\t// Do nothing\n\t  }\n\n\t  /**\n\t   * Get number of tokens currently belonging to given owner.\n\t   *\n\t   * @param _owner address to get number of tokens currently belonging to the\n\t   *        owner of\n\t   * @return number of tokens currently belonging to the owner of given address\n\t   */\n\t  function balanceOf (address _owner) public view returns (uint256 balance) {\n\t\treturn accounts [_owner];\n\t  }\n\n\t  /**\n\t   * Transfer given number of tokens from message sender to given recipient.\n\t   *\n\t   * @param _to address to transfer tokens to the owner of\n\t   * @param _value number of tokens to transfer to the owner of given address\n\t   * @return true if tokens were transferred successfully, false otherwise\n\t   */\n\t  function transfer (address _to, uint256 _value)\n\t  public returns (bool success) {\n\t\tuint256 fromBalance = accounts [msg.sender];\n\t\tif (fromBalance < _value) return false;\n\t\tif (_value > 0 && msg.sender != _to) {\n\t\t  accounts [msg.sender] = safeSub (fromBalance, _value);\n\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n\t\t}\n\t\tTransfer (msg.sender, _to, _value);\n\t\treturn true;\n\t  }\n\n\t  /**\n\t   * Transfer given number of tokens from given owner to given recipient.\n\t   *\n\t   * @param _from address to transfer tokens from the owner of\n\t   * @param _to address to transfer tokens to the owner of\n\t   * @param _value number of tokens to transfer from given owner to given\n\t   *        recipient\n\t   * @return true if tokens were transferred successfully, false otherwise\n\t   */\n\t  function transferFrom (address _from, address _to, uint256 _value)\n\t  public returns (bool success) {\n\t\tuint256 spenderAllowance = allowances [_from][msg.sender];\n\t\tif (spenderAllowance < _value) return false;\n\t\tuint256 fromBalance = accounts [_from];\n\t\tif (fromBalance < _value) return false;\n\n\t\tallowances [_from][msg.sender] =\n\t\t  safeSub (spenderAllowance, _value);\n\n\t\tif (_value > 0 && _from != _to) {\n\t\t  accounts [_from] = safeSub (fromBalance, _value);\n\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n\t\t}\n\t\tTransfer (_from, _to, _value);\n\t\treturn true;\n\t  }\n\n\t  /**\n\t   * Allow given spender to transfer given number of tokens from message sender.\n\t   *\n\t   * @param _spender address to allow the owner of to transfer tokens from\n\t   *        message sender\n\t   * @param _value number of tokens to allow to transfer\n\t   * @return true if token transfer was successfully approved, false otherwise\n\t   */\n\t  function approve (address _spender, uint256 _value)\n\t  public returns (bool success) {\n\t\tallowances [msg.sender][_spender] = _value;\n\t\tApproval (msg.sender, _spender, _value);\n\n\t\treturn true;\n\t  }\n\n\t  /**\n\t   * Tell how many tokens given spender is currently allowed to transfer from\n\t   * given owner.\n\t   *\n\t   * @param _owner address to get number of tokens allowed to be transferred\n\t   *        from the owner of\n\t   * @param _spender address to get number of tokens allowed to be transferred\n\t   *        by the owner of\n\t   * @return number of tokens given spender is currently allowed to transfer\n\t   *         from given owner\n\t   */\n\t  function allowance (address _owner, address _spender)\n\t  public view returns (uint256 remaining) {\n\t\treturn allowances [_owner][_spender];\n\t  }\n\n\t  /**\n\t   * Mapping from addresses of token holders to the numbers of tokens belonging\n\t   * to these token holders.\n\t   */\n\t  mapping (address => uint256) internal accounts;\n\n\t  /**\n\t   * Mapping from addresses of token holders to the mapping of addresses of\n\t   * spenders to the allowances set by these token holders to these spenders.\n\t   */\n\t  mapping (address => mapping (address => uint256)) internal allowances;\n\t}\n\n\n\t/**\n\t * Cubomania token smart contract.\n\t */\n\tcontract CuboToken is AbstractToken {\n\t  /**\n\t   * Total number of tokens in circulation.\n\t   */\n\t  uint256 tokenCount;\n\n\t  /**\n\t   * Create new Cubomania token smart contract, with given number of tokens issued\n\t   * and given to msg.sender.\n\t   *\n\t   * @param _tokenCount number of tokens to issue and give to msg.sender\n\t   */\n\t  function CuboToken (uint256 _tokenCount) public {\n\t\ttokenCount = _tokenCount;\n\t\taccounts [msg.sender] = _tokenCount;\n\t  }\n\n\t  /**\n\t   * Get total number of tokens in circulation.\n\t   *\n\t   * @return total number of tokens in circulation\n\t   */\n\t  function totalSupply () public view returns (uint256 supply) {\n\t\treturn tokenCount;\n\t  }\n\n\t  /**\n\t   * Get name of this token.\n\t   *\n\t   * @return name of this token\n\t   */\n\t  function name () public pure returns (string result) {\n\t\treturn \"Cubo\";\n\t  }\n\n\t  /**\n\t   * Get symbol of this token.\n\t   *\n\t   * @return symbol of this token\n\t   */\n\t  function symbol () public pure returns (string result) {\n\t\treturn \"CUBO\";\n\t  }\n\n\t  /**\n\t   * Get number of decimals for this token.\n\t   *\n\t   * @return number of decimals for this token\n\t   */\n\t  function decimals () public pure returns (uint8 result) {\n\t\treturn 6;\n\t  }\n\n\t  /**\n\t   * Change how many tokens given spender is allowed to transfer from message\n\t   * spender.  In order to prevent double spending of allowance, this method\n\t   * receives assumed current allowance value as an argument.  If actual\n\t   * allowance differs from an assumed one, this method just returns false.\n\t   *\n\t   * @param _spender address to allow the owner of to transfer tokens from\n\t   *        message sender\n\t   * @param _currentValue assumed number of tokens currently allowed to be\n\t   *        transferred\n\t   * @param _newValue number of tokens to allow to transfer\n\t   * @return true if token transfer was successfully approved, false otherwise\n\t   */\n\t  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n\t\tpublic returns (bool success) {\n\t\tif (allowance (msg.sender, _spender) == _currentValue)\n\t\t  return approve (_spender, _newValue);\n\t\telse return false;\n\t  }\n\t}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610701833981016040528080516002819055600160a060020a03331660009081526020819052604090205550506106b0806100516000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d578063313ce567146101b5578063426a8493146101de57806370a082311461020357806395d89b4114610222578063a9059cbb14610235578063dd62ed3e14610257575b600080fd5b34156100b357600080fd5b6100bb61027c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a03600435166024356102bd565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b610329565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a036004358116906024351660443561032f565b34156101c057600080fd5b6101c8610498565b60405160ff909116815260200160405180910390f35b34156101e957600080fd5b610154600160a060020a036004351660243560443561049d565b341561020e57600080fd5b61017b600160a060020a03600435166104cc565b341561022d57600080fd5b6100bb6104e7565b341561024057600080fd5b610154600160a060020a0360043516602435610528565b341561026257600080fd5b61017b600160a060020a036004358116906024351661061f565b610284610672565b60408051908101604052600481527f4375626f000000000000000000000000000000000000000000000000000000006020820152905090565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025490565b600160a060020a03808416600090815260016020908152604080832033909416835292905290812054818382101561036a576000925061048f565b50600160a060020a03851660009081526020819052604090205483811015610395576000925061048f565b61039f828561064a565b600160a060020a03808816600090815260016020908152604080832033909416835292905290812091909155841180156103eb575084600160a060020a031686600160a060020a031614155b15610443576103fa818561064a565b600160a060020a038088166000908152602081905260408082209390935590871681522054610429908561065c565b600160a060020a0386166000908152602081905260409020555b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600690565b6000826104aa338661061f565b14156104c1576104ba84836102bd565b90506104c5565b5060005b9392505050565b600160a060020a031660009081526020819052604090205490565b6104ef610672565b60408051908101604052600481527f4355424f000000000000000000000000000000000000000000000000000000006020820152905090565b600160a060020a033316600090815260208190526040812054828110156105525760009150610618565b600083118015610574575083600160a060020a031633600160a060020a031614155b156105cc57610583818461064a565b600160a060020a0333811660009081526020819052604080822093909355908616815220546105b2908461065c565b600160a060020a0385166000908152602081905260409020555b83600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3600191505b5092915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008183101561065657fe5b50900390565b600060001982900383111561066d57fe5b500190565b602060405190810160405260008152905600a165627a7a723058202dafc1b55195dfaa1712579336fbf63d12891ce674f0e22269831aff9677a7270029000000000000000000000000000000000000000000000000000032ee841b8000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000032ee841b8000"
}