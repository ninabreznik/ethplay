{
  "address": "0xe09752dbfd8b8c1204576481774457a294fdb9fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ContractRegistry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: contracts/governance/DelegateReference.sol\n\n/**\n* @title Delegate reference to be used in other contracts\n*/\ninterface DelegateReference {\n    /**\n    * @notice Stake specified amount of tokens to the delegate to participate in coin distribution\n    */\n    function stake(uint256 _amount) external;\n\n    /**\n    * @notice Unstake specified amount of tokens from the delegate\n    */\n    function unstake(uint256 _amount) external;\n\n    /**\n    * @notice Return number of tokens staked by the specified staker\n    */\n    function stakeOf(address _staker) external view returns (uint256);\n\n    /**\n    * @notice Sets Aerum address for delegate & calling staker\n    */\n    function setAerumAddress(address _aerum) external;\n}\n\n// File: contracts/vesting/MultiVestingWallet.sol\n\n/**\n * @title TokenVesting\n * @notice A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract MultiVestingWallet is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    event Released(address indexed account, uint256 amount);\n    event Revoked(address indexed account);\n    event UnRevoked(address indexed account);\n    event ReturnTokens(uint256 amount);\n    event Promise(address indexed account, uint256 amount);\n    event Stake(address indexed delegate, uint256 amount);\n    event Unstake(address indexed delegate, uint256 amount);\n\n    ERC20 public token;\n\n    uint256 public cliff;\n    uint256 public start;\n    uint256 public duration;\n    uint256 public staked;\n\n    bool public revocable;\n\n    address[] public accounts;\n    mapping(address => bool) public known;\n    mapping(address => uint256) public promised;\n    mapping(address => uint256) public released;\n    mapping(address => bool) public revoked;\n\n    /**\n     * @notice Creates a vesting contract that vests its balance of any ERC20 token to the\n     * of the balance will have vested.\n     * @param _token token being vested\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _start the time (as Unix time) at which point vesting starts\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _revocable whether the vesting is revocable or not\n     */\n    constructor(\n        address _token,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        bool _revocable\n    )\n    public\n    {\n        require(_token != address(0));\n        require(_cliff <= _duration);\n\n        token = ERC20(_token);\n        revocable = _revocable;\n        duration = _duration;\n        cliff = _start.add(_cliff);\n        start = _start;\n    }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     */\n    function release() external {\n        _release(msg.sender);\n    }\n\n    /**\n     * @notice Transfers vested tokens to list of beneficiary.\n     * @param _addresses List of beneficiaries\n     */\n    function releaseBatch(address[] _addresses) external {\n        for (uint256 index = 0; index < _addresses.length; index++) {\n            _release(_addresses[index]);\n        }\n    }\n\n    /**\n     * @notice Transfers vested tokens to batch of beneficiaries (starting 0)\n     * @param _start Index of first beneficiary to release tokens\n     * @param _count Number of beneficiaries to release tokens\n     */\n    function releaseBatchPaged(uint256 _start, uint256 _count) external {\n        uint256 last = _start.add(_count);\n        if (last > accounts.length) {\n            last = accounts.length;\n        }\n\n        for (uint256 index = _start; index < last; index++) {\n            _release(accounts[index]);\n        }\n    }\n\n    /**\n     * @notice Transfers vested tokens to all beneficiaries.\n     */\n    function releaseAll() external {\n        for (uint256 index = 0; index < accounts.length; index++) {\n            _release(accounts[index]);\n        }\n    }\n\n    /**\n     * @notice Internal transfer of vested tokens to beneficiary.\n     */\n    function _release(address _beneficiary) internal {\n        uint256 amount = releasableAmount(_beneficiary);\n        if (amount > 0) {\n            released[_beneficiary] = released[_beneficiary].add(amount);\n            token.safeTransfer(_beneficiary, amount);\n\n            emit Released(_beneficiary, amount);\n        }\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param _beneficiary Account which will be revoked\n     */\n    function revoke(address _beneficiary) public onlyOwner {\n        require(revocable);\n        require(!revoked[_beneficiary]);\n\n        promised[_beneficiary] = vestedAmount(_beneficiary);\n        revoked[_beneficiary] = true;\n\n        emit Revoked(_beneficiary);\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting for few addresses.\n     * @param _addresses Accounts which will be unrevoked\n     */\n    function revokeBatch(address[] _addresses) external onlyOwner {\n        for (uint256 index = 0; index < _addresses.length; index++) {\n            revoke(_addresses[index]);\n        }\n    }\n\n    /**\n     * @notice Allows the owner to unrevoke the vesting.\n     * @param _beneficiary Account which will be unrevoked\n     */\n    function unRevoke(address _beneficiary) public onlyOwner {\n        require(revocable);\n        require(revoked[_beneficiary]);\n\n        revoked[_beneficiary] = false;\n\n        emit UnRevoked(_beneficiary);\n    }\n\n    /**\n     * @notice Allows the owner to unrevoke the vesting for few addresses.\n     * @param _addresses Accounts which will be unrevoked\n     */\n    function unrevokeBatch(address[] _addresses) external onlyOwner {\n        for (uint256 index = 0; index < _addresses.length; index++) {\n            unRevoke(_addresses[index]);\n        }\n    }\n\n    /**\n     * @notice Calculates the amount that has already vested but hasn't been released yet.\n     * @param _beneficiary Account which gets vested tokens\n     */\n    function releasableAmount(address _beneficiary) public view returns (uint256) {\n        return vestedAmount(_beneficiary).sub(released[_beneficiary]);\n    }\n\n    /**\n     * @notice Calculates the amount that has already vested.\n     * @param _beneficiary Account which gets vested tokens\n     */\n    function vestedAmount(address _beneficiary) public view returns (uint256) {\n        uint256 totalPromised = promised[_beneficiary];\n\n        if (block.timestamp < cliff) {\n            return 0;\n        } else if (block.timestamp >= start.add(duration) || revoked[_beneficiary]) {\n            return totalPromised;\n        } else {\n            return totalPromised.mul(block.timestamp.sub(start)).div(duration);\n        }\n    }\n\n    /**\n     * @notice Calculates the amount of free tokens in contract\n     */\n    function remainingBalance() public view returns (uint256) {\n        uint256 tokenBalance = token.balanceOf(address(this));\n        uint256 totalPromised = 0;\n        uint256 totalReleased = 0;\n\n        for (uint256 index = 0; index < accounts.length; index++) {\n            address account = accounts[index];\n            totalPromised = totalPromised.add(promised[account]);\n            totalReleased = totalReleased.add(released[account]);\n        }\n\n        uint256 promisedNotReleased = totalPromised.sub(totalReleased);\n        if (promisedNotReleased > tokenBalance) {\n            return 0;\n        }\n        return tokenBalance.sub(promisedNotReleased);\n    }\n\n    /**\n    * @notice Calculates amount of tokens promised\n    */\n    function totalPromised() public view returns (uint256) {\n        uint256 total = 0;\n\n        for (uint256 index = 0; index < accounts.length; index++) {\n            address account = accounts[index];\n            total = total.add(promised[account]);\n        }\n\n        return total;\n    }\n\n    /**\n    * @notice Calculates amount of tokens released\n    */\n    function totalReleased() public view returns (uint256) {\n        uint256 total = 0;\n\n        for (uint256 index = 0; index < accounts.length; index++) {\n            address account = accounts[index];\n            total = total.add(released[account]);\n        }\n\n        return total;\n    }\n\n    /**\n     * @notice Returns free tokens to owner\n     */\n    function returnRemaining() external onlyOwner {\n        uint256 remaining = remainingBalance();\n        require(remaining > 0);\n\n        token.safeTransfer(owner, remaining);\n\n        emit ReturnTokens(remaining);\n    }\n\n    /**\n     * @notice Returns all tokens to owner\n     */\n    function returnAll() external onlyOwner {\n        uint256 remaining = token.balanceOf(address(this));\n        token.safeTransfer(owner, remaining);\n\n        emit ReturnTokens(remaining);\n    }\n\n    /**\n     * @notice Sets promise to account\n     * @param _beneficiary Account which gets vested tokens\n     * @param _amount Amount of tokens vested\n     */\n    function promise(address _beneficiary, uint256 _amount) public onlyOwner {\n        if (!known[_beneficiary]) {\n            known[_beneficiary] = true;\n            accounts.push(_beneficiary);\n        }\n\n        promised[_beneficiary] = _amount;\n\n        emit Promise(_beneficiary, _amount);\n    }\n\n    /**\n     * @notice Sets promise to list of account\n     * @param _addresses Accounts which will get promises\n     * @param _amounts Promise amounts\n     */\n    function promiseBatch(address[] _addresses, uint256[] _amounts) external onlyOwner {\n        require(_addresses.length == _amounts.length);\n\n        for (uint256 index = 0; index < _addresses.length; index++) {\n            promise(_addresses[index], _amounts[index]);\n        }\n    }\n\n    /**\n     * @notice Returns full list if beneficiaries\n     */\n    function getBeneficiaries() external view returns (address[]) {\n        return accounts;\n    }\n\n    /**\n     * @notice Returns number of beneficiaries\n     */\n    function getBeneficiariesCount() external view returns (uint256) {\n        return accounts.length;\n    }\n\n    /**\n     * @notice Stake specified amount of vested tokens to the delegate by the beneficiary\n     */\n    function stake(address _delegate, uint256 _amount) external onlyOwner {\n        staked = staked.add(_amount);\n        token.approve(_delegate, _amount);\n        DelegateReference(_delegate).stake(_amount);\n\n        emit Stake(_delegate, _amount);\n    }\n\n    /**\n     * @notice Unstake the given number of vested tokens by the beneficiary\n     */\n    function unstake(address _delegate, uint256 _amount) external onlyOwner {\n        staked = staked.sub(_amount);\n        DelegateReference(_delegate).unstake(_amount);\n\n        emit Unstake(_delegate, _amount);\n    }\n}\n\n// File: contracts\\registry\\ContractRegistry.sol\n\n/**\n * @title Contract registry\n */\ncontract ContractRegistry is Ownable {\n\n    struct ContractRecord {\n        address addr;\n        bytes32 name;\n        bool enabled;\n    }\n\n    address private token;\n\n    /**\n     * @dev contracts Mapping of contracts\n     */\n    mapping(bytes32 => ContractRecord) private contracts;\n    /**\n     * @dev contracts Mapping of contract names\n     */\n    bytes32[] private contractsName;\n\n    event ContractAdded(bytes32 indexed _name);\n    event ContractRemoved(bytes32 indexed _name);\n\n    constructor(address _token) public {\n        require(_token != address(0), \"Token is required\");\n        token = _token;\n    }\n\n    /**\n     * @dev Returns contract by name\n     * @param _name Contract's name\n     */\n    function getContractByName(bytes32 _name) external view returns (address, bytes32, bool) {\n        ContractRecord memory record = contracts[_name];\n        if(record.addr == address(0) || !record.enabled) {\n            return;\n        }\n        return (record.addr, record.name, record.enabled);\n    }\n\n    /**\n     * @dev Returns contract's names\n     */\n    function getContractNames() external view returns (bytes32[]) {\n        uint count = 0;\n        for(uint i = 0; i < contractsName.length; i++) {\n            if(contracts[contractsName[i]].enabled) {\n                count++;\n            }\n        }\n        bytes32[] memory result = new bytes32[](count);\n        uint j = 0;\n        for(i = 0; i < contractsName.length; i++) {\n            if(contracts[contractsName[i]].enabled) {\n                result[j] = contractsName[i];\n                j++;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @notice Creates a vesting contract that vests its balance of any ERC20 token to the\n     * of the balance will have vested.\n     * @param _name contract's name\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _start the time (as Unix time) at which point vesting starts\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _revocable whether the vesting is revocable or not\n     */\n    function addContract(\n        bytes32 _name,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        bool _revocable) external onlyOwner {\n        require(contracts[_name].addr == address(0), \"Contract's name should be unique\");\n        require(_cliff <= _duration, \"Cliff shall be bigger than duration\");\n\n        MultiVestingWallet wallet = new MultiVestingWallet(token, _start, _cliff, _duration, _revocable);\n        wallet.transferOwnership(msg.sender);\n        address walletAddr = address(wallet);\n        \n        ContractRecord memory record = ContractRecord({\n            addr: walletAddr,\n            name: _name,\n            enabled: true\n        });\n        contracts[_name] = record;\n        contractsName.push(_name);\n\n        emit ContractAdded(_name);\n    }\n\n    /**\n     * @dev Enables/disables contract by address\n     * @param _name Name of the contract\n     */\n    function setEnabled(bytes32 _name, bool enabled) external onlyOwner {\n        ContractRecord memory record = contracts[_name];\n        require(record.addr != address(0), \"Contract with specified address does not exist\");\n\n        contracts[_name].enabled = enabled;\n    }\n\n     /**\n     * @dev Set's new name\n     * @param _oldName Old name of the contract\n     * @param _newName New name of the contract\n     */\n    function setNewName(bytes32 _oldName, bytes32 _newName) external onlyOwner {\n        require(contracts[_newName].addr == address(0), \"Contract's name should be unique\");\n\n        ContractRecord memory record = contracts[_oldName];\n        require(record.addr != address(0), \"Contract's old name should be defined\");\n\n        record.name = _newName;\n        contracts[_newName] = record;\n        contractsName.push(_newName);\n\n        delete contracts[_oldName];\n        contractsName = removeByValue(contractsName, _oldName);\n    }\n\n    function removeByValue(bytes32[] memory _array, bytes32 _name) private pure returns(bytes32[]) {\n        uint i = 0;\n        uint j = 0;\n        bytes32[] memory outArray = new bytes32[](_array.length - 1);\n        while (i < _array.length) {\n            if(_array[i] != _name) {\n                outArray[j] = _array[i];\n                j++;\n            }\n            i++;\n        }\n        return outArray;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806123c0833981016040525160008054600160a060020a03191633179055600160a060020a03811615156100ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6b656e206973207265717569726564000000000000000000000000000000604482015290519081900360640190fd5b60018054600160a060020a031916600160a060020a03929092169190911790556122e6806100da6000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c2d33b8811461009257806337df1e9d146100ba5780635f4c19a11461011f578063602cf5731461013a578063715018a6146101575780638da5cb5b1461016c578063956109261461019d578063f2fde38b146101df575b600080fd5b34801561009e57600080fd5b506100b86004356024356044356064356084351515610200565b005b3480156100c657600080fd5b506100cf610505565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561010b5781810151838201526020016100f3565b505050509050019250505060405180910390f35b34801561012b57600080fd5b506100b8600435602435610625565b34801561014657600080fd5b506100b8600435602435151561088c565b34801561016357600080fd5b506100b8610992565b34801561017857600080fd5b506101816109fe565b60408051600160a060020a039092168252519081900360200190f35b3480156101a957600080fd5b506101b5600435610a0d565b60408051600160a060020a0390941684526020840192909252151582820152519081900360600190f35b3480156101eb57600080fd5b506100b8600160a060020a0360043516610a93565b60008061020b610be7565b600054600160a060020a0316331461022257600080fd5b600088815260026020526040902054600160a060020a03161561028f576040805160e560020a62461bcd02815260206004820181905260248201527f436f6e74726163742773206e616d652073686f756c6420626520756e69717565604482015290519081900360640190fd5b8486111561030d576040805160e560020a62461bcd02815260206004820152602360248201527f436c696666207368616c6c20626520626967676572207468616e20647572617460448201527f696f6e0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600160a060020a031687878787610325610c07565b600160a060020a039095168552602085019390935260408085019290925260608401529015156080830152519081900360a001906000f08015801561036e573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529051919450600160a060020a0385169163f2fde38b9160248082019260009290919082900301818387803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b5050505082915060606040519081016040528083600160a060020a031681526020018960001916815260200160011515815250905080600260008a6000191660001916815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a031602179055506020820151816001019060001916905560408201518160020160006101000a81548160ff021916908315150217905550905050600388908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555087600019167f67064e2c996fe83cffe55522a2c1260099406d1641156fff27407562901b0d4260405160405180910390a25050505050505050565b606060008082815b600354831015610563576002600060038581548110151561052a57fe5b6000918252602080832090910154835282019290925260400190206002015460ff1615610558576001909301925b60019092019161050d565b8360405190808252806020026020018201604052801561058d578160200160208202803883390190505b50915060009050600092505b60035483101561061d57600260006003858154811015156105b657fe5b6000918252602080832090910154835282019290925260400190206002015460ff16156106125760038054849081106105eb57fe5b9060005260206000200154828281518110151561060457fe5b602090810290910101526001015b600190920191610599565b509392505050565b61062d610be7565b600054600160a060020a0316331461064457600080fd5b600082815260026020526040902054600160a060020a0316156106b1576040805160e560020a62461bcd02815260206004820181905260248201527f436f6e74726163742773206e616d652073686f756c6420626520756e69717565604482015290519081900360640190fd5b5060008281526002602081815260409283902083516060810185528154600160a060020a031680825260018301549382019390935292015460ff16151592820192909252901515610772576040805160e560020a62461bcd02815260206004820152602560248201527f436f6e74726163742773206f6c64206e616d652073686f756c6420626520646560448201527f66696e6564000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b602080820183815260008481526002808452604080832086518154600160a060020a0390911673ffffffffffffffffffffffffffffffffffffffff19918216178255945160018083019190915582880151918401805492151560ff199384161790556003805480830182557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018a90558a8652838620805490971687559086019490945593909101805490931690925580548251818502810185019093528083526108729383018282801561086757602002820191906000526020600020905b81548152600190910190602001808311610852575b505050505084610ab6565b805161088691600391602090910190610c17565b50505050565b610894610be7565b600054600160a060020a031633146108ab57600080fd5b5060008281526002602081815260409283902083516060810185528154600160a060020a031680825260018301549382019390935292015460ff1615159282019290925290151561096c576040805160e560020a62461bcd02815260206004820152602e60248201527f436f6e747261637420776974682073706563696669656420616464726573732060448201527f646f6573206e6f74206578697374000000000000000000000000000000000000606482015290519081900360840190fd5b506000918252600260208190526040909220909101805460ff1916911515919091179055565b600054600160a060020a031633146109a957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b6000806000610a1a610be7565b5060008481526002602081815260409283902083516060810185528154600160a060020a031680825260018301549382019390935292015460ff16151592820192909252901580610a6d57508060400151155b15610a7757610a8b565b805160208201516040830151919550935091505b509193909250565b600054600160a060020a03163314610aaa57600080fd5b610ab381610b6a565b50565b6060600080606060009250600091506001865103604051908082528060200260200182016040528015610af3578160200160208202803883390190505b5090505b8551831015610b615785518590879085908110610b1057fe5b6020908102909101015114610b56578583815181101515610b2d57fe5b906020019060200201518183815181101515610b4557fe5b602090810290910101526001909101905b600190920191610af7565b95945050505050565b600160a060020a0381161515610b7f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080516060810182526000808252602082018190529181019190915290565b60405161163980610c8283390190565b828054828255906000526020600020908101928215610c54579160200282015b82811115610c545782518255602090920191600190910190610c37565b50610c60929150610c64565b5090565b610c7e91905b80821115610c605760008155600101610c6a565b905600608060405234801561001057600080fd5b5060405160a0806116398339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317905591939091600160a060020a038516151561006457600080fd5b8183111561007157600080fd5b60018054600160a060020a031916600160a060020a0387161790556006805460ff191682151517905560048290556100b684846401000000006100c581026112f61704565b600255505050600355506100d8565b818101828110156100d257fe5b92915050565b611552806100e76000396000f3006080604052600436106101b65763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663055e3e5e81146101bb5780630b76619b146101dd5780630fb5a6b41461020457806313d033c0146102195780631726cbc81461022e57806322dfc9441461024f57806337f54e4514610284578063384711cc146102a55780634321a35e146102c657806343501fb1146102db5780635be7fde8146102ff578063669be70114610314578063715018a61461032957806374a8f1031461033e5780637ec932f01461035f57806385b1423e1461037457806386d1a69f14610389578063872a78101461039e5780638da5cb5b146103b3578063913b722c146103e45780639852595c146104495780639f5cc8711461046a578063a352fd241461048b578063adc9772e146104a6578063be9a6555146104ca578063c2a672e0146104df578063c3ca162114610503578063da25de3c1461052f578063de8f98da14610544578063df745d2814610564578063e33b7de314610584578063f2a40db814610599578063f2fde38b146105b1578063fa01dc06146105d2578063fc0c546a146105f3575b600080fd5b3480156101c757600080fd5b506101db6004803560248101910135610608565b005b3480156101e957600080fd5b506101f261065d565b60408051918252519081900360200190f35b34801561021057600080fd5b506101f2610663565b34801561022557600080fd5b506101f2610669565b34801561023a57600080fd5b506101f2600160a060020a036004351661066f565b34801561025b57600080fd5b50610270600160a060020a03600435166106a7565b604080519115158252519081900360200190f35b34801561029057600080fd5b506101db600160a060020a03600435166106bc565b3480156102b157600080fd5b506101f2600160a060020a0360043516610754565b3480156102d257600080fd5b506101db610808565b3480156102e757600080fd5b506101db600160a060020a0360043516602435610890565b34801561030b57600080fd5b506101db610990565b34801561032057600080fd5b506101f26109d4565b34801561033557600080fd5b506101db6109da565b34801561034a57600080fd5b506101db600160a060020a0360043516610a46565b34801561036b57600080fd5b506101f2610af8565b34801561038057600080fd5b506101db610b64565b34801561039557600080fd5b506101db610c34565b3480156103aa57600080fd5b50610270610c3f565b3480156103bf57600080fd5b506103c8610c48565b60408051600160a060020a039092168252519081900360200190f35b3480156103f057600080fd5b506103f9610c57565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561043557818101518382015260200161041d565b505050509050019250505060405180910390f35b34801561045557600080fd5b506101f2600160a060020a0360043516610cb9565b34801561047657600080fd5b506101f2600160a060020a0360043516610ccb565b34801561049757600080fd5b506101db600435602435610cdd565b3480156104b257600080fd5b506101db600160a060020a0360043516602435610d2e565b3480156104d657600080fd5b506101f2610eb2565b3480156104eb57600080fd5b506101db600160a060020a0360043516602435610eb8565b34801561050f57600080fd5b506101db6024600480358281019290820135918135918201910135610fa1565b34801561053b57600080fd5b506101f2611019565b34801561055057600080fd5b506101db600480356024810191013561118d565b34801561057057600080fd5b506101db60048035602481019101356111dd565b34801561059057600080fd5b506101f2611214565b3480156105a557600080fd5b506103c8600435611278565b3480156105bd57600080fd5b506101db600160a060020a03600435166112a0565b3480156105de57600080fd5b50610270600160a060020a03600435166112c0565b3480156105ff57600080fd5b506103c86112d5565b60008054600160a060020a0316331461062057600080fd5b5060005b818110156106585761065083838381811061063b57fe5b90506020020135600160a060020a0316610a46565b600101610624565b505050565b60055481565b60045481565b60025481565b600160a060020a0381166000908152600a60205260408120546106a19061069584610754565b9063ffffffff6112e416565b92915050565b60086020526000908152604090205460ff1681565b600054600160a060020a031633146106d357600080fd5b60065460ff1615156106e457600080fd5b600160a060020a0381166000908152600b602052604090205460ff16151561070b57600080fd5b600160a060020a0381166000818152600b6020526040808220805460ff19169055517fc3b69c24758afde0c872e06344d123b7801b861e81314bd4a8ef6871266141709190a250565b600160a060020a0381166000908152600960205260408120546002544210156107805760009150610802565b6004546003546107959163ffffffff6112f616565b421015806107bb5750600160a060020a0383166000908152600b602052604090205460ff165b156107c857809150610802565b6107ff6004546107f36107e6600354426112e490919063ffffffff16565b849063ffffffff61130316565b9063ffffffff61132c16565b91505b50919050565b60008054600160a060020a0316331461082057600080fd5b610828611019565b90506000811161083757600080fd5b60005460015461085a91600160a060020a0391821691168363ffffffff61134116565b6040805182815290517fb23fd3bd068583833c6767d008600bcecf61fc24645a93e10d2761e90d650f6d9181900360200190a150565b600054600160a060020a031633146108a757600080fd5b600160a060020a03821660009081526008602052604090205460ff16151561093c57600160a060020a0382166000818152600860205260408120805460ff191660019081179091556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff191690911790555b600160a060020a038216600081815260096020908152604091829020849055815184815291517f4bdf43a5520d60d8b2df677a3e30e0c0b8b4bd286e5e5a19cb308d8d8855fb319281900390910190a25050565b60005b6007548110156109d1576109c96007828154811015156109af57fe5b600091825260209091200154600160a060020a03166113f4565b600101610993565b50565b60075490565b600054600160a060020a031633146109f157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610a5d57600080fd5b60065460ff161515610a6e57600080fd5b600160a060020a0381166000908152600b602052604090205460ff1615610a9457600080fd5b610a9d81610754565b600160a060020a038216600081815260096020908152604080832094909455600b9052828120805460ff19166001179055915190917fb6fa8b8bd5eab60f292eca876e3ef90722275b785309d84b1de113ce0b8c4e7491a250565b60008080805b600754821015610b5c576007805483908110610b1657fe5b6000918252602080832090910154600160a060020a03168083526009909152604090912054909150610b4f90849063ffffffff6112f616565b9250600190910190610afe565b509092915050565b60008054600160a060020a03163314610b7c57600080fd5b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b505050506040513d6020811015610c0c57600080fd5b505160005460015491925061085a91600160a060020a0390811691168363ffffffff61134116565b610c3d336113f4565b565b60065460ff1681565b600054600160a060020a031681565b60606007805480602002602001604051908101604052809291908181526020018280548015610caf57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c91575b5050505050905090565b600a6020526000908152604090205481565b60096020526000908152604090205481565b600080610cf0848463ffffffff6112f616565b600754909250821115610d035760075491505b50825b81811015610d2857610d206007828154811015156109af57fe5b600101610d06565b50505050565b600054600160a060020a03163314610d4557600080fd5b600554610d58908263ffffffff6112f616565b600555600154604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b5050604080517fa694fc3a000000000000000000000000000000000000000000000000000000008152600481018390529051600160a060020a0384169163a694fc3a91602480830192600092919082900301818387803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b5050604080518481529051600160a060020a03861693507febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a92509081900360200190a25050565b60035481565b600054600160a060020a03163314610ecf57600080fd5b600554610ee2908263ffffffff6112e416565b600555604080517f2e17de78000000000000000000000000000000000000000000000000000000008152600481018390529051600160a060020a03841691632e17de7891602480830192600092919082900301818387803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b5050604080518481529051600160a060020a03861693507f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd92509081900360200190a25050565b60008054600160a060020a03163314610fb957600080fd5b838214610fc557600080fd5b5060005b838110156110125761100a858583818110610fe057fe5b90506020020135600160a060020a03168484848181101515610ffe57fe5b90506020020135610890565b600101610fc9565b5050505050565b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092839283928392839283928392600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561108a57600080fd5b505af115801561109e573d6000803e3d6000fd5b505050506040513d60208110156110b457600080fd5b50519550600094508493508392505b60075483101561114e5760078054849081106110db57fe5b6000918252602080832090910154600160a060020a0316808352600990915260409091205490925061111490869063ffffffff6112f616565b600160a060020a0383166000908152600a602052604090205490955061114190859063ffffffff6112f616565b93506001909201916110c3565b61115e858563ffffffff6112e416565b9050858111156111715760009650611184565b611181868263ffffffff6112e416565b96505b50505050505090565b60008054600160a060020a031633146111a557600080fd5b5060005b81811015610658576111d58383838181106111c057fe5b90506020020135600160a060020a03166106bc565b6001016111a9565b60005b818110156106585761120c8383838181106111f757fe5b90506020020135600160a060020a03166113f4565b6001016111e0565b60008080805b600754821015610b5c57600780548390811061123257fe5b6000918252602080832090910154600160a060020a0316808352600a90915260409091205490915061126b90849063ffffffff6112f616565b925060019091019061121a565b600780548290811061128657fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a031633146112b757600080fd5b6109d1816114a9565b600b6020526000908152604090205460ff1681565b600154600160a060020a031681565b6000828211156112f057fe5b50900390565b818101828110156106a157fe5b6000821515611314575060006106a1565b5081810281838281151561132457fe5b04146106a157fe5b6000818381151561133957fe5b049392505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156113bd57600080fd5b505af11580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b5051151561065857600080fd5b60006113ff8261066f565b905060008111156114a557600160a060020a0382166000908152600a6020526040902054611433908263ffffffff6112f616565b600160a060020a038084166000908152600a60205260409020919091556001546114659116838363ffffffff61134116565b604080518281529051600160a060020a038416917fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e919081900360200190a25b5050565b600160a060020a03811615156114be57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058204c932e05d86a304405358ab20c7dd0c5bbf4646fd6a65fda341d1e4b3a3741140029a165627a7a72305820e31f03c35bbf61af00dae7a208fc906f7ade3ea2e92de796cd085a8ae1356b890029000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81",
  "constructorArguments": "000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81"
}