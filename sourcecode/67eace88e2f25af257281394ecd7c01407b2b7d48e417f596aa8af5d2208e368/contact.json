{
  "address": "0xfe5930fd56eb5398fcf090bd308d1d3f29cc7592",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PRIWGRICO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity 0.4.25;\n/**\n* @title PRIWGR ICO Contract\n* @dev PRIWGR is an ERC-20 Standar Compliant Token\n*/\n\n/**\n * @title SafeMath by OpenZeppelin\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title admined\n * @notice This contract is administered\n */\ncontract admined {\n    //mapping to user levels\n    mapping(address => uint8) public level;\n    //0 normal user\n    //1 basic admin\n    //2 master admin\n\n    /**\n    * @dev This contructor takes the msg.sender as the first master admin\n    */\n    constructor() internal {\n        level[msg.sender] = 2; //Set initial admin to contract creator\n        emit AdminshipUpdated(msg.sender,2); //Log the admin set\n    }\n\n    /**\n    * @dev This modifier limits function execution to the admin\n    */\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n        require(level[msg.sender] >= _level ); //It require the user level to be more or equal than _level\n        _;\n    }\n\n    /**\n    * @notice This function transfer the adminship of the contract to _newAdmin\n    * @param _newAdmin The new admin of the contract\n    */\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\n        require(_newAdmin != address(0)); //The new admin must not be zero address\n        level[_newAdmin] = _level; //New level is set\n        emit AdminshipUpdated(_newAdmin,_level); //Log the admin set\n    }\n\n    /**\n    * @dev Log Events\n    */\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\n\n}\n\ncontract PRIWGRICO is admined {\n\n    using SafeMath for uint256;\n    //This ico have these possible states\n    enum State {\n        MAINSALE,\n        Successful\n    }\n    //Public variables\n\n    //Time-state Related\n    State public state = State.MAINSALE; //Set initial stage\n    uint256 public MAINSALEStart = now;\n    uint256 public SaleDeadline = MAINSALEStart.add(120 days); //Human time (GMT):\n    uint256 public completedAt; //Set when ico finish\n    //Token-eth related\n    uint256 public totalRaised; //eth collected in wei\n    uint256 public totalDistributed; //Whole sale tokens distributed\n    ERC20Basic public tokenReward; //Token contract address\n\n    //Contract details\n    address public creator; //Creator address\n    address public WGRholder; //Holder address\n    string public version = '0.1'; //Contract version\n\n    //Price related\n    uint256 public USDPriceInWei; // 0.01 cent (0.0001$) in wei\n\n    //events for log\n    event LogFundrisingInitialized(address indexed _creator);\n    event LogFundingReceived(address indexed _addr, uint _amount, uint _currentTotal);\n    event LogBeneficiaryPaid(address indexed _beneficiaryAddress);\n    event LogContributorsPayout(address indexed _addr, uint _amount);\n    event LogFundingSuccessful(uint _totalRaised);\n\n    //Modifier to prevent execution if ico has ended or is holded\n    modifier notFinished() {\n        require(state != State.Successful);\n        _;\n    }\n\n    /**\n    * @notice ICO constructor\n    * @param _addressOfTokenUsedAsReward is the token to distribute\n    */\n    constructor(ERC20Basic _addressOfTokenUsedAsReward, uint _initialUSDInWei) public {\n\n        creator = msg.sender; //Creator is set from deployer address\n        WGRholder = creator; //WGRholder is set to creator address\n        tokenReward = _addressOfTokenUsedAsReward; //Token address is set during deployment\n        USDPriceInWei = _initialUSDInWei;\n\n        emit LogFundrisingInitialized(creator); //Log contract initialization\n\n    }\n\n    /**\n    * @notice contribution handler\n    */\n    function contribute(address _target, uint256 _value) public notFinished payable {\n        require(now > MAINSALEStart); //Current time must be equal or greater than the start time\n\n        address user;\n        uint remaining;\n        uint256 tokenBought;\n        uint256 temp;\n\n        if(_target != address(0) && level[msg.sender] >= 1){\n          user = _target;\n          remaining = _value.mul(1e18);\n        } else {\n          user = msg.sender;\n          remaining = msg.value.mul(1e18);\n        }\n\n        totalRaised = totalRaised.add(remaining.div(1e18)); //ether received updated\n\n        while(remaining > 0){\n\n          (temp,remaining) = tokenBuyCalc(remaining);\n          tokenBought = tokenBought.add(temp);\n\n        }\n\n        temp = 0;\n\n        totalDistributed = totalDistributed.add(tokenBought); //Whole tokens sold updated\n        \n        WGRholder.transfer(address(this).balance); //After successful eth is send to WGRholder\n        emit LogBeneficiaryPaid(WGRholder); //Log transaction\n\n        tokenReward.transfer(user,tokenBought);\n\n        emit LogFundingReceived(user, msg.value, totalRaised); //Log the purchase\n\n        checkIfFundingCompleteOrExpired(); //Execute state checks\n    }\n\n\n    /*\n    * This function handle the token purchases values\n    */\n    function tokenBuyCalc(uint _value) internal view returns (uint sold,uint remaining) {\n\n      uint256 tempPrice = USDPriceInWei; //0.001$ in wei\n\n      //state == State.MAINSALE\n\n      tempPrice = tempPrice.mul(1000); //0.1$\n      sold = _value.div(tempPrice);\n\n      return (sold,0);\n\n    }\n\n    /**\n    * @notice Process to check contract current status\n    */\n    function checkIfFundingCompleteOrExpired() public {\n\n        if ( now > SaleDeadline && state != State.Successful){ //If Deadline is reached and not yet successful\n\n            state = State.Successful; //ICO becomes Successful\n            completedAt = now; //ICO is complete\n\n            emit LogFundingSuccessful(totalRaised); //we log the finish\n            successful(); //and execute closure\n\n        }\n\n    }\n\n    /**\n    * @notice successful closure handler\n    */\n    function successful() public {\n        require(state == State.Successful); //When successful\n        uint256 temp = tokenReward.balanceOf(address(this)); //Remanent tokens handle\n        tokenReward.transfer(creator,temp); //Try to transfer\n\n        emit LogContributorsPayout(creator,temp); //Log transaction\n\n        WGRholder.transfer(address(this).balance); //After successful eth is send to WGRholder\n\n        emit LogBeneficiaryPaid(WGRholder); //Log transaction\n\n    }\n\n    /*\n    * Funtion to update current price of ether\n    * it expects the value in wei of 0.01 cent (0.0001$)\n    */\n    function setPrice(uint _value) public onlyAdmin(2) {\n\n      USDPriceInWei = _value;\n\n    }\n    function setHolder(address _holder) public onlyAdmin(2) {\n\n      WGRholder = _holder;\n\n    }\n\n    /**\n    * @notice Function to claim any token stuck on contract\n    * @param _address Address of target token\n    */\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n        require(state == State.Successful); //Only when sale finish\n\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n\n    }\n\n    /*\n    * @dev Direct payments handler\n    */\n    function () public payable {\n\n        contribute(address(0),0); //Forward to contribute function\n\n    }\n}",
  "bytecode": "60806040526001805460ff1916905542600281905561002e90629e34006401000000006101628102610c2f1704565b6003908155604080518082019091528181527f302e310000000000000000000000000000000000000000000000000000000000602090910190815261007691600a9190610178565b5034801561008357600080fd5b50604051604080610ec38339810160408181528251602093840151336000818152808752849020805460ff191660029081179091559085529484019490945281519093927f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b30092908290030190a16008805433600160a060020a0319918216179182905560098054600160a060020a03938416908316811790915560078054909216928516929092179055600b8290556040517f95c038c2946330b2b89591c4a80cbfc5de81a9376bd31b7521ad5b5d369c709590600090a25050610213565b60008282018381101561017157fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b957805160ff19168380011785556101e6565b828001600101855582156101e6579182015b828111156101e65782518255916020019190600101906101cb565b506101f29291506101f6565b5090565b61021091905b808211156101f257600081556001016101fc565b90565b610ca1806102226000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461011357806336c28ea41461014457806338771242146101595780634c801cee1461018057806354fd4d50146101a15780636e66f6e91461022b5780638418cd991461024057806386f325861461025757806391b7f5ed1461026c5780639a9e3fd814610284578063bc05529b14610299578063c19d93fb146102ae578063c1a4a4f8146102e7578063c5c4744c146102fc578063c9c80a5614610311578063cad107c014610338578063d41b6db61461034d578063d979f5aa14610384578063efca2eed146103a5575b6101116000806103ba565b005b34801561011f57600080fd5b50610128610622565b60408051600160a060020a039092168252519081900360200190f35b34801561015057600080fd5b50610128610631565b34801561016557600080fd5b5061016e610640565b60408051918252519081900360200190f35b34801561018c57600080fd5b50610111600160a060020a0360043516610646565b3480156101ad57600080fd5b506101b6610798565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023757600080fd5b50610128610826565b610111600160a060020a03600435166024356103ba565b34801561026357600080fd5b50610111610835565b34801561027857600080fd5b506101116004356108a9565b34801561029057600080fd5b506101116108d1565b3480156102a557600080fd5b5061016e610ac4565b3480156102ba57600080fd5b506102c3610aca565b604051808260018111156102d357fe5b60ff16815260200191505060405180910390f35b3480156102f357600080fd5b5061016e610ad3565b34801561030857600080fd5b5061016e610ad9565b34801561031d57600080fd5b50610111600160a060020a036004351660ff60243516610adf565b34801561034457600080fd5b5061016e610b7a565b34801561035957600080fd5b5061036e600160a060020a0360043516610b80565b6040805160ff9092168252519081900360200190f35b34801561039057600080fd5b50610111600160a060020a0360043516610b95565b3480156103b157600080fd5b5061016e610be7565b6000808080600180805460ff16908111156103d157fe5b14156103dc57600080fd5b60025442116103ea57600080fd5b600160a060020a03861615801590610417575033600090815260208190526040902054600160ff90911610155b1561043e5785935061043785670de0b6b3a764000063ffffffff610bed16565b925061045c565b33935061045934670de0b6b3a764000063ffffffff610bed16565b92505b61048661047784670de0b6b3a764000063ffffffff610c1816565b6005549063ffffffff610c2f16565b6005555b60008311156104b75761049c83610c3e565b935090506104b0828263ffffffff610c2f16565b915061048a565b506006546000906104ce908363ffffffff610c2f16565b600655600954604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561050b573d6000803e3d6000fd5b50600954604051600160a060020a03909116907f101a889b1c7c3bf4e0c37353cfe1554e47e39c747e25a6d330d0553dd93bd1eb90600090a2600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018690529151919092169163a9059cbb91604480830192600092919082900301818387803b1580156105b257600080fd5b505af11580156105c6573d6000803e3d6000fd5b50506005546040805134815260208101929092528051600160a060020a03891694507f304e48bb03eae5e9bf3575d270648664895983e116a51773a65e9f3341b3b40e9350918290030190a261061a610835565b505050505050565b600854600160a060020a031681565b600954600160a060020a031681565b60045481565b3360009081526020819052604081205460029060ff1681111561066857600080fd5b6001805460ff168181111561067957fe5b1461068357600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038516916370a082319160248083019260209291908290030181600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b505050506040513d602081101561070e57600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051919350600160a060020a0385169163a9059cbb9160448082019260009290919082900301818387803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b50505050505050565b600a805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561081e5780601f106107f35761010080835404028352916020019161081e565b820191906000526020600020905b81548152906001019060200180831161080157829003601f168201915b505050505081565b600754600160a060020a031681565b6003544211801561085557506001805460ff168181111561085257fe5b14155b156108a7576001805460ff1916811790554260045560055460408051918252517fee94ee98208684c00eeba940c34a6060b93671b249abd182b4771b74bf94e2dd9181900360200190a16108a76108d1565b565b3360009081526020819052604090205460029060ff168111156108cb57600080fd5b50600b55565b6000600180805460ff16908111156108e557fe5b146108ef57600080fd5b600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561095557600080fd5b505af1158015610969573d6000803e3d6000fd5b505050506040513d602081101561097f57600080fd5b5051600754600854604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052905193945091169163a9059cbb9160448082019260009290919082900301818387803b1580156109f457600080fd5b505af1158015610a08573d6000803e3d6000fd5b5050600854604080518581529051600160a060020a0390921693507faeb3ebd09ef847781ae7d846d2c9afbbb08cfbcad76e92d3206303aa30d24226925081900360200190a2600954604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610a88573d6000803e3d6000fd5b50600954604051600160a060020a03909116907f101a889b1c7c3bf4e0c37353cfe1554e47e39c747e25a6d330d0553dd93bd1eb90600090a250565b60035481565b60015460ff1681565b600b5481565b60055481565b3360009081526020819052604090205460029060ff16811115610b0157600080fd5b600160a060020a0383161515610b1657600080fd5b600160a060020a03831660008181526020818152604091829020805460ff191660ff871690811790915582519384529083015280517f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b3009281900390910190a1505050565b60025481565b60006020819052908152604090205460ff1681565b3360009081526020819052604090205460029060ff16811115610bb757600080fd5b506009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b6000828202831580610c095750828482811515610c0657fe5b04145b1515610c1157fe5b9392505050565b6000808284811515610c2657fe5b04949350505050565b600082820183811015610c1157fe5b600b546000908190610c58816103e863ffffffff610bed16565b9050610c6a848263ffffffff610c1816565b9460009450925050505600a165627a7a72305820eb067878094324ffc11362aa0ec46601c5a936600bda7622791935b7934526bc0029000000000000000000000000f92fce194846789795acd18877b6921206e1cd7d0000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000f92fce194846789795acd18877b6921206e1cd7d0000000000000000000000000000000000000000000000000000000000000000"
}