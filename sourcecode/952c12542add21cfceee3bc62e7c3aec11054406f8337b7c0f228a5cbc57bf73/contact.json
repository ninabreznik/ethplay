{
  "address": "0x328328ba09293a4002b4b7615cba2c816d6bdf51",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Registrar",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\n// File: contracts/RegistrarInterface.sol\n\npragma solidity ^0.5.0;\n\ninterface RegistrarInterface {\n\n    event Registration(string name, address owner, address addr);\n\n    function register(string calldata name, address owner, bytes calldata signature) external;\n    function hash(string calldata name, address owner) external pure returns (bytes32);\n}\n\n// File: contracts/Libraries/SignatureValidator.sol\n\npragma solidity ^0.5.0;\n\nlibrary SignatureValidator {\n\n    /// @dev Validates that a hash was signed by a specified signer.\n    /// @param hash Hash which was signed.\n    /// @param signature ECDSA signature {v}{r}{s}.\n    /// @return Returns whether signature is from a specified user.\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        require(signature.length == 65);\n\n        uint8 v = uint8(signature[64]);\n        bytes32 r;\n        bytes32 s;\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n        }\n\n        return ecrecover(hash, v, r, s);\n    }\n}\n\n// File: @ensdomains/ens/contracts/ENS.sol\n\npragma solidity >=0.4.24;\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n    function setResolver(bytes32 node, address resolver) external;\n    function setOwner(bytes32 node, address owner) external;\n    function setTTL(bytes32 node, uint64 ttl) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n\n}\n\n// File: @ensdomains/resolver/contracts/PublicResolver.sol\n\npragma solidity >=0.4.25;\n\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver {\n\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n    bytes4 constant CONTENTHASH_INTERFACE_ID = 0xbc1c58d1;\n\n    event AddrChanged(bytes32 indexed node, address a);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    struct PublicKey {\n        bytes32 x;\n        bytes32 y;\n    }\n\n    struct Record {\n        address addr;\n        string name;\n        PublicKey pubkey;\n        mapping(string=>string) text;\n        mapping(uint256=>bytes) abis;\n        bytes contenthash;\n    }\n\n    ENS ens;\n\n    mapping (bytes32 => Record) records;\n\n    modifier onlyOwner(bytes32 node) {\n        require(ens.owner(node) == msg.sender);\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param ensAddr The ENS registrar contract.\n     */\n    constructor(ENS ensAddr) public {\n        ens = ensAddr;\n    }\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param addr The address to set.\n     */\n    function setAddr(bytes32 node, address addr) external onlyOwner(node) {\n        records[node].addr = addr;\n        emit AddrChanged(node, addr);\n    }\n\n    /**\n     * Sets the contenthash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param hash The contenthash to set\n     */\n    function setContenthash(bytes32 node, bytes calldata hash) external onlyOwner(node) {\n        records[node].contenthash = hash;\n        emit ContenthashChanged(node, hash);\n    }\n\n    /**\n     * Sets the name associated with an ENS node, for reverse records.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param name The name to set.\n     */\n    function setName(bytes32 node, string calldata name) external onlyOwner(node) {\n        records[node].name = name;\n        emit NameChanged(node, name);\n    }\n\n    /**\n     * Sets the ABI associated with an ENS node.\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n     * the empty string.\n     * @param node The node to update.\n     * @param contentType The content type of the ABI\n     * @param data The ABI data.\n     */\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external onlyOwner(node) {\n        // Content types must be powers of 2\n        require(((contentType - 1) & contentType) == 0);\n\n        records[node].abis[contentType] = data;\n        emit ABIChanged(node, contentType);\n    }\n\n    /**\n     * Sets the SECP256k1 public key associated with an ENS node.\n     * @param node The ENS node to query\n     * @param x the X coordinate of the curve point for the public key.\n     * @param y the Y coordinate of the curve point for the public key.\n     */\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external onlyOwner(node) {\n        records[node].pubkey = PublicKey(x, y);\n        emit PubkeyChanged(node, x, y);\n    }\n\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(bytes32 node, string calldata key, string calldata value) external onlyOwner(node) {\n        records[node].text[key] = value;\n        emit TextChanged(node, key, key);\n    }\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string calldata key) external view returns (string memory) {\n        return records[node].text[key];\n    }\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x, y the X and Y coordinates of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\n        return (records[node].pubkey.x, records[node].pubkey.y);\n    }\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory) {\n        Record storage record = records[node];\n\n        for (uint256 contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n                return (contentType, record.abis[contentType]);\n            }\n        }\n\n        bytes memory empty;\n        return (0, empty);\n    }\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) external view returns (string memory) {\n        return records[node].name;\n    }\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address) {\n        return records[node].addr;\n    }\n\n    /**\n     * Returns the contenthash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function contenthash(bytes32 node) external view returns (bytes memory) {\n        return records[node].contenthash;\n    }\n\n    /**\n     * Returns true if the resolver implements the interface specified by the provided hash.\n     * @param interfaceID The ID of the interface to check for.\n     * @return True if the contract implements the requested interface.\n     */\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n        return interfaceID == ADDR_INTERFACE_ID ||\n        interfaceID == NAME_INTERFACE_ID ||\n        interfaceID == ABI_INTERFACE_ID ||\n        interfaceID == PUBKEY_INTERFACE_ID ||\n        interfaceID == TEXT_INTERFACE_ID ||\n        interfaceID == CONTENTHASH_INTERFACE_ID ||\n        interfaceID == INTERFACE_META_ID;\n    }\n}\n\n// File: contracts/Registrar.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract Registrar is RegistrarInterface {\n\n    ENS public ens;\n    bytes32 public node;\n    PublicResolver public resolver;\n\n    constructor(ENS _ens, bytes32 _node, PublicResolver _resolver) public {\n        ens = _ens;\n        node = _node;\n        resolver = _resolver;\n    }\n\n    function register(string calldata name, address owner, bytes calldata signature) external {\n        address token = SignatureValidator.recover(_hash(name, owner), signature);\n\n        bytes32 label = keccak256(bytes(name));\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\n\n        // Create the subdomain and assign it to us.\n        ens.setSubnodeOwner(node, label, address(this));\n\n        // Set a resolver\n        ens.setResolver(subnode, address(resolver));\n\n        // Set the resolver's addr record to the new owner\n        resolver.setAddr(subnode, owner);\n\n        // Transfer ownership of the subdomain to the new owner.\n        ens.setOwner(subnode, owner);\n\n        emit Registration(name, owner, token);\n    }\n\n    function hash(string calldata name, address owner) external pure returns (bytes32) {\n        return _hash(name, owner);\n    }\n\n    function _hash(string memory name, address owner) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(name, owner));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610acc8339810180604052606081101561003057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506109dd806100ef6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806304f3bcec1461005c5780631fe0aa9d146100a65780633f15457f14610194578063436d4ff5146101de578063d70754ec1461028b575b600080fd5b6100646102a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610192600480360360608110156100bc57600080fd5b81019080803590602001906401000000008111156100d957600080fd5b8201836020820111156100eb57600080fd5b8035906020019184600183028401116401000000008311171561010d57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561014e57600080fd5b82018360208201111561016057600080fd5b8035906020019184600183028401116401000000008311171561018257600080fd5b90919293919293905050506102cf565b005b61019c6107c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610275600480360360408110156101f457600080fd5b810190808035906020019064010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184600183028401116401000000008311171561024557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107ed565b6040518082815260200191505060405180910390f35b610293610846565b6040518082815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061036c61032287878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508661084c565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108ff565b9050600086866040518083838082843780830192505050925050506040518091039020905060006001548260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab592360015484306040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b15801561047857600080fd5b505af115801561048c573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082886040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382886040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b505050507f5f226cb5c2690742f66cc2c1d7a240efc9e928876b4d774560cf2b986661369e8888888660405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252868682818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060405180910390a15050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061083d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508361084c565b90509392505050565b60015481565b600082826040516020018083805190602001908083835b602083106108865780518252602082019150602081019050602083039250610863565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019250505060405160208183030381529060405280519060200120905092915050565b6000604182511461090f57600080fd5b60008260408151811061091e57fe5b602001015160f81c60f81b60f81c9050600080602085015191506040850151905060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561099c573d6000803e3d6000fd5b5050506020604051035193505050509291505056fea165627a7a723058206b8f1bade44f25ed597eaa3e841baa004a49d614c977956a65ee87d9fb5c01ef0029000000000000000000000000314159265dd8dbb310642f98f50c066173c1259bbf9c597cf216ce784d6c09d42e799d5e201be3740c1e2e9f124a28653684e687000000000000000000000000d3ddccdd3b25a8a7423b5bee360a42146eb4baf3",
  "constructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259bbf9c597cf216ce784d6c09d42e799d5e201be3740c1e2e9f124a28653684e687000000000000000000000000d3ddccdd3b25a8a7423b5bee360a42146eb4baf3"
}