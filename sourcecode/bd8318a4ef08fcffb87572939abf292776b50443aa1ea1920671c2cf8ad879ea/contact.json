{
  "address": "0x4ea73eb2e436960635195a0f295f3de370f62ac3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RC",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  \n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() internal {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract tokenInterface {\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract rateInterface {\n    function readRate(string _currency) public view returns (uint256 oneEtherValue);\n}\n\ncontract ICOEngineInterface {\n\n    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n    function started() public view returns(bool);\n\n    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n    function ended() public view returns(bool);\n\n    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n    function startTime() public view returns(uint);\n\n    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n    function endTime() public view returns(uint);\n\n    // Optional function, can be implemented in place of startTime\n    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n    // function startBlock() public view returns(uint);\n\n    // Optional function, can be implemented in place of endTime\n    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n    // function endBlock() public view returns(uint);\n\n    // returns the total number of the tokens available for the sale, must not change when the ico is started\n    function totalTokens() public view returns(uint);\n\n    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n    function remainingTokens() public view returns(uint);\n\n    // return the price as number of tokens released for each ether\n    function price() public view returns(uint);\n}\n\ncontract KYCBase {\n    using SafeMath for uint256;\n\n    mapping (address => bool) public isKycSigner;\n    mapping (uint64 => uint256) public alreadyPayed;\n\n    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n\n    function KYCBase(address [] kycSigners) internal {\n        for (uint i = 0; i < kycSigners.length; i++) {\n            isKycSigner[kycSigners[i]] = true;\n        }\n    }\n\n    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n    function releaseTokensTo(address buyer) internal returns(bool);\n\n    // This method can be overridden to enable some sender to buy token for a different address\n    function senderAllowedFor(address buyer)\n        internal view returns(bool)\n    {\n        return buyer == msg.sender;\n    }\n\n    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        public payable returns (bool)\n    {\n        require(senderAllowedFor(buyerAddress));\n        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n    }\n\n    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        public payable returns (bool)\n    {\n        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n    }\n\n    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        private returns (bool)\n    {\n        // check the signature\n        bytes32 hash = sha256(\"Eidoo icoengine authorization\", address(0), buyerAddress, buyerId, maxAmount); //replaced this with address(0);\n        address signer = ecrecover(hash, v, r, s);\n        if (!isKycSigner[signer]) {\n            revert();\n        } else {\n            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n            require(totalPayed <= maxAmount);\n            alreadyPayed[buyerId] = totalPayed;\n            emit KycVerified(signer, buyerAddress, buyerId, maxAmount);\n            return releaseTokensTo(buyerAddress);\n        }\n    }\n}\n\ncontract RC is ICOEngineInterface, KYCBase {\n    using SafeMath for uint256;\n    TokenSale tokenSaleContract;\n    uint256 public startTime;\n    uint256 public endTime;\n    \n    uint256 public etherMinimum;\n    uint256 public soldTokens;\n    uint256 public remainingTokens;\n    \n    uint256 public oneTokenInFiatWei;\n\t\n\t\n\tmapping(address => uint256) public etherUser; // address => ether amount\n\tmapping(address => uint256) public pendingTokenUser; // address => token amount that will be claimed\n\tmapping(address => uint256) public tokenUser; // address => token amount owned\n\tuint256[] public tokenThreshold; // array of token threshold reached in wei of token\n    uint256[] public bonusThreshold; // array of bonus of each tokenThreshold reached - 20% = 20\n\n    function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) {\n        require ( _tokenSaleContract != 0 );\n        require ( _oneTokenInFiatWei != 0 );\n        require( _remainingTokens != 0 );\n        require ( _tokenThreshold.length != 0 );\n        require ( _tokenThreshold.length == _bonusThreshold.length );\n        bonusThreshold = _bonusThreshold;\n        tokenThreshold = _tokenThreshold;\n        \n        \n        tokenSaleContract = TokenSale(_tokenSaleContract);\n        \n        tokenSaleContract.addMeByRC();\n        \n        soldTokens = 0;\n        remainingTokens = _remainingTokens;\n        oneTokenInFiatWei = _oneTokenInFiatWei;\n        etherMinimum = _etherMinimum;\n        \n        setTimeRC( _startTime, _endTime );\n    }\n    \n    function setTimeRC(uint256 _startTime, uint256 _endTime ) internal {\n        if( _startTime == 0 ) {\n            startTime = tokenSaleContract.startTime();\n        } else {\n            startTime = _startTime;\n        }\n        if( _endTime == 0 ) {\n            endTime = tokenSaleContract.endTime();\n        } else {\n            endTime = _endTime;\n        }\n    }\n    \n    modifier onlyTokenSaleOwner() {\n        require(msg.sender == tokenSaleContract.owner() );\n        _;\n    }\n    \n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyTokenSaleOwner {\n        if ( _newStart != 0 ) startTime = _newStart;\n        if ( _newEnd != 0 ) endTime = _newEnd;\n    }\n    \n    function changeMinimum(uint256 _newEtherMinimum) public onlyTokenSaleOwner {\n        etherMinimum = _newEtherMinimum;\n    }\n    \n    function releaseTokensTo(address buyer) internal returns(bool) {\n        if( msg.value > 0 ) takeEther(buyer);\n        giveToken(buyer);\n        return true;\n    }\n    \n    function started() public view returns(bool) {\n        return now > startTime || remainingTokens == 0;\n    }\n    \n    function ended() public view returns(bool) {\n        return now > endTime || remainingTokens == 0;\n    }\n    \n    function startTime() public view returns(uint) {\n        return startTime;\n    }\n    \n    function endTime() public view returns(uint) {\n        return endTime;\n    }\n    \n    function totalTokens() public view returns(uint) {\n        return remainingTokens.add(soldTokens);\n    }\n    \n    function remainingTokens() public view returns(uint) {\n        return remainingTokens;\n    }\n    \n    function price() public view returns(uint) {\n        uint256 oneEther = 10**18;\n        return oneEther.mul(10**18).div( tokenSaleContract.tokenValueInEther(oneTokenInFiatWei) );\n    }\n\t\n\tfunction () public payable{\n\t    require( now > startTime );\n\t    if(now < endTime) {\n\t        takeEther(msg.sender);\n\t    } else {\n\t        claimTokenBonus(msg.sender);\n\t    }\n\n\t}\n\t\n\tevent Buy(address buyer, uint256 value, uint256 soldToken, uint256 valueTokenInUsdWei );\n\t\n\tfunction takeEther(address _buyer) internal {\n\t    require( now > startTime );\n        require( now < endTime );\n        require( msg.value >= etherMinimum); \n        require( remainingTokens > 0 );\n        \n        uint256 oneToken = 10 ** uint256(tokenSaleContract.decimals());\n        uint256 tokenValue = tokenSaleContract.tokenValueInEther(oneTokenInFiatWei);\n        uint256 tokenAmount = msg.value.mul(oneToken).div(tokenValue);\n        \n        uint256 unboughtTokens = tokenInterface(tokenSaleContract.tokenContract()).balanceOf(tokenSaleContract);\n        if ( unboughtTokens > remainingTokens ) {\n            unboughtTokens = remainingTokens;\n        }\n        \n        uint256 refund = 0;\n        if ( unboughtTokens < tokenAmount ) {\n            refund = (tokenAmount - unboughtTokens).mul(tokenValue).div(oneToken);\n            tokenAmount = unboughtTokens;\n\t\t\tremainingTokens = 0; // set remaining token to 0\n            _buyer.transfer(refund);\n        } else {\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\n        }\n        \n        etherUser[_buyer] = etherUser[_buyer].add(msg.value.sub(refund));\n        pendingTokenUser[_buyer] = pendingTokenUser[_buyer].add(tokenAmount);\t\n        \n        emit Buy( _buyer, msg.value, tokenAmount, oneTokenInFiatWei );\n\t}\n\t\n\tfunction giveToken(address _buyer) internal {\n\t    require( pendingTokenUser[_buyer] > 0 );\n\n\t\ttokenUser[_buyer] = tokenUser[_buyer].add(pendingTokenUser[_buyer]);\n\t\n\t\ttokenSaleContract.claim(_buyer, pendingTokenUser[_buyer]);\n\t\tsoldTokens = soldTokens.add(pendingTokenUser[_buyer]);\n\t\tpendingTokenUser[_buyer] = 0;\n\t\t\n\t\ttokenSaleContract.wallet().transfer(etherUser[_buyer]);\n\t\tetherUser[_buyer] = 0;\n\t}\n\n    function claimTokenBonus(address _buyer) internal {\n        require( now > endTime );\n        require( tokenUser[_buyer] > 0 );\n        uint256 bonusApplied = 0;\n        for (uint i = 0; i < tokenThreshold.length; i++) {\n            if ( soldTokens > tokenThreshold[i] ) {\n                bonusApplied = bonusThreshold[i];\n\t\t\t}\n\t\t}    \n\t\trequire( bonusApplied > 0 );\n\t\t\n\t\tuint256 addTokenAmount = tokenUser[_buyer].mul( bonusApplied ).div(10**2);\n\t\ttokenUser[_buyer] = 0; \n\t\t\n\t\ttokenSaleContract.claim(_buyer, addTokenAmount);\n\t\t_buyer.transfer(msg.value);\n    }\n    \n    function refundEther(address to) public onlyTokenSaleOwner {\n        to.transfer(etherUser[to]);\n        etherUser[to] = 0;\n        pendingTokenUser[to] = 0;\n    }\n    \n    function withdraw(address to, uint256 value) public onlyTokenSaleOwner { \n        to.transfer(value);\n    }\n\t\n\tfunction userBalance(address _user) public view returns( uint256 _pendingTokenUser, uint256 _tokenUser, uint256 _etherUser ) {\n\t\treturn (pendingTokenUser[_user], tokenUser[_user], etherUser[_user]);\n\t}\n}\n\ncontract RCpro is ICOEngineInterface, KYCBase {\n    using SafeMath for uint256;\n    TokenSale tokenSaleContract;\n    uint256 public startTime;\n    uint256 public endTime;\n    \n    uint256 public etherMinimum;\n    uint256 public soldTokens;\n    uint256 public remainingTokens;\n    \n    uint256[] public oneTokenInFiatWei;\n    uint256[] public sendThreshold;\n\t\n\t\n\tmapping(address => uint256) public etherUser; // address => ether amount\n\tmapping(address => uint256) public pendingTokenUser; // address => token amount that will be claimed\n\tmapping(address => uint256) public tokenUser; // address => token amount owned\n\tuint256[] public tokenThreshold; // array of token threshold reached in wei of token\n    uint256[] public bonusThreshold; // array of bonus of each tokenThreshold reached - 20% = 20\n\n    function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) {\n        require ( _tokenSaleContract != 0 );\n        require ( _oneTokenInFiatWei[0] != 0 );\n        require ( _oneTokenInFiatWei.length == _sendThreshold.length );\n        require( _remainingTokens != 0 );\n        require ( _tokenThreshold.length != 0 );\n        require ( _tokenThreshold.length == _bonusThreshold.length );\n        bonusThreshold = _bonusThreshold;\n        tokenThreshold = _tokenThreshold;\n        \n        \n        tokenSaleContract = TokenSale(_tokenSaleContract);\n        \n        tokenSaleContract.addMeByRC();\n        \n        soldTokens = 0;\n        remainingTokens = _remainingTokens;\n        oneTokenInFiatWei = _oneTokenInFiatWei;\n        sendThreshold = _sendThreshold;\n        etherMinimum = _etherMinimum;\n        \n        setTimeRC( _startTime, _endTime );\n    }\n    \n    function setTimeRC(uint256 _startTime, uint256 _endTime ) internal {\n        if( _startTime == 0 ) {\n            startTime = tokenSaleContract.startTime();\n        } else {\n            startTime = _startTime;\n        }\n        if( _endTime == 0 ) {\n            endTime = tokenSaleContract.endTime();\n        } else {\n            endTime = _endTime;\n        }\n    }\n    \n    modifier onlyTokenSaleOwner() {\n        require(msg.sender == tokenSaleContract.owner() );\n        _;\n    }\n    \n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyTokenSaleOwner {\n        if ( _newStart != 0 ) startTime = _newStart;\n        if ( _newEnd != 0 ) endTime = _newEnd;\n    }\n    \n    function changeMinimum(uint256 _newEtherMinimum) public onlyTokenSaleOwner {\n        etherMinimum = _newEtherMinimum;\n    }\n    \n    function releaseTokensTo(address buyer) internal returns(bool) {\n        if( msg.value > 0 ) takeEther(buyer);\n        giveToken(buyer);\n        return true;\n    }\n    \n    function started() public view returns(bool) {\n        return now > startTime || remainingTokens == 0;\n    }\n    \n    function ended() public view returns(bool) {\n        return now > endTime || remainingTokens == 0;\n    }\n    \n    function startTime() public view returns(uint) {\n        return startTime;\n    }\n    \n    function endTime() public view returns(uint) {\n        return endTime;\n    }\n    \n    function totalTokens() public view returns(uint) {\n        return remainingTokens.add(soldTokens);\n    }\n    \n    function remainingTokens() public view returns(uint) {\n        return remainingTokens;\n    }\n    \n    function price() public view returns(uint) {\n        uint256 oneEther = 10**18;\n        return oneEther.mul(10**18).div( tokenSaleContract.tokenValueInEther(oneTokenInFiatWei[0]) );\n    }\n\t\n\tfunction () public payable{\n\t    require( now > startTime );\n\t    if(now < endTime) {\n\t        takeEther(msg.sender);\n\t    } else {\n\t        claimTokenBonus(msg.sender);\n\t    }\n\n\t}\n\t\n\tevent Buy(address buyer, uint256 value, uint256 soldToken, uint256 valueTokenInFiatWei );\n\t\n\tfunction takeEther(address _buyer) internal {\n\t    require( now > startTime );\n        require( now < endTime );\n        require( msg.value >= etherMinimum); \n        require( remainingTokens > 0 );\n        \n        uint256 oneToken = 10 ** uint256(tokenSaleContract.decimals());\n\t\t\n\t\tuint256 tknPriceApplied = 0;\n        for (uint i = 0; i < sendThreshold.length; i++) {\n            if ( msg.value >= sendThreshold[i] ) {\n                tknPriceApplied = oneTokenInFiatWei[i];\n\t\t\t}\n\t\t}    \n\t\trequire( tknPriceApplied > 0 );\n\t\t\n        uint256 tokenValue = tokenSaleContract.tokenValueInEther(tknPriceApplied);\n        uint256 tokenAmount = msg.value.mul(oneToken).div(tokenValue);\n        \n        uint256 unboughtTokens = tokenInterface(tokenSaleContract.tokenContract()).balanceOf(tokenSaleContract);\n        if ( unboughtTokens > remainingTokens ) {\n            unboughtTokens = remainingTokens;\n        }\n        \n        uint256 refund = 0;\n        if ( unboughtTokens < tokenAmount ) {\n            refund = (tokenAmount - unboughtTokens).mul(tokenValue).div(oneToken);\n            tokenAmount = unboughtTokens;\n\t\t\tremainingTokens = 0; // set remaining token to 0\n            _buyer.transfer(refund);\n        } else {\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\n        }\n        \n        etherUser[_buyer] = etherUser[_buyer].add(msg.value.sub(refund));\n        pendingTokenUser[_buyer] = pendingTokenUser[_buyer].add(tokenAmount);\t\n        \n        emit Buy( _buyer, msg.value, tokenAmount, tknPriceApplied );\n\t}\n\t\n\tfunction giveToken(address _buyer) internal {\n\t    require( pendingTokenUser[_buyer] > 0 );\n\n\t\ttokenUser[_buyer] = tokenUser[_buyer].add(pendingTokenUser[_buyer]);\n\t\n\t\ttokenSaleContract.claim(_buyer, pendingTokenUser[_buyer]);\n\t\tsoldTokens = soldTokens.add(pendingTokenUser[_buyer]);\n\t\tpendingTokenUser[_buyer] = 0;\n\t\t\n\t\ttokenSaleContract.wallet().transfer(etherUser[_buyer]);\n\t\tetherUser[_buyer] = 0;\n\t}\n\n    function claimTokenBonus(address _buyer) internal {\n        require( now > endTime );\n        require( tokenUser[_buyer] > 0 );\n        uint256 bonusApplied = 0;\n        for (uint i = 0; i < tokenThreshold.length; i++) {\n            if ( soldTokens > tokenThreshold[i] ) {\n                bonusApplied = bonusThreshold[i];\n\t\t\t}\n\t\t}    \n\t\trequire( bonusApplied > 0 );\n\t\t\n\t\tuint256 addTokenAmount = tokenUser[_buyer].mul( bonusApplied ).div(10**2);\n\t\ttokenUser[_buyer] = 0; \n\t\t\n\t\ttokenSaleContract.claim(_buyer, addTokenAmount);\n\t\t_buyer.transfer(msg.value);\n    }\n    \n    function refundEther(address to) public onlyTokenSaleOwner {\n        to.transfer(etherUser[to]);\n        etherUser[to] = 0;\n        pendingTokenUser[to] = 0;\n    }\n    \n    function withdraw(address to, uint256 value) public onlyTokenSaleOwner { \n        to.transfer(value);\n    }\n\t\n\tfunction userBalance(address _user) public view returns( uint256 _pendingTokenUser, uint256 _tokenUser, uint256 _etherUser ) {\n\t\treturn (pendingTokenUser[_user], tokenUser[_user], etherUser[_user]);\n\t}\n}\n\ncontract TokenSale is Ownable {\n    using SafeMath for uint256;\n    tokenInterface public tokenContract;\n    rateInterface public rateContract;\n    \n    address public wallet;\n    address public advisor;\n    uint256 public advisorFee; // 1 = 0,1%\n    \n\tuint256 public constant decimals = 18;\n    \n    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\n    uint256 public startTime;  // seconds from 1970-01-01T00:00:00Z\n\n    mapping(address => bool) public rc;\n\n\n    function TokenSale(address _tokenAddress, address _rateAddress, uint256 _startTime, uint256 _endTime) public {\n        tokenContract = tokenInterface(_tokenAddress);\n        rateContract = rateInterface(_rateAddress);\n        setTime(_startTime, _endTime); \n        wallet = msg.sender;\n        advisor = msg.sender;\n        advisorFee = 0 * 10**3;\n    }\n    \n    function tokenValueInEther(uint256 _oneTokenInFiatWei) public view returns(uint256 tknValue) {\n        uint256 oneEtherInUsd = rateContract.readRate(\"usd\");\n        tknValue = _oneTokenInFiatWei.mul(10 ** uint256(decimals)).div(oneEtherInUsd);\n        return tknValue;\n    } \n    \n    modifier isBuyable() {\n        require( now > startTime ); // check if started\n        require( now < endTime ); // check if ended\n        require( msg.value > 0 );\n\t\t\n\t\tuint256 remainingTokens = tokenContract.balanceOf(this);\n        require( remainingTokens > 0 ); // Check if there are any remaining tokens \n        _;\n    }\n    \n    event Buy(address buyer, uint256 value, address indexed ambassador);\n    \n    modifier onlyRC() {\n        require( rc[msg.sender] ); //check if is an authorized rcContract\n        _;\n    }\n    \n    function buyFromRC(address _buyer, uint256 _rcTokenValue, uint256 _remainingTokens) onlyRC isBuyable public payable returns(uint256) {\n        uint256 oneToken = 10 ** uint256(decimals);\n        uint256 tokenValue = tokenValueInEther(_rcTokenValue);\n        uint256 tokenAmount = msg.value.mul(oneToken).div(tokenValue);\n        address _ambassador = msg.sender;\n        \n        \n        uint256 remainingTokens = tokenContract.balanceOf(this);\n        if ( _remainingTokens < remainingTokens ) {\n            remainingTokens = _remainingTokens;\n        }\n        \n        if ( remainingTokens < tokenAmount ) {\n            uint256 refund = (tokenAmount - remainingTokens).mul(tokenValue).div(oneToken);\n            tokenAmount = remainingTokens;\n            forward(msg.value-refund);\n\t\t\tremainingTokens = 0; // set remaining token to 0\n             _buyer.transfer(refund);\n        } else {\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\n            forward(msg.value);\n        }\n        \n        tokenContract.transfer(_buyer, tokenAmount);\n        emit Buy(_buyer, tokenAmount, _ambassador);\n\t\t\n        return tokenAmount; \n    }\n    \n    function forward(uint256 _amount) internal {\n        uint256 advisorAmount = _amount.mul(advisorFee).div(10**3);\n        uint256 walletAmount = _amount - advisorAmount;\n        advisor.transfer(advisorAmount);\n        wallet.transfer(walletAmount);\n    }\n\n    event NewRC(address contr);\n    \n    function addMeByRC() public {\n        require(tx.origin == owner);\n        \n        rc[ msg.sender ]  = true;\n        \n        emit NewRC(msg.sender);\n    }\n    \n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyOwner {\n        if ( _newStart != 0 ) startTime = _newStart;\n        if ( _newEnd != 0 ) endTime = _newEnd;\n    }\n\n    function withdraw(address to, uint256 value) public onlyOwner {\n        to.transfer(value);\n    }\n    \n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\n        return tokenContract.transfer(to, value);\n    }\n    \n    function setTokenContract(address _tokenContract) public onlyOwner {\n        tokenContract = tokenInterface(_tokenContract);\n    }\n\n    function setWalletAddress(address _wallet) public onlyOwner {\n        wallet = _wallet;\n    }\n    \n    function setAdvisorAddress(address _advisor) public onlyOwner {\n            advisor = _advisor;\n    }\n    \n    function setAdvisorFee(uint256 _advisorFee) public onlyOwner {\n            advisorFee = _advisorFee;\n    }\n    \n    function setRateContract(address _rateAddress) public onlyOwner {\n        rateContract = rateInterface(_rateAddress);\n    }\n\t\n\tfunction claim(address _buyer, uint256 _amount) onlyRC public returns(bool) {\n        return tokenContract.transfer(_buyer, _amount);\n    }\n\n    function () public payable {\n        revert();\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200183c3803806200183c83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e0880151610100890151969895969495939492939182019290820191018260005b8151811015620000c357600160008084848151811015156200008857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001016200006a565b5050600160a060020a0389161515620000db57600080fd5b871515620000e857600080fd5b861515620000f557600080fd5b815115156200010357600080fd5b80518251146200011257600080fd5b80516200012790600d9060208401906200036e565b5081516200013d90600c9060208501906200036e565b5060028054600160a060020a031916600160a060020a038b81169190911791829055604080517f66b52b93000000000000000000000000000000000000000000000000000000008152905192909116916366b52b939160048082019260009290919082900301818387803b158015620001b557600080fd5b505af1158015620001ca573d6000803e3d6000fd5b505060006006555050600787905560088890556005869055620001f7858564010000000062000206810204565b505050505050505050620003de565b811515620002b257600260009054906101000a9004600160a060020a0316600160a060020a03166378e979256040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200027b57600080fd5b505af115801562000290573d6000803e3d6000fd5b505050506040513d6020811015620002a757600080fd5b5051600355620002b8565b60038290555b8015156200036457600260009054906101000a9004600160a060020a0316600160a060020a0316633197cbb66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200032d57600080fd5b505af115801562000342573d6000803e3d6000fd5b505050506040513d60208110156200035957600080fd5b50516004556200036a565b60048190555b5050565b828054828255906000526020600020908101928215620003ac579160200282015b82811115620003ac5782518255916020019190600101906200038f565b50620003ba929150620003be565b5090565b620003db91905b80821115620003ba5760008155600101620003c5565b90565b61144e80620003ee6000396000f3006080604052600436106101245763ffffffff60e060020a6000350416630103c92b81146101555780630570d5681461019457806312ade015146101c957806312fa6feb146101f05780631f2698ab146102055780631f378b8a1461021a5780632a513dd91461023b5780633197cbb61461025357806334323d32146102685780635ed9ebfc14610289578063675cef141461029e57806378e97925146102b35780637e1c0c09146102c8578063924669b2146102dd5780639a359d8e146102fe578063a0355eca14610320578063a035b1fe1461033b578063a6f8fd1314610350578063ae45783514610368578063bb9dea0414610398578063bf583903146103b0578063ce1ff67e146103c5578063dee4b246146103e6578063f3fef3a31461040a575b600354421161013257600080fd5b60045442101561014a576101453361042e565b610153565b6101533361083c565b005b34801561016157600080fd5b50610176600160a060020a03600435166109f9565b60408051938452602084019290925282820152519081900360600190f35b3480156101a057600080fd5b506101b5600160a060020a0360043516610a2b565b604080519115158252519081900360200190f35b3480156101d557600080fd5b506101de610a40565b60408051918252519081900360200190f35b3480156101fc57600080fd5b506101b5610a46565b34801561021157600080fd5b506101b5610a5d565b34801561022657600080fd5b50610153600160a060020a0360043516610a72565b34801561024757600080fd5b50610153600435610b6d565b34801561025f57600080fd5b506101de610c05565b34801561027457600080fd5b506101de600160a060020a0360043516610c0b565b34801561029557600080fd5b506101de610c1d565b3480156102aa57600080fd5b506101de610c23565b3480156102bf57600080fd5b506101de610c29565b3480156102d457600080fd5b506101de610c2f565b3480156102e957600080fd5b506101de600160a060020a0360043516610c48565b34801561030a57600080fd5b506101de67ffffffffffffffff60043516610c5a565b34801561032c57600080fd5b50610153600435602435610c6c565b34801561034757600080fd5b506101de610d1b565b34801561035c57600080fd5b506101de600435610ddf565b6101b5600160a060020a036004351667ffffffffffffffff6024351660443560ff6064351660843560a435610dfe565b3480156103a457600080fd5b506101de600435610e2d565b3480156103bc57600080fd5b506101de610e3b565b3480156103d157600080fd5b506101de600160a060020a0360043516610e41565b6101b567ffffffffffffffff6004351660243560ff60443516606435608435610e53565b34801561041657600080fd5b50610153600160a060020a0360043516602435610e6d565b60008060008060006003544211151561044657600080fd5b600454421061045457600080fd5b60055434101561046357600080fd5b60075460001061047257600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156104c557600080fd5b505af11580156104d9573d6000803e3d6000fd5b505050506040513d60208110156104ef57600080fd5b5051600254600854604080517f7b413985000000000000000000000000000000000000000000000000000000008152600481019290925251600a9390930a9750600160a060020a0390911691637b413985916024808201926020929091908290030181600087803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050506040513d602081101561058d57600080fd5b505193506105b1846105a5348863ffffffff610f3b16565b9063ffffffff610f6616565b9250600260009054906101000a9004600160a060020a0316600160a060020a03166355a373d66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050506040513d602081101561063057600080fd5b5051600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905191909216916370a082319160248083019260209291908290030181600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050506040513d60208110156106c457600080fd5b50516007549092508211156106d95760075491505b50600082821015610746576106fa856105a58486038763ffffffff610f3b16565b9050819250600060078190555085600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610740573d6000803e3d6000fd5b5061075d565b600754610759908463ffffffff610f7d16565b6007555b610795610770348363ffffffff610f7d16565b600160a060020a0388166000908152600960205260409020549063ffffffff610f8f16565b600160a060020a038716600090815260096020908152604080832093909355600a905220546107ca908463ffffffff610f8f16565b600160a060020a0387166000818152600a60209081526040918290209390935560085481519283523493830193909352818101869052606082019290925290517fbeae048c6d270d9469f86cf6e8fedda3c60ad770f16c24c9fc131c8e9a09101d9181900360800190a1505050505050565b60008060006004544211151561085157600080fd5b600160a060020a0384166000908152600b60205260408120541161087457600080fd5b60009250600091505b600c548210156108d057600c80548390811061089557fe5b906000526020600020015460065411156108c557600d8054839081106108b757fe5b906000526020600020015492505b60019091019061087d565b600083116108dd57600080fd5b600160a060020a0384166000908152600b602052604090205461090d906064906105a5908663ffffffff610f3b16565b600160a060020a038086166000818152600b6020908152604080832083905560025481517faad3ec9600000000000000000000000000000000000000000000000000000000815260048101959095526024850187905290519596509093169363aad3ec96936044808501949193918390030190829087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b505050506040513d60208110156109bb57600080fd5b5050604051600160a060020a038516903480156108fc02916000818181858888f193505050501580156109f2573d6000803e3d6000fd5b5050505050565b600160a060020a03166000908152600a6020908152604080832054600b83528184205460099093529220549192909190565b60006020819052908152604090205460ff1681565b60085481565b6000600454421180610a585750600754155b905090565b6000600354421180610a585750506007541590565b600260009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b505050506040513d6020811015610aef57600080fd5b5051600160a060020a03163314610b0557600080fd5b600160a060020a03811660008181526009602052604080822054905181156108fc0292818181858888f19350505050158015610b45573d6000803e3d6000fd5b50600160a060020a03166000908152600960209081526040808320839055600a909152812055565b600260009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bc057600080fd5b505af1158015610bd4573d6000803e3d6000fd5b505050506040513d6020811015610bea57600080fd5b5051600160a060020a03163314610c0057600080fd5b600555565b60045490565b600a6020526000908152604090205481565b60065481565b60055481565b60035490565b6000610a58600654600754610f8f90919063ffffffff16565b60096020526000908152604090205481565b60016020526000908152604090205481565b600260009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cbf57600080fd5b505af1158015610cd3573d6000803e3d6000fd5b505050506040513d6020811015610ce957600080fd5b5051600160a060020a03163314610cff57600080fd5b8115610d0b5760038290555b8015610d175760048190555b5050565b600254600854604080517f7b413985000000000000000000000000000000000000000000000000000000008152600481019290925251600092670de0b6b3a764000092610dd992600160a060020a0390921691637b4139859160248082019260209290919082900301818987803b158015610d9557600080fd5b505af1158015610da9573d6000803e3d6000fd5b505050506040513d6020811015610dbf57600080fd5b50516105a583670de0b6b3a764000063ffffffff610f3b16565b91505090565b600c805482908110610ded57fe5b600091825260209091200154905081565b6000610e0987610f9e565b1515610e1457600080fd5b610e22878787878787610faf565b979650505050505050565b600d805482908110610ded57fe5b60075490565b600b6020526000908152604090205481565b6000610e63338787878787610faf565b9695505050505050565b600260009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050506040513d6020811015610eea57600080fd5b5051600160a060020a03163314610f0057600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610f36573d6000803e3d6000fd5b505050565b6000828202831580610f575750828482811515610f5457fe5b04145b1515610f5f57fe5b9392505050565b6000808284811515610f7457fe5b04949350505050565b600082821115610f8957fe5b50900390565b600082820183811015610f5f57fe5b600160a060020a0381163314919050565b604080517f4569646f6f2069636f656e67696e6520617574686f72697a6174696f6e00000081526000601d8201819052600160a060020a0389166c01000000000000000000000000026031830152780100000000000000000000000000000000000000000000000067ffffffffffffffff8916026045830152604d82018790529151829182918291600291606d808301926020929190829003018186865af115801561105f573d6000803e3d6000fd5b5050506040513d602081101561107457600080fd5b5051604080516000808252602082810180855285905260ff8c1683850152606083018b9052608083018a9052925193965060019360a08084019493601f19830193908390039091019190865af11580156110d2573d6000803e3d6000fd5b505060408051601f190151600160a060020a03811660009081526020819052919091205490935060ff161515905061110957600080fd5b67ffffffffffffffff8916600090815260016020526040902054611133903463ffffffff610f8f16565b90508781111561114257600080fd5b67ffffffffffffffff89166000818152600160209081526040918290208490558151600160a060020a038e81168252918101939093528282018b90529051908416917f74e336db80b339721548db3209451cf01bd48e4a996e1bcea7f1a2abf8b06070919081900360600190a26111b88a6111c6565b9a9950505050505050505050565b6000803411156111d9576111d98261042e565b6111e2826111ea565b506001919050565b600160a060020a0381166000908152600a60205260408120541161120d57600080fd5b600160a060020a0381166000908152600a6020908152604080832054600b909252909120546112419163ffffffff610f8f16565b600160a060020a038083166000818152600b6020908152604080832095909555600254600a82528583205486517faad3ec96000000000000000000000000000000000000000000000000000000008152600481019590955260248501529451949093169363aad3ec96936044808501949193918390030190829087803b1580156112ca57600080fd5b505af11580156112de573d6000803e3d6000fd5b505050506040513d60208110156112f457600080fd5b5050600160a060020a0381166000908152600a60205260409020546006546113219163ffffffff610f8f16565b600655600160a060020a038082166000908152600a6020908152604080832083905560025481517f521eb273000000000000000000000000000000000000000000000000000000008152915194169363521eb27393600480840194938390030190829087803b15801561139357600080fd5b505af11580156113a7573d6000803e3d6000fd5b505050506040513d60208110156113bd57600080fd5b5051600160a060020a03828116600090815260096020526040808220549051929093169280156108fc02929091818181858888f19350505050158015611407573d6000803e3d6000fd5b50600160a060020a03166000908152600960205260408120555600a165627a7a7230582072e8697bf510f099cc83493224c15de7a8d4cde5f6efc6173d9ef43f0b46cadd0029000000000000000000000000c1cf194c1449713bf811a93f4e1a6211c1713e340000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b0b2a5f0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dd5ecefcaa0cb5d75f7b72dc9d2ce446d6d005200000000000000000000000004e315e5de2abbf7b745d9628ee60e4355c0fab86000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030bda62ce07a7af0000000000000000000000000000000000000000000000000617b3e790a414e7c000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000023",
  "constructorArguments": "000000000000000000000000c1cf194c1449713bf811a93f4e1a6211c1713e340000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b0b2a5f0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dd5ecefcaa0cb5d75f7b72dc9d2ce446d6d005200000000000000000000000004e315e5de2abbf7b745d9628ee60e4355c0fab86000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030bda62ce07a7af0000000000000000000000000000000000000000000000000617b3e790a414e7c000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000023"
}