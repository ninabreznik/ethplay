{
  "address": "0x2add50166f633871c9fde26627e6f6fa8e1dce8e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity 0.5.4;\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n       \n        require(b > 0);\n        uint256 c = a / b;\n       \n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n* @title interface of ERC 20 token\n* \n*/\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\n \nlibrary SafeERC20 {\n    \n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Warning!!!! only be used when owner address is compromised\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\ncontract TokenVesting is Ownable{\n    \n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    \n    struct VestedToken{\n        uint256 cliff;\n        uint256 start;\n        uint256 duration;\n        uint256 releasedToken;\n        uint256 totalToken;\n        bool revoked;\n    }\n    \n    mapping (address => VestedToken) public vestedUser; \n    \n    // default Vesting parameter values\n    uint256 private _cliff = 2592000; // 30 days period\n    uint256 private _duration = 93312000; // for 3 years\n    bool private _revoked = false;\n    \n    IERC20 public LCXToken;\n    \n    event TokenReleased(address indexed account, uint256 amount);\n    event VestingRevoked(address indexed account);\n    \n    /**\n     * @dev Its a modifier in which we authenticate the caller is owner or LCXToken Smart Contract\n     */ \n    modifier onlyLCXTokenAndOwner() {\n        require(msg.sender==owner() || msg.sender == address(LCXToken));\n        _;\n    }\n    \n    /**\n     * @dev First we have to set token address before doing any thing \n     * @param token LCX Smart contract Address\n     */\n     \n    function setTokenAddress(IERC20 token) public onlyOwner returns(bool){\n        LCXToken = token;\n        return true;\n    }\n    \n    /**\n     * @dev this will set the beneficiary with default vesting \n     * parameters ie, every month for 3 years\n     * @param account address of the beneficiary for vesting\n     * @param amount  totalToken to be vested\n     */\n     \n     function setDefaultVesting(address account, uint256 amount) public onlyLCXTokenAndOwner returns(bool){\n         _setDefaultVesting(account, amount);\n         return true;\n     }\n     \n     /**\n      *@dev Internal function to set default vesting parameters\n      */\n      \n     function _setDefaultVesting(address account, uint256 amount)  internal {\n         require(account!=address(0));\n         VestedToken storage vested = vestedUser[account];\n         vested.cliff = _cliff;\n         vested.start = block.timestamp;\n         vested.duration = _duration;\n         vested.totalToken = amount;\n         vested.releasedToken = 0;\n         vested.revoked = _revoked;\n     }\n     \n     \n     /**\n     * @dev this will set the beneficiary with vesting \n     * parameters provided\n     * @param account address of the beneficiary for vesting\n     * @param amount  totalToken to be vested\n     * @param cliff In seconds of one period in vesting\n     * @param duration In seconds of total vesting \n     * @param startAt UNIX timestamp in seconds from where vesting will start\n     */\n     \n     function setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt ) public onlyLCXTokenAndOwner  returns(bool){\n         _setVesting(account, amount, cliff, duration, startAt);\n         return true;\n     }\n     \n     /**\n      * @dev Internal function to set default vesting parameters\n      * @param account address of the beneficiary for vesting\n      * @param amount  totalToken to be vested\n      * @param cliff In seconds of one period in vestin\n      * @param duration In seconds of total vesting duration\n      * @param startAt UNIX timestamp in seconds from where vesting will start\n      *\n      */\n     \n     function _setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt) internal {\n         \n         require(account!=address(0));\n         require(cliff<=duration);\n         VestedToken storage vested = vestedUser[account];\n         vested.cliff = cliff;\n         vested.start = startAt;\n         vested.duration = duration;\n         vested.totalToken = amount;\n         vested.releasedToken = 0;\n         vested.revoked = false;\n     }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     * anyone can release their token \n     */\n     \n    function releaseMyToken() public returns(bool) {\n        releaseToken(msg.sender);\n        return true;\n    }\n    \n     /**\n     * @notice Transfers vested tokens to the given account.\n     * @param account address of the vested user\n     */\n    function releaseToken(address account) public {\n       require(account != address(0));\n       VestedToken storage vested = vestedUser[account];\n       uint256 unreleasedToken = _releasableAmount(account);  // total releasable token currently\n       require(unreleasedToken>0);\n       vested.releasedToken = vested.releasedToken.add(unreleasedToken);\n       LCXToken.safeTransfer(account,unreleasedToken);\n       emit TokenReleased(account, unreleasedToken);\n    }\n    \n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param account address of user\n     */\n    function _releasableAmount(address account) internal view returns (uint256) {\n        return _vestedAmount(account).sub(vestedUser[account].releasedToken);\n    }\n\n  \n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param account address of the user\n     */\n    function _vestedAmount(address account) internal view returns (uint256) {\n        VestedToken storage vested = vestedUser[account];\n        uint256 totalToken = vested.totalToken;\n        if(block.timestamp <  vested.start.add(vested.cliff)){\n            return 0;\n        }else if(block.timestamp >= vested.start.add(vested.duration) || vested.revoked){\n            return totalToken;\n        }else{\n            uint256 numberOfPeriods = (block.timestamp.sub(vested.start)).div(vested.cliff);\n            return totalToken.mul(numberOfPeriods.mul(vested.cliff)).div(vested.duration);\n        }\n    }\n    \n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param account address in which the vesting is revoked\n     */\n    function revoke(address account) public onlyOwner {\n        VestedToken storage vested = vestedUser[account];\n        require(!vested.revoked);\n        uint256 balance = vested.totalToken;\n        uint256 unreleased = _releasableAmount(account);\n        uint256 refund = balance.sub(unreleased);\n        vested.revoked = true;\n        vested.totalToken = unreleased;\n        LCXToken.safeTransfer(owner(), refund);\n        emit VestingRevoked(account);\n    }\n    \n    \n    \n    \n}",
  "bytecode": "608060405262278d0060025563058fd4006003556000600460006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36110df806100f96000396000f3fe608060405234801561001057600080fd5b50600436106100d1576000357c0100000000000000000000000000000000000000000000000000000000900480638195ed241161008e5780638195ed241461028c5780638da5cb5b1461030b5780638f32d59b14610355578063b075bfb414610377578063e545f941146103c1578063f2fde38b14610405576100d1565b80630e77e5e3146100d657806326a4e8d21461013c5780632a2eddde14610198578063715018a61461021c57806374a8f103146102265780637e851e131461026a575b600080fd5b610122600480360360408110156100ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610449565b604051808215151515815260200191505060405180910390f35b61017e6004803603602081101561015257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f8565b604051808215151515815260200191505060405180910390f35b610202600480360360a08110156101ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610557565b604051808215151515815260200191505060405180910390f35b61022461060c565b005b6102686004803603602081101561023c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106de565b005b610272610843565b604051808215151515815260200191505060405180910390f35b6102ce600480360360208110156102a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610855565b6040518087815260200186815260200185815260200184815260200183815260200182151515158152602001965050505050505060405180910390f35b61031361089e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61035d6108c7565b604051808215151515815260200191505060405180910390f35b61037f61091e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610403600480360360208110156103d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610944565b005b6104476004803603602081101561041b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9e565b005b600061045361089e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104d95750600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156104e457600080fd5b6104ee8383610abd565b6001905092915050565b60006105026108c7565b151561050d57600080fd5b81600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600061056161089e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105e75750600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156105f257600080fd5b6105ff8686868686610b9e565b6001905095945050505050565b6106146108c7565b151561061f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6106e66108c7565b15156106f157600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160009054906101000a900460ff1615151561075257600080fd5b600081600401549050600061076684610c7f565b9050600061077d8284610ce590919063ffffffff16565b905060018460050160006101000a81548160ff0219169083151502179055508184600401819055506107f96107b061089e565b82600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d079092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167f68d870ac0aff3819234e8a1fc8f357b40d75212f2dc8594b97690fa205b3bab260405160405180910390a25050505050565b600061084e33610944565b6001905090565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561098057600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006109ce83610c7f565b90506000811115156109df57600080fd5b6109f6818360030154610df590919063ffffffff16565b8260030181905550610a4b8382600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d079092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a91826040518082815260200191505060405180910390a2505050565b610aa66108c7565b1515610ab157600080fd5b610aba81610e16565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610af957600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002548160000181905550428160010181905550600354816002018190555081816004018190555060008160030181905550600460009054906101000a900460ff168160050160006101000a81548160ff021916908315150217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515610bda57600080fd5b818311151515610be957600080fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600001819055508181600101819055508281600201819055508481600401819055506000816003018190555060008160050160006101000a81548160ff021916908315150217905550505050505050565b6000610cde600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610cd084610f10565b610ce590919063ffffffff16565b9050919050565b6000828211151515610cf657600080fd5b600082840390508091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d6020811015610dd457600080fd5b81019080805190602001909291905050501515610df057600080fd5b505050565b6000808284019050838110151515610e0c57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e5257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600401549050610f7882600001548360010154610df590919063ffffffff16565b421015610f8a57600092505050611046565b610fa582600201548360010154610df590919063ffffffff16565b42101580610fc157508160050160009054906101000a900460ff165b15610fd0578092505050611046565b6000610fff8360000154610ff1856001015442610ce590919063ffffffff16565b61104b90919063ffffffff16565b9050611040836002015461103261102386600001548561107590919063ffffffff16565b8561107590919063ffffffff16565b61104b90919063ffffffff16565b93505050505b919050565b6000808211151561105b57600080fd5b6000828481151561106857fe5b0490508091505092915050565b60008083141561108857600090506110ad565b6000828402905082848281151561109b57fe5b041415156110a857600080fd5b809150505b9291505056fea165627a7a72305820bc3e0d2cac43937840d31a78762947767d3daf82307cb9499a5b0ab4c80f75cb0029"
}