{
  "address": "0x414871e78692deb45a36e8a3148c2b4d0e16b8a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OJG",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n} \n\n\n/**\n* @title ERC20 interface\n*/\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  \n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\ncontract OJGTokenBasic is ERC20 {\n    \n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;    \n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  \n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }         \n \n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  \n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title OJG\n * @dev OJTGOLD\n */\ncontract OJG is OJGTokenBasic {\n\n  string public constant name = \"OJTGOLD\";\t\n  string public constant symbol = \"OJG\";\t\t    \n  uint8 public constant decimals = 18;\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506b204fce5e3e250261100000006002819055336000818152600160209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36106878061007b6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd146101755780632ff2e9dc1461019c578063313ce567146101b157806366188463146101dc57806370a082311461020057806395d89b4114610221578063a9059cbb14610236578063d73dd6231461025a578063dd62ed3e1461027e575b600080fd5b3480156100bf57600080fd5b506100c86102a5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a03600435166024356102dc565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a610340565b60408051918252519081900360200190f35b3480156101a857600080fd5b5061018a610346565b3480156101bd57600080fd5b506101c6610356565b6040805160ff9092168252519081900360200190f35b3480156101e857600080fd5b50610161600160a060020a036004351660243561035b565b34801561020c57600080fd5b5061018a600160a060020a0360043516610443565b34801561022d57600080fd5b506100c861045e565b34801561024257600080fd5b50610161600160a060020a0360043516602435610495565b34801561026657600080fd5b50610161600160a060020a0360043516602435610578565b34801561028a57600080fd5b5061018a600160a060020a036004358116906024351661060d565b60408051808201909152600781527f4f4a54474f4c4400000000000000000000000000000000000000000000000000602082015281565b33600081815260208181526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b6b204fce5e3e2502611000000081565b601281565b33600090815260208181526040808320600160a060020a0386168452909152812054808311156103ac5733600090815260208181526040808320600160a060020a03881684529091528120556103df565b6103bc818463ffffffff61063616565b33600090815260208181526040808320600160a060020a03891684529091529020555b33600081815260208181526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60408051808201909152600381527f4f4a470000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156104ac57600080fd5b336000908152600160205260409020548211156104c857600080fd5b336000908152600160205260409020546104e8908363ffffffff61063616565b3360009081526001602052604080822092909255600160a060020a0385168152205461051a908363ffffffff61064816565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b33600090815260208181526040808320600160a060020a03861684529091528120546105aa908363ffffffff61064816565b33600081815260208181526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b60008282111561064257fe5b50900390565b8181018281101561065557fe5b929150505600a165627a7a72305820fdae1f8e0d4211e4229dad5387299a82472ad0a8c7053926b88fd8b6881e50480029"
}