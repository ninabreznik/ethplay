{
  "address": "0xd67069d5c76028c81cbcba7c8fa0253d6aad3601",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZmineVoteBurn",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary IterableMap {\n    \n    struct IMap {\n        mapping(address => uint256) mapToData;\n        mapping(address => uint256) mapToIndex; // start with index 1\n        address[] indexes;\n    }\n    \n    function insert(IMap storage self, address _address, uint256 _value) internal returns (bool replaced) {\n      \n        require(_address != address(0));\n        \n        if(self.mapToIndex[_address] == 0){\n            \n            // add new\n            self.indexes.push(_address);\n            self.mapToIndex[_address] = self.indexes.length;\n            self.mapToData[_address] = _value;\n            return false;\n        }\n        \n        // replace\n        self.mapToData[_address] = _value;\n        return true;\n    }\n    \n    function remove(IMap storage self, address _address) internal returns (bool success) {\n       \n        require(_address != address(0));\n        \n        // not existing\n        if(self.mapToIndex[_address] == 0){\n            return false;   \n        }\n        \n        uint256 deleteIndex = self.mapToIndex[_address];\n        if(deleteIndex <= 0 || deleteIndex > self.indexes.length){\n            return false;\n        }\n       \n         // if index to be deleted is not the last index, swap position.\n        if (deleteIndex < self.indexes.length) {\n            // swap \n            self.indexes[deleteIndex-1] = self.indexes[self.indexes.length-1];\n            self.mapToIndex[self.indexes[deleteIndex-1]] = deleteIndex;\n        }\n        self.indexes.length -= 1;\n        delete self.mapToData[_address];\n        delete self.mapToIndex[_address];\n       \n        return true;\n    }\n  \n    function contains(IMap storage self, address _address) internal view returns (bool exists) {\n        return self.mapToIndex[_address] > 0;\n    }\n      \n    function size(IMap storage self) internal view returns (uint256) {\n        return self.indexes.length;\n    }\n  \n    function get(IMap storage self, address _address) internal view returns (uint256) {\n        return self.mapToData[_address];\n    }\n\n    // start with index 0\n    function getKey(IMap storage self, uint256 _index) internal view returns (address) {\n        \n        if(_index < self.indexes.length){\n            return self.indexes[_index];\n        }\n        return address(0);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract ZmineVoteBurn is Ownable {\n  \n    // Use itmap for all functions on the struct\n    using IterableMap for IterableMap.IMap;\n    using SafeMath for uint256;\n    \n    // ERC20 basic token contract being held\n    IERC20 public token;\n  \n    // map address => vote\n    IterableMap.IMap voteRecordMap;\n    // map address => token available for reclaim\n    IterableMap.IMap reclaimTokenMap;\n    \n    // time to start vote period\n    uint256 public timestampStartVote;\n    // time to end vote period\n    uint256 public timestampEndVote;\n    // time to enable reclaim token process\n    uint256 public timestampReleaseToken;\n    \n    // cumulative count for total vote\n    uint256 _totalVote;\n    \n    constructor(IERC20 _token) public {\n\n        token = _token;\n        \n        // (Mainnet) May 22, 2019 GMT (epoch time 1558483200)\n        // (Kovan) from now\n        timestampStartVote = 1558483200; \n        \n        // (Mainnet) May 28, 2019 GMT (epoch time 1559001600)\n        // (Kovan) period for 10 years\n        timestampEndVote = 1559001600; \n        \n        // (Mainnet) May 30, 2019 GMT (epoch time 1559174400)\n        // (Kovan) from now\n        timestampReleaseToken = 1559174400; \n    }\n    \n    /**\n     * modifier\n     */\n     \n    // during the votable period?\n    modifier onlyVotable() {\n        require(isVotable());\n        _;\n    }\n    \n    // during the reclaimable period?\n    modifier onlyReclaimable() {\n        require(isReclaimable());\n        _;\n    }\n  \n    /**\n     * public methods\n     */\n     \n    function isVotable() public view returns (bool){\n        return (timestampStartVote <= block.timestamp && block.timestamp <= timestampEndVote);\n    }\n    \n    function isReclaimable() public view returns (bool){\n        return (block.timestamp >= timestampReleaseToken);\n    }\n    \n    function countVoteUser() public view returns (uint256){\n        return voteRecordMap.size();\n    }\n    \n    function countVoteScore() public view returns (uint256){\n        return _totalVote;\n    }\n    \n    function getVoteByAddress(address _address) public view returns (uint256){\n        return voteRecordMap.get(_address);\n    }\n    \n    // vote by transfer token into this contract as collateral\n    // This process require approval from sender, to allow contract transfer token on the sender behalf.\n    function voteBurn(uint256 amount) public onlyVotable {\n\n        require(token.balanceOf(msg.sender) >= amount);\n        \n        // transfer token on the sender behalf.\n        token.transferFrom(msg.sender, address(this), amount);\n        \n        // calculate cumulative vote\n        uint256 newAmount = voteRecordMap.get(msg.sender).add(amount);\n        \n        // save to map\n        reclaimTokenMap.insert(msg.sender, newAmount);\n        voteRecordMap.insert(msg.sender, newAmount);\n        \n        // cumulative count total vote\n        _totalVote = _totalVote.add(amount);\n    }\n    \n    // Take the token back to the sender after reclaimable period has come.\n    function reclaimToken() public onlyReclaimable {\n      \n        uint256 amount = reclaimTokenMap.get(msg.sender);\n        require(amount > 0);\n        require(token.balanceOf(address(this)) >= amount);\n          \n        // transfer token back to sender\n        token.transfer(msg.sender, amount);\n        \n        // remove from map\n        reclaimTokenMap.remove(msg.sender);\n    }\n    \n    /**\n     * admin methods\n     */\n     \n    function adminCountReclaimableUser() public view onlyOwner returns (uint256){\n        return reclaimTokenMap.size();\n    }\n    \n    function adminCheckReclaimableAddress(uint256 index) public view onlyOwner returns (address){\n        \n        require(index >= 0); \n        \n        if(reclaimTokenMap.size() > index){\n            return reclaimTokenMap.getKey(index);\n        }else{\n            return address(0);\n        }\n    }\n    \n    function adminCheckReclaimableToken(uint256 index) public view onlyOwner returns (uint256){\n    \n        require(index >= 0); \n    \n        if(reclaimTokenMap.size() > index){\n            return reclaimTokenMap.get(reclaimTokenMap.getKey(index));\n        }else{\n            return 0;\n        }\n    }\n    \n    function adminCheckVoteAddress(uint256 index) public view onlyOwner returns (address){\n        \n        require(index >= 0); \n        \n        if(voteRecordMap.size() > index){\n            return voteRecordMap.getKey(index);\n        }else{\n            return address(0);\n        }\n    }\n    \n    function adminCheckVoteToken(uint256 index) public view onlyOwner returns (uint256){\n    \n        require(index >= 0); \n    \n        if(voteRecordMap.size() > index){\n            return voteRecordMap.get(voteRecordMap.getKey(index));\n        }else{\n            return 0;\n        }\n    }\n    \n    // perform reclaim token by admin \n    function adminReclaimToken(address _address) public onlyOwner {\n      \n        uint256 amount = reclaimTokenMap.get(_address);\n        require(amount > 0);\n        require(token.balanceOf(address(this)) >= amount);\n          \n        token.transfer(_address, amount);\n        \n        // remove from map\n        reclaimTokenMap.remove(_address);\n    }\n    \n    // Prevent deposit tokens by accident to a contract with the transfer function? \n    // The transaction will succeed but this will not be recognized by the contract.\n    // After reclaim process was ended, admin will able to transfer the remain tokens to himself. \n    // And return the remain tokens to senders by manual process.\n    function adminSweepMistakeTransferToken() public onlyOwner {\n        \n        require(reclaimTokenMap.size() == 0);\n        require(token.balanceOf(address(this)) > 0);\n        token.transfer(owner, token.balanceOf(address(this)));\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610e7e8339810180604052602081101561003057600080fd5b5051600080546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055635ce49100600855635cec7a00600955635cef1d00600a55610df7806100876000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80639701d7c6116100ad578063d6f34c2511610071578063d6f34c2514610291578063dbc0241f14610299578063f2fde38b146102a1578063fc0c546a146102c7578063fff28137146102cf5761012b565b80639701d7c61461022a5780639c4bbb8a14610247578063bfe9edc314610264578063c0f7bdb41461026c578063d412e79a146102745761012b565b80637f731ba3116100f45780637f731ba3146101d057806380525548146101ec5780638229b84f146102125780638da5cb5b1461021a57806393c2a916146102225761012b565b80629ae52a1461013057806316ed0daa1461015f57806320c1a1e7146101675780633c4f37071461018f5780636363ecf1146101c8575b600080fd5b61014d6004803603602081101561014657600080fd5b50356102d7565b60408051918252519081900360200190f35b61014d610332565b61018d6004803603602081101561017d57600080fd5b50356001600160a01b0316610338565b005b6101ac600480360360208110156101a557600080fd5b5035610491565b604080516001600160a01b039092168252519081900360200190f35b61018d6104cb565b6101d8610679565b604080519115158252519081900360200190f35b61014d6004803603602081101561020257600080fd5b50356001600160a01b0316610683565b61014d61069c565b6101ac6106a2565b6101d86106b1565b61014d6004803603602081101561024057600080fd5b50356106cc565b61018d6004803603602081101561025d57600080fd5b5035610717565b61014d61089b565b61014d6108bd565b6101ac6004803603602081101561028a57600080fd5b50356108c3565b61014d6108fd565b61014d610909565b61018d600480360360208110156102b757600080fd5b50356001600160a01b031661090f565b6101ac610994565b61018d6109a3565b600080546001600160a01b031633146102ef57600080fd5b816102fa6002610aef565b11156103295761032261031460028463ffffffff610af616565b60029063ffffffff610b3916565b905061032d565b5060005b919050565b600a5481565b6000546001600160a01b0316331461034f57600080fd5b600061036260058363ffffffff610b3916565b90506000811161037157600080fd5b60015460408051600160e01b6370a08231028152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156103be57600080fd5b505afa1580156103d2573d6000803e3d6000fd5b505050506040513d60208110156103e857600080fd5b505110156103f557600080fd5b60015460408051600160e01b63a9059cbb0281526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506040513d602081101561047857600080fd5b5061048c905060058363ffffffff610b5516565b505050565b600080546001600160a01b031633146104a957600080fd5b816104b46002610aef565b11156103295761032260028363ffffffff610af616565b6000546001600160a01b031633146104e257600080fd5b6104ec6005610aef565b156104f657600080fd5b60015460408051600160e01b6370a0823102815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561054457600080fd5b505afa158015610558573d6000803e3d6000fd5b505050506040513d602081101561056e57600080fd5b50511161057a57600080fd5b60015460005460408051600160e01b6370a0823102815230600482015290516001600160a01b039384169363a9059cbb93169184916370a0823191602480820192602092909190829003018186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d60208110156105ff57600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561064b57600080fd5b505af115801561065f573d6000803e3d6000fd5b505050506040513d602081101561067557600080fd5b5050565b600a544210155b90565b600061069660028363ffffffff610b3916565b92915050565b60085481565b6000546001600160a01b031681565b600042600854111580156106c757506009544211155b905090565b600080546001600160a01b031633146106e457600080fd5b816106ef6005610aef565b11156103295761032261070960058463ffffffff610af616565b60059063ffffffff610b3916565b61071f6106b1565b61072857600080fd5b60015460408051600160e01b6370a08231028152336004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d602081101561079f57600080fd5b505110156107ac57600080fd5b60015460408051600160e01b6323b872dd0281523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561080957600080fd5b505af115801561081d573d6000803e3d6000fd5b505050506040513d602081101561083357600080fd5b50600090506108598261084d60023363ffffffff610b3916565b9063ffffffff610cc516565b905061086d6005338363ffffffff610cde16565b506108806002338363ffffffff610cde16565b50600b54610894908363ffffffff610cc516565b600b555050565b600080546001600160a01b031633146108b357600080fd5b6106c76005610aef565b600b5490565b600080546001600160a01b031633146108db57600080fd5b816108e66005610aef565b11156103295761032260058363ffffffff610af616565b60006106c76002610aef565b60095481565b6000546001600160a01b0316331461092657600080fd5b6001600160a01b03811661093957600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b6109ab610679565b6109b457600080fd5b60006109c760053363ffffffff610b3916565b9050600081116109d657600080fd5b60015460408051600160e01b6370a08231028152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610a2357600080fd5b505afa158015610a37573d6000803e3d6000fd5b505050506040513d6020811015610a4d57600080fd5b50511015610a5a57600080fd5b60015460408051600160e01b63a9059cbb0281523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b505050506040513d6020811015610adb57600080fd5b50610675905060053363ffffffff610b5516565b6002015490565b6002820154600090821015610b3057826002018281548110610b1457fe5b6000918252602090912001546001600160a01b03169050610696565b50600092915050565b6001600160a01b03166000908152602091909152604090205490565b60006001600160a01b038216610b6a57600080fd5b6001600160a01b0382166000908152600184016020526040902054610b9157506000610696565b6001600160a01b0382166000908152600184016020526040902054801580610bbc5750600284015481115b15610bcb576000915050610696565b6002840154811015610c84576002840180546000198101908110610beb57fe5b6000918252602090912001546002850180546001600160a01b03909216916000198401908110610c1757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080846001016000866002016001850381548110610c5e57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b6002840180546000190190610c999082610d8e565b5050506001600160a01b0316600090815260208281526040808320839055600193840190915281205590565b600082820183811015610cd757600080fd5b9392505050565b60006001600160a01b038316610cf357600080fd5b6001600160a01b0383166000908152600185016020526040902054610d6b5750600283018054600180820183556000838152602080822090930180546001600160a01b0319166001600160a01b0388169081179091559354938152908601825260408082209390935590859052908120829055610cd7565b506001600160a01b03919091166000908152602092909252604090912055600190565b81548183558181111561048c5760008381526020902061048c91810190830161068091905b80821115610dc75760008155600101610db3565b509056fea165627a7a7230582069347324d0288efd4bbc471565fedfd9ce4afba9b5f98e93e439f7c208c34b540029000000000000000000000000554ffc77f4251a9fb3c0e3590a6a205f8d4e067d",
  "constructorArguments": "000000000000000000000000554ffc77f4251a9fb3c0e3590a6a205f8d4e067d"
}