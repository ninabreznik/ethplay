{
  "address": "0xdbccc4d7962c669d943a4cdbb69c8095d4168f9f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "brothers",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-21\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/brothers.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol\";\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/ownership/Ownable.sol\";\n\n//import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/lifecycle/Pausable.sol\";\n\n\ncontract brothers is Ownable { //\n    using SafeMath for uint256;\n\n    event EthIssued(uint256 value);\n\n    event AddressAdded(address newbrother);\n    event AddressRemoved(address oldbrother);\n\n\n    address payable[] bizbrothers;\n    address payable[] devbrothers;\n    address payable[] tradebrothers;\n    address payable[] socialbrothers;\n    uint256 public pool;\n    uint256 public serviceshare;\n\n    \n    uint256 public total_distributed;\n\n    address payable service_costs = 0x5315845c377DC739Db349c24760955bf3aA88e2a;\n\n    constructor() public Ownable() {\n        \n        emit EthIssued(0);\n        \n        bizbrothers.push(0x7A6C7Da79Ac78C9f473D8723E1e62030414B6909);\n        bizbrothers.push(0x5736AF088b326DaFCbF8fCBe005241245E853a0F);\n        bizbrothers.push(0x1f6bca1657e2B08A31A562B14c6A5c7e49661eb2);\n        \n        devbrothers.push(0x73D0e9F8dACa563A50fd70498Be9390088594E72);\n\n        tradebrothers.push(0xC02bc79F386685CE4bAEc9243982BAf9163A06E7);\n        tradebrothers.push(0x27b8e7fffC5d3DC967c96b2cA0E7EC028268A2b6);\n        tradebrothers.push(0x4C1f6069D12d7110985b48f963084C3ccf48aB06);\n\n        socialbrothers.push(0xe91717B09Cd9D0e8f548EC5cE2921da9C2367356);\n    }\n\n    function () external payable {\n        \n    }\n\n    function distributepool() external payable {\n        //if msg.value\n        \n        pool = address(this).balance;\n        if(msg.value > 0){\n            pool = pool + msg.value;\n        }\n        serviceshare = pool / 100 * 10;\n        service_costs.transfer(serviceshare);\n        pool = pool - serviceshare;\n\n        uint256 bizshare = pool / 8 * 3;\n        for(uint256 i = 0; i < bizbrothers.length; i++){\n            bizbrothers[i].transfer(bizshare / bizbrothers.length);\n        }\n\n        uint256 devshare = pool / 8 * 1;\n        for(uint256 i = 0; i < devbrothers.length; i++){\n            devbrothers[i].transfer(devshare / devbrothers.length);\n        }\n\n        uint256 tradeshare = pool / 8 * 3;\n        for(uint256 i = 0; i < tradebrothers.length; i++){\n            tradebrothers[i].transfer(tradeshare / tradebrothers.length);\n        }\n\n        uint256 socialshare = pool / 8 * 1;\n        for(uint256 i = 0; i < socialbrothers.length; i++){\n            socialbrothers[i].transfer(socialshare / socialbrothers.length);\n        }\n\n    }\n \n    function addbizbrother(address payable newbrother) external onlyOwner(){\n        bizbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function adddevbrother(address payable newbrother) external onlyOwner(){\n        devbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function addtradebrother(address payable newbrother) external onlyOwner(){\n        tradebrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function addsocialbrother(address payable newbrother) external onlyOwner(){\n        socialbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function removebrother(address payable oldbrother) external onlyOwner(){\n        for(uint256 i = 0; i < bizbrothers.length; i++){\n            if(bizbrothers[i] == oldbrother){\n                for (uint j = i; j < bizbrothers.length-1; j++){\n                    bizbrothers[j] = bizbrothers[j+1];\n                }\n                bizbrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < devbrothers.length; i++){\n            if(devbrothers[i] == oldbrother){\n                for (uint j = i; j < devbrothers.length-1; j++){\n                    devbrothers[j] = devbrothers[j+1];\n                }\n                devbrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < tradebrothers.length; i++){\n            if(tradebrothers[i] == oldbrother){\n                for (uint j = i; j < tradebrothers.length-1; j++){\n                    tradebrothers[j] = tradebrothers[j+1];\n                }\n                tradebrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < socialbrothers.length; i++){\n            if(socialbrothers[i] == oldbrother){\n                for (uint j = i; j < socialbrothers.length-1; j++){\n                    socialbrothers[j] = socialbrothers[j+1];\n                }\n                socialbrothers.length--;\n            }\n\n        }\n\n    }\n\n\n}",
  "bytecode": "6080604052600880546001600160a01b031916735315845c377dc739db349c24760955bf3aa88e2a17905534801561003657600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3604080516000815290517f9737d7dd89d0ba08ef09d12ef3758112d5da7517a2c0e24e6cd86112864a4fbc9181900360200190a16001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690810180546001600160a01b0319908116737a6c7da79ac78c9f473d8723e1e62030414b69091790915582548084018455820180548216735736af088b326dafcbf8fcbe005241245e853a0f1790558254808401845590910180548216731f6bca1657e2b08a31a562b14c6a5c7e49661eb2179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805482167373d0e9f8daca563a50fd70498be9390088594e721790556003805480840182557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081018054841673c02bc79f386685ce4baec9243982baf9163a06e7179055815480850183558101805484167327b8e7fffc5d3dc967c96b2ca0e7ec028268a2b617905581548085019092550180548216734c1f6069d12d7110985b48f963084c3ccf48ab061790556004805492830181556000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101805490911673e91717b09cd9d0e8f548ec5ce2921da9c2367356179055610c788061028a6000396000f3fe6080604052600436106100c25760003560e01c8063a3c03c441161007f578063e8b8b73f11610059578063e8b8b73f14610210578063f0f0660214610225578063f2fde38b14610258578063f9480e271461028b576100c2565b8063a3c03c4414610195578063b81aa73a146101c8578063ccb92628146101dd576100c2565b806316f0115b146100c457806321cda867146100eb578063236a2ee8146100f3578063715018a6146101265780638da5cb5b1461013b5780638f32d59b1461016c575b005b3480156100d057600080fd5b506100d96102be565b60408051918252519081900360200190f35b6100c26102c4565b3480156100ff57600080fd5b506100c26004803603602081101561011657600080fd5b50356001600160a01b031661055f565b34801561013257600080fd5b506100c26108c7565b34801561014757600080fd5b50610150610922565b604080516001600160a01b039092168252519081900360200190f35b34801561017857600080fd5b50610181610932565b604080519115158252519081900360200190f35b3480156101a157600080fd5b506100c2600480360360208110156101b857600080fd5b50356001600160a01b0316610943565b3480156101d457600080fd5b506100d96109c5565b3480156101e957600080fd5b506100c26004803603602081101561020057600080fd5b50356001600160a01b03166109cb565b34801561021c57600080fd5b506100d9610a4e565b34801561023157600080fd5b506100c26004803603602081101561024857600080fd5b50356001600160a01b0316610a54565b34801561026457600080fd5b506100c26004803603602081101561027b57600080fd5b50356001600160a01b0316610ad7565b34801561029757600080fd5b506100c2600480360360208110156102ae57600080fd5b50356001600160a01b0316610af4565b60055481565b303160055534156102d85760058054340190555b6064600554816102e457fe5b04600a0260068190556008546040516001600160a01b03909116916108fc811502916000818181858888f19350505050158015610325573d6000803e3d6000fd5b5060065460055403600581905550600060086005548161034157fe5b04600302905060005b6001548110156103bd576001818154811061036157fe5b6000918252602090912001546001546001600160a01b03909116906108fc90848161038857fe5b049081150290604051600060405180830381858888f193505050501580156103b4573d6000803e3d6000fd5b5060010161034a565b5060006008600554816103cc57fe5b04905060005b60025481101561044557600281815481106103e957fe5b6000918252602090912001546002546001600160a01b03909116906108fc90848161041057fe5b049081150290604051600060405180830381858888f1935050505015801561043c573d6000803e3d6000fd5b506001016103d2565b50600060086005548161045457fe5b04600302905060005b6003548110156104d0576003818154811061047457fe5b6000918252602090912001546003546001600160a01b03909116906108fc90848161049b57fe5b049081150290604051600060405180830381858888f193505050501580156104c7573d6000803e3d6000fd5b5060010161045d565b5060006008600554816104df57fe5b04905060005b60045481101561055857600481815481106104fc57fe5b6000918252602090912001546004546001600160a01b03909116906108fc90848161052357fe5b049081150290604051600060405180830381858888f1935050505015801561054f573d6000803e3d6000fd5b506001016104e5565b5050505050565b610567610932565b61057057600080fd5b60005b60015481101561064457816001600160a01b03166001828154811061059457fe5b6000918252602090912001546001600160a01b0316141561063c57805b6001546000190181101561062657600181600101815481106105cf57fe5b600091825260209091200154600180546001600160a01b0390921691839081106105f557fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556001016105b1565b50600180549061063a906000198301610be5565b505b600101610573565b5060005b60025481101561071957816001600160a01b03166002828154811061066957fe5b6000918252602090912001546001600160a01b0316141561071157805b600254600019018110156106fb57600281600101815481106106a457fe5b600091825260209091200154600280546001600160a01b0390921691839081106106ca57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101610686565b50600280549061070f906000198301610be5565b505b600101610648565b5060005b6003548110156107ee57816001600160a01b03166003828154811061073e57fe5b6000918252602090912001546001600160a01b031614156107e657805b600354600019018110156107d0576003816001018154811061077957fe5b600091825260209091200154600380546001600160a01b03909216918390811061079f57fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560010161075b565b5060038054906107e4906000198301610be5565b505b60010161071d565b5060005b6004548110156108c357816001600160a01b03166004828154811061081357fe5b6000918252602090912001546001600160a01b031614156108bb57805b600454600019018110156108a5576004816001018154811061084e57fe5b600091825260209091200154600480546001600160a01b03909216918390811061087457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101610830565b5060048054906108b9906000198301610be5565b505b6001016107f2565b5050565b6108cf610932565b6108d857600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b61094b610932565b61095457600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0383166001600160a01b031990911681179091556040805191825251600080516020610c2d8339815191529181900360200190a150565b60065481565b6109d3610932565b6109dc57600080fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0383166001600160a01b031990911681179091556040805191825251600080516020610c2d8339815191529181900360200190a150565b60075481565b610a5c610932565b610a6557600080fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0383166001600160a01b031990911681179091556040805191825251600080516020610c2d8339815191529181900360200190a150565b610adf610932565b610ae857600080fd5b610af181610b77565b50565b610afc610932565b610b0557600080fd5b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0383166001600160a01b031990911681179091556040805191825251600080516020610c2d8339815191529181900360200190a150565b6001600160a01b038116610b8a57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b815481835581811115610c0957600083815260209020610c09918101908301610c0e565b505050565b61092f91905b80821115610c285760008155600101610c14565b509056fea226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7fa165627a7a72305820940af9bec845999a9e0ab5b239791e5089a39e0ccdecaec31585d487673047e60029"
}