{
  "address": "0xba92981e049a79de1b79c2396d48063e02f47239",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberBancorReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-16\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/ERC20Interface.sol\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/KyberReserveInterface.sol\n\n/// @title Kyber Reserve contract\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\n// File: contracts/Utils.sol\n\n/// @title Kyber constants contract\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\n// File: contracts/Utils2.sol\n\ncontract Utils2 is Utils {\n\n    /// @dev get the balance of a user.\n    /// @param token The token type\n    /// @return The balance\n    function getBalance(ERC20 token, address user) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return user.balance;\n        else\n            return token.balanceOf(user);\n    }\n\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n\n        if (decimals[token] == 0) {\n            setDecimals(token);\n        }\n\n        return decimals[token];\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n}\n\n// File: contracts/PermissionGroups.sol\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/Withdrawable.sol\n\n/**\n * @title Contracts that should be able to recover tokens or ethers\n * @author Ilan Doron\n * @dev This allows to recover any tokens or Ethers received in a contract.\n * This will prevent any accidental loss of tokens.\n */\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\n// File: contracts/oasisContracts/KyberBancorReserve.sol\n\ncontract IBancorConverter {\n    function getReturn(ERC20 _fromToken, ERC20 _toToken, uint _amount) public view returns (uint256, uint256);\n}\n\ncontract KyberBancorReserve is KyberReserveInterface, Withdrawable, Utils2 {\n\n    address public sanityRatesContract = 0;\n    address public kyberNetwork;\n    IBancorConverter public bancor;\n    ERC20 public token;\n    ERC20 public constant BANCOR_ETH = ERC20(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n    bool public tradeEnabled;\n    int public premiumInBps;\n\n    function KyberBancorReserve(\n        /*IBancorConverter _bancor,\n        address _kyberNetwork,\n        ERC20 _token,\n        address _admin,\n        int _PremiumBps*/\n    )\n        public\n    {\n    /*\n        require(_bancor != address(0));\n        require(_kyberNetwork != address(0));\n        require(_token != address(0));\n        require(_PremiumBps >= -10000);\n        require(_PremiumBps <= int(MAX_QTY));*/\n\n        kyberNetwork = address(0x65897aDCBa42dcCA5DD162c647b1cC3E31238490);\n        bancor = IBancorConverter(0xb89570f6AD742CB1fd440A930D6c2A2eA29c51eE);\n        token = ERC20(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n        admin = address(0xd0643BC0D0C879F175556509dbcEe9373379D5C3);\n        premiumInBps = 0;\n\n        setDecimals(token);\n        setDecimals(ETH_TOKEN_ADDRESS);\n    }\n\n    function() public payable {\n        // anyone can deposit ether\n    }\n\n    function setPremium(int newPremium) public onlyAdmin {\n        require(newPremium >= -10000);\n        require(newPremium <= int(MAX_QTY));\n\n        premiumInBps = newPremium;\n    }\n\n    event TradeExecute(\n        address indexed sender,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress\n    );\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n\n        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\n\n        return true;\n    }\n\n    event TradeEnabled(bool enable);\n\n    function enableTrade() public onlyAdmin returns(bool) {\n        tradeEnabled = true;\n        TradeEnabled(true);\n\n        return true;\n    }\n\n    function disableTrade() public onlyAlerter returns(bool) {\n        tradeEnabled = false;\n        TradeEnabled(false);\n\n        return true;\n    }\n\n    event KyberNetworkSet(address kyberNetwork);\n\n    function setKyberNetwork(address _kyberNetwork) public onlyAdmin {\n        require(_kyberNetwork != address(0));\n\n        kyberNetwork = _kyberNetwork;\n        KyberNetworkSet(kyberNetwork);\n    }\n\n    function valueAfterAddingPremium(uint val) public view returns(uint) {\n        require(val <= MAX_QTY);\n\n        return val * uint(10000 + premiumInBps) / 10000;\n    }\n    function shouldUseInternalInventory(uint val,\n                                        ERC20 dest) public view returns(bool) {\n        if (dest == token) {\n            return val <= token.balanceOf(this);\n        }\n        else {\n            return val <= this.balance;\n        }\n    }\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\n        uint  expectedReturn;\n        ERC20 actualSrc;\n        ERC20 actualDest;\n\n        blockNumber;\n\n        if (!tradeEnabled) return 0;\n        if (!validTokens(src, dest)) return 0;\n\n        if (src == ETH_TOKEN_ADDRESS) {\n            actualSrc = BANCOR_ETH;\n            actualDest = dest;\n        } else if (dest == ETH_TOKEN_ADDRESS) {\n            actualSrc = src;\n            actualDest = BANCOR_ETH;\n        } else {\n            return 0;\n        }\n\n        // zelda\n        (expectedReturn,) = bancor.getReturn(actualSrc, actualDest, srcQty);\n        expectedReturn = valueAfterAddingPremium(expectedReturn);\n\n        if(! shouldUseInternalInventory(expectedReturn,dest)) return 0;\n        else return calcRateFromQty(srcQty, expectedReturn, getDecimals(src), getDecimals(dest));\n    }\n\n    function doTrade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        internal\n        returns(bool)\n    {\n        require(validTokens(srcToken, destToken));\n\n        // can skip validation if done at kyber network level\n        if (validate) {\n            require(conversionRate > 0);\n            if (srcToken == ETH_TOKEN_ADDRESS)\n                require(msg.value == srcAmount);\n            else \n                require(msg.value == 0);\n        }\n\n\t    if (srcToken != ETH_TOKEN_ADDRESS) require(token.transferFrom(msg.sender,this,srcAmount));\n\n        uint userExpectedDestAmount = calcDstQty(srcAmount, getDecimals(srcToken), getDecimals(destToken), conversionRate);\n        if(destToken == ETH_TOKEN_ADDRESS) destAddress.transfer(userExpectedDestAmount);\n        else require(destToken.transfer(destAddress, userExpectedDestAmount));\n\n        TradeExecute(msg.sender, srcToken, srcAmount, destToken, userExpectedDestAmount, destAddress);\n\n        return true;\n    }\n\n    function validTokens(ERC20 src, ERC20 dest) internal view returns (bool valid) {\n        return ((token == src && ETH_TOKEN_ADDRESS == dest) ||\n                (token == dest && ETH_TOKEN_ADDRESS == src));\n    }\n}",
  "bytecode": "606060405260078054600160a060020a031916905534156200002057600080fd5b6000805460088054600160a060020a03199081167365897adcba42dcca5dd162c647b1cc3e312384901790915560098054821673b89570f6ad742cb1fd440a930d6c2a2ea29c51ee179055600a80548216731f573d6fb3f13d689ff844b4ce37794d79a7ff1c1790819055600160a060020a033381169383169390931790911673d0643bc0d0c879f175556509dbcee9373379d5c3178355600b92909255620000d891166401000000006200198d6200010b82021704565b6200010573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6401000000006200198d6200010b82021704565b620001eb565b600160a060020a03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156200015357600160a060020a038116600090815260066020526040902060129055620001e8565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620001b357600080fd5b6102c65a03f11515620001c557600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b50565b611a7c80620001fb6000396000f30060606040526004361061015a5763ffffffff60e060020a60003504166299d386811461015c57806301a12fd31461018357806326782247146101a257806327a099d8146101d15780633ccdbb28146102375780633d3da83114610260578063408ee7fe1461028857806347e6924f146102a757806354a325a6146102ba578063639905b4146102d95780636940030f146102ec5780636cf69811146102ff57806375829def1461032b57806377f50f971461034a5780637acc86781461035d5780637c423f541461037c5780637cd442721461038f5780637cfb6052146103ba5780639870d7fe146103d0578063a86ccfd8146103ef578063ac8a584a14610402578063b78b842d14610421578063c65a8c3014610434578063ce56c45414610447578063d4fac45d14610469578063d621e8131461048e578063f2ee08e2146104a1578063f851a440146104c3578063fc0c546a146104d6575b005b341561016757600080fd5b61016f6104e9565b604051901515815260200160405180910390f35b341561018e57600080fd5b61015a600160a060020a0360043516610577565b34156101ad57600080fd5b6101b56106e7565b604051600160a060020a03909116815260200160405180910390f35b34156101dc57600080fd5b6101e46106f6565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561022357808201518382015260200161020b565b505050509050019250505060405180910390f35b341561024257600080fd5b61015a600160a060020a03600435811690602435906044351661075e565b341561026b57600080fd5b610276600435610855565b60405190815260200160405180910390f35b341561029357600080fd5b61015a600160a060020a0360043516610882565b34156102b257600080fd5b6101b561097e565b34156102c557600080fd5b61015a600160a060020a036004351661098d565b34156102e457600080fd5b6101b5610a1f565b34156102f757600080fd5b61016f610a2e565b61016f600160a060020a03600435811690602435906044358116906064351660843560a4351515610aaf565b341561033657600080fd5b61015a600160a060020a0360043516610b1c565b341561035557600080fd5b61015a610bb7565b341561036857600080fd5b61015a600160a060020a0360043516610c51565b341561038757600080fd5b6101e4610d33565b341561039a57600080fd5b610276600160a060020a0360043581169060243516604435606435610d99565b34156103c557600080fd5b61015a600435610f44565b34156103db57600080fd5b61015a600160a060020a0360043516610f8d565b34156103fa57600080fd5b6101b561105d565b341561040d57600080fd5b61015a600160a060020a0360043516611075565b341561042c57600080fd5b6101b56111e1565b341561043f57600080fd5b6102766111f0565b341561045257600080fd5b61015a600435600160a060020a03602435166111f6565b341561047457600080fd5b610276600160a060020a0360043581169060243516611289565b341561049957600080fd5b61016f61133b565b34156104ac57600080fd5b61016f600435600160a060020a036024351661135c565b34156104ce57600080fd5b6101b5611407565b34156104e157600080fd5b6101b5611416565b6000805433600160a060020a0390811691161461050557600080fd5b600a805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356001604051901515815260200160405180910390a15060015b90565b6000805433600160a060020a0390811691161461059357600080fd5b600160a060020a03821660009081526003602052604090205460ff1615156105ba57600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b6005548110156106e35781600160a060020a03166005828154811015156105ff57fe5b600091825260209091200154600160a060020a031614156106db5760058054600019810190811061062c57fe5b60009182526020909120015460058054600160a060020a03909216918390811061065257fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600580549061068e906000198301611934565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a16106e3565b6001016105dc565b5050565b600154600160a060020a031681565b6106fe61195d565b600480548060200260200160405190810160405280929190818152602001828054801561075457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610736575b5050505050905090565b60005433600160a060020a0390811691161461077957600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107d657600080fd5b6102c65a03f115156107e757600080fd5b5050506040518051905015156107fc57600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b60006b204fce5e3e2502611000000082111561087057600080fd5b600b5461271090810183020492915050565b60005433600160a060020a0390811691161461089d57600080fd5b600160a060020a03811660009081526003602052604090205460ff16156108c357600080fd5b600554603290106108d357600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff1916600190811790915560058054909181016109528382611934565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b600754600160a060020a031681565b60005433600160a060020a039081169116146109a857600080fd5b600160a060020a03811615156109bd57600080fd5b60088054600160a060020a031916600160a060020a0383811691909117918290557f38622430bb6defd4452b087e8d0b4a6d1c4d35c179c2d7d875d4abb272b9d88b9116604051600160a060020a03909116815260200160405180910390a150565b600954600160a060020a031681565b600160a060020a03331660009081526003602052604081205460ff161515610a5557600080fd5b600a805474ff0000000000000000000000000000000000000000191690557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051901515815260200160405180910390a150600190565b600a5460009074010000000000000000000000000000000000000000900460ff161515610adb57600080fd5b60085433600160a060020a03908116911614610af657600080fd5b610b04878787878787611425565b1515610b0f57600080fd5b5060019695505050505050565b60005433600160a060020a03908116911614610b3757600080fd5b600160a060020a0381161515610b4c57600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60015433600160a060020a03908116911614610bd257600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a03908116911614610c6c57600080fd5b600160a060020a0381161515610c8157600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b610d3b61195d565b600580548060200260200160405190810160405280929190818152602001828054801561075457602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610736575050505050905090565b600080600080600a60149054906101000a900460ff161515610dbe5760009350610f39565b610dc888886116be565b1515610dd75760009350610f39565b600160a060020a03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e1a575073c0829421c1d260bd3cb3e0f06cfe2d52db2ce315905085610e66565b600160a060020a03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e5d575086905073c0829421c1d260bd3cb3e0f06cfe2d52db2ce315610e66565b60009350610f39565b600954600160a060020a0316631e1401f883838960006040516040015260405160e060020a63ffffffff8616028152600160a060020a03938416600482015291909216602482015260448101919091526064016040805180830381600087803b1515610ed157600080fd5b6102c65a03f11515610ee257600080fd5b505050604051805190602001805150909350610eff905083610855565b9250610f0b838861135c565b1515610f1a5760009350610f39565b610f368684610f288b611740565b610f318b611740565b611804565b93505b505050949350505050565b60005433600160a060020a03908116911614610f5f57600080fd5b61270f19811215610f6f57600080fd5b6b204fce5e3e25026110000000811315610f8857600080fd5b600b55565b60005433600160a060020a03908116911614610fa857600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610fce57600080fd5b60045460329010610fde57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff1916600190811790915560048054909181016109528382611934565b73c0829421c1d260bd3cb3e0f06cfe2d52db2ce31581565b6000805433600160a060020a0390811691161461109157600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156110b857600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156106e35781600160a060020a03166004828154811015156110fd57fe5b600091825260209091200154600160a060020a031614156111d95760048054600019810190811061112a57fe5b60009182526020909120015460048054600160a060020a03909216918390811061115057fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560048054600019019061118c9082611934565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a16106e3565b6001016110da565b600854600160a060020a031681565b600b5481565b60005433600160a060020a0390811691161461121157600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f19350505050151561124257600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112c15750600160a060020a03811631611335565b82600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561131857600080fd5b6102c65a03f1151561132957600080fd5b50505060405180519150505b92915050565b600a5474010000000000000000000000000000000000000000900460ff1681565b600a54600090600160a060020a03838116911614156113f357600a54600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156113ce57600080fd5b6102c65a03f115156113df57600080fd5b505050604051805190508311159050611335565b50600160a060020a03301631821115611335565b600054600160a060020a031681565b600a54600160a060020a031681565b60008061143288876116be565b151561143d57600080fd5b8215611491576000841161145057600080fd5b600160a060020a03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156114865734871461148157600080fd5b611491565b341561149157600080fd5b600160a060020a03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461154757600a54600160a060020a03166323b872dd33308a60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561152157600080fd5b6102c65a03f1151561153257600080fd5b50505060405180519050151561154757600080fd5b611563876115548a611740565b61155d89611740565b876118a7565b9050600160a060020a03861673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156115c057600160a060020a03851681156108fc0282604051600060405180830381858888f1935050505015156115bb57600080fd5b611643565b85600160a060020a031663a9059cbb868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561161d57600080fd5b6102c65a03f1151561162e57600080fd5b50505060405180519050151561164357600080fd5b33600160a060020a03167fea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de898989858a604051600160a060020a039586168152602081019490945291841660408085019190915260608401919091529216608082015260a001905180910390a2506001979650505050505050565b600a54600090600160a060020a0384811691161480156116fa575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600160a060020a038316145b806117395750600a54600160a060020a038381169116148015611739575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600160a060020a038416145b9392505050565b600080600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561177157601291506117fe565b50600160a060020a0382166000908152600660205260409020548015156117fa5782600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156117d857600080fd5b6102c65a03f115156117e957600080fd5b5050506040518051905091506117fe565b8091505b50919050565b60006b204fce5e3e2502611000000085111561181f57600080fd5b6b204fce5e3e2502611000000084111561183857600080fd5b828210611873576012838303111561184f57600080fd5b84838303600a0a02670de0b6b3a7640000850281151561186b57fe5b04905061189f565b6012828403111561188357600080fd5b84828403600a0a670de0b6b3a764000086020281151561186b57fe5b949350505050565b60006b204fce5e3e250261100000008511156118c257600080fd5b69d3c21bcecceda10000008211156118d957600080fd5b83831061190857601284840311156118f057600080fd5b670de0b6b3a7640000858302858503600a0a0261186b565b6012838503111561191857600080fd5b828403600a0a670de0b6b3a76400000282860281151561186b57fe5b8154818355818115116119585760008381526020902061195891810190830161196f565b505050565b60206040519081016040526000815290565b61057491905b808211156119895760008155600101611975565b5090565b600160a060020a03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156119d357600160a060020a038116600090815260066020526040902060129055611a4d565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611a1957600080fd5b6102c65a03f11515611a2a57600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b505600a165627a7a723058202789cdfbff65758202eb1577d79885fb8c4da12f30bf0bf129a0e5d25813d1ae0029"
}